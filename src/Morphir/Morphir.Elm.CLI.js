(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Morphir$Elm$CLI$BuildFromScratch = function (a) {
	return {$: 'BuildFromScratch', a: a};
};
var $author$project$Morphir$Elm$CLI$BuildIncrementally = function (a) {
	return {$: 'BuildIncrementally', a: a};
};
var $author$project$Morphir$Elm$CLI$Generate = function (a) {
	return {$: 'Generate', a: a};
};
var $author$project$Morphir$Elm$CLI$Stats = function (a) {
	return {$: 'Stats', a: a};
};
var $author$project$Morphir$Elm$CLI$TestCoverage = function (a) {
	return {$: 'TestCoverage', a: a};
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$Morphir$Elm$CLI$buildFromScratch = _Platform_incomingPort('buildFromScratch', $elm$json$Json$Decode$value);
var $author$project$Morphir$Elm$CLI$buildIncrementally = _Platform_incomingPort('buildIncrementally', $elm$json$Json$Decode$value);
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $author$project$Morphir$Elm$CLI$generate = _Platform_incomingPort(
	'generate',
	A2(
		$elm$json$Json$Decode$andThen,
		function (_v0) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$andThen,
						function (_v2) {
							return $elm$json$Json$Decode$succeed(
								_Utils_Tuple3(_v0, _v1, _v2));
						},
						A2($elm$json$Json$Decode$index, 2, $elm$json$Json$Decode$value));
				},
				A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$value));
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$value)));
var $author$project$Morphir$Elm$CLI$stats = _Platform_incomingPort('stats', $elm$json$Json$Decode$value);
var $author$project$Morphir$Elm$CLI$testCoverage = _Platform_incomingPort(
	'testCoverage',
	A2(
		$elm$json$Json$Decode$andThen,
		function (_v0) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (_v1) {
					return $elm$json$Json$Decode$succeed(
						_Utils_Tuple2(_v0, _v1));
				},
				A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$value));
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$value)));
var $author$project$Morphir$Elm$CLI$subscriptions = function (_v0) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Morphir$Elm$CLI$buildFromScratch($author$project$Morphir$Elm$CLI$BuildFromScratch),
				$author$project$Morphir$Elm$CLI$buildIncrementally($author$project$Morphir$Elm$CLI$BuildIncrementally),
				$author$project$Morphir$Elm$CLI$generate($author$project$Morphir$Elm$CLI$Generate),
				$author$project$Morphir$Elm$CLI$stats($author$project$Morphir$Elm$CLI$Stats),
				$author$project$Morphir$Elm$CLI$testCoverage($author$project$Morphir$Elm$CLI$TestCoverage)
			]));
};
var $author$project$Morphir$Elm$CLI$ApplyFileChanges = F4(
	function (a, b, c, d) {
		return {$: 'ApplyFileChanges', a: a, b: b, c: c, d: d};
	});
var $author$project$Morphir$Elm$CLI$BuildFromScratchInput = F4(
	function (options, packageInfo, dependencies, fileSnapshot) {
		return {dependencies: dependencies, fileSnapshot: fileSnapshot, options: options, packageInfo: packageInfo};
	});
var $author$project$Morphir$Elm$CLI$BuildIncrementallyInput = F5(
	function (options, packageInfo, fileChanges, dependencies, distribution) {
		return {dependencies: dependencies, distribution: distribution, fileChanges: fileChanges, options: options, packageInfo: packageInfo};
	});
var $author$project$Morphir$IR$Distribution$Library = F3(
	function (a, b, c) {
		return {$: 'Library', a: a, b: b, c: c};
	});
var $author$project$Morphir$Elm$CLI$OrderFileChanges = F5(
	function (a, b, c, d, e) {
		return {$: 'OrderFileChanges', a: a, b: b, c: c, d: d, e: e};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$RepoError = F2(
	function (a, b) {
		return {$: 'RepoError', a: a, b: b};
	});
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $author$project$Morphir$Elm$IncrementalFrontend$ModuleCycleDetected = F2(
	function (a, b) {
		return {$: 'ModuleCycleDetected', a: a, b: b};
	});
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $author$project$Morphir$IR$AccessControlled$Public = {$: 'Public'};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $author$project$Morphir$IR$Repo$ModuleHasDependents = F2(
	function (a, b) {
		return {$: 'ModuleHasDependents', a: a, b: b};
	});
var $author$project$Morphir$IR$Repo$ModuleNotFound = function (a) {
	return {$: 'ModuleNotFound', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $author$project$Morphir$IR$Repo$Repo = function (a) {
	return {$: 'Repo', a: a};
};
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $author$project$Morphir$Dependency$DAG$incomingEdges = F2(
	function (toNode, _v0) {
		var edges = _v0.a;
		return $elm$core$Set$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v1) {
					var fromNode = _v1.a;
					var toNodes = _v1.b;
					return A2($elm$core$Set$member, toNode, toNodes) ? $elm$core$Maybe$Just(fromNode) : $elm$core$Maybe$Nothing;
				},
				$elm$core$Dict$toList(edges)));
	});
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Set$isEmpty = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$isEmpty(dict);
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $author$project$Morphir$Dependency$DAG$DAG = function (a) {
	return {$: 'DAG', a: a};
};
var $author$project$Morphir$Dependency$DAG$deleteNode = F2(
	function (comparableNode, _v0) {
		var e = _v0.a;
		return $author$project$Morphir$Dependency$DAG$DAG(
			A2($elm$core$Dict$remove, comparableNode, e));
	});
var $elm$core$Set$remove = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$remove, key, dict));
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $author$project$Morphir$Dependency$DAG$removeEdge = F3(
	function (from, to, _v0) {
		var edgesByNode = _v0.a;
		return $author$project$Morphir$Dependency$DAG$DAG(
			A3(
				$elm$core$Dict$update,
				from,
				$elm$core$Maybe$map(
					function (set) {
						return A2($elm$core$Set$remove, to, set);
					}),
				edgesByNode));
	});
var $author$project$Morphir$Dependency$DAG$removeIncomingEdges = F2(
	function (comparableNode, dag) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (from, g) {
					return A3($author$project$Morphir$Dependency$DAG$removeEdge, from, comparableNode, g);
				}),
			dag,
			$elm$core$Set$toList(
				A2($author$project$Morphir$Dependency$DAG$incomingEdges, comparableNode, dag)));
	});
var $author$project$Morphir$Dependency$DAG$removeNode = F2(
	function (comparableNode, _v0) {
		var edges = _v0.a;
		var _v1 = A2($elm$core$Dict$get, comparableNode, edges);
		if (_v1.$ === 'Nothing') {
			return $author$project$Morphir$Dependency$DAG$DAG(edges);
		} else {
			return A2(
				$author$project$Morphir$Dependency$DAG$deleteNode,
				comparableNode,
				A2(
					$author$project$Morphir$Dependency$DAG$removeIncomingEdges,
					comparableNode,
					$author$project$Morphir$Dependency$DAG$DAG(edges)));
		}
	});
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Morphir$IR$Repo$deleteModule = F2(
	function (moduleName, _v0) {
		var repo = _v0.a;
		var validationErrors = function () {
			var _v1 = A2($elm$core$Dict$get, moduleName, repo.modules);
			if (_v1.$ === 'Nothing') {
				return $elm$core$Maybe$Just(
					_List_fromArray(
						[
							$author$project$Morphir$IR$Repo$ModuleNotFound(moduleName)
						]));
			} else {
				var dependentModules = A2($author$project$Morphir$Dependency$DAG$incomingEdges, moduleName, repo.moduleDependencies);
				return $elm$core$Set$isEmpty(dependentModules) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
					_List_fromArray(
						[
							A2($author$project$Morphir$IR$Repo$ModuleHasDependents, moduleName, dependentModules)
						]));
			}
		}();
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Result$Ok(
				$author$project$Morphir$IR$Repo$Repo(
					_Utils_update(
						repo,
						{
							moduleDependencies: A2($author$project$Morphir$Dependency$DAG$removeNode, moduleName, repo.moduleDependencies),
							modules: A2($elm$core$Dict$remove, moduleName, repo.modules)
						}))),
			A2($elm$core$Maybe$map, $elm$core$Result$Err, validationErrors));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $author$project$Morphir$Elm$IncrementalFrontend$applyDelete = F2(
	function (moduleName, repo) {
		return A2(
			$elm$core$Result$mapError,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Morphir$Elm$IncrementalFrontend$RepoError('Cannot delete module'),
				$elm$core$List$singleton),
			A2($author$project$Morphir$IR$Repo$deleteModule, moduleName, repo));
	});
var $author$project$Morphir$IR$AccessControlled$Private = {$: 'Private'};
var $author$project$Morphir$Elm$IncrementalFrontend$ResolveError = F2(
	function (a, b) {
		return {$: 'ResolveError', a: a, b: b};
	});
var $author$project$Morphir$IR$KindOfName$Type = {$: 'Type'};
var $author$project$Morphir$IR$KindOfName$Value = {$: 'Value'};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$String$startsWith = _String_startsWith;
var $stil4m$elm_syntax$Elm$Syntax$Node$value = function (_v0) {
	var v = _v0.b;
	return v;
};
var $author$project$Morphir$Elm$ParsedModule$documentation = function (_v0) {
	var file = _v0.a;
	return $elm$core$List$isEmpty(file.comments) ? $elm$core$Maybe$Nothing : A2(
		$elm$core$Maybe$map,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$dropLeft(3),
			$elm$core$String$dropRight(3)),
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				$elm$core$String$startsWith('{-|'),
				A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, file.comments))));
};
var $author$project$Morphir$Elm$ParsedModule$exposingList = function (_v0) {
	var file = _v0.a;
	var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(file.moduleDefinition);
	switch (_v1.$) {
		case 'NormalModule':
			var defaultModuleData = _v1.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(defaultModuleData.exposingList);
		case 'PortModule':
			var defaultModuleData = _v1.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(defaultModuleData.exposingList);
		default:
			var effectModuleData = _v1.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(effectModuleData.exposingList);
	}
};
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $author$project$Morphir$Elm$ParsedModule$declarations = function (_v0) {
	var file = _v0.a;
	return file.declarations;
};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $author$project$Morphir$IR$Name$fromList = function (words) {
	return words;
};
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $elm$core$String$toLower = _String_toLower;
var $author$project$Morphir$IR$Name$fromString = function (string) {
	var wordPattern = A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('([a-zA-Z][a-z]*|[0-9]+)'));
	return $author$project$Morphir$IR$Name$fromList(
		A2(
			$elm$core$List$map,
			$elm$core$String$toLower,
			A2(
				$elm$core$List$map,
				function ($) {
					return $.match;
				},
				A2($elm$regex$Regex$find, wordPattern, string))));
};
var $author$project$Morphir$Elm$IncrementalFrontend$extractConstructorNames = function (parsedModule) {
	var extractConstructorNamesFromFile = function (declarations) {
		return A2(
			$elm$core$List$map,
			$author$project$Morphir$IR$Name$fromString,
			A2(
				$elm$core$List$concatMap,
				function (node) {
					var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
					switch (_v0.$) {
						case 'CustomTypeDeclaration':
							var typ = _v0.a;
							return A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$stil4m$elm_syntax$Elm$Syntax$Node$value,
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.name;
										},
										$stil4m$elm_syntax$Elm$Syntax$Node$value)),
								typ.constructors);
						case 'AliasDeclaration':
							var typeAlias = _v0.a;
							var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(typeAlias.typeAnnotation);
							if (_v1.$ === 'Record') {
								return _List_fromArray(
									[
										$stil4m$elm_syntax$Elm$Syntax$Node$value(typeAlias.name)
									]);
							} else {
								return _List_Nil;
							}
						default:
							return _List_Nil;
					}
				},
				declarations));
	};
	return extractConstructorNamesFromFile(
		$author$project$Morphir$Elm$ParsedModule$declarations(parsedModule));
};
var $author$project$Morphir$Elm$IncrementalFrontend$extractTypeNames = function (parsedModule) {
	var extractTypeNamesFromFile = function (declarations) {
		return A2(
			$elm$core$List$map,
			$author$project$Morphir$IR$Name$fromString,
			A2(
				$elm$core$List$filterMap,
				function (node) {
					var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
					switch (_v0.$) {
						case 'CustomTypeDeclaration':
							var typ = _v0.a;
							return $elm$core$Maybe$Just(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(typ.name));
						case 'AliasDeclaration':
							var typeAlias = _v0.a;
							return $elm$core$Maybe$Just(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(typeAlias.name));
						default:
							return $elm$core$Maybe$Nothing;
					}
				},
				declarations));
	};
	return extractTypeNamesFromFile(
		$author$project$Morphir$Elm$ParsedModule$declarations(parsedModule));
};
var $author$project$Morphir$IR$AccessControlled$AccessControlled = F2(
	function (access, value) {
		return {access: access, value: value};
	});
var $author$project$Morphir$IR$KindOfName$Constructor = {$: 'Constructor'};
var $author$project$Morphir$Elm$IncrementalFrontend$MappingError = function (a) {
	return {$: 'MappingError', a: a};
};
var $author$project$Morphir$IR$Type$TypeAliasDefinition = F2(
	function (a, b) {
		return {$: 'TypeAliasDefinition', a: a, b: b};
	});
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $author$project$Morphir$IR$Type$CustomTypeDefinition = F2(
	function (a, b) {
		return {$: 'CustomTypeDefinition', a: a, b: b};
	});
var $author$project$Morphir$IR$Type$customTypeDefinition = F2(
	function (typeParams, ctors) {
		return A2($author$project$Morphir$IR$Type$CustomTypeDefinition, typeParams, ctors);
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Morphir$SDK$ResultList$keepAllErrors = function (results) {
	var oks = A2(
		$elm$core$List$filterMap,
		function (result) {
			return $elm$core$Result$toMaybe(result);
		},
		results);
	var errs = A2(
		$elm$core$List$filterMap,
		function (result) {
			if (result.$ === 'Ok') {
				return $elm$core$Maybe$Nothing;
			} else {
				var e = result.a;
				return $elm$core$Maybe$Just(e);
			}
		},
		results);
	if (!errs.b) {
		return $elm$core$Result$Ok(oks);
	} else {
		return $elm$core$Result$Err(errs);
	}
};
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $author$project$Morphir$IR$Type$ExtensibleRecord = F3(
	function (a, b, c) {
		return {$: 'ExtensibleRecord', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Type$Field = F2(
	function (name, tpe) {
		return {name: name, tpe: tpe};
	});
var $author$project$Morphir$IR$Type$Function = F3(
	function (a, b, c) {
		return {$: 'Function', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Type$Record = F2(
	function (a, b) {
		return {$: 'Record', a: a, b: b};
	});
var $author$project$Morphir$IR$Type$Reference = F3(
	function (a, b, c) {
		return {$: 'Reference', a: a, b: b, c: c};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$ResolveError = F2(
	function (a, b) {
		return {$: 'ResolveError', a: a, b: b};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation = F2(
	function (moduleName, location) {
		return {location: location, moduleName: moduleName};
	});
var $author$project$Morphir$IR$Type$Tuple = F2(
	function (a, b) {
		return {$: 'Tuple', a: a, b: b};
	});
var $author$project$Morphir$IR$Type$Unit = function (a) {
	return {$: 'Unit', a: a};
};
var $author$project$Morphir$IR$Type$Variable = F2(
	function (a, b) {
		return {$: 'Variable', a: a, b: b};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultTypeAttribute = false;
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation = F2(
	function (resolveTypeName, _v0) {
		var typeAnnotation = _v0.b;
		switch (typeAnnotation.$) {
			case 'GenericType':
				var varName = typeAnnotation.a;
				return $elm$core$Result$Ok(
					A2(
						$author$project$Morphir$IR$Type$Variable,
						$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultTypeAttribute,
						$author$project$Morphir$IR$Name$fromString(varName)));
			case 'Typed':
				var _v2 = typeAnnotation.a;
				var range = _v2.a;
				var _v3 = _v2.b;
				var moduleName = _v3.a;
				var localName = _v3.b;
				var argNodes = typeAnnotation.b;
				return A3(
					$elm$core$Result$map2,
					$author$project$Morphir$IR$Type$Reference($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultTypeAttribute),
					A2(
						$elm$core$Result$mapError,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$ResolveError(
								A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range)),
							$elm$core$List$singleton),
						A3(resolveTypeName, moduleName, localName, $author$project$Morphir$IR$KindOfName$Type)),
					A2(
						$elm$core$Result$mapError,
						$elm$core$List$concat,
						$author$project$Morphir$SDK$ResultList$keepAllErrors(
							A2(
								$elm$core$List$map,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation(resolveTypeName),
								argNodes))));
			case 'Unit':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$Type$Unit($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultTypeAttribute));
			case 'Tupled':
				var typeAnnotationNodes = typeAnnotation.a;
				return A2(
					$elm$core$Result$map,
					$author$project$Morphir$IR$Type$Tuple($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultTypeAttribute),
					A2(
						$elm$core$Result$mapError,
						$elm$core$List$concat,
						$author$project$Morphir$SDK$ResultList$keepAllErrors(
							A2(
								$elm$core$List$map,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation(resolveTypeName),
								typeAnnotationNodes))));
			case 'Record':
				var fieldNodes = typeAnnotation.a;
				return A2(
					$elm$core$Result$mapError,
					$elm$core$List$concat,
					A2(
						$elm$core$Result$map,
						$author$project$Morphir$IR$Type$Record($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultTypeAttribute),
						$author$project$Morphir$SDK$ResultList$keepAllErrors(
							A2(
								$elm$core$List$map,
								function (_v4) {
									var _v5 = _v4.a;
									var argName = _v5.b;
									var fieldTypeNode = _v4.b;
									return A2(
										$elm$core$Result$map,
										$author$project$Morphir$IR$Type$Field(
											$author$project$Morphir$IR$Name$fromString(argName)),
										A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation, resolveTypeName, fieldTypeNode));
								},
								A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, fieldNodes)))));
			case 'GenericRecord':
				var _v6 = typeAnnotation.a;
				var argName = _v6.b;
				var _v7 = typeAnnotation.b;
				var fieldNodes = _v7.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$core$List$concat,
					A2(
						$elm$core$Result$map,
						A2(
							$author$project$Morphir$IR$Type$ExtensibleRecord,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultTypeAttribute,
							$author$project$Morphir$IR$Name$fromString(argName)),
						$author$project$Morphir$SDK$ResultList$keepAllErrors(
							A2(
								$elm$core$List$map,
								function (_v8) {
									var _v9 = _v8.a;
									var ags = _v9.b;
									var fieldTypeNode = _v8.b;
									return A2(
										$elm$core$Result$map,
										$author$project$Morphir$IR$Type$Field(
											$author$project$Morphir$IR$Name$fromString(ags)),
										A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation, resolveTypeName, fieldTypeNode));
								},
								A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, fieldNodes)))));
			default:
				var argTypeNode = typeAnnotation.a;
				var returnTypeNode = typeAnnotation.b;
				return A3(
					$elm$core$Result$map2,
					$author$project$Morphir$IR$Type$Function($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultTypeAttribute),
					A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation, resolveTypeName, argTypeNode),
					A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation, resolveTypeName, returnTypeNode));
		}
	});
var $author$project$Morphir$IR$Type$mapFieldType = F2(
	function (f, field) {
		return A2(
			$author$project$Morphir$IR$Type$Field,
			field.name,
			f(field.tpe));
	});
var $author$project$Morphir$IR$Type$mapTypeAttributes = F2(
	function (f, tpe) {
		switch (tpe.$) {
			case 'Variable':
				var a = tpe.a;
				var name = tpe.b;
				return A2(
					$author$project$Morphir$IR$Type$Variable,
					f(a),
					name);
			case 'Reference':
				var a = tpe.a;
				var fQName = tpe.b;
				var argTypes = tpe.c;
				return A3(
					$author$project$Morphir$IR$Type$Reference,
					f(a),
					fQName,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Type$mapTypeAttributes(f),
						argTypes));
			case 'Tuple':
				var a = tpe.a;
				var elemTypes = tpe.b;
				return A2(
					$author$project$Morphir$IR$Type$Tuple,
					f(a),
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Type$mapTypeAttributes(f),
						elemTypes));
			case 'Record':
				var a = tpe.a;
				var fields = tpe.b;
				return A2(
					$author$project$Morphir$IR$Type$Record,
					f(a),
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Type$mapFieldType(
							$author$project$Morphir$IR$Type$mapTypeAttributes(f)),
						fields));
			case 'ExtensibleRecord':
				var a = tpe.a;
				var name = tpe.b;
				var fields = tpe.c;
				return A3(
					$author$project$Morphir$IR$Type$ExtensibleRecord,
					f(a),
					name,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Type$mapFieldType(
							$author$project$Morphir$IR$Type$mapTypeAttributes(f)),
						fields));
			case 'Function':
				var a = tpe.a;
				var argType = tpe.b;
				var returnType = tpe.c;
				return A3(
					$author$project$Morphir$IR$Type$Function,
					f(a),
					A2($author$project$Morphir$IR$Type$mapTypeAttributes, f, argType),
					A2($author$project$Morphir$IR$Type$mapTypeAttributes, f, returnType));
			default:
				var a = tpe.a;
				return $author$project$Morphir$IR$Type$Unit(
					f(a));
		}
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$Morphir$Elm$IncrementalFrontend$extractTypes = F3(
	function (resolveTypeName, accessOf, parsedModule) {
		var typeDeclarationToDefinition = function (declaration) {
			switch (declaration.$) {
				case 'CustomTypeDeclaration':
					var customType = declaration.a;
					var typeParams = A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, $author$project$Morphir$IR$Name$fromString),
						customType.generics);
					var typeName = $author$project$Morphir$IR$Name$fromString(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(customType.name));
					var typeDoc = A2(
						$elm$core$Maybe$withDefault,
						'',
						A2(
							$elm$core$Maybe$map,
							A2(
								$elm$core$Basics$composeR,
								$stil4m$elm_syntax$Elm$Syntax$Node$value,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$String$dropLeft(3),
									$elm$core$String$dropRight(2))),
							customType.documentation));
					var constructorsResult = A2(
						$elm$core$Result$map,
						$elm$core$Dict$fromList,
						A2(
							$elm$core$Result$mapError,
							$elm$core$List$concat,
							$author$project$Morphir$SDK$ResultList$keepAllErrors(
								A2(
									$elm$core$List$map,
									function (_v1) {
										var constructor = _v1.b;
										var constructorName = $author$project$Morphir$IR$Name$fromString(
											$stil4m$elm_syntax$Elm$Syntax$Node$value(constructor.name));
										var constructorArgsResult = $author$project$Morphir$SDK$ResultList$keepAllErrors(
											A2(
												$elm$core$List$indexedMap,
												F2(
													function (index, arg) {
														return A2(
															$elm$core$Result$map,
															function (argType) {
																return _Utils_Tuple2(
																	_List_fromArray(
																		[
																			'arg',
																			$elm$core$String$fromInt(index + 1)
																		]),
																	A2(
																		$author$project$Morphir$IR$Type$mapTypeAttributes,
																		$elm$core$Basics$always(_Utils_Tuple0),
																		argType));
															},
															A2(
																$elm$core$Result$mapError,
																$author$project$Morphir$Elm$IncrementalFrontend$MappingError,
																A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation, resolveTypeName, arg)));
													}),
												constructor._arguments));
										return A2(
											$elm$core$Result$map,
											$elm$core$Tuple$pair(constructorName),
											constructorArgsResult);
									},
									customType.constructors))));
					return $elm$core$Maybe$Just(
						A2(
							$elm$core$Result$map,
							function (constructors) {
								return _Utils_Tuple3(
									typeName,
									typeDoc,
									A2(
										$author$project$Morphir$IR$Type$customTypeDefinition,
										typeParams,
										A2(
											$author$project$Morphir$IR$AccessControlled$AccessControlled,
											A2(accessOf, $author$project$Morphir$IR$KindOfName$Constructor, typeName),
											constructors)));
							},
							constructorsResult));
				case 'AliasDeclaration':
					var typeAlias = declaration.a;
					var typeParams = A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, $author$project$Morphir$IR$Name$fromString),
						typeAlias.generics);
					var typeDoc = A2(
						$elm$core$Maybe$withDefault,
						'',
						A2(
							$elm$core$Maybe$map,
							A2(
								$elm$core$Basics$composeR,
								$stil4m$elm_syntax$Elm$Syntax$Node$value,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$String$dropLeft(3),
									$elm$core$String$dropRight(2))),
							typeAlias.documentation));
					return $elm$core$Maybe$Just(
						A2(
							$elm$core$Result$map,
							function (tpe) {
								return _Utils_Tuple3(
									$author$project$Morphir$IR$Name$fromString(
										$stil4m$elm_syntax$Elm$Syntax$Node$value(typeAlias.name)),
									typeDoc,
									A2(
										$author$project$Morphir$IR$Type$TypeAliasDefinition,
										typeParams,
										A2(
											$author$project$Morphir$IR$Type$mapTypeAttributes,
											$elm$core$Basics$always(_Utils_Tuple0),
											tpe)));
							},
							A2(
								$elm$core$Result$mapError,
								A2($elm$core$Basics$composeR, $author$project$Morphir$Elm$IncrementalFrontend$MappingError, $elm$core$List$singleton),
								A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation, resolveTypeName, typeAlias.typeAnnotation))));
				default:
					return $elm$core$Maybe$Nothing;
			}
		};
		var declarationsInParsedModule = A2(
			$elm$core$List$map,
			$stil4m$elm_syntax$Elm$Syntax$Node$value,
			$author$project$Morphir$Elm$ParsedModule$declarations(parsedModule));
		var typeNameWithDefinition = A2(
			$elm$core$Result$mapError,
			$elm$core$List$concat,
			$author$project$Morphir$SDK$ResultList$keepAllErrors(
				A2($elm$core$List$filterMap, typeDeclarationToDefinition, declarationsInParsedModule)));
		return typeNameWithDefinition;
	});
var $author$project$Morphir$Elm$IncrementalFrontend$extractValueNames = function (parsedModule) {
	var extractValueNamesFromFile = function (declarations) {
		return A2(
			$elm$core$List$map,
			$author$project$Morphir$IR$Name$fromString,
			A2(
				$elm$core$List$filterMap,
				function (node) {
					var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(node);
					if (_v0.$ === 'FunctionDeclaration') {
						var func = _v0.a;
						return $elm$core$Maybe$Just(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(func.declaration).name));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				},
				declarations));
	};
	return extractValueNamesFromFile(
		$author$project$Morphir$Elm$ParsedModule$declarations(parsedModule));
};
var $author$project$Morphir$Elm$IncrementalFrontend$ValueCycleDetected = F2(
	function (a, b) {
		return {$: 'ValueCycleDetected', a: a, b: b};
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$core$Basics$not = _Basics_not;
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $author$project$Morphir$Dependency$DAG$backwardTopologicalOrdering = function (_v0) {
	var dag = _v0.a;
	var removeStartNodes = function (_v1) {
		removeStartNodes:
		while (true) {
			var d = _v1.a.a;
			var topologicalOrder = _v1.b;
			var dagWithoutStartNodes = $author$project$Morphir$Dependency$DAG$DAG(
				A2(
					$elm$core$Dict$filter,
					F2(
						function (node, _v3) {
							return !$elm$core$Set$isEmpty(
								A2(
									$author$project$Morphir$Dependency$DAG$incomingEdges,
									node,
									$author$project$Morphir$Dependency$DAG$DAG(d)));
						}),
					d));
			var collectStartNodes = A2(
				$elm$core$List$filterMap,
				function (_v2) {
					var comparableNode = _v2.a;
					return $elm$core$Set$isEmpty(
						A2(
							$author$project$Morphir$Dependency$DAG$incomingEdges,
							comparableNode,
							$author$project$Morphir$Dependency$DAG$DAG(d))) ? $elm$core$Maybe$Just(comparableNode) : $elm$core$Maybe$Nothing;
				},
				$elm$core$Dict$toList(d));
			if ($elm$core$Dict$isEmpty(d)) {
				return _Utils_Tuple2(
					$author$project$Morphir$Dependency$DAG$DAG($elm$core$Dict$empty),
					topologicalOrder);
			} else {
				var $temp$_v1 = _Utils_Tuple2(
					dagWithoutStartNodes,
					A2($elm$core$List$cons, collectStartNodes, topologicalOrder));
				_v1 = $temp$_v1;
				continue removeStartNodes;
			}
		}
	};
	return removeStartNodes(
		_Utils_Tuple2(
			$author$project$Morphir$Dependency$DAG$DAG(
				A2($elm$core$Dict$map, $elm$core$Set$remove, dag)),
			_List_Nil)).b;
};
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $elm$core$Set$singleton = function (key) {
	return $elm$core$Set$Set_elm_builtin(
		A2($elm$core$Dict$singleton, key, _Utils_Tuple0));
};
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$union, dict1, dict2));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$Morphir$IR$Value$collectReferences = function (value) {
	collectReferences:
	while (true) {
		var collectUnion = function (values) {
			return A3(
				$elm$core$List$foldl,
				$elm$core$Set$union,
				$elm$core$Set$empty,
				A2($elm$core$List$map, $author$project$Morphir$IR$Value$collectReferences, values));
		};
		switch (value.$) {
			case 'Tuple':
				var elements = value.b;
				return collectUnion(elements);
			case 'List':
				var items = value.b;
				return collectUnion(items);
			case 'Record':
				var fields = value.b;
				return collectUnion(
					$elm$core$Dict$values(fields));
			case 'Reference':
				var fQName = value.b;
				return $elm$core$Set$singleton(fQName);
			case 'Field':
				var subjectValue = value.b;
				var $temp$value = subjectValue;
				value = $temp$value;
				continue collectReferences;
			case 'Apply':
				var _function = value.b;
				var argument = value.c;
				return collectUnion(
					_List_fromArray(
						[_function, argument]));
			case 'Lambda':
				var body = value.c;
				var $temp$value = body;
				value = $temp$value;
				continue collectReferences;
			case 'LetDefinition':
				var valueDefinition = value.c;
				var inValue = value.d;
				return collectUnion(
					_List_fromArray(
						[valueDefinition.body, inValue]));
			case 'LetRecursion':
				var valueDefinitions = value.b;
				var inValue = value.c;
				return A3(
					$elm$core$List$foldl,
					$elm$core$Set$union,
					$elm$core$Set$empty,
					A2(
						$elm$core$List$append,
						_List_fromArray(
							[
								$author$project$Morphir$IR$Value$collectReferences(inValue)
							]),
						A2(
							$elm$core$List$map,
							function (_v1) {
								var def = _v1.b;
								return $author$project$Morphir$IR$Value$collectReferences(def.body);
							},
							$elm$core$Dict$toList(valueDefinitions))));
			case 'Destructure':
				var valueToDestruct = value.c;
				var inValue = value.d;
				return collectUnion(
					_List_fromArray(
						[valueToDestruct, inValue]));
			case 'IfThenElse':
				var condition = value.b;
				var thenBranch = value.c;
				var elseBranch = value.d;
				return collectUnion(
					_List_fromArray(
						[condition, thenBranch, elseBranch]));
			case 'PatternMatch':
				var branchOutOn = value.b;
				var cases = value.c;
				return A2(
					$elm$core$Set$union,
					$author$project$Morphir$IR$Value$collectReferences(branchOutOn),
					collectUnion(
						A2($elm$core$List$map, $elm$core$Tuple$second, cases)));
			case 'UpdateRecord':
				var valueToUpdate = value.b;
				var fieldsToUpdate = value.c;
				return A2(
					$elm$core$Set$union,
					$author$project$Morphir$IR$Value$collectReferences(valueToUpdate),
					collectUnion(
						$elm$core$Dict$values(fieldsToUpdate)));
			default:
				return $elm$core$Set$empty;
		}
	}
};
var $author$project$Morphir$Dependency$DAG$empty = $author$project$Morphir$Dependency$DAG$DAG($elm$core$Dict$empty);
var $author$project$Morphir$Dependency$DAG$CycleDetected = F2(
	function (a, b) {
		return {$: 'CycleDetected', a: a, b: b};
	});
var $elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $elm$core$Set$diff = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$diff, dict1, dict2));
	});
var $elm$core$Dict$partition = F2(
	function (isGood, dict) {
		var add = F3(
			function (key, value, _v0) {
				var t1 = _v0.a;
				var t2 = _v0.b;
				return A2(isGood, key, value) ? _Utils_Tuple2(
					A3($elm$core$Dict$insert, key, value, t1),
					t2) : _Utils_Tuple2(
					t1,
					A3($elm$core$Dict$insert, key, value, t2));
			});
		return A3(
			$elm$core$Dict$foldl,
			add,
			_Utils_Tuple2($elm$core$Dict$empty, $elm$core$Dict$empty),
			dict);
	});
var $author$project$Morphir$Dependency$DAG$collectForwardReachableNodes = F2(
	function (firstNode, _v0) {
		var initialEdgesByNode = _v0.a;
		var firstReachableNodes = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Set$empty,
			A2($elm$core$Dict$get, firstNode, initialEdgesByNode));
		var collect = F2(
			function (reachableSoFar, currentEdgesByNode) {
				collect:
				while (true) {
					var _v1 = A2(
						$elm$core$Dict$partition,
						F2(
							function (fromNode, _v2) {
								return A2($elm$core$Set$member, fromNode, reachableSoFar);
							}),
						currentEdgesByNode);
					var reachableEdges = _v1.a;
					var unreachableEdges = _v1.b;
					var nextReachableNodes = A2(
						$elm$core$Set$diff,
						A3(
							$elm$core$List$foldl,
							$elm$core$Set$union,
							$elm$core$Set$empty,
							$elm$core$Dict$values(reachableEdges)),
						reachableSoFar);
					if ($elm$core$Set$isEmpty(nextReachableNodes)) {
						return reachableSoFar;
					} else {
						var $temp$reachableSoFar = A2($elm$core$Set$union, reachableSoFar, nextReachableNodes),
							$temp$currentEdgesByNode = unreachableEdges;
						reachableSoFar = $temp$reachableSoFar;
						currentEdgesByNode = $temp$currentEdgesByNode;
						continue collect;
					}
				}
			});
		return A2(collect, firstReachableNodes, initialEdgesByNode);
	});
var $author$project$Morphir$Dependency$DAG$insertEdge = F3(
	function (from, to, _v0) {
		var edgesByNodes = _v0.a;
		return _Utils_eq(from, to) ? $elm$core$Result$Ok(
			$author$project$Morphir$Dependency$DAG$DAG(
				function (edges) {
					return A3(
						$elm$core$Dict$insert,
						from,
						A2($elm$core$Set$insert, to, edges),
						edgesByNodes);
				}(
					A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Set$empty,
						A2($elm$core$Dict$get, from, edgesByNodes))))) : (A2(
			$elm$core$Set$member,
			from,
			A2(
				$author$project$Morphir$Dependency$DAG$collectForwardReachableNodes,
				to,
				$author$project$Morphir$Dependency$DAG$DAG(edgesByNodes))) ? $elm$core$Result$Err(
			A2($author$project$Morphir$Dependency$DAG$CycleDetected, from, to)) : (A2(
			$elm$core$Set$member,
			to,
			A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Set$empty,
				A2($elm$core$Dict$get, from, edgesByNodes))) ? $elm$core$Result$Ok(
			$author$project$Morphir$Dependency$DAG$DAG(edgesByNodes)) : (A2($elm$core$Dict$member, to, edgesByNodes) ? $elm$core$Result$Ok(
			$author$project$Morphir$Dependency$DAG$DAG(
				function (fromEdges) {
					return A3(
						$elm$core$Dict$insert,
						from,
						A2($elm$core$Set$insert, to, fromEdges),
						edgesByNodes);
				}(
					A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Set$empty,
						A2($elm$core$Dict$get, from, edgesByNodes))))) : $elm$core$Result$Ok(
			$author$project$Morphir$Dependency$DAG$DAG(
				A3(
					$elm$core$Dict$insert,
					to,
					$elm$core$Set$empty,
					function (fromEdges) {
						return A3(
							$elm$core$Dict$insert,
							from,
							A2($elm$core$Set$insert, to, fromEdges),
							edgesByNodes);
					}(
						A2(
							$elm$core$Maybe$withDefault,
							$elm$core$Set$empty,
							A2($elm$core$Dict$get, from, edgesByNodes)))))))));
	});
var $author$project$Morphir$Dependency$DAG$insertNode = F3(
	function (fromNode, toNodes, _v0) {
		var edgesByNode = _v0.a;
		var insertEdges = F2(
			function (nodes, d) {
				return A3(
					$elm$core$List$foldl,
					F2(
						function (toNode, dagResultSoFar) {
							return A2(
								$elm$core$Result$andThen,
								A2($author$project$Morphir$Dependency$DAG$insertEdge, fromNode, toNode),
								dagResultSoFar);
						}),
					$elm$core$Result$Ok(d),
					$elm$core$Set$toList(nodes));
			});
		return A2($elm$core$Dict$member, fromNode, edgesByNode) ? A2(
			insertEdges,
			toNodes,
			$author$project$Morphir$Dependency$DAG$DAG(edgesByNode)) : A2(
			insertEdges,
			toNodes,
			$author$project$Morphir$Dependency$DAG$DAG(
				A3($elm$core$Dict$insert, fromNode, $elm$core$Set$empty, edgesByNode)));
	});
var $stil4m$elm_syntax$Elm$Syntax$Node$Node = F2(
	function (a, b) {
		return {$: 'Node', a: a, b: b};
	});
var $author$project$Morphir$IR$Value$Apply = F3(
	function (a, b, c) {
		return {$: 'Apply', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Literal$BoolLiteral = function (a) {
	return {$: 'BoolLiteral', a: a};
};
var $author$project$Morphir$IR$Literal$CharLiteral = function (a) {
	return {$: 'CharLiteral', a: a};
};
var $author$project$Morphir$IR$Value$Constructor = F2(
	function (a, b) {
		return {$: 'Constructor', a: a, b: b};
	});
var $author$project$Morphir$IR$Value$Destructure = F4(
	function (a, b, c, d) {
		return {$: 'Destructure', a: a, b: b, c: c, d: d};
	});
var $elm_community$graph$Graph$Edge = F3(
	function (from, to, label) {
		return {from: from, label: label, to: to};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$EmptyApply = function (a) {
	return {$: 'EmptyApply', a: a};
};
var $author$project$Morphir$IR$Value$Field = F3(
	function (a, b, c) {
		return {$: 'Field', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Value$FieldFunction = F2(
	function (a, b) {
		return {$: 'FieldFunction', a: a, b: b};
	});
var $author$project$Morphir$IR$Literal$FloatLiteral = function (a) {
	return {$: 'FloatLiteral', a: a};
};
var $author$project$Morphir$IR$Value$IfThenElse = F4(
	function (a, b, c, d) {
		return {$: 'IfThenElse', a: a, b: b, c: c, d: d};
	});
var $author$project$Morphir$IR$Value$Lambda = F3(
	function (a, b, c) {
		return {$: 'Lambda', a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression = function (a) {
	return {$: 'LambdaExpression', a: a};
};
var $author$project$Morphir$IR$Value$LetDefinition = F4(
	function (a, b, c, d) {
		return {$: 'LetDefinition', a: a, b: b, c: c, d: d};
	});
var $author$project$Morphir$IR$Value$LetRecursion = F3(
	function (a, b, c) {
		return {$: 'LetRecursion', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Value$List = F2(
	function (a, b) {
		return {$: 'List', a: a, b: b};
	});
var $author$project$Morphir$IR$Value$Literal = F2(
	function (a, b) {
		return {$: 'Literal', a: a, b: b};
	});
var $elm_community$graph$Graph$Node = F2(
	function (id, label) {
		return {id: id, label: label};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$NotSupported = F2(
	function (a, b) {
		return {$: 'NotSupported', a: a, b: b};
	});
var $author$project$Morphir$IR$Value$PatternMatch = F3(
	function (a, b, c) {
		return {$: 'PatternMatch', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Value$Record = F2(
	function (a, b) {
		return {$: 'Record', a: a, b: b};
	});
var $author$project$Morphir$IR$Value$Reference = F2(
	function (a, b) {
		return {$: 'Reference', a: a, b: b};
	});
var $author$project$Morphir$IR$Literal$StringLiteral = function (a) {
	return {$: 'StringLiteral', a: a};
};
var $author$project$Morphir$IR$Value$Tuple = F2(
	function (a, b) {
		return {$: 'Tuple', a: a, b: b};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$TypeCheckError = F2(
	function (a, b) {
		return {$: 'TypeCheckError', a: a, b: b};
	});
var $author$project$Morphir$IR$Value$Unit = function (a) {
	return {$: 'Unit', a: a};
};
var $author$project$Morphir$IR$Value$UpdateRecord = F3(
	function (a, b, c) {
		return {$: 'UpdateRecord', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Value$Variable = F2(
	function (a, b) {
		return {$: 'Variable', a: a, b: b};
	});
var $author$project$Morphir$IR$Literal$WholeNumberLiteral = function (a) {
	return {$: 'WholeNumberLiteral', a: a};
};
var $elm_community$graph$Graph$AcyclicGraph = F2(
	function (a, b) {
		return {$: 'AcyclicGraph', a: a, b: b};
	});
var $elm_community$intdict$IntDict$Empty = {$: 'Empty'};
var $elm_community$intdict$IntDict$empty = $elm_community$intdict$IntDict$Empty;
var $elm_community$intdict$IntDict$findMin = function (dict) {
	findMin:
	while (true) {
		switch (dict.$) {
			case 'Empty':
				return $elm$core$Maybe$Nothing;
			case 'Leaf':
				var l = dict.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(l.key, l.value));
			default:
				var i = dict.a;
				var $temp$dict = i.left;
				dict = $temp$dict;
				continue findMin;
		}
	}
};
var $elm_community$intdict$IntDict$Inner = function (a) {
	return {$: 'Inner', a: a};
};
var $elm_community$intdict$IntDict$size = function (dict) {
	switch (dict.$) {
		case 'Empty':
			return 0;
		case 'Leaf':
			return 1;
		default:
			var i = dict.a;
			return i.size;
	}
};
var $elm_community$intdict$IntDict$inner = F3(
	function (p, l, r) {
		var _v0 = _Utils_Tuple2(l, r);
		if (_v0.a.$ === 'Empty') {
			var _v1 = _v0.a;
			return r;
		} else {
			if (_v0.b.$ === 'Empty') {
				var _v2 = _v0.b;
				return l;
			} else {
				return $elm_community$intdict$IntDict$Inner(
					{
						left: l,
						prefix: p,
						right: r,
						size: $elm_community$intdict$IntDict$size(l) + $elm_community$intdict$IntDict$size(r)
					});
			}
		}
	});
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$core$Bitwise$complement = _Bitwise_complement;
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm_community$intdict$IntDict$highestBitSet = function (n) {
	var shiftOr = F2(
		function (i, shift) {
			return i | (i >>> shift);
		});
	var n1 = A2(shiftOr, n, 1);
	var n2 = A2(shiftOr, n1, 2);
	var n3 = A2(shiftOr, n2, 4);
	var n4 = A2(shiftOr, n3, 8);
	var n5 = A2(shiftOr, n4, 16);
	return n5 & (~(n5 >>> 1));
};
var $elm_community$intdict$IntDict$signBit = $elm_community$intdict$IntDict$highestBitSet(-1);
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $elm_community$intdict$IntDict$isBranchingBitSet = function (p) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Bitwise$xor($elm_community$intdict$IntDict$signBit),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Bitwise$and(p.branchingBit),
			$elm$core$Basics$neq(0)));
};
var $elm_community$intdict$IntDict$higherBitMask = function (branchingBit) {
	return branchingBit ^ (~(branchingBit - 1));
};
var $elm_community$intdict$IntDict$lcp = F2(
	function (x, y) {
		var branchingBit = $elm_community$intdict$IntDict$highestBitSet(x ^ y);
		var mask = $elm_community$intdict$IntDict$higherBitMask(branchingBit);
		var prefixBits = x & mask;
		return {branchingBit: branchingBit, prefixBits: prefixBits};
	});
var $elm_community$intdict$IntDict$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm_community$intdict$IntDict$leaf = F2(
	function (k, v) {
		return $elm_community$intdict$IntDict$Leaf(
			{key: k, value: v});
	});
var $elm_community$intdict$IntDict$prefixMatches = F2(
	function (p, n) {
		return _Utils_eq(
			n & $elm_community$intdict$IntDict$higherBitMask(p.branchingBit),
			p.prefixBits);
	});
var $elm_community$intdict$IntDict$update = F3(
	function (key, alter, dict) {
		var join = F2(
			function (_v2, _v3) {
				var k1 = _v2.a;
				var l = _v2.b;
				var k2 = _v3.a;
				var r = _v3.b;
				var prefix = A2($elm_community$intdict$IntDict$lcp, k1, k2);
				return A2($elm_community$intdict$IntDict$isBranchingBitSet, prefix, k2) ? A3($elm_community$intdict$IntDict$inner, prefix, l, r) : A3($elm_community$intdict$IntDict$inner, prefix, r, l);
			});
		var alteredNode = function (mv) {
			var _v1 = alter(mv);
			if (_v1.$ === 'Just') {
				var v = _v1.a;
				return A2($elm_community$intdict$IntDict$leaf, key, v);
			} else {
				return $elm_community$intdict$IntDict$empty;
			}
		};
		switch (dict.$) {
			case 'Empty':
				return alteredNode($elm$core$Maybe$Nothing);
			case 'Leaf':
				var l = dict.a;
				return _Utils_eq(l.key, key) ? alteredNode(
					$elm$core$Maybe$Just(l.value)) : A2(
					join,
					_Utils_Tuple2(
						key,
						alteredNode($elm$core$Maybe$Nothing)),
					_Utils_Tuple2(l.key, dict));
			default:
				var i = dict.a;
				return A2($elm_community$intdict$IntDict$prefixMatches, i.prefix, key) ? (A2($elm_community$intdict$IntDict$isBranchingBitSet, i.prefix, key) ? A3(
					$elm_community$intdict$IntDict$inner,
					i.prefix,
					i.left,
					A3($elm_community$intdict$IntDict$update, key, alter, i.right)) : A3(
					$elm_community$intdict$IntDict$inner,
					i.prefix,
					A3($elm_community$intdict$IntDict$update, key, alter, i.left),
					i.right)) : A2(
					join,
					_Utils_Tuple2(
						key,
						alteredNode($elm$core$Maybe$Nothing)),
					_Utils_Tuple2(i.prefix.prefixBits, dict));
		}
	});
var $elm_community$intdict$IntDict$insert = F3(
	function (key, value, dict) {
		return A3(
			$elm_community$intdict$IntDict$update,
			key,
			$elm$core$Basics$always(
				$elm$core$Maybe$Just(value)),
			dict);
	});
var $elm_community$intdict$IntDict$Disjunct = F2(
	function (a, b) {
		return {$: 'Disjunct', a: a, b: b};
	});
var $elm_community$intdict$IntDict$Left = {$: 'Left'};
var $elm_community$intdict$IntDict$Parent = F2(
	function (a, b) {
		return {$: 'Parent', a: a, b: b};
	});
var $elm_community$intdict$IntDict$Right = {$: 'Right'};
var $elm_community$intdict$IntDict$SamePrefix = {$: 'SamePrefix'};
var $elm_community$intdict$IntDict$combineBits = F3(
	function (a, b, mask) {
		return (a & (~mask)) | (b & mask);
	});
var $elm_community$intdict$IntDict$mostSignificantBranchingBit = F2(
	function (a, b) {
		return (_Utils_eq(a, $elm_community$intdict$IntDict$signBit) || _Utils_eq(b, $elm_community$intdict$IntDict$signBit)) ? $elm_community$intdict$IntDict$signBit : A2($elm$core$Basics$max, a, b);
	});
var $elm_community$intdict$IntDict$determineBranchRelation = F2(
	function (l, r) {
		var rp = r.prefix;
		var lp = l.prefix;
		var mask = $elm_community$intdict$IntDict$highestBitSet(
			A2($elm_community$intdict$IntDict$mostSignificantBranchingBit, lp.branchingBit, rp.branchingBit));
		var modifiedRightPrefix = A3($elm_community$intdict$IntDict$combineBits, rp.prefixBits, ~lp.prefixBits, mask);
		var prefix = A2($elm_community$intdict$IntDict$lcp, lp.prefixBits, modifiedRightPrefix);
		var childEdge = F2(
			function (branchPrefix, c) {
				return A2($elm_community$intdict$IntDict$isBranchingBitSet, branchPrefix, c.prefix.prefixBits) ? $elm_community$intdict$IntDict$Right : $elm_community$intdict$IntDict$Left;
			});
		return _Utils_eq(lp, rp) ? $elm_community$intdict$IntDict$SamePrefix : (_Utils_eq(prefix, lp) ? A2(
			$elm_community$intdict$IntDict$Parent,
			$elm_community$intdict$IntDict$Left,
			A2(childEdge, l.prefix, r)) : (_Utils_eq(prefix, rp) ? A2(
			$elm_community$intdict$IntDict$Parent,
			$elm_community$intdict$IntDict$Right,
			A2(childEdge, r.prefix, l)) : A2(
			$elm_community$intdict$IntDict$Disjunct,
			prefix,
			A2(childEdge, prefix, l))));
	});
var $elm_community$intdict$IntDict$get = F2(
	function (key, dict) {
		get:
		while (true) {
			switch (dict.$) {
				case 'Empty':
					return $elm$core$Maybe$Nothing;
				case 'Leaf':
					var l = dict.a;
					return _Utils_eq(l.key, key) ? $elm$core$Maybe$Just(l.value) : $elm$core$Maybe$Nothing;
				default:
					var i = dict.a;
					if (!A2($elm_community$intdict$IntDict$prefixMatches, i.prefix, key)) {
						return $elm$core$Maybe$Nothing;
					} else {
						if (A2($elm_community$intdict$IntDict$isBranchingBitSet, i.prefix, key)) {
							var $temp$key = key,
								$temp$dict = i.right;
							key = $temp$key;
							dict = $temp$dict;
							continue get;
						} else {
							var $temp$key = key,
								$temp$dict = i.left;
							key = $temp$key;
							dict = $temp$dict;
							continue get;
						}
					}
			}
		}
	});
var $elm_community$intdict$IntDict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm_community$intdict$IntDict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm_community$intdict$IntDict$intersect = F2(
	function (l, r) {
		intersect:
		while (true) {
			var _v0 = _Utils_Tuple2(l, r);
			_v0$1:
			while (true) {
				_v0$2:
				while (true) {
					switch (_v0.a.$) {
						case 'Empty':
							var _v1 = _v0.a;
							return $elm_community$intdict$IntDict$Empty;
						case 'Leaf':
							switch (_v0.b.$) {
								case 'Empty':
									break _v0$1;
								case 'Leaf':
									break _v0$2;
								default:
									break _v0$2;
							}
						default:
							switch (_v0.b.$) {
								case 'Empty':
									break _v0$1;
								case 'Leaf':
									var lr = _v0.b.a;
									var _v3 = A2($elm_community$intdict$IntDict$get, lr.key, l);
									if (_v3.$ === 'Just') {
										var v = _v3.a;
										return A2($elm_community$intdict$IntDict$leaf, lr.key, v);
									} else {
										return $elm_community$intdict$IntDict$Empty;
									}
								default:
									var il = _v0.a.a;
									var ir = _v0.b.a;
									var _v4 = A2($elm_community$intdict$IntDict$determineBranchRelation, il, ir);
									switch (_v4.$) {
										case 'SamePrefix':
											return A3(
												$elm_community$intdict$IntDict$inner,
												il.prefix,
												A2($elm_community$intdict$IntDict$intersect, il.left, ir.left),
												A2($elm_community$intdict$IntDict$intersect, il.right, ir.right));
										case 'Parent':
											if (_v4.a.$ === 'Left') {
												if (_v4.b.$ === 'Right') {
													var _v5 = _v4.a;
													var _v6 = _v4.b;
													var $temp$l = il.right,
														$temp$r = r;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												} else {
													var _v9 = _v4.a;
													var _v10 = _v4.b;
													var $temp$l = il.left,
														$temp$r = r;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												}
											} else {
												if (_v4.b.$ === 'Right') {
													var _v7 = _v4.a;
													var _v8 = _v4.b;
													var $temp$l = l,
														$temp$r = ir.right;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												} else {
													var _v11 = _v4.a;
													var _v12 = _v4.b;
													var $temp$l = l,
														$temp$r = ir.left;
													l = $temp$l;
													r = $temp$r;
													continue intersect;
												}
											}
										default:
											return $elm_community$intdict$IntDict$Empty;
									}
							}
					}
				}
				var ll = _v0.a.a;
				return A2($elm_community$intdict$IntDict$member, ll.key, r) ? l : $elm_community$intdict$IntDict$Empty;
			}
			var _v2 = _v0.b;
			return $elm_community$intdict$IntDict$Empty;
		}
	});
var $elm_community$graph$Graph$crashHack = function (msg) {
	crashHack:
	while (true) {
		var $temp$msg = msg;
		msg = $temp$msg;
		continue crashHack;
	}
};
var $elm_community$graph$Graph$unGraph = function (graph) {
	var rep = graph.a;
	return rep;
};
var $elm_community$graph$Graph$get = function (nodeId) {
	return A2(
		$elm$core$Basics$composeR,
		$elm_community$graph$Graph$unGraph,
		$elm_community$intdict$IntDict$get(nodeId));
};
var $elm_community$graph$Graph$unsafeGet = F3(
	function (msg, id, graph) {
		var _v0 = A2($elm_community$graph$Graph$get, id, graph);
		if (_v0.$ === 'Nothing') {
			return $elm_community$graph$Graph$crashHack(msg);
		} else {
			var ctx = _v0.a;
			return ctx;
		}
	});
var $elm_community$graph$Graph$checkForBackEdges = F2(
	function (ordering, graph) {
		var success = function (_v3) {
			return A2($elm_community$graph$Graph$AcyclicGraph, graph, ordering);
		};
		var check = F2(
			function (id, _v2) {
				var backSet = _v2.a;
				var error = 'Graph.checkForBackEdges: `ordering` didn\'t contain `id`';
				var ctx = A3($elm_community$graph$Graph$unsafeGet, error, id, graph);
				var backSetWithId = A3($elm_community$intdict$IntDict$insert, id, _Utils_Tuple0, backSet);
				var backEdges = A2($elm_community$intdict$IntDict$intersect, ctx.outgoing, backSetWithId);
				var _v0 = $elm_community$intdict$IntDict$findMin(backEdges);
				if (_v0.$ === 'Nothing') {
					return $elm$core$Result$Ok(
						_Utils_Tuple2(backSetWithId, _Utils_Tuple0));
				} else {
					var _v1 = _v0.a;
					var to = _v1.a;
					var label = _v1.b;
					return $elm$core$Result$Err(
						A3($elm_community$graph$Graph$Edge, id, to, label));
				}
			});
		return A2(
			$elm$core$Result$map,
			success,
			A3(
				$elm$core$List$foldl,
				F2(
					function (id, res) {
						return A2(
							$elm$core$Result$andThen,
							check(id),
							res);
					}),
				$elm$core$Result$Ok(
					_Utils_Tuple2($elm_community$intdict$IntDict$empty, _Utils_Tuple0)),
				ordering));
	});
var $elm_community$intdict$IntDict$foldr = F3(
	function (f, acc, dict) {
		foldr:
		while (true) {
			switch (dict.$) {
				case 'Empty':
					return acc;
				case 'Leaf':
					var l = dict.a;
					return A3(f, l.key, l.value, acc);
				default:
					var i = dict.a;
					var $temp$f = f,
						$temp$acc = A3($elm_community$intdict$IntDict$foldr, f, acc, i.right),
						$temp$dict = i.left;
					f = $temp$f;
					acc = $temp$acc;
					dict = $temp$dict;
					continue foldr;
			}
		}
	});
var $elm_community$intdict$IntDict$keys = function (dict) {
	return A3(
		$elm_community$intdict$IntDict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm_community$graph$Graph$alongOutgoingEdges = function (ctx) {
	return $elm_community$intdict$IntDict$keys(ctx.outgoing);
};
var $elm_community$graph$Graph$Graph = function (a) {
	return {$: 'Graph', a: a};
};
var $elm_community$intdict$IntDict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			switch (dict.$) {
				case 'Empty':
					return acc;
				case 'Leaf':
					var l = dict.a;
					return A3(f, l.key, l.value, acc);
				default:
					var i = dict.a;
					var $temp$f = f,
						$temp$acc = A3($elm_community$intdict$IntDict$foldl, f, acc, i.left),
						$temp$dict = i.right;
					f = $temp$f;
					acc = $temp$acc;
					dict = $temp$dict;
					continue foldl;
			}
		}
	});
var $elm_community$graph$Graph$applyEdgeDiff = F3(
	function (nodeId, diff, graphRep) {
		var updateOutgoingEdge = F2(
			function (upd, node) {
				return _Utils_update(
					node,
					{
						outgoing: A3($elm_community$intdict$IntDict$update, nodeId, upd, node.outgoing)
					});
			});
		var updateIncomingEdge = F2(
			function (upd, node) {
				return _Utils_update(
					node,
					{
						incoming: A3($elm_community$intdict$IntDict$update, nodeId, upd, node.incoming)
					});
			});
		var flippedFoldl = F3(
			function (f, dict, acc) {
				return A3($elm_community$intdict$IntDict$foldl, f, acc, dict);
			});
		var edgeUpdateToMaybe = function (edgeUpdate) {
			if (edgeUpdate.$ === 'Insert') {
				var lbl = edgeUpdate.a;
				return $elm$core$Maybe$Just(lbl);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var updateAdjacency = F3(
			function (updateEdge, updatedId, edgeUpdate) {
				var updateLbl = updateEdge(
					$elm$core$Basics$always(
						edgeUpdateToMaybe(edgeUpdate)));
				return A2(
					$elm_community$intdict$IntDict$update,
					updatedId,
					$elm$core$Maybe$map(updateLbl));
			});
		return A3(
			flippedFoldl,
			updateAdjacency(updateOutgoingEdge),
			diff.outgoing,
			A3(
				flippedFoldl,
				updateAdjacency(updateIncomingEdge),
				diff.incoming,
				graphRep));
	});
var $elm_community$graph$Graph$Insert = function (a) {
	return {$: 'Insert', a: a};
};
var $elm_community$graph$Graph$Remove = function (a) {
	return {$: 'Remove', a: a};
};
var $elm_community$graph$Graph$emptyDiff = {incoming: $elm_community$intdict$IntDict$empty, outgoing: $elm_community$intdict$IntDict$empty};
var $elm_community$graph$Graph$computeEdgeDiff = F2(
	function (old, _new) {
		var collectUpdates = F3(
			function (edgeUpdate, updatedId, label) {
				var replaceUpdate = function (old_) {
					var _v5 = _Utils_Tuple2(
						old_,
						edgeUpdate(label));
					if (_v5.a.$ === 'Just') {
						if (_v5.a.a.$ === 'Remove') {
							if (_v5.b.$ === 'Insert') {
								var oldLbl = _v5.a.a.a;
								var newLbl = _v5.b.a;
								return _Utils_eq(oldLbl, newLbl) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									$elm_community$graph$Graph$Insert(newLbl));
							} else {
								return $elm_community$graph$Graph$crashHack('Graph.computeEdgeDiff: Collected two removals for the same edge. This is an error in the implementation of Graph and you should file a bug report!');
							}
						} else {
							return $elm_community$graph$Graph$crashHack('Graph.computeEdgeDiff: Collected inserts before removals. This is an error in the implementation of Graph and you should file a bug report!');
						}
					} else {
						var _v6 = _v5.a;
						var eu = _v5.b;
						return $elm$core$Maybe$Just(eu);
					}
				};
				return A2($elm_community$intdict$IntDict$update, updatedId, replaceUpdate);
			});
		var collect = F3(
			function (edgeUpdate, adj, updates) {
				return A3(
					$elm_community$intdict$IntDict$foldl,
					collectUpdates(edgeUpdate),
					updates,
					adj);
			});
		var _v0 = _Utils_Tuple2(old, _new);
		if (_v0.a.$ === 'Nothing') {
			if (_v0.b.$ === 'Nothing') {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $elm_community$graph$Graph$emptyDiff;
			} else {
				var _v4 = _v0.a;
				var ins = _v0.b.a;
				return {
					incoming: A3(collect, $elm_community$graph$Graph$Insert, ins.outgoing, $elm_community$intdict$IntDict$empty),
					outgoing: A3(collect, $elm_community$graph$Graph$Insert, ins.incoming, $elm_community$intdict$IntDict$empty)
				};
			}
		} else {
			if (_v0.b.$ === 'Nothing') {
				var rem = _v0.a.a;
				var _v3 = _v0.b;
				return {
					incoming: A3(collect, $elm_community$graph$Graph$Remove, rem.outgoing, $elm_community$intdict$IntDict$empty),
					outgoing: A3(collect, $elm_community$graph$Graph$Remove, rem.incoming, $elm_community$intdict$IntDict$empty)
				};
			} else {
				var rem = _v0.a.a;
				var ins = _v0.b.a;
				return _Utils_eq(rem, ins) ? $elm_community$graph$Graph$emptyDiff : {
					incoming: A3(
						collect,
						$elm_community$graph$Graph$Insert,
						ins.outgoing,
						A3(collect, $elm_community$graph$Graph$Remove, rem.outgoing, $elm_community$intdict$IntDict$empty)),
					outgoing: A3(
						collect,
						$elm_community$graph$Graph$Insert,
						ins.incoming,
						A3(collect, $elm_community$graph$Graph$Remove, rem.incoming, $elm_community$intdict$IntDict$empty))
				};
			}
		}
	});
var $elm_community$intdict$IntDict$filter = F2(
	function (predicate, dict) {
		var add = F3(
			function (k, v, d) {
				return A2(predicate, k, v) ? A3($elm_community$intdict$IntDict$insert, k, v, d) : d;
			});
		return A3($elm_community$intdict$IntDict$foldl, add, $elm_community$intdict$IntDict$empty, dict);
	});
var $elm_community$graph$Graph$update = F2(
	function (nodeId, updater) {
		var wrappedUpdater = function (rep) {
			var old = A2($elm_community$intdict$IntDict$get, nodeId, rep);
			var filterInvalidEdges = function (ctx) {
				return $elm_community$intdict$IntDict$filter(
					F2(
						function (id, _v0) {
							return _Utils_eq(id, ctx.node.id) || A2($elm_community$intdict$IntDict$member, id, rep);
						}));
			};
			var cleanUpEdges = function (ctx) {
				return _Utils_update(
					ctx,
					{
						incoming: A2(filterInvalidEdges, ctx, ctx.incoming),
						outgoing: A2(filterInvalidEdges, ctx, ctx.outgoing)
					});
			};
			var _new = A2(
				$elm$core$Maybe$map,
				cleanUpEdges,
				updater(old));
			var diff = A2($elm_community$graph$Graph$computeEdgeDiff, old, _new);
			return A3(
				$elm_community$intdict$IntDict$update,
				nodeId,
				$elm$core$Basics$always(_new),
				A3($elm_community$graph$Graph$applyEdgeDiff, nodeId, diff, rep));
		};
		return A2(
			$elm$core$Basics$composeR,
			$elm_community$graph$Graph$unGraph,
			A2($elm$core$Basics$composeR, wrappedUpdater, $elm_community$graph$Graph$Graph));
	});
var $elm_community$graph$Graph$remove = F2(
	function (nodeId, graph) {
		return A3(
			$elm_community$graph$Graph$update,
			nodeId,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			graph);
	});
var $elm_community$graph$Graph$guidedDfs = F5(
	function (selectNeighbors, visitNode, startingSeeds, startingAcc, startingGraph) {
		var go = F3(
			function (seeds, acc, graph) {
				go:
				while (true) {
					if (!seeds.b) {
						return _Utils_Tuple2(acc, graph);
					} else {
						var next = seeds.a;
						var seeds1 = seeds.b;
						var _v1 = A2($elm_community$graph$Graph$get, next, graph);
						if (_v1.$ === 'Nothing') {
							var $temp$seeds = seeds1,
								$temp$acc = acc,
								$temp$graph = graph;
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						} else {
							var ctx = _v1.a;
							var _v2 = A2(visitNode, ctx, acc);
							var accAfterDiscovery = _v2.a;
							var finishNode = _v2.b;
							var _v3 = A3(
								go,
								selectNeighbors(ctx),
								accAfterDiscovery,
								A2($elm_community$graph$Graph$remove, next, graph));
							var accBeforeFinish = _v3.a;
							var graph1 = _v3.b;
							var accAfterFinish = finishNode(accBeforeFinish);
							var $temp$seeds = seeds1,
								$temp$acc = accAfterFinish,
								$temp$graph = graph1;
							seeds = $temp$seeds;
							acc = $temp$acc;
							graph = $temp$graph;
							continue go;
						}
					}
				}
			});
		return A3(go, startingSeeds, startingAcc, startingGraph);
	});
var $elm_community$graph$Graph$nodeIds = A2($elm$core$Basics$composeR, $elm_community$graph$Graph$unGraph, $elm_community$intdict$IntDict$keys);
var $elm_community$graph$Graph$dfs = F3(
	function (visitNode, acc, graph) {
		return A5(
			$elm_community$graph$Graph$guidedDfs,
			$elm_community$graph$Graph$alongOutgoingEdges,
			visitNode,
			$elm_community$graph$Graph$nodeIds(graph),
			acc,
			graph).a;
	});
var $elm_community$graph$Graph$onFinish = F3(
	function (visitor, ctx, acc) {
		return _Utils_Tuple2(
			acc,
			visitor(ctx));
	});
var $elm_community$graph$Graph$checkAcyclic = function (graph) {
	var reversePostOrder = A3(
		$elm_community$graph$Graph$dfs,
		$elm_community$graph$Graph$onFinish(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.node;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.id;
					},
					$elm$core$List$cons))),
		_List_Nil,
		graph);
	return A2($elm_community$graph$Graph$checkForBackEdges, reversePostOrder, graph);
};
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute = _Utils_Tuple0;
var $author$project$Morphir$IR$empty = {typeConstructors: $elm$core$Dict$empty, typeSpecifications: $elm$core$Dict$empty, valueDefinitions: $elm$core$Dict$empty, valueSpecifications: $elm$core$Dict$empty};
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $elm_community$graph$Graph$NodeContext = F3(
	function (node, incoming, outgoing) {
		return {incoming: incoming, node: node, outgoing: outgoing};
	});
var $elm_community$graph$Graph$fromNodesAndEdges = F2(
	function (nodes_, edges_) {
		var nodeRep = A3(
			$elm$core$List$foldl,
			function (n) {
				return A2(
					$elm_community$intdict$IntDict$insert,
					n.id,
					A3($elm_community$graph$Graph$NodeContext, n, $elm_community$intdict$IntDict$empty, $elm_community$intdict$IntDict$empty));
			},
			$elm_community$intdict$IntDict$empty,
			nodes_);
		var addEdge = F2(
			function (edge, rep) {
				var updateOutgoing = function (ctx) {
					return _Utils_update(
						ctx,
						{
							outgoing: A3($elm_community$intdict$IntDict$insert, edge.to, edge.label, ctx.outgoing)
						});
				};
				var updateIncoming = function (ctx) {
					return _Utils_update(
						ctx,
						{
							incoming: A3($elm_community$intdict$IntDict$insert, edge.from, edge.label, ctx.incoming)
						});
				};
				return A3(
					$elm_community$intdict$IntDict$update,
					edge.to,
					$elm$core$Maybe$map(updateIncoming),
					A3(
						$elm_community$intdict$IntDict$update,
						edge.from,
						$elm$core$Maybe$map(updateOutgoing),
						rep));
			});
		var addEdgeIfValid = F2(
			function (edge, rep) {
				return (A2($elm_community$intdict$IntDict$member, edge.from, rep) && A2($elm_community$intdict$IntDict$member, edge.to, rep)) ? A2(addEdge, edge, rep) : rep;
			});
		return $elm_community$graph$Graph$Graph(
			A3($elm$core$List$foldl, addEdgeIfValid, nodeRep, edges_));
	});
var $author$project$Morphir$Type$Count$apply = F2(
	function (seed, _v0) {
		var counter = _v0.a;
		return counter(seed);
	});
var $author$project$Morphir$IR$Path$fromList = function (names) {
	return names;
};
var $elm$regex$Regex$split = _Regex_splitAtMost(_Regex_infinity);
var $author$project$Morphir$IR$Path$fromString = function (string) {
	var separatorRegex = A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('[^\\w\\s]+'));
	return $author$project$Morphir$IR$Path$fromList(
		A2(
			$elm$core$List$map,
			$author$project$Morphir$IR$Name$fromString,
			A2($elm$regex$Regex$split, separatorRegex, string)));
};
var $author$project$Morphir$IR$SDK$Basics$moduleName = $author$project$Morphir$IR$Path$fromString('Basics');
var $author$project$Morphir$IR$QName$QName = F2(
	function (a, b) {
		return {$: 'QName', a: a, b: b};
	});
var $author$project$Morphir$IR$QName$fromName = F2(
	function (modulePath, localName) {
		return A2($author$project$Morphir$IR$QName$QName, modulePath, localName);
	});
var $author$project$Morphir$IR$QName$getLocalName = function (_v0) {
	var localName = _v0.b;
	return localName;
};
var $author$project$Morphir$IR$QName$getModulePath = function (_v0) {
	var modulePath = _v0.a;
	return modulePath;
};
var $author$project$Morphir$IR$FQName$fromQName = F2(
	function (packagePath, qName) {
		return _Utils_Tuple3(
			packagePath,
			$author$project$Morphir$IR$QName$getModulePath(qName),
			$author$project$Morphir$IR$QName$getLocalName(qName));
	});
var $author$project$Morphir$IR$SDK$Common$packageName = $author$project$Morphir$IR$Path$fromString('Morphir.SDK');
var $author$project$Morphir$IR$SDK$Common$toFQName = F2(
	function (modulePath, localName) {
		return A2(
			$author$project$Morphir$IR$FQName$fromQName,
			$author$project$Morphir$IR$SDK$Common$packageName,
			A2(
				$author$project$Morphir$IR$QName$fromName,
				modulePath,
				$author$project$Morphir$IR$Name$fromString(localName)));
	});
var $author$project$Morphir$IR$SDK$Basics$floatType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'Float'),
		_List_Nil);
};
var $author$project$Morphir$IR$lookupTypeSpecification = F2(
	function (fqn, ir) {
		return A2($elm$core$Dict$get, fqn, ir.typeSpecifications);
	});
var $author$project$Morphir$IR$Type$substituteTypeVariables = F2(
	function (mapping, original) {
		switch (original.$) {
			case 'Variable':
				var a = original.a;
				var varName = original.b;
				return A2(
					$elm$core$Maybe$withDefault,
					original,
					A2($elm$core$Dict$get, varName, mapping));
			case 'Reference':
				var a = original.a;
				var fQName = original.b;
				var typeArgs = original.c;
				return A3(
					$author$project$Morphir$IR$Type$Reference,
					a,
					fQName,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Type$substituteTypeVariables(mapping),
						typeArgs));
			case 'Tuple':
				var a = original.a;
				var elemTypes = original.b;
				return A2(
					$author$project$Morphir$IR$Type$Tuple,
					a,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Type$substituteTypeVariables(mapping),
						elemTypes));
			case 'Record':
				var a = original.a;
				var fields = original.b;
				return A2(
					$author$project$Morphir$IR$Type$Record,
					a,
					A2(
						$elm$core$List$map,
						function (field) {
							return A2(
								$author$project$Morphir$IR$Type$Field,
								field.name,
								A2($author$project$Morphir$IR$Type$substituteTypeVariables, mapping, field.tpe));
						},
						fields));
			case 'ExtensibleRecord':
				var a = original.a;
				var name = original.b;
				var fields = original.c;
				return A3(
					$author$project$Morphir$IR$Type$ExtensibleRecord,
					a,
					name,
					A2(
						$elm$core$List$map,
						function (field) {
							return A2(
								$author$project$Morphir$IR$Type$Field,
								field.name,
								A2($author$project$Morphir$IR$Type$substituteTypeVariables, mapping, field.tpe));
						},
						fields));
			case 'Function':
				var a = original.a;
				var argType = original.b;
				var returnType = original.c;
				return A3(
					$author$project$Morphir$IR$Type$Function,
					a,
					A2($author$project$Morphir$IR$Type$substituteTypeVariables, mapping, argType),
					A2($author$project$Morphir$IR$Type$substituteTypeVariables, mapping, returnType));
			default:
				var a = original.a;
				return $author$project$Morphir$IR$Type$Unit(a);
		}
	});
var $author$project$Morphir$IR$resolveType = F2(
	function (tpe, ir) {
		switch (tpe.$) {
			case 'Variable':
				var a = tpe.a;
				var name = tpe.b;
				return A2($author$project$Morphir$IR$Type$Variable, a, name);
			case 'Reference':
				var fQName = tpe.b;
				var typeParams = tpe.c;
				return A2(
					$elm$core$Maybe$withDefault,
					tpe,
					A2(
						$elm$core$Maybe$map,
						function (typeSpec) {
							if (typeSpec.$ === 'TypeAliasSpecification') {
								var typeParamNames = typeSpec.a;
								var targetType = typeSpec.b;
								return A2(
									$author$project$Morphir$IR$Type$substituteTypeVariables,
									$elm$core$Dict$fromList(
										A3($elm$core$List$map2, $elm$core$Tuple$pair, typeParamNames, typeParams)),
									targetType);
							} else {
								return tpe;
							}
						},
						A2($author$project$Morphir$IR$lookupTypeSpecification, fQName, ir)));
			case 'Tuple':
				var a = tpe.a;
				var elemTypes = tpe.b;
				return A2(
					$author$project$Morphir$IR$Type$Tuple,
					a,
					A2(
						$elm$core$List$map,
						function (t) {
							return A2($author$project$Morphir$IR$resolveType, t, ir);
						},
						elemTypes));
			case 'Record':
				var a = tpe.a;
				var fields = tpe.b;
				return A2(
					$author$project$Morphir$IR$Type$Record,
					a,
					A2(
						$elm$core$List$map,
						function (f) {
							return _Utils_update(
								f,
								{
									tpe: A2($author$project$Morphir$IR$resolveType, f.tpe, ir)
								});
						},
						fields));
			case 'ExtensibleRecord':
				var a = tpe.a;
				var varName = tpe.b;
				var fields = tpe.c;
				return A3(
					$author$project$Morphir$IR$Type$ExtensibleRecord,
					a,
					varName,
					A2(
						$elm$core$List$map,
						function (f) {
							return _Utils_update(
								f,
								{
									tpe: A2($author$project$Morphir$IR$resolveType, f.tpe, ir)
								});
						},
						fields));
			case 'Function':
				var a = tpe.a;
				var argType = tpe.b;
				var returnType = tpe.c;
				return A3(
					$author$project$Morphir$IR$Type$Function,
					a,
					A2($author$project$Morphir$IR$resolveType, argType, ir),
					A2($author$project$Morphir$IR$resolveType, returnType, ir));
			default:
				var a = tpe.a;
				return $author$project$Morphir$IR$Type$Unit(a);
		}
	});
var $author$project$Morphir$IR$Value$rewriteValue = F2(
	function (f, value) {
		var _v0 = f(value);
		if (_v0.$ === 'Just') {
			var newValue = _v0.a;
			return newValue;
		} else {
			switch (value.$) {
				case 'Tuple':
					var va = value.a;
					var elems = value.b;
					return A2(
						$author$project$Morphir$IR$Value$Tuple,
						va,
						A2(
							$elm$core$List$map,
							$author$project$Morphir$IR$Value$rewriteValue(f),
							elems));
				case 'List':
					var va = value.a;
					var items = value.b;
					return A2(
						$author$project$Morphir$IR$Value$List,
						va,
						A2(
							$elm$core$List$map,
							$author$project$Morphir$IR$Value$rewriteValue(f),
							items));
				case 'Record':
					var va = value.a;
					var fields = value.b;
					return A2(
						$author$project$Morphir$IR$Value$Record,
						va,
						A2(
							$elm$core$Dict$map,
							F2(
								function (_v2, v) {
									return A2($author$project$Morphir$IR$Value$rewriteValue, f, v);
								}),
							fields));
				case 'Field':
					var va = value.a;
					var subject = value.b;
					var name = value.c;
					return A3(
						$author$project$Morphir$IR$Value$Field,
						va,
						A2($author$project$Morphir$IR$Value$rewriteValue, f, subject),
						name);
				case 'Apply':
					var va = value.a;
					var fun = value.b;
					var arg = value.c;
					return A3(
						$author$project$Morphir$IR$Value$Apply,
						va,
						A2($author$project$Morphir$IR$Value$rewriteValue, f, fun),
						A2($author$project$Morphir$IR$Value$rewriteValue, f, arg));
				case 'Lambda':
					var va = value.a;
					var pattern = value.b;
					var body = value.c;
					return A3(
						$author$project$Morphir$IR$Value$Lambda,
						va,
						pattern,
						A2($author$project$Morphir$IR$Value$rewriteValue, f, body));
				case 'LetDefinition':
					var va = value.a;
					var defName = value.b;
					var def = value.c;
					var inValue = value.d;
					return A4(
						$author$project$Morphir$IR$Value$LetDefinition,
						va,
						defName,
						_Utils_update(
							def,
							{
								body: A2($author$project$Morphir$IR$Value$rewriteValue, f, def.body)
							}),
						A2($author$project$Morphir$IR$Value$rewriteValue, f, inValue));
				case 'LetRecursion':
					var va = value.a;
					var defs = value.b;
					var inValue = value.c;
					return A3(
						$author$project$Morphir$IR$Value$LetRecursion,
						va,
						A2(
							$elm$core$Dict$map,
							F2(
								function (_v3, def) {
									return _Utils_update(
										def,
										{
											body: A2($author$project$Morphir$IR$Value$rewriteValue, f, def.body)
										});
								}),
							defs),
						A2($author$project$Morphir$IR$Value$rewriteValue, f, inValue));
				case 'Destructure':
					var va = value.a;
					var bindPattern = value.b;
					var bindValue = value.c;
					var inValue = value.d;
					return A4(
						$author$project$Morphir$IR$Value$Destructure,
						va,
						bindPattern,
						A2($author$project$Morphir$IR$Value$rewriteValue, f, bindValue),
						A2($author$project$Morphir$IR$Value$rewriteValue, f, inValue));
				case 'IfThenElse':
					var va = value.a;
					var condition = value.b;
					var thenBranch = value.c;
					var elseBranch = value.d;
					return A4(
						$author$project$Morphir$IR$Value$IfThenElse,
						va,
						A2($author$project$Morphir$IR$Value$rewriteValue, f, condition),
						A2($author$project$Morphir$IR$Value$rewriteValue, f, thenBranch),
						A2($author$project$Morphir$IR$Value$rewriteValue, f, elseBranch));
				case 'PatternMatch':
					var va = value.a;
					var subject = value.b;
					var cases = value.c;
					return A3(
						$author$project$Morphir$IR$Value$PatternMatch,
						va,
						A2($author$project$Morphir$IR$Value$rewriteValue, f, subject),
						A2(
							$elm$core$List$map,
							function (_v4) {
								var p = _v4.a;
								var v = _v4.b;
								return _Utils_Tuple2(
									p,
									A2($author$project$Morphir$IR$Value$rewriteValue, f, v));
							},
							cases));
				case 'UpdateRecord':
					var va = value.a;
					var subject = value.b;
					var fields = value.c;
					return A3(
						$author$project$Morphir$IR$Value$UpdateRecord,
						va,
						A2($author$project$Morphir$IR$Value$rewriteValue, f, subject),
						A2(
							$elm$core$Dict$map,
							F2(
								function (_v5, v) {
									return A2($author$project$Morphir$IR$Value$rewriteValue, f, v);
								}),
							fields));
				default:
					return value;
			}
		}
	});
var $author$project$Morphir$Type$Infer$fixNumberLiterals = F2(
	function (ir, typedValue) {
		return A2(
			$author$project$Morphir$IR$Value$rewriteValue,
			function (value) {
				if ((value.$ === 'Literal') && (value.b.$ === 'WholeNumberLiteral')) {
					var _v1 = value.a;
					var va = _v1.a;
					var tpe = _v1.b;
					var v = value.b.a;
					return _Utils_eq(
						A2($author$project$Morphir$IR$resolveType, tpe, ir),
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)) ? $elm$core$Maybe$Just(
						A2(
							$author$project$Morphir$IR$Value$Literal,
							_Utils_Tuple2(va, tpe),
							$author$project$Morphir$IR$Literal$FloatLiteral(v))) : $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			typedValue);
	});
var $author$project$Morphir$Type$Solve$get = F2(
	function (_var, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$get, _var, dict);
	});
var $author$project$Morphir$IR$Value$Definition = F3(
	function (inputTypes, outputType, body) {
		return {body: body, inputTypes: inputTypes, outputType: outputType};
	});
var $author$project$Morphir$IR$Value$AsPattern = F3(
	function (a, b, c) {
		return {$: 'AsPattern', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Value$ConstructorPattern = F3(
	function (a, b, c) {
		return {$: 'ConstructorPattern', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Value$EmptyListPattern = function (a) {
	return {$: 'EmptyListPattern', a: a};
};
var $author$project$Morphir$IR$Value$HeadTailPattern = F3(
	function (a, b, c) {
		return {$: 'HeadTailPattern', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Value$LiteralPattern = F2(
	function (a, b) {
		return {$: 'LiteralPattern', a: a, b: b};
	});
var $author$project$Morphir$IR$Value$TuplePattern = F2(
	function (a, b) {
		return {$: 'TuplePattern', a: a, b: b};
	});
var $author$project$Morphir$IR$Value$UnitPattern = function (a) {
	return {$: 'UnitPattern', a: a};
};
var $author$project$Morphir$IR$Value$WildcardPattern = function (a) {
	return {$: 'WildcardPattern', a: a};
};
var $author$project$Morphir$IR$Value$mapPatternAttributes = F2(
	function (f, p) {
		switch (p.$) {
			case 'WildcardPattern':
				var a = p.a;
				return $author$project$Morphir$IR$Value$WildcardPattern(
					f(a));
			case 'AsPattern':
				var a = p.a;
				var p2 = p.b;
				var name = p.c;
				return A3(
					$author$project$Morphir$IR$Value$AsPattern,
					f(a),
					A2($author$project$Morphir$IR$Value$mapPatternAttributes, f, p2),
					name);
			case 'TuplePattern':
				var a = p.a;
				var elementPatterns = p.b;
				return A2(
					$author$project$Morphir$IR$Value$TuplePattern,
					f(a),
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Value$mapPatternAttributes(f),
						elementPatterns));
			case 'ConstructorPattern':
				var a = p.a;
				var constructorName = p.b;
				var argumentPatterns = p.c;
				return A3(
					$author$project$Morphir$IR$Value$ConstructorPattern,
					f(a),
					constructorName,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Value$mapPatternAttributes(f),
						argumentPatterns));
			case 'EmptyListPattern':
				var a = p.a;
				return $author$project$Morphir$IR$Value$EmptyListPattern(
					f(a));
			case 'HeadTailPattern':
				var a = p.a;
				var headPattern = p.b;
				var tailPattern = p.c;
				return A3(
					$author$project$Morphir$IR$Value$HeadTailPattern,
					f(a),
					A2($author$project$Morphir$IR$Value$mapPatternAttributes, f, headPattern),
					A2($author$project$Morphir$IR$Value$mapPatternAttributes, f, tailPattern));
			case 'LiteralPattern':
				var a = p.a;
				var value = p.b;
				return A2(
					$author$project$Morphir$IR$Value$LiteralPattern,
					f(a),
					value);
			default:
				var a = p.a;
				return $author$project$Morphir$IR$Value$UnitPattern(
					f(a));
		}
	});
var $author$project$Morphir$IR$Value$mapDefinitionAttributes = F3(
	function (f, g, d) {
		return A3(
			$author$project$Morphir$IR$Value$Definition,
			A2(
				$elm$core$List$map,
				function (_v5) {
					var name = _v5.a;
					var attr = _v5.b;
					var tpe = _v5.c;
					return _Utils_Tuple3(
						name,
						g(attr),
						A2($author$project$Morphir$IR$Type$mapTypeAttributes, f, tpe));
				},
				d.inputTypes),
			A2($author$project$Morphir$IR$Type$mapTypeAttributes, f, d.outputType),
			A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, d.body));
	});
var $author$project$Morphir$IR$Value$mapValueAttributes = F3(
	function (f, g, v) {
		switch (v.$) {
			case 'Literal':
				var a = v.a;
				var value = v.b;
				return A2(
					$author$project$Morphir$IR$Value$Literal,
					g(a),
					value);
			case 'Constructor':
				var a = v.a;
				var fullyQualifiedName = v.b;
				return A2(
					$author$project$Morphir$IR$Value$Constructor,
					g(a),
					fullyQualifiedName);
			case 'Tuple':
				var a = v.a;
				var elements = v.b;
				return A2(
					$author$project$Morphir$IR$Value$Tuple,
					g(a),
					A2(
						$elm$core$List$map,
						A2($author$project$Morphir$IR$Value$mapValueAttributes, f, g),
						elements));
			case 'List':
				var a = v.a;
				var items = v.b;
				return A2(
					$author$project$Morphir$IR$Value$List,
					g(a),
					A2(
						$elm$core$List$map,
						A2($author$project$Morphir$IR$Value$mapValueAttributes, f, g),
						items));
			case 'Record':
				var a = v.a;
				var fields = v.b;
				return A2(
					$author$project$Morphir$IR$Value$Record,
					g(a),
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v1, fieldValue) {
								return A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, fieldValue);
							}),
						fields));
			case 'Variable':
				var a = v.a;
				var name = v.b;
				return A2(
					$author$project$Morphir$IR$Value$Variable,
					g(a),
					name);
			case 'Reference':
				var a = v.a;
				var fullyQualifiedName = v.b;
				return A2(
					$author$project$Morphir$IR$Value$Reference,
					g(a),
					fullyQualifiedName);
			case 'Field':
				var a = v.a;
				var subjectValue = v.b;
				var fieldName = v.c;
				return A3(
					$author$project$Morphir$IR$Value$Field,
					g(a),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, subjectValue),
					fieldName);
			case 'FieldFunction':
				var a = v.a;
				var fieldName = v.b;
				return A2(
					$author$project$Morphir$IR$Value$FieldFunction,
					g(a),
					fieldName);
			case 'Apply':
				var a = v.a;
				var _function = v.b;
				var argument = v.c;
				return A3(
					$author$project$Morphir$IR$Value$Apply,
					g(a),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, _function),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, argument));
			case 'Lambda':
				var a = v.a;
				var argumentPattern = v.b;
				var body = v.c;
				return A3(
					$author$project$Morphir$IR$Value$Lambda,
					g(a),
					A2($author$project$Morphir$IR$Value$mapPatternAttributes, g, argumentPattern),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, body));
			case 'LetDefinition':
				var a = v.a;
				var valueName = v.b;
				var valueDefinition = v.c;
				var inValue = v.d;
				return A4(
					$author$project$Morphir$IR$Value$LetDefinition,
					g(a),
					valueName,
					A3($author$project$Morphir$IR$Value$mapDefinitionAttributes, f, g, valueDefinition),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, inValue));
			case 'LetRecursion':
				var a = v.a;
				var valueDefinitions = v.b;
				var inValue = v.c;
				return A3(
					$author$project$Morphir$IR$Value$LetRecursion,
					g(a),
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v2, def) {
								return A3($author$project$Morphir$IR$Value$mapDefinitionAttributes, f, g, def);
							}),
						valueDefinitions),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, inValue));
			case 'Destructure':
				var a = v.a;
				var pattern = v.b;
				var valueToDestruct = v.c;
				var inValue = v.d;
				return A4(
					$author$project$Morphir$IR$Value$Destructure,
					g(a),
					A2($author$project$Morphir$IR$Value$mapPatternAttributes, g, pattern),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, valueToDestruct),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, inValue));
			case 'IfThenElse':
				var a = v.a;
				var condition = v.b;
				var thenBranch = v.c;
				var elseBranch = v.d;
				return A4(
					$author$project$Morphir$IR$Value$IfThenElse,
					g(a),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, condition),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, thenBranch),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, elseBranch));
			case 'PatternMatch':
				var a = v.a;
				var branchOutOn = v.b;
				var cases = v.c;
				return A3(
					$author$project$Morphir$IR$Value$PatternMatch,
					g(a),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, branchOutOn),
					A2(
						$elm$core$List$map,
						function (_v3) {
							var pattern = _v3.a;
							var body = _v3.b;
							return _Utils_Tuple2(
								A2($author$project$Morphir$IR$Value$mapPatternAttributes, g, pattern),
								A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, body));
						},
						cases));
			case 'UpdateRecord':
				var a = v.a;
				var valueToUpdate = v.b;
				var fieldsToUpdate = v.c;
				return A3(
					$author$project$Morphir$IR$Value$UpdateRecord,
					g(a),
					A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, valueToUpdate),
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v4, fieldValue) {
								return A3($author$project$Morphir$IR$Value$mapValueAttributes, f, g, fieldValue);
							}),
						fieldsToUpdate));
			default:
				var a = v.a;
				return $author$project$Morphir$IR$Value$Unit(
					g(a));
		}
	});
var $author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType = F2(
	function (solutionMap, metaType) {
		switch (metaType.$) {
			case 'MetaVar':
				var metaVar = metaType.a;
				return A2(
					$elm$core$Maybe$withDefault,
					A2(
						$author$project$Morphir$IR$Type$Variable,
						_Utils_Tuple0,
						_List_fromArray(
							[
								't',
								$elm$core$String$fromInt(metaVar)
							])),
					A2(
						$elm$core$Maybe$map,
						$author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType(solutionMap),
						A2($author$project$Morphir$Type$Solve$get, metaVar, solutionMap)));
			case 'MetaTuple':
				var metaElems = metaType.b;
				return A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType(solutionMap),
						metaElems));
			case 'MetaRecord':
				var recordVar = metaType.b;
				var isOpen = metaType.c;
				var metaFields = metaType.d;
				return (!isOpen) ? A2(
					$author$project$Morphir$IR$Type$Record,
					_Utils_Tuple0,
					A2(
						$elm$core$List$map,
						function (_v1) {
							var fieldName = _v1.a;
							var fieldType = _v1.b;
							return A2(
								$author$project$Morphir$IR$Type$Field,
								fieldName,
								A2($author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType, solutionMap, fieldType));
						},
						$elm$core$Dict$toList(metaFields))) : A3(
					$author$project$Morphir$IR$Type$ExtensibleRecord,
					_Utils_Tuple0,
					_List_fromArray(
						[
							't',
							$elm$core$String$fromInt(recordVar)
						]),
					A2(
						$elm$core$List$map,
						function (_v2) {
							var fieldName = _v2.a;
							var fieldType = _v2.b;
							return A2(
								$author$project$Morphir$IR$Type$Field,
								fieldName,
								A2($author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType, solutionMap, fieldType));
						},
						$elm$core$Dict$toList(metaFields)));
			case 'MetaFun':
				var argType = metaType.b;
				var returnType = metaType.c;
				return A3(
					$author$project$Morphir$IR$Type$Function,
					_Utils_Tuple0,
					A2($author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType, solutionMap, argType),
					A2($author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType, solutionMap, returnType));
			case 'MetaRef':
				var fQName = metaType.b;
				var args = metaType.c;
				return A3(
					$author$project$Morphir$IR$Type$Reference,
					_Utils_Tuple0,
					fQName,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType(solutionMap),
						args));
			default:
				return $author$project$Morphir$IR$Type$Unit(_Utils_Tuple0);
		}
	});
var $author$project$Morphir$Type$Infer$applySolutionToAnnotatedValue = F3(
	function (ir, annotatedValue, _v0) {
		var residualConstraints = _v0.a;
		var solutionMap = _v0.b;
		return A2(
			$author$project$Morphir$Type$Infer$fixNumberLiterals,
			ir,
			A3(
				$author$project$Morphir$IR$Value$mapValueAttributes,
				$elm$core$Basics$identity,
				function (_v1) {
					var va = _v1.a;
					var metaVar = _v1.b;
					return _Utils_Tuple2(
						va,
						A2(
							$elm$core$Maybe$withDefault,
							A2(
								$author$project$Morphir$IR$Type$Variable,
								_Utils_Tuple0,
								_List_fromArray(
									[
										't',
										$elm$core$String$fromInt(metaVar)
									])),
							A2(
								$elm$core$Maybe$map,
								$author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType(solutionMap),
								A2($author$project$Morphir$Type$Solve$get, metaVar, solutionMap))));
				},
				annotatedValue));
	});
var $author$project$Morphir$Type$Count$Count = function (a) {
	return {$: 'Count', a: a};
};
var $author$project$Morphir$Type$Count$all = function (counters) {
	return $author$project$Morphir$Type$Count$Count(
		function (counter) {
			return A3(
				$elm$core$List$foldr,
				F2(
					function (_v0, _v1) {
						var nextCounter = _v0.a;
						var counterSoFar = _v1.a;
						var itemsSoFar = _v1.b;
						var _v2 = nextCounter(counterSoFar);
						var nextCount = _v2.a;
						var nextItem = _v2.b;
						return _Utils_Tuple2(
							nextCount,
							A2($elm$core$List$cons, nextItem, itemsSoFar));
					}),
				_Utils_Tuple2(counter, _List_Nil),
				counters);
		});
};
var $author$project$Morphir$Type$Count$andThen = F2(
	function (f, _v0) {
		var counterA = _v0.a;
		return $author$project$Morphir$Type$Count$Count(
			function (counter) {
				var _v1 = counterA(counter);
				var nextCount = _v1.a;
				var a = _v1.b;
				var _v2 = f(a);
				var counterB = _v2.a;
				return counterB(nextCount);
			});
	});
var $author$project$Morphir$IR$FQName$fQName = F3(
	function (packagePath, modulePath, localName) {
		return _Utils_Tuple3(packagePath, modulePath, localName);
	});
var $author$project$Morphir$IR$FQName$fqn = F3(
	function (packageName, moduleName, localName) {
		return A3(
			$author$project$Morphir$IR$FQName$fQName,
			$author$project$Morphir$IR$Path$fromString(packageName),
			$author$project$Morphir$IR$Path$fromString(moduleName),
			$author$project$Morphir$IR$Name$fromString(localName));
	});
var $author$project$Morphir$Type$MetaType$MetaRef = F4(
	function (a, b, c, d) {
		return {$: 'MetaRef', a: a, b: b, c: c, d: d};
	});
var $author$project$Morphir$Type$MetaType$variables = function (metaType) {
	switch (metaType.$) {
		case 'MetaVar':
			var variable = metaType.a;
			return $elm$core$Set$singleton(variable);
		case 'MetaRef':
			var vars = metaType.a;
			return vars;
		case 'MetaTuple':
			var vars = metaType.a;
			return vars;
		case 'MetaRecord':
			var vars = metaType.a;
			return vars;
		case 'MetaFun':
			var vars = metaType.a;
			return vars;
		default:
			return $elm$core$Set$empty;
	}
};
var $author$project$Morphir$Type$MetaType$metaRef = F2(
	function (fQName, args) {
		var vars = A3(
			$elm$core$List$foldl,
			$elm$core$Set$union,
			$elm$core$Set$empty,
			A2($elm$core$List$map, $author$project$Morphir$Type$MetaType$variables, args));
		return A4($author$project$Morphir$Type$MetaType$MetaRef, vars, fQName, args, $elm$core$Maybe$Nothing);
	});
var $author$project$Morphir$Type$MetaType$boolType = A2(
	$author$project$Morphir$Type$MetaType$metaRef,
	A3($author$project$Morphir$IR$FQName$fqn, 'Morphir.SDK', 'Basics', 'Bool'),
	_List_Nil);
var $author$project$Morphir$IR$Type$collectVariables = function (tpe) {
	var collectUnion = function (values) {
		return A3(
			$elm$core$List$foldl,
			$elm$core$Set$union,
			$elm$core$Set$empty,
			A2($elm$core$List$map, $author$project$Morphir$IR$Type$collectVariables, values));
	};
	switch (tpe.$) {
		case 'Variable':
			var name = tpe.b;
			return $elm$core$Set$singleton(name);
		case 'Reference':
			var args = tpe.c;
			return collectUnion(args);
		case 'Tuple':
			var elements = tpe.b;
			return collectUnion(elements);
		case 'Record':
			var fields = tpe.b;
			return collectUnion(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.tpe;
					},
					fields));
		case 'ExtensibleRecord':
			var subjectName = tpe.b;
			var fields = tpe.c;
			return A2(
				$elm$core$Set$insert,
				subjectName,
				collectUnion(
					A2(
						$elm$core$List$map,
						function ($) {
							return $.tpe;
						},
						fields)));
		case 'Function':
			var argType = tpe.b;
			var returnType = tpe.c;
			return collectUnion(
				_List_fromArray(
					[argType, returnType]));
		default:
			return $elm$core$Set$empty;
	}
};
var $author$project$Morphir$Type$ConstraintSet$ConstraintSet = function (a) {
	return {$: 'ConstraintSet', a: a};
};
var $author$project$Morphir$Type$ConstraintSet$empty = $author$project$Morphir$Type$ConstraintSet$ConstraintSet(_List_Nil);
var $author$project$Morphir$Type$Constraint$isTrivial = function (constraint) {
	if (constraint.$ === 'Equality') {
		var metaType1 = constraint.b;
		var metaType2 = constraint.c;
		return _Utils_eq(metaType1, metaType2);
	} else {
		return false;
	}
};
var $author$project$Morphir$Type$Constraint$equivalent = F2(
	function (constraint1, constraint2) {
		if (_Utils_eq(constraint1, constraint2)) {
			return true;
		} else {
			var _v0 = _Utils_Tuple2(constraint1, constraint2);
			if ((_v0.a.$ === 'Equality') && (_v0.b.$ === 'Equality')) {
				var _v1 = _v0.a;
				var a1 = _v1.b;
				var a2 = _v1.c;
				var _v2 = _v0.b;
				var b1 = _v2.b;
				var b2 = _v2.c;
				return (_Utils_eq(a1, b1) && _Utils_eq(a2, b2)) || (_Utils_eq(a1, b2) && _Utils_eq(a2, b1));
			} else {
				return false;
			}
		}
	});
var $author$project$Morphir$Type$ConstraintSet$member = F2(
	function (constraint, _v0) {
		var constraints = _v0.a;
		return A2(
			$elm$core$List$any,
			$author$project$Morphir$Type$Constraint$equivalent(constraint),
			constraints);
	});
var $author$project$Morphir$Type$ConstraintSet$insert = F2(
	function (constraint, constraintSet) {
		var constraints = constraintSet.a;
		return ($author$project$Morphir$Type$Constraint$isTrivial(constraint) || A2($author$project$Morphir$Type$ConstraintSet$member, constraint, constraintSet)) ? constraintSet : $author$project$Morphir$Type$ConstraintSet$ConstraintSet(
			A2($elm$core$List$cons, constraint, constraints));
	});
var $author$project$Morphir$Type$ConstraintSet$union = F2(
	function (constraintSet1, _v0) {
		var constraints2 = _v0.a;
		return A3($elm$core$List$foldl, $author$project$Morphir$Type$ConstraintSet$insert, constraintSet1, constraints2);
	});
var $author$project$Morphir$Type$ConstraintSet$concat = function (constraintSets) {
	return A3($elm$core$List$foldl, $author$project$Morphir$Type$ConstraintSet$union, $author$project$Morphir$Type$ConstraintSet$empty, constraintSets);
};
var $author$project$Morphir$Type$MetaTypeMapping$CouldNotFindAlias = function (a) {
	return {$: 'CouldNotFindAlias', a: a};
};
var $author$project$Morphir$Type$MetaTypeMapping$ExpectedAlias = function (a) {
	return {$: 'ExpectedAlias', a: a};
};
var $author$project$Morphir$Type$MetaTypeMapping$lookupAliasedType = F3(
	function (ir, typeFQN, concreteTypeParams) {
		return A2(
			$elm$core$Result$andThen,
			function (typeSpec) {
				if (typeSpec.$ === 'TypeAliasSpecification') {
					var typeParamNames = typeSpec.a;
					var tpe = typeSpec.b;
					return $elm$core$Result$Ok(
						A2(
							$author$project$Morphir$IR$Type$substituteTypeVariables,
							$elm$core$Dict$fromList(
								A3($elm$core$List$map2, $elm$core$Tuple$pair, typeParamNames, concreteTypeParams)),
							tpe));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Type$MetaTypeMapping$ExpectedAlias(typeFQN));
				}
			},
			A2(
				$elm$core$Result$fromMaybe,
				$author$project$Morphir$Type$MetaTypeMapping$CouldNotFindAlias(typeFQN),
				A2($author$project$Morphir$IR$lookupTypeSpecification, typeFQN, ir)));
	});
var $author$project$Morphir$Type$Count$map = F2(
	function (f, _v0) {
		var indexerA = _v0.a;
		return $author$project$Morphir$Type$Count$Count(
			function (index) {
				var _v1 = indexerA(index);
				var indexA = _v1.a;
				var a = _v1.b;
				return _Utils_Tuple2(
					indexA,
					f(a));
			});
	});
var $author$project$Morphir$Type$Count$map2 = F3(
	function (f, _v0, _v1) {
		var indexerA = _v0.a;
		var indexerB = _v1.a;
		return $author$project$Morphir$Type$Count$Count(
			function (index) {
				var _v2 = indexerA(index);
				var indexA = _v2.a;
				var a = _v2.b;
				var _v3 = indexerB(indexA);
				var indexB = _v3.a;
				var b = _v3.b;
				return _Utils_Tuple2(
					indexB,
					A2(f, a, b));
			});
	});
var $author$project$Morphir$Type$MetaType$metaAlias = F3(
	function (fQName, args, tpe) {
		var vars = A2(
			$elm$core$Set$union,
			$author$project$Morphir$Type$MetaType$variables(tpe),
			A3(
				$elm$core$List$foldl,
				$elm$core$Set$union,
				$elm$core$Set$empty,
				A2($elm$core$List$map, $author$project$Morphir$Type$MetaType$variables, args)));
		if (tpe.$ === 'MetaRef') {
			var nestedFQName = tpe.b;
			var nestedArgs = tpe.c;
			return (_Utils_eq(fQName, nestedFQName) && _Utils_eq(nestedArgs, args)) ? tpe : A4(
				$author$project$Morphir$Type$MetaType$MetaRef,
				vars,
				fQName,
				args,
				$elm$core$Maybe$Just(tpe));
		} else {
			return A4(
				$author$project$Morphir$Type$MetaType$MetaRef,
				vars,
				fQName,
				args,
				$elm$core$Maybe$Just(tpe));
		}
	});
var $author$project$Morphir$Type$MetaType$MetaRecord = F4(
	function (a, b, c, d) {
		return {$: 'MetaRecord', a: a, b: b, c: c, d: d};
	});
var $author$project$Morphir$Type$MetaType$metaRecord = F3(
	function (_var, isOpen, fields) {
		var vars = A2(
			$elm$core$Set$insert,
			_var,
			A3(
				$elm$core$List$foldl,
				$elm$core$Set$union,
				$elm$core$Set$empty,
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Morphir$Type$MetaType$variables),
					$elm$core$Dict$toList(fields))));
		return A4($author$project$Morphir$Type$MetaType$MetaRecord, vars, _var, isOpen, fields);
	});
var $author$project$Morphir$Type$MetaType$metaClosedRecord = F2(
	function (_var, fields) {
		return A3($author$project$Morphir$Type$MetaType$metaRecord, _var, false, fields);
	});
var $author$project$Morphir$Type$MetaType$MetaFun = F3(
	function (a, b, c) {
		return {$: 'MetaFun', a: a, b: b, c: c};
	});
var $author$project$Morphir$Type$MetaType$metaFun = F2(
	function (arg, body) {
		var vars = A2(
			$elm$core$Set$union,
			$author$project$Morphir$Type$MetaType$variables(arg),
			$author$project$Morphir$Type$MetaType$variables(body));
		return A3($author$project$Morphir$Type$MetaType$MetaFun, vars, arg, body);
	});
var $author$project$Morphir$Type$MetaType$metaOpenRecord = F2(
	function (_var, fields) {
		return A3($author$project$Morphir$Type$MetaType$metaRecord, _var, true, fields);
	});
var $author$project$Morphir$Type$MetaType$MetaTuple = F2(
	function (a, b) {
		return {$: 'MetaTuple', a: a, b: b};
	});
var $author$project$Morphir$Type$MetaType$metaTuple = function (elems) {
	var vars = A3(
		$elm$core$List$foldl,
		$elm$core$Set$union,
		$elm$core$Set$empty,
		A2($elm$core$List$map, $author$project$Morphir$Type$MetaType$variables, elems));
	return A2($author$project$Morphir$Type$MetaType$MetaTuple, vars, elems);
};
var $author$project$Morphir$Type$MetaType$MetaUnit = {$: 'MetaUnit'};
var $author$project$Morphir$Type$MetaType$metaUnit = $author$project$Morphir$Type$MetaType$MetaUnit;
var $author$project$Morphir$Type$MetaType$MetaVar = function (a) {
	return {$: 'MetaVar', a: a};
};
var $author$project$Morphir$Type$MetaType$metaVar = $author$project$Morphir$Type$MetaType$MetaVar;
var $author$project$Morphir$Type$Count$none = function (a) {
	return $author$project$Morphir$Type$Count$Count(
		function (counter) {
			return _Utils_Tuple2(counter, a);
		});
};
var $author$project$Morphir$Type$Count$one = function (f) {
	return $author$project$Morphir$Type$Count$Count(
		function (counter) {
			return _Utils_Tuple2(
				counter + 1,
				f(counter));
		});
};
var $author$project$Morphir$Type$MetaType$variableByIndex = function (i) {
	return i;
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType = F3(
	function (ir, varToMeta, tpe) {
		switch (tpe.$) {
			case 'Variable':
				var varName = tpe.b;
				return $author$project$Morphir$Type$Count$one(
					function (counter) {
						return $author$project$Morphir$Type$MetaType$metaVar(
							A2(
								$elm$core$Maybe$withDefault,
								$author$project$Morphir$Type$MetaType$variableByIndex(counter),
								A2($elm$core$Dict$get, varName, varToMeta)));
					});
			case 'Reference':
				var fQName = tpe.b;
				var args = tpe.c;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (metaArgs) {
						return A2(
							$elm$core$Result$withDefault,
							$author$project$Morphir$Type$Count$none(
								A2($author$project$Morphir$Type$MetaType$metaRef, fQName, metaArgs)),
							A2(
								$elm$core$Result$map,
								function (aliasedType) {
									return A2(
										$author$project$Morphir$Type$Count$map,
										A2($author$project$Morphir$Type$MetaType$metaAlias, fQName, metaArgs),
										A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, varToMeta, aliasedType));
								},
								A3($author$project$Morphir$Type$MetaTypeMapping$lookupAliasedType, ir, fQName, args)));
					},
					$author$project$Morphir$Type$Count$all(
						A2(
							$elm$core$List$map,
							A2($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, varToMeta),
							args)));
			case 'Tuple':
				var elemTypes = tpe.b;
				return A2(
					$author$project$Morphir$Type$Count$map,
					$author$project$Morphir$Type$MetaType$metaTuple,
					$author$project$Morphir$Type$Count$all(
						A2(
							$elm$core$List$map,
							A2($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, varToMeta),
							elemTypes)));
			case 'Record':
				var fieldTypes = tpe.b;
				return A3(
					$author$project$Morphir$Type$Count$map2,
					$author$project$Morphir$Type$MetaType$metaClosedRecord,
					$author$project$Morphir$Type$Count$one($author$project$Morphir$Type$MetaType$variableByIndex),
					A2(
						$author$project$Morphir$Type$Count$map,
						$elm$core$Dict$fromList,
						$author$project$Morphir$Type$Count$all(
							A2(
								$elm$core$List$map,
								function (field) {
									return A2(
										$author$project$Morphir$Type$Count$map,
										$elm$core$Tuple$pair(field.name),
										A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, varToMeta, field.tpe));
								},
								fieldTypes))));
			case 'ExtensibleRecord':
				var subjectName = tpe.b;
				var fieldTypes = tpe.c;
				return A3(
					$author$project$Morphir$Type$Count$map2,
					$author$project$Morphir$Type$MetaType$metaOpenRecord,
					$author$project$Morphir$Type$Count$one(
						function (counter) {
							return A2(
								$elm$core$Maybe$withDefault,
								$author$project$Morphir$Type$MetaType$variableByIndex(counter),
								A2($elm$core$Dict$get, subjectName, varToMeta));
						}),
					A2(
						$author$project$Morphir$Type$Count$map,
						$elm$core$Dict$fromList,
						$author$project$Morphir$Type$Count$all(
							A2(
								$elm$core$List$map,
								function (field) {
									return A2(
										$author$project$Morphir$Type$Count$map,
										$elm$core$Tuple$pair(field.name),
										A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, varToMeta, field.tpe));
								},
								fieldTypes))));
			case 'Function':
				var argType = tpe.b;
				var returnType = tpe.c;
				return A3(
					$author$project$Morphir$Type$Count$map2,
					$author$project$Morphir$Type$MetaType$metaFun,
					A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, varToMeta, argType),
					A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, varToMeta, returnType));
			default:
				return $author$project$Morphir$Type$Count$none($author$project$Morphir$Type$MetaType$metaUnit);
		}
	});
var $author$project$Morphir$Type$Class$Number = {$: 'Number'};
var $author$project$Morphir$Type$MetaType$charType = A2(
	$author$project$Morphir$Type$MetaType$metaRef,
	A3($author$project$Morphir$IR$FQName$fqn, 'Morphir.SDK', 'Char', 'Char'),
	_List_Nil);
var $author$project$Morphir$Type$Constraint$Class = F3(
	function (a, b, c) {
		return {$: 'Class', a: a, b: b, c: c};
	});
var $author$project$Morphir$Type$Constraint$class = F2(
	function (metaType, cls) {
		return A3(
			$author$project$Morphir$Type$Constraint$Class,
			$author$project$Morphir$Type$MetaType$variables(metaType),
			metaType,
			cls);
	});
var $author$project$Morphir$Type$Constraint$Equality = F3(
	function (a, b, c) {
		return {$: 'Equality', a: a, b: b, c: c};
	});
var $author$project$Morphir$Type$Constraint$equality = F2(
	function (metaType1, metaType2) {
		return A3(
			$author$project$Morphir$Type$Constraint$Equality,
			A2(
				$elm$core$Set$union,
				$author$project$Morphir$Type$MetaType$variables(metaType1),
				$author$project$Morphir$Type$MetaType$variables(metaType2)),
			metaType1,
			metaType2);
	});
var $author$project$Morphir$Type$MetaType$floatType = A2(
	$author$project$Morphir$Type$MetaType$metaRef,
	A3($author$project$Morphir$IR$FQName$fqn, 'Morphir.SDK', 'Basics', 'Float'),
	_List_Nil);
var $author$project$Morphir$Type$ConstraintSet$fromList = function (list) {
	return A3($elm$core$List$foldl, $author$project$Morphir$Type$ConstraintSet$insert, $author$project$Morphir$Type$ConstraintSet$empty, list);
};
var $author$project$Morphir$Type$ConstraintSet$singleton = function (constraint) {
	return $author$project$Morphir$Type$ConstraintSet$fromList(
		_List_fromArray(
			[constraint]));
};
var $author$project$Morphir$Type$MetaType$stringType = A2(
	$author$project$Morphir$Type$MetaType$metaRef,
	A3($author$project$Morphir$IR$FQName$fqn, 'Morphir.SDK', 'String', 'String'),
	_List_Nil);
var $author$project$Morphir$Type$Infer$constrainLiteral = F2(
	function (thisTypeVar, literalValue) {
		var expectExactType = function (expectedType) {
			return $author$project$Morphir$Type$ConstraintSet$singleton(
				A2(
					$author$project$Morphir$Type$Constraint$equality,
					$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
					expectedType));
		};
		switch (literalValue.$) {
			case 'BoolLiteral':
				return expectExactType($author$project$Morphir$Type$MetaType$boolType);
			case 'CharLiteral':
				return expectExactType($author$project$Morphir$Type$MetaType$charType);
			case 'StringLiteral':
				return expectExactType($author$project$Morphir$Type$MetaType$stringType);
			case 'WholeNumberLiteral':
				return $author$project$Morphir$Type$ConstraintSet$singleton(
					A2(
						$author$project$Morphir$Type$Constraint$class,
						$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
						$author$project$Morphir$Type$Class$Number));
			case 'FloatLiteral':
				return expectExactType($author$project$Morphir$Type$MetaType$floatType);
			default:
				return $author$project$Morphir$Type$ConstraintSet$singleton(
					A2(
						$author$project$Morphir$Type$Constraint$class,
						$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
						$author$project$Morphir$Type$Class$Number));
		}
	});
var $author$project$Morphir$Type$MetaType$listType = function (itemType) {
	return A2(
		$author$project$Morphir$Type$MetaType$metaRef,
		A3($author$project$Morphir$IR$FQName$fqn, 'Morphir.SDK', 'List', 'List'),
		_List_fromArray(
			[itemType]));
};
var $author$project$Morphir$Type$MetaTypeMapping$CouldNotFindConstructor = function (a) {
	return {$: 'CouldNotFindConstructor', a: a};
};
var $author$project$Morphir$Type$MetaTypeMapping$concreteVarsToMetaVars = function (variables) {
	return A2(
		$author$project$Morphir$Type$Count$map,
		$elm$core$Dict$fromList,
		$author$project$Morphir$Type$Count$all(
			A2(
				$elm$core$List$map,
				function (varName) {
					return $author$project$Morphir$Type$Count$one(
						function (counter) {
							return _Utils_Tuple2(
								varName,
								$author$project$Morphir$Type$MetaType$variableByIndex(counter));
						});
				},
				$elm$core$Set$toList(variables))));
};
var $author$project$Morphir$Type$MetaTypeMapping$ctorToMetaType = F5(
	function (ir, ctorFQName, paramNames, ctorArgs, maybeActualType) {
		var argVariables = A3(
			$elm$core$List$foldl,
			$elm$core$Set$union,
			$elm$core$Set$empty,
			A2($elm$core$List$map, $author$project$Morphir$IR$Type$collectVariables, ctorArgs));
		var allVariables = A2(
			$elm$core$Set$union,
			argVariables,
			$elm$core$Set$fromList(paramNames));
		return A2(
			$author$project$Morphir$Type$Count$andThen,
			function (varToMeta) {
				var recurse = function (cargs) {
					if (!cargs.b) {
						return $author$project$Morphir$Type$Count$one(
							function (counter) {
								var params = A2(
									$elm$core$List$map,
									function (paramName) {
										return $author$project$Morphir$Type$MetaType$metaVar(
											A2(
												$elm$core$Maybe$withDefault,
												$author$project$Morphir$Type$MetaType$variableByIndex(counter),
												A2($elm$core$Dict$get, paramName, varToMeta)));
									},
									paramNames);
								if (maybeActualType.$ === 'Just') {
									var actualType = maybeActualType.a;
									return A3($author$project$Morphir$Type$MetaType$metaAlias, ctorFQName, params, actualType);
								} else {
									return A2($author$project$Morphir$Type$MetaType$metaRef, ctorFQName, params);
								}
							});
					} else {
						var firstCtorArg = cargs.a;
						var restOfCtorArgs = cargs.b;
						return A3(
							$author$project$Morphir$Type$Count$map2,
							$author$project$Morphir$Type$MetaType$metaFun,
							A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, varToMeta, firstCtorArg),
							recurse(restOfCtorArgs));
					}
				};
				return recurse(ctorArgs);
			},
			$author$project$Morphir$Type$MetaTypeMapping$concreteVarsToMetaVars(allVariables));
	});
var $author$project$Morphir$IR$lookupTypeConstructor = F2(
	function (fqn, ir) {
		return A2($elm$core$Dict$get, fqn, ir.typeConstructors);
	});
var $author$project$Morphir$Type$MetaTypeMapping$lookupConstructor = F2(
	function (ir, ctorFQN) {
		var _v0 = A2($author$project$Morphir$IR$lookupTypeConstructor, ctorFQN, ir);
		if (_v0.$ === 'Just') {
			var _v1 = _v0.a;
			var typeFQN = _v1.a;
			var paramNames = _v1.b;
			var ctorArgs = _v1.c;
			return $elm$core$Result$Ok(
				A5(
					$author$project$Morphir$Type$MetaTypeMapping$ctorToMetaType,
					ir,
					typeFQN,
					paramNames,
					A2($elm$core$List$map, $elm$core$Tuple$second, ctorArgs),
					$elm$core$Maybe$Nothing));
		} else {
			var _v2 = A2($author$project$Morphir$IR$lookupTypeSpecification, ctorFQN, ir);
			if (((_v2.$ === 'Just') && (_v2.a.$ === 'TypeAliasSpecification')) && (_v2.a.b.$ === 'Record')) {
				var _v3 = _v2.a;
				var paramNames = _v3.a;
				var recordType = _v3.b;
				var fields = recordType.b;
				return $elm$core$Result$Ok(
					A2(
						$author$project$Morphir$Type$Count$andThen,
						function (recordMetaType) {
							return A5(
								$author$project$Morphir$Type$MetaTypeMapping$ctorToMetaType,
								ir,
								ctorFQN,
								paramNames,
								A2(
									$elm$core$List$map,
									function ($) {
										return $.tpe;
									},
									fields),
								$elm$core$Maybe$Just(recordMetaType));
						},
						A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, $elm$core$Dict$empty, recordType)));
			} else {
				return $elm$core$Result$Err(
					$author$project$Morphir$Type$MetaTypeMapping$CouldNotFindConstructor(ctorFQN));
			}
		}
	});
var $author$project$Morphir$IR$Value$patternAttribute = function (p) {
	switch (p.$) {
		case 'WildcardPattern':
			var a = p.a;
			return a;
		case 'AsPattern':
			var a = p.a;
			return a;
		case 'TuplePattern':
			var a = p.a;
			return a;
		case 'ConstructorPattern':
			var a = p.a;
			return a;
		case 'EmptyListPattern':
			var a = p.a;
			return a;
		case 'HeadTailPattern':
			var a = p.a;
			return a;
		case 'LiteralPattern':
			var a = p.a;
			return a;
		default:
			var a = p.a;
			return a;
	}
};
var $author$project$Morphir$Type$Infer$metaTypeVarForPattern = function (pattern) {
	return $author$project$Morphir$Type$MetaType$metaVar(
		$author$project$Morphir$IR$Value$patternAttribute(pattern).b);
};
var $author$project$Morphir$Type$Count$oneOrReuse = F2(
	function (maybeReuse, f) {
		return $author$project$Morphir$Type$Count$Count(
			function (counter) {
				if (maybeReuse.$ === 'Just') {
					var reuse = maybeReuse.a;
					return _Utils_Tuple2(
						counter,
						f(reuse));
				} else {
					return _Utils_Tuple2(
						counter + 1,
						f(counter));
				}
			});
	});
var $author$project$Morphir$Type$Infer$patternVariable = function (pattern) {
	return $author$project$Morphir$IR$Value$patternAttribute(pattern).b;
};
var $author$project$Morphir$Type$Infer$constrainPattern = F3(
	function (ir, maybeThisTypeVar, pattern) {
		switch (pattern.$) {
			case 'WildcardPattern':
				var va = pattern.a;
				return A2(
					$author$project$Morphir$Type$Count$oneOrReuse,
					maybeThisTypeVar,
					function (index) {
						return _Utils_Tuple3(
							$elm$core$Dict$empty,
							$author$project$Morphir$IR$Value$WildcardPattern(
								_Utils_Tuple2(
									va,
									$author$project$Morphir$Type$MetaType$variableByIndex(index))),
							$author$project$Morphir$Type$ConstraintSet$empty);
					});
			case 'AsPattern':
				var va = pattern.a;
				var nestedPattern = pattern.b;
				var alias = pattern.c;
				return A2(
					$author$project$Morphir$Type$Count$map,
					function (_v1) {
						var nestedVariables = _v1.a;
						var nestedAnnotatedPattern = _v1.b;
						var nestedConstraints = _v1.c;
						return _Utils_Tuple3(
							A3(
								$elm$core$Dict$insert,
								alias,
								$author$project$Morphir$Type$Infer$patternVariable(nestedAnnotatedPattern),
								nestedVariables),
							A3(
								$author$project$Morphir$IR$Value$AsPattern,
								_Utils_Tuple2(
									va,
									$author$project$Morphir$Type$Infer$patternVariable(nestedAnnotatedPattern)),
								nestedAnnotatedPattern,
								alias),
							nestedConstraints);
					},
					A3($author$project$Morphir$Type$Infer$constrainPattern, ir, maybeThisTypeVar, nestedPattern));
			case 'TuplePattern':
				var va = pattern.a;
				var elemPatterns = pattern.b;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (elemResults) {
						return $author$project$Morphir$Type$Count$one(
							function (index) {
								var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(index);
								var elemsVariables = A2(
									$elm$core$List$map,
									function (_v4) {
										var v = _v4.a;
										return v;
									},
									elemResults);
								var elemsConstraints = A2(
									$elm$core$List$map,
									function (_v3) {
										var c = _v3.c;
										return c;
									},
									elemResults);
								var elemAnnotatedPatterns = A2(
									$elm$core$List$map,
									function (_v2) {
										var p = _v2.b;
										return p;
									},
									elemResults);
								var tupleConstraint = $author$project$Morphir$Type$ConstraintSet$singleton(
									A2(
										$author$project$Morphir$Type$Constraint$equality,
										$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
										$author$project$Morphir$Type$MetaType$metaTuple(
											A2($elm$core$List$map, $author$project$Morphir$Type$Infer$metaTypeVarForPattern, elemAnnotatedPatterns))));
								return _Utils_Tuple3(
									A3($elm$core$List$foldl, $elm$core$Dict$union, $elm$core$Dict$empty, elemsVariables),
									A2(
										$author$project$Morphir$IR$Value$TuplePattern,
										_Utils_Tuple2(va, thisTypeVar),
										elemAnnotatedPatterns),
									$author$project$Morphir$Type$ConstraintSet$concat(
										A2($elm$core$List$cons, tupleConstraint, elemsConstraints)));
							});
					},
					$author$project$Morphir$Type$Count$all(
						A2(
							$elm$core$List$map,
							A2($author$project$Morphir$Type$Infer$constrainPattern, ir, $elm$core$Maybe$Nothing),
							elemPatterns)));
			case 'ConstructorPattern':
				var va = pattern.a;
				var fQName = pattern.b;
				var argPatterns = pattern.c;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (argPatternResults) {
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							$elm$core$Basics$identity,
							A3(
								$author$project$Morphir$Type$Count$map2,
								F2(
									function (thisTypeVar, ctorTypeVar) {
										var resultType = function (t) {
											resultType:
											while (true) {
												if (t.$ === 'MetaFun') {
													var a = t.b;
													var r = t.c;
													var $temp$t = r;
													t = $temp$t;
													continue resultType;
												} else {
													return t;
												}
											}
										};
										var customTypeConstraintCounter = A2(
											$elm$core$Result$withDefault,
											$author$project$Morphir$Type$Count$none($author$project$Morphir$Type$ConstraintSet$empty),
											A2(
												$elm$core$Result$map,
												function (ctorFunTypeCounter) {
													return A2(
														$author$project$Morphir$Type$Count$map,
														function (ctorFunType) {
															return $author$project$Morphir$Type$ConstraintSet$fromList(
																_List_fromArray(
																	[
																		A2(
																		$author$project$Morphir$Type$Constraint$equality,
																		$author$project$Morphir$Type$MetaType$metaVar(ctorTypeVar),
																		ctorFunType),
																		A2(
																		$author$project$Morphir$Type$Constraint$equality,
																		$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
																		resultType(ctorFunType))
																	]));
														},
														ctorFunTypeCounter);
												},
												A2($author$project$Morphir$Type$MetaTypeMapping$lookupConstructor, ir, fQName)));
										var ctorType = function (args) {
											if (!args.b) {
												return $author$project$Morphir$Type$MetaType$metaVar(thisTypeVar);
											} else {
												var firstArg = args.a;
												var restOfArgs = args.b;
												return A2(
													$author$project$Morphir$Type$MetaType$metaFun,
													firstArg,
													ctorType(restOfArgs));
											}
										};
										var argVariables = A2(
											$elm$core$List$map,
											function (_v9) {
												var v = _v9.a;
												return v;
											},
											argPatternResults);
										var argConstraints = A2(
											$elm$core$List$map,
											function (_v8) {
												var c = _v8.c;
												return c;
											},
											argPatternResults);
										var argAnnotatedPatterns = A2(
											$elm$core$List$map,
											function (_v7) {
												var p = _v7.b;
												return p;
											},
											argPatternResults);
										var ctorFunConstraint = $author$project$Morphir$Type$ConstraintSet$singleton(
											A2(
												$author$project$Morphir$Type$Constraint$equality,
												$author$project$Morphir$Type$MetaType$metaVar(ctorTypeVar),
												ctorType(
													A2($elm$core$List$map, $author$project$Morphir$Type$Infer$metaTypeVarForPattern, argAnnotatedPatterns))));
										return A2(
											$author$project$Morphir$Type$Count$map,
											function (customTypeConstraint) {
												return _Utils_Tuple3(
													A3($elm$core$List$foldl, $elm$core$Dict$union, $elm$core$Dict$empty, argVariables),
													A3(
														$author$project$Morphir$IR$Value$ConstructorPattern,
														_Utils_Tuple2(va, thisTypeVar),
														fQName,
														argAnnotatedPatterns),
													$author$project$Morphir$Type$ConstraintSet$concat(
														A2(
															$elm$core$List$cons,
															customTypeConstraint,
															A2($elm$core$List$cons, ctorFunConstraint, argConstraints))));
											},
											customTypeConstraintCounter);
									}),
								A2(
									$author$project$Morphir$Type$Count$oneOrReuse,
									maybeThisTypeVar,
									function (thisIndex) {
										return $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
									}),
								$author$project$Morphir$Type$Count$one(
									function (ctorIndex) {
										return $author$project$Morphir$Type$MetaType$variableByIndex(ctorIndex);
									})));
					},
					$author$project$Morphir$Type$Count$all(
						A2(
							$elm$core$List$map,
							A2($author$project$Morphir$Type$Infer$constrainPattern, ir, $elm$core$Maybe$Nothing),
							argPatterns)));
			case 'EmptyListPattern':
				var va = pattern.a;
				return A3(
					$author$project$Morphir$Type$Count$map2,
					F2(
						function (thisTypeVar, itemType) {
							var listType = $author$project$Morphir$Type$MetaType$listType(itemType);
							return _Utils_Tuple3(
								$elm$core$Dict$empty,
								$author$project$Morphir$IR$Value$EmptyListPattern(
									_Utils_Tuple2(va, thisTypeVar)),
								$author$project$Morphir$Type$ConstraintSet$singleton(
									A2(
										$author$project$Morphir$Type$Constraint$equality,
										$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
										listType)));
						}),
					A2(
						$author$project$Morphir$Type$Count$oneOrReuse,
						maybeThisTypeVar,
						function (listIndex) {
							return $author$project$Morphir$Type$MetaType$variableByIndex(listIndex);
						}),
					$author$project$Morphir$Type$Count$one(
						function (itemIndex) {
							return $author$project$Morphir$Type$MetaType$metaVar(
								$author$project$Morphir$Type$MetaType$variableByIndex(itemIndex));
						}));
			case 'HeadTailPattern':
				var va = pattern.a;
				var headPattern = pattern.b;
				var tailPattern = pattern.c;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (_v10) {
						var headVariables = _v10.a;
						var headAnnotatedPattern = _v10.b;
						var headConstraints = _v10.c;
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							function (_v11) {
								var tailVariables = _v11.a;
								var tailAnnotatedPattern = _v11.b;
								var tailConstraints = _v11.c;
								return $author$project$Morphir$Type$Count$one(
									function (thisIndex) {
										var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
										var itemType = $author$project$Morphir$Type$Infer$metaTypeVarForPattern(headAnnotatedPattern);
										var listType = $author$project$Morphir$Type$MetaType$listType(itemType);
										var thisPatternConstraints = $author$project$Morphir$Type$ConstraintSet$fromList(
											_List_fromArray(
												[
													A2(
													$author$project$Morphir$Type$Constraint$equality,
													$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
													listType),
													A2(
													$author$project$Morphir$Type$Constraint$equality,
													$author$project$Morphir$Type$Infer$metaTypeVarForPattern(tailAnnotatedPattern),
													listType)
												]));
										return _Utils_Tuple3(
											A2($elm$core$Dict$union, headVariables, tailVariables),
											A3(
												$author$project$Morphir$IR$Value$HeadTailPattern,
												_Utils_Tuple2(va, thisTypeVar),
												headAnnotatedPattern,
												tailAnnotatedPattern),
											$author$project$Morphir$Type$ConstraintSet$concat(
												_List_fromArray(
													[headConstraints, tailConstraints, thisPatternConstraints])));
									});
							},
							A3($author$project$Morphir$Type$Infer$constrainPattern, ir, $elm$core$Maybe$Nothing, tailPattern));
					},
					A3($author$project$Morphir$Type$Infer$constrainPattern, ir, $elm$core$Maybe$Nothing, headPattern));
			case 'LiteralPattern':
				var va = pattern.a;
				var literalValue = pattern.b;
				return A2(
					$author$project$Morphir$Type$Count$oneOrReuse,
					maybeThisTypeVar,
					function (thisIndex) {
						var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
						return _Utils_Tuple3(
							$elm$core$Dict$empty,
							A2(
								$author$project$Morphir$IR$Value$LiteralPattern,
								_Utils_Tuple2(va, thisTypeVar),
								literalValue),
							A2($author$project$Morphir$Type$Infer$constrainLiteral, thisTypeVar, literalValue));
					});
			default:
				var va = pattern.a;
				return A2(
					$author$project$Morphir$Type$Count$oneOrReuse,
					maybeThisTypeVar,
					function (thisIndex) {
						var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
						return _Utils_Tuple3(
							$elm$core$Dict$empty,
							$author$project$Morphir$IR$Value$UnitPattern(
								_Utils_Tuple2(va, thisTypeVar)),
							$author$project$Morphir$Type$ConstraintSet$singleton(
								A2(
									$author$project$Morphir$Type$Constraint$equality,
									$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
									$author$project$Morphir$Type$MetaType$metaUnit)));
					});
		}
	});
var $author$project$Morphir$Type$MetaTypeMapping$CouldNotFindValue = function (a) {
	return {$: 'CouldNotFindValue', a: a};
};
var $author$project$Morphir$IR$lookupValueSpecification = F2(
	function (fqn, ir) {
		return A2($elm$core$Dict$get, fqn, ir.valueSpecifications);
	});
var $author$project$Morphir$Type$MetaTypeMapping$valueSpecToMetaType = F2(
	function (ir, valueSpec) {
		var specToFunctionType = F2(
			function (argTypes, returnType) {
				if (!argTypes.b) {
					return returnType;
				} else {
					var firstArg = argTypes.a;
					var restOfArgs = argTypes.b;
					return A3(
						$author$project$Morphir$IR$Type$Function,
						_Utils_Tuple0,
						firstArg,
						A2(specToFunctionType, restOfArgs, returnType));
				}
			});
		var functionType = A2(
			specToFunctionType,
			A2($elm$core$List$map, $elm$core$Tuple$second, valueSpec.inputs),
			valueSpec.output);
		return A2(
			$author$project$Morphir$Type$Count$andThen,
			function (varToMeta) {
				return A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, varToMeta, functionType);
			},
			$author$project$Morphir$Type$MetaTypeMapping$concreteVarsToMetaVars(
				$author$project$Morphir$IR$Type$collectVariables(functionType)));
	});
var $author$project$Morphir$Type$MetaTypeMapping$lookupValue = F2(
	function (ir, valueFQN) {
		return A2(
			$elm$core$Result$fromMaybe,
			$author$project$Morphir$Type$MetaTypeMapping$CouldNotFindValue(valueFQN),
			A2(
				$elm$core$Maybe$map,
				$author$project$Morphir$Type$MetaTypeMapping$valueSpecToMetaType(ir),
				A2($author$project$Morphir$IR$lookupValueSpecification, valueFQN, ir)));
	});
var $author$project$Morphir$IR$Value$valueAttribute = function (v) {
	switch (v.$) {
		case 'Literal':
			var a = v.a;
			return a;
		case 'Constructor':
			var a = v.a;
			return a;
		case 'Tuple':
			var a = v.a;
			return a;
		case 'List':
			var a = v.a;
			return a;
		case 'Record':
			var a = v.a;
			return a;
		case 'Variable':
			var a = v.a;
			return a;
		case 'Reference':
			var a = v.a;
			return a;
		case 'Field':
			var a = v.a;
			return a;
		case 'FieldFunction':
			var a = v.a;
			return a;
		case 'Apply':
			var a = v.a;
			return a;
		case 'Lambda':
			var a = v.a;
			return a;
		case 'LetDefinition':
			var a = v.a;
			return a;
		case 'LetRecursion':
			var a = v.a;
			return a;
		case 'Destructure':
			var a = v.a;
			return a;
		case 'IfThenElse':
			var a = v.a;
			return a;
		case 'PatternMatch':
			var a = v.a;
			return a;
		case 'UpdateRecord':
			var a = v.a;
			return a;
		default:
			var a = v.a;
			return a;
	}
};
var $author$project$Morphir$Type$Infer$metaTypeVarForValue = function (value) {
	return $author$project$Morphir$Type$MetaType$metaVar(
		$author$project$Morphir$IR$Value$valueAttribute(value).b);
};
var $author$project$Morphir$Type$Count$three = function (f) {
	return $author$project$Morphir$Type$Count$Count(
		function (counter) {
			return _Utils_Tuple2(
				counter + 3,
				A3(f, counter, counter + 1, counter + 2));
		});
};
var $author$project$Morphir$Type$Count$two = function (f) {
	return $author$project$Morphir$Type$Count$Count(
		function (counter) {
			return _Utils_Tuple2(
				counter + 2,
				A2(f, counter, counter + 1));
		});
};
var $author$project$Morphir$Type$Infer$constrainDefinition = F3(
	function (ir, vars, def) {
		var outputTypeVars = $author$project$Morphir$IR$Type$collectVariables(def.outputType);
		var inputTypeVars = A3(
			$elm$core$List$foldl,
			$elm$core$Set$union,
			$elm$core$Set$empty,
			A2(
				$elm$core$List$map,
				function (_v69) {
					var declaredType = _v69.c;
					return $author$project$Morphir$IR$Type$collectVariables(declaredType);
				},
				def.inputTypes));
		var countTypeVarToMetaTypeVar = A2(
			$author$project$Morphir$Type$Count$map,
			$elm$core$Dict$fromList,
			$author$project$Morphir$Type$Count$all(
				A2(
					$elm$core$List$map,
					function (varName) {
						return $author$project$Morphir$Type$Count$one(
							function (varIndex) {
								return _Utils_Tuple2(
									varName,
									$author$project$Morphir$Type$MetaType$variableByIndex(varIndex));
							});
					},
					$elm$core$Set$toList(
						A2($elm$core$Set$union, inputTypeVars, outputTypeVars)))));
		return A2(
			$author$project$Morphir$Type$Count$andThen,
			function (typeVarToMetaTypeVar) {
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (argResults) {
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							function (outputMetaType) {
								var inputVars = $elm$core$Dict$fromList(
									A2(
										$elm$core$List$map,
										function (_v67) {
											var name = _v67.a;
											var _v68 = _v67.b;
											var argTypeVar = _v68.b;
											return _Utils_Tuple2(name, argTypeVar);
										},
										argResults));
								return A2(
									$author$project$Morphir$Type$Count$andThen,
									function (_v58) {
										var annotatedBody = _v58.a;
										var bodyConstraints = _v58.b;
										return $author$project$Morphir$Type$Count$one(
											function (defIndex) {
												var outputConstraint = $author$project$Morphir$Type$ConstraintSet$singleton(
													A2(
														$author$project$Morphir$Type$Constraint$equality,
														$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedBody),
														outputMetaType));
												var inputConstraints = $author$project$Morphir$Type$ConstraintSet$concat(
													A2(
														$elm$core$List$map,
														function (_v65) {
															var _v66 = _v65.c;
															var argConstraints = _v66.b;
															return argConstraints;
														},
														argResults));
												var defTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(defIndex);
												var defType = F2(
													function (argTypes, returnType) {
														if (!argTypes.b) {
															return returnType;
														} else {
															var firstArg = argTypes.a;
															var restOfArgs = argTypes.b;
															return A2(
																$author$project$Morphir$Type$MetaType$metaFun,
																firstArg,
																A2(defType, restOfArgs, returnType));
														}
													});
												var annotatedInputTypes = A2(
													$elm$core$List$map,
													function (_v62) {
														var argName = _v62.a;
														var _v63 = _v62.b;
														var va = _v63.a;
														var argTypeVar = _v63.b;
														var _v64 = _v62.c;
														var declaredArgType = _v64.a;
														return _Utils_Tuple3(
															argName,
															_Utils_Tuple2(va, argTypeVar),
															declaredArgType);
													},
													argResults);
												var defConstraints = $author$project$Morphir$Type$ConstraintSet$fromList(
													_List_fromArray(
														[
															A2(
															$author$project$Morphir$Type$Constraint$equality,
															$author$project$Morphir$Type$MetaType$metaVar(defTypeVar),
															A2(
																defType,
																A2(
																	$elm$core$List$map,
																	function (_v60) {
																		var _v61 = _v60.b;
																		var argTypeVar = _v61.b;
																		return $author$project$Morphir$Type$MetaType$metaVar(argTypeVar);
																	},
																	annotatedInputTypes),
																$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedBody)))
														]));
												return _Utils_Tuple3(
													defTypeVar,
													{body: annotatedBody, inputTypes: annotatedInputTypes, outputType: def.outputType},
													_Utils_Tuple2(
														$author$project$Morphir$Type$ConstraintSet$concat(
															_List_fromArray(
																[bodyConstraints, inputConstraints, outputConstraint, defConstraints])),
														typeVarToMetaTypeVar));
											});
									},
									A4(
										$author$project$Morphir$Type$Infer$constrainValue,
										ir,
										A2($elm$core$Dict$union, inputVars, vars),
										$elm$core$Maybe$Nothing,
										def.body));
							},
							A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, typeVarToMetaTypeVar, def.outputType));
					},
					$author$project$Morphir$Type$Count$all(
						A2(
							$elm$core$List$map,
							function (_v57) {
								var argName = _v57.a;
								var va = _v57.b;
								var declaredArgType = _v57.c;
								return A3(
									$author$project$Morphir$Type$Count$map2,
									F2(
										function (argTypeVar, argMetaType) {
											return _Utils_Tuple3(
												argName,
												_Utils_Tuple2(va, argTypeVar),
												_Utils_Tuple2(
													declaredArgType,
													$author$project$Morphir$Type$ConstraintSet$singleton(
														A2(
															$author$project$Morphir$Type$Constraint$equality,
															$author$project$Morphir$Type$MetaType$metaVar(argTypeVar),
															argMetaType))));
										}),
									$author$project$Morphir$Type$Count$one($author$project$Morphir$Type$MetaType$variableByIndex),
									A3($author$project$Morphir$Type$MetaTypeMapping$concreteTypeToMetaType, ir, typeVarToMetaTypeVar, declaredArgType));
							},
							def.inputTypes)));
			},
			countTypeVarToMetaTypeVar);
	});
var $author$project$Morphir$Type$Infer$constrainValue = F4(
	function (ir, vars, maybeThisTypeVar, annotatedValue) {
		switch (annotatedValue.$) {
			case 'Literal':
				var va = annotatedValue.a;
				var literalValue = annotatedValue.b;
				return A2(
					$author$project$Morphir$Type$Count$oneOrReuse,
					maybeThisTypeVar,
					function (thisIndex) {
						var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
						return _Utils_Tuple2(
							A2(
								$author$project$Morphir$IR$Value$Literal,
								_Utils_Tuple2(va, thisTypeVar),
								literalValue),
							A2($author$project$Morphir$Type$Infer$constrainLiteral, thisTypeVar, literalValue));
					});
			case 'Constructor':
				var va = annotatedValue.a;
				var fQName = annotatedValue.b;
				var _v1 = A2($author$project$Morphir$Type$MetaTypeMapping$lookupConstructor, ir, fQName);
				if (_v1.$ === 'Ok') {
					var countedConstructorType = _v1.a;
					return A2(
						$author$project$Morphir$Type$Count$andThen,
						function (referenceType) {
							return A2(
								$author$project$Morphir$Type$Count$oneOrReuse,
								maybeThisTypeVar,
								function (thisIndex) {
									var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
									return _Utils_Tuple2(
										A2(
											$author$project$Morphir$IR$Value$Constructor,
											_Utils_Tuple2(va, thisTypeVar),
											fQName),
										$author$project$Morphir$Type$ConstraintSet$singleton(
											A2(
												$author$project$Morphir$Type$Constraint$equality,
												$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
												referenceType)));
								});
						},
						countedConstructorType);
				} else {
					return A2(
						$author$project$Morphir$Type$Count$oneOrReuse,
						maybeThisTypeVar,
						function (thisIndex) {
							var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
							return _Utils_Tuple2(
								A2(
									$author$project$Morphir$IR$Value$Constructor,
									_Utils_Tuple2(va, thisTypeVar),
									fQName),
								$author$project$Morphir$Type$ConstraintSet$empty);
						});
				}
			case 'Tuple':
				var va = annotatedValue.a;
				var elems = annotatedValue.b;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (elemResults) {
						return A2(
							$author$project$Morphir$Type$Count$oneOrReuse,
							maybeThisTypeVar,
							function (thisIndex) {
								var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
								var elemsConstraints = A2(
									$elm$core$List$map,
									function (_v3) {
										var elemConstraints = _v3.b;
										return elemConstraints;
									},
									elemResults);
								var annotatedElems = A2(
									$elm$core$List$map,
									function (_v2) {
										var annotatedElem = _v2.a;
										return annotatedElem;
									},
									elemResults);
								var tupleConstraint = $author$project$Morphir$Type$ConstraintSet$singleton(
									A2(
										$author$project$Morphir$Type$Constraint$equality,
										$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
										$author$project$Morphir$Type$MetaType$metaTuple(
											A2($elm$core$List$map, $author$project$Morphir$Type$Infer$metaTypeVarForValue, annotatedElems))));
								return _Utils_Tuple2(
									A2(
										$author$project$Morphir$IR$Value$Tuple,
										_Utils_Tuple2(va, thisTypeVar),
										annotatedElems),
									$author$project$Morphir$Type$ConstraintSet$concat(
										A2($elm$core$List$cons, tupleConstraint, elemsConstraints)));
							});
					},
					$author$project$Morphir$Type$Count$all(
						A2(
							$elm$core$List$map,
							A3($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing),
							elems)));
			case 'List':
				var va = annotatedValue.a;
				var items = annotatedValue.b;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					$elm$core$Basics$identity,
					A2(
						$author$project$Morphir$Type$Count$andThen,
						$elm$core$Basics$identity,
						A2(
							$author$project$Morphir$Type$Count$oneOrReuse,
							maybeThisTypeVar,
							function (thisIndex) {
								var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
								return $author$project$Morphir$Type$Count$one(
									function (itemIndex) {
										var itemTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(itemIndex);
										var itemType = $author$project$Morphir$Type$MetaType$metaVar(itemTypeVar);
										return A2(
											$author$project$Morphir$Type$Count$map,
											function (itemResults) {
												var listConstraint = A2(
													$author$project$Morphir$Type$Constraint$equality,
													$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
													$author$project$Morphir$Type$MetaType$listType(itemType));
												var itemsConstraints = $author$project$Morphir$Type$ConstraintSet$concat(
													A2(
														$elm$core$List$map,
														function (_v5) {
															var annotatedItem = _v5.a;
															var itemConstraints = _v5.b;
															return A2(
																$author$project$Morphir$Type$ConstraintSet$insert,
																A2(
																	$author$project$Morphir$Type$Constraint$equality,
																	itemType,
																	$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedItem)),
																itemConstraints);
														},
														itemResults));
												var annotatedItems = A2(
													$elm$core$List$map,
													function (_v4) {
														var annotatedItem = _v4.a;
														return annotatedItem;
													},
													itemResults);
												return _Utils_Tuple2(
													A2(
														$author$project$Morphir$IR$Value$List,
														_Utils_Tuple2(va, thisTypeVar),
														annotatedItems),
													A2($author$project$Morphir$Type$ConstraintSet$insert, listConstraint, itemsConstraints));
											},
											$author$project$Morphir$Type$Count$all(
												A2(
													$elm$core$List$map,
													A3(
														$author$project$Morphir$Type$Infer$constrainValue,
														ir,
														vars,
														$elm$core$Maybe$Just(itemTypeVar)),
													items)));
									});
							})));
			case 'Record':
				var va = annotatedValue.a;
				var fieldValues = annotatedValue.b;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (fieldResults) {
						return $author$project$Morphir$Type$Count$two(
							F2(
								function (thisIndex, recordIndex) {
									var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
									var recordType = A2(
										$author$project$Morphir$Type$MetaType$metaClosedRecord,
										$author$project$Morphir$Type$MetaType$variableByIndex(recordIndex),
										$elm$core$Dict$fromList(
											A2(
												$elm$core$List$map,
												function (_v11) {
													var fieldName = _v11.a;
													var _v12 = _v11.b;
													var annotatedFieldValue = _v12.a;
													return _Utils_Tuple2(
														fieldName,
														$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedFieldValue));
												},
												fieldResults)));
									var recordConstraints = $author$project$Morphir$Type$ConstraintSet$singleton(
										A2(
											$author$project$Morphir$Type$Constraint$equality,
											$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
											recordType));
									var fieldConstraints = $author$project$Morphir$Type$ConstraintSet$concat(
										A2(
											$elm$core$List$map,
											function (_v9) {
												var _v10 = _v9.b;
												var fieldValueConstraints = _v10.b;
												return fieldValueConstraints;
											},
											fieldResults));
									var annotatedFieldValues = $elm$core$Dict$fromList(
										A2(
											$elm$core$List$map,
											function (_v7) {
												var fieldName = _v7.a;
												var _v8 = _v7.b;
												var annotatedFieldValue = _v8.a;
												return _Utils_Tuple2(fieldName, annotatedFieldValue);
											},
											fieldResults));
									return _Utils_Tuple2(
										A2(
											$author$project$Morphir$IR$Value$Record,
											_Utils_Tuple2(va, thisTypeVar),
											annotatedFieldValues),
										$author$project$Morphir$Type$ConstraintSet$concat(
											_List_fromArray(
												[fieldConstraints, recordConstraints])));
								}));
					},
					$author$project$Morphir$Type$Count$all(
						A2(
							$elm$core$List$map,
							function (_v6) {
								var fieldName = _v6.a;
								var fieldValue = _v6.b;
								return A2(
									$author$project$Morphir$Type$Count$map,
									$elm$core$Tuple$pair(fieldName),
									A4($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing, fieldValue));
							},
							$elm$core$Dict$toList(fieldValues))));
			case 'Variable':
				var va = annotatedValue.a;
				var varName = annotatedValue.b;
				var _v13 = A2($elm$core$Dict$get, varName, vars);
				if (_v13.$ === 'Just') {
					var varDecl = _v13.a;
					return $author$project$Morphir$Type$Count$none(
						_Utils_Tuple2(
							A2(
								$author$project$Morphir$IR$Value$Variable,
								_Utils_Tuple2(va, varDecl),
								varName),
							$author$project$Morphir$Type$ConstraintSet$empty));
				} else {
					return A2(
						$author$project$Morphir$Type$Count$oneOrReuse,
						maybeThisTypeVar,
						function (thisIndex) {
							var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
							return _Utils_Tuple2(
								A2(
									$author$project$Morphir$IR$Value$Variable,
									_Utils_Tuple2(va, thisTypeVar),
									varName),
								$author$project$Morphir$Type$ConstraintSet$empty);
						});
				}
			case 'Reference':
				var va = annotatedValue.a;
				var fQName = annotatedValue.b;
				var _v14 = A2($author$project$Morphir$Type$MetaTypeMapping$lookupValue, ir, fQName);
				if (_v14.$ === 'Ok') {
					var countedReferenceType = _v14.a;
					return A2(
						$author$project$Morphir$Type$Count$andThen,
						function (referenceType) {
							return A2(
								$author$project$Morphir$Type$Count$oneOrReuse,
								maybeThisTypeVar,
								function (thisIndex) {
									var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
									return _Utils_Tuple2(
										A2(
											$author$project$Morphir$IR$Value$Reference,
											_Utils_Tuple2(va, thisTypeVar),
											fQName),
										$author$project$Morphir$Type$ConstraintSet$singleton(
											A2(
												$author$project$Morphir$Type$Constraint$equality,
												$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
												referenceType)));
								});
						},
						countedReferenceType);
				} else {
					return A2(
						$author$project$Morphir$Type$Count$oneOrReuse,
						maybeThisTypeVar,
						function (thisIndex) {
							var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
							return _Utils_Tuple2(
								A2(
									$author$project$Morphir$IR$Value$Reference,
									_Utils_Tuple2(va, thisTypeVar),
									fQName),
								$author$project$Morphir$Type$ConstraintSet$empty);
						});
				}
			case 'Field':
				var va = annotatedValue.a;
				var subjectValue = annotatedValue.b;
				var fieldName = annotatedValue.c;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (_v15) {
						var annotatedSubjectValue = _v15.a;
						var subjectValueConstraints = _v15.b;
						return $author$project$Morphir$Type$Count$three(
							F3(
								function (thisIndex, extendsIndex, fieldIndex) {
									var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
									var fieldType = $author$project$Morphir$Type$MetaType$metaVar(
										$author$project$Morphir$Type$MetaType$variableByIndex(fieldIndex));
									var extendsVar = $author$project$Morphir$Type$MetaType$variableByIndex(extendsIndex);
									var extensibleRecordType = A2(
										$author$project$Morphir$Type$MetaType$metaOpenRecord,
										extendsVar,
										A2($elm$core$Dict$singleton, fieldName, fieldType));
									var fieldConstraints = $author$project$Morphir$Type$ConstraintSet$fromList(
										_List_fromArray(
											[
												A2(
												$author$project$Morphir$Type$Constraint$equality,
												$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedSubjectValue),
												extensibleRecordType),
												A2(
												$author$project$Morphir$Type$Constraint$equality,
												$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
												fieldType)
											]));
									var subjectConstraint = $author$project$Morphir$Type$ConstraintSet$singleton(
										A2(
											$author$project$Morphir$Type$Constraint$equality,
											$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedSubjectValue),
											extensibleRecordType));
									return _Utils_Tuple2(
										A3(
											$author$project$Morphir$IR$Value$Field,
											_Utils_Tuple2(va, thisTypeVar),
											annotatedSubjectValue,
											fieldName),
										$author$project$Morphir$Type$ConstraintSet$concat(
											_List_fromArray(
												[subjectValueConstraints, subjectConstraint, fieldConstraints])));
								}));
					},
					A4($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing, subjectValue));
			case 'FieldFunction':
				var va = annotatedValue.a;
				var fieldName = annotatedValue.b;
				return $author$project$Morphir$Type$Count$three(
					F3(
						function (thisIndex, extendsIndex, fieldIndex) {
							var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
							var fieldType = $author$project$Morphir$Type$MetaType$metaVar(
								$author$project$Morphir$Type$MetaType$variableByIndex(fieldIndex));
							var extendsVar = $author$project$Morphir$Type$MetaType$variableByIndex(extendsIndex);
							var extensibleRecordType = A2(
								$author$project$Morphir$Type$MetaType$metaOpenRecord,
								extendsVar,
								A2($elm$core$Dict$singleton, fieldName, fieldType));
							return _Utils_Tuple2(
								A2(
									$author$project$Morphir$IR$Value$FieldFunction,
									_Utils_Tuple2(va, thisTypeVar),
									fieldName),
								$author$project$Morphir$Type$ConstraintSet$singleton(
									A2(
										$author$project$Morphir$Type$Constraint$equality,
										$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
										A2($author$project$Morphir$Type$MetaType$metaFun, extensibleRecordType, fieldType))));
						}));
			case 'Apply':
				var va = annotatedValue.a;
				var funValue = annotatedValue.b;
				var argValue = annotatedValue.c;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (_v16) {
						var annotatedFunValue = _v16.a;
						var funValueConstraints = _v16.b;
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							function (_v17) {
								var annotatedArgValue = _v17.a;
								var argValueConstraints = _v17.b;
								return A2(
									$author$project$Morphir$Type$Count$oneOrReuse,
									maybeThisTypeVar,
									function (thisIndex) {
										var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
										var funType = A2(
											$author$project$Morphir$Type$MetaType$metaFun,
											$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedArgValue),
											$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar));
										var applyConstraints = $author$project$Morphir$Type$ConstraintSet$singleton(
											A2(
												$author$project$Morphir$Type$Constraint$equality,
												$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedFunValue),
												funType));
										return _Utils_Tuple2(
											A3(
												$author$project$Morphir$IR$Value$Apply,
												_Utils_Tuple2(va, thisTypeVar),
												annotatedFunValue,
												annotatedArgValue),
											$author$project$Morphir$Type$ConstraintSet$concat(
												_List_fromArray(
													[funValueConstraints, argValueConstraints, applyConstraints])));
									});
							},
							A4($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing, argValue));
					},
					A4($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing, funValue));
			case 'Lambda':
				var va = annotatedValue.a;
				var argPattern = annotatedValue.b;
				var bodyValue = annotatedValue.c;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (_v18) {
						var argPatternVariables = _v18.a;
						var annotatedArgPattern = _v18.b;
						var argPatternConstraints = _v18.c;
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							function (_v19) {
								var annotatedBodyValue = _v19.a;
								var bodyValueConstraints = _v19.b;
								return A2(
									$author$project$Morphir$Type$Count$oneOrReuse,
									maybeThisTypeVar,
									function (thisIndex) {
										var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
										var lambdaType = A2(
											$author$project$Morphir$Type$MetaType$metaFun,
											$author$project$Morphir$Type$Infer$metaTypeVarForPattern(annotatedArgPattern),
											$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedBodyValue));
										var lambdaConstraints = $author$project$Morphir$Type$ConstraintSet$singleton(
											A2(
												$author$project$Morphir$Type$Constraint$equality,
												$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
												lambdaType));
										return _Utils_Tuple2(
											A3(
												$author$project$Morphir$IR$Value$Lambda,
												_Utils_Tuple2(va, thisTypeVar),
												annotatedArgPattern,
												annotatedBodyValue),
											$author$project$Morphir$Type$ConstraintSet$concat(
												_List_fromArray(
													[lambdaConstraints, bodyValueConstraints, argPatternConstraints])));
									});
							},
							A4(
								$author$project$Morphir$Type$Infer$constrainValue,
								ir,
								A2($elm$core$Dict$union, argPatternVariables, vars),
								$elm$core$Maybe$Nothing,
								bodyValue));
					},
					A3($author$project$Morphir$Type$Infer$constrainPattern, ir, $elm$core$Maybe$Nothing, argPattern));
			case 'LetDefinition':
				var va = annotatedValue.a;
				var defName = annotatedValue.b;
				var def = annotatedValue.c;
				var inValue = annotatedValue.d;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (_v20) {
						var defVar = _v20.a;
						var annotatedDef = _v20.b;
						var _v21 = _v20.c;
						var defConstraints = _v21.a;
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							function (_v22) {
								var annotatedInValue = _v22.a;
								var inValueConstraints = _v22.b;
								return A2(
									$author$project$Morphir$Type$Count$oneOrReuse,
									maybeThisTypeVar,
									function (thisIndex) {
										var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
										var letConstraints = $author$project$Morphir$Type$ConstraintSet$singleton(
											A2(
												$author$project$Morphir$Type$Constraint$equality,
												$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
												$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedInValue)));
										var defType = F2(
											function (argTypes, returnType) {
												if (!argTypes.b) {
													return returnType;
												} else {
													var firstArg = argTypes.a;
													var restOfArgs = argTypes.b;
													return A2(
														$author$project$Morphir$Type$MetaType$metaFun,
														firstArg,
														A2(defType, restOfArgs, returnType));
												}
											});
										return _Utils_Tuple2(
											A4(
												$author$project$Morphir$IR$Value$LetDefinition,
												_Utils_Tuple2(va, thisTypeVar),
												defName,
												annotatedDef,
												annotatedInValue),
											$author$project$Morphir$Type$ConstraintSet$concat(
												_List_fromArray(
													[defConstraints, inValueConstraints, letConstraints])));
									});
							},
							A4(
								$author$project$Morphir$Type$Infer$constrainValue,
								ir,
								A3($elm$core$Dict$insert, defName, defVar, vars),
								$elm$core$Maybe$Nothing,
								inValue));
					},
					A3($author$project$Morphir$Type$Infer$constrainDefinition, ir, vars, def));
			case 'LetRecursion':
				var va = annotatedValue.a;
				var defs = annotatedValue.b;
				var inValue = annotatedValue.c;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (defResults) {
						var defVariables = $elm$core$Dict$fromList(
							A2(
								$elm$core$List$map,
								function (_v31) {
									var defName = _v31.a;
									var _v32 = _v31.b;
									var defVar = _v32.a;
									var _v33 = _v32.c;
									return _Utils_Tuple2(defName, defVar);
								},
								defResults));
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							function (_v25) {
								var annotatedInValue = _v25.a;
								var inValueConstraints = _v25.b;
								return A2(
									$author$project$Morphir$Type$Count$oneOrReuse,
									maybeThisTypeVar,
									function (thisIndex) {
										var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
										var letConstraints = $author$project$Morphir$Type$ConstraintSet$fromList(
											_List_fromArray(
												[
													A2(
													$author$project$Morphir$Type$Constraint$equality,
													$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
													$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedInValue))
												]));
										var defsConstraints = $author$project$Morphir$Type$ConstraintSet$concat(
											A2(
												$elm$core$List$map,
												function (_v28) {
													var _v29 = _v28.b;
													var _v30 = _v29.c;
													var defConstraints = _v30.a;
													return defConstraints;
												},
												defResults));
										var annotatedDefs = $elm$core$Dict$fromList(
											A2(
												$elm$core$List$map,
												function (_v26) {
													var defName = _v26.a;
													var _v27 = _v26.b;
													var annotatedDef = _v27.b;
													return _Utils_Tuple2(defName, annotatedDef);
												},
												defResults));
										return _Utils_Tuple2(
											A3(
												$author$project$Morphir$IR$Value$LetRecursion,
												_Utils_Tuple2(va, thisTypeVar),
												annotatedDefs,
												annotatedInValue),
											$author$project$Morphir$Type$ConstraintSet$concat(
												_List_fromArray(
													[defsConstraints, inValueConstraints, letConstraints])));
									});
							},
							A4(
								$author$project$Morphir$Type$Infer$constrainValue,
								ir,
								A2($elm$core$Dict$union, defVariables, vars),
								$elm$core$Maybe$Nothing,
								inValue));
					},
					$author$project$Morphir$Type$Count$all(
						A2(
							$elm$core$List$map,
							function (_v24) {
								var defName = _v24.a;
								var def = _v24.b;
								return A2(
									$author$project$Morphir$Type$Count$map,
									$elm$core$Tuple$pair(defName),
									A3($author$project$Morphir$Type$Infer$constrainDefinition, ir, vars, def));
							},
							$elm$core$Dict$toList(defs))));
			case 'Destructure':
				var va = annotatedValue.a;
				var bindPattern = annotatedValue.b;
				var bindValue = annotatedValue.c;
				var inValue = annotatedValue.d;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (_v34) {
						var bindPatternVariables = _v34.a;
						var annotatedBindPattern = _v34.b;
						var bindPatternConstraints = _v34.c;
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							function (_v35) {
								var annotatedBindValue = _v35.a;
								var bindValueConstraints = _v35.b;
								return A2(
									$author$project$Morphir$Type$Count$andThen,
									function (_v36) {
										var annotatedInValue = _v36.a;
										var inValueConstraints = _v36.b;
										return A2(
											$author$project$Morphir$Type$Count$oneOrReuse,
											maybeThisTypeVar,
											function (thisIndex) {
												var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
												var destructureConstraints = $author$project$Morphir$Type$ConstraintSet$fromList(
													_List_fromArray(
														[
															A2(
															$author$project$Morphir$Type$Constraint$equality,
															$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
															$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedInValue)),
															A2(
															$author$project$Morphir$Type$Constraint$equality,
															$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedBindValue),
															$author$project$Morphir$Type$Infer$metaTypeVarForPattern(annotatedBindPattern))
														]));
												return _Utils_Tuple2(
													A4(
														$author$project$Morphir$IR$Value$Destructure,
														_Utils_Tuple2(va, thisTypeVar),
														annotatedBindPattern,
														annotatedBindValue,
														annotatedInValue),
													$author$project$Morphir$Type$ConstraintSet$concat(
														_List_fromArray(
															[bindPatternConstraints, bindValueConstraints, inValueConstraints, destructureConstraints])));
											});
									},
									A4(
										$author$project$Morphir$Type$Infer$constrainValue,
										ir,
										A2($elm$core$Dict$union, bindPatternVariables, vars),
										$elm$core$Maybe$Nothing,
										inValue));
							},
							A4($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing, bindValue));
					},
					A3($author$project$Morphir$Type$Infer$constrainPattern, ir, $elm$core$Maybe$Nothing, bindPattern));
			case 'IfThenElse':
				var va = annotatedValue.a;
				var condition = annotatedValue.b;
				var thenBranch = annotatedValue.c;
				var elseBranch = annotatedValue.d;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					$elm$core$Basics$identity,
					A2(
						$author$project$Morphir$Type$Count$oneOrReuse,
						maybeThisTypeVar,
						function (thisIndex) {
							var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
							return A2(
								$author$project$Morphir$Type$Count$andThen,
								function (_v37) {
									var annotatedCondition = _v37.a;
									var conditionConstraints = _v37.b;
									return A2(
										$author$project$Morphir$Type$Count$andThen,
										function (_v38) {
											var annotatedThenBranch = _v38.a;
											var thenBranchConstraints = _v38.b;
											return A2(
												$author$project$Morphir$Type$Count$map,
												function (_v39) {
													var annotatedElseBranch = _v39.a;
													var elseBranchConstraints = _v39.b;
													var specificConstraints = $author$project$Morphir$Type$ConstraintSet$fromList(
														_List_fromArray(
															[
																A2(
																$author$project$Morphir$Type$Constraint$equality,
																$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedCondition),
																$author$project$Morphir$Type$MetaType$boolType),
																A2(
																$author$project$Morphir$Type$Constraint$equality,
																$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedElseBranch),
																$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedThenBranch)),
																A2(
																$author$project$Morphir$Type$Constraint$equality,
																$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
																$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedThenBranch))
															]));
													var childConstraints = _List_fromArray(
														[conditionConstraints, thenBranchConstraints, elseBranchConstraints]);
													return _Utils_Tuple2(
														A4(
															$author$project$Morphir$IR$Value$IfThenElse,
															_Utils_Tuple2(va, thisTypeVar),
															annotatedCondition,
															annotatedThenBranch,
															annotatedElseBranch),
														$author$project$Morphir$Type$ConstraintSet$concat(
															A2($elm$core$List$cons, specificConstraints, childConstraints)));
												},
												A4(
													$author$project$Morphir$Type$Infer$constrainValue,
													ir,
													vars,
													$elm$core$Maybe$Just(thisTypeVar),
													elseBranch));
										},
										A4(
											$author$project$Morphir$Type$Infer$constrainValue,
											ir,
											vars,
											$elm$core$Maybe$Just(thisTypeVar),
											thenBranch));
								},
								A4($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing, condition));
						}));
			case 'PatternMatch':
				var va = annotatedValue.a;
				var subjectValue = annotatedValue.b;
				var cases = annotatedValue.c;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (_v40) {
						var annotatedSubjectValue = _v40.a;
						var subjectValueConstraints = _v40.b;
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							$elm$core$Basics$identity,
							A2(
								$author$project$Morphir$Type$Count$oneOrReuse,
								maybeThisTypeVar,
								function (subjectIndex) {
									var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(subjectIndex);
									var patternMetaVariable = $author$project$Morphir$IR$Value$valueAttribute(annotatedSubjectValue).b;
									return A2(
										$author$project$Morphir$Type$Count$map,
										function (caseResults) {
											var thisType = $author$project$Morphir$Type$MetaType$metaVar(thisTypeVar);
											var subjectType = $author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedSubjectValue);
											var casesConstraints = A2(
												$elm$core$List$map,
												function (_v47) {
													var _v48 = _v47.a;
													var annotatedCasePattern = _v48.a;
													var casePatternConstraints = _v48.b;
													var _v49 = _v47.b;
													var annotatedCaseValue = _v49.a;
													var caseValueConstraints = _v49.b;
													var caseConstraints = $author$project$Morphir$Type$ConstraintSet$fromList(
														_List_fromArray(
															[
																A2(
																$author$project$Morphir$Type$Constraint$equality,
																subjectType,
																$author$project$Morphir$Type$Infer$metaTypeVarForPattern(annotatedCasePattern)),
																A2(
																$author$project$Morphir$Type$Constraint$equality,
																thisType,
																$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedCaseValue))
															]));
													return $author$project$Morphir$Type$ConstraintSet$concat(
														_List_fromArray(
															[casePatternConstraints, caseValueConstraints, caseConstraints]));
												},
												caseResults);
											var annotatedCases = A2(
												$elm$core$List$map,
												function (_v44) {
													var _v45 = _v44.a;
													var annotatedCasePattern = _v45.a;
													var _v46 = _v44.b;
													var annotatedCaseValue = _v46.a;
													return _Utils_Tuple2(annotatedCasePattern, annotatedCaseValue);
												},
												caseResults);
											return _Utils_Tuple2(
												A3(
													$author$project$Morphir$IR$Value$PatternMatch,
													_Utils_Tuple2(va, thisTypeVar),
													annotatedSubjectValue,
													annotatedCases),
												$author$project$Morphir$Type$ConstraintSet$concat(
													A2($elm$core$List$cons, subjectValueConstraints, casesConstraints)));
										},
										$author$project$Morphir$Type$Count$all(
											A2(
												$elm$core$List$map,
												function (_v41) {
													var casePattern = _v41.a;
													var caseValue = _v41.b;
													return A2(
														$author$project$Morphir$Type$Count$andThen,
														function (_v42) {
															var casePatternVariables = _v42.a;
															var annotatedCasePattern = _v42.b;
															var casePatternConstraints = _v42.c;
															return A2(
																$author$project$Morphir$Type$Count$map,
																function (_v43) {
																	var annotatedCaseValue = _v43.a;
																	var caseValueConstraints = _v43.b;
																	return _Utils_Tuple2(
																		_Utils_Tuple2(annotatedCasePattern, casePatternConstraints),
																		_Utils_Tuple2(annotatedCaseValue, caseValueConstraints));
																},
																A4(
																	$author$project$Morphir$Type$Infer$constrainValue,
																	ir,
																	A2($elm$core$Dict$union, casePatternVariables, vars),
																	$elm$core$Maybe$Just(thisTypeVar),
																	caseValue));
														},
														A3(
															$author$project$Morphir$Type$Infer$constrainPattern,
															ir,
															$elm$core$Maybe$Just(patternMetaVariable),
															casePattern));
												},
												cases)));
								}));
					},
					A4($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing, subjectValue));
			case 'UpdateRecord':
				var va = annotatedValue.a;
				var subjectValue = annotatedValue.b;
				var fieldValues = annotatedValue.c;
				return A2(
					$author$project$Morphir$Type$Count$andThen,
					function (_v50) {
						var annotatedSubjectValue = _v50.a;
						var subjectValueConstraints = _v50.b;
						return A2(
							$author$project$Morphir$Type$Count$andThen,
							function (fieldValueResults) {
								return $author$project$Morphir$Type$Count$two(
									F2(
										function (thisIndex, extendsIndex) {
											var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
											var fieldValueConstraints = $author$project$Morphir$Type$ConstraintSet$concat(
												A2(
													$elm$core$List$map,
													function (_v55) {
														var _v56 = _v55.b;
														var fc = _v56.b;
														return fc;
													},
													fieldValueResults));
											var extendsVar = $author$project$Morphir$Type$MetaType$variableByIndex(extendsIndex);
											var annotatedFieldValues = $elm$core$Dict$fromList(
												A2(
													$elm$core$List$map,
													function (_v53) {
														var fieldName = _v53.a;
														var _v54 = _v53.b;
														var annotatedFieldValue = _v54.a;
														return _Utils_Tuple2(fieldName, annotatedFieldValue);
													},
													fieldValueResults));
											var extensibleRecordType = A2(
												$author$project$Morphir$Type$MetaType$metaOpenRecord,
												extendsVar,
												A2(
													$elm$core$Dict$map,
													F2(
														function (_v52, annotatedFieldValue) {
															return $author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedFieldValue);
														}),
													annotatedFieldValues));
											var fieldConstraints = $author$project$Morphir$Type$ConstraintSet$fromList(
												_List_fromArray(
													[
														A2(
														$author$project$Morphir$Type$Constraint$equality,
														$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedSubjectValue),
														extensibleRecordType),
														A2(
														$author$project$Morphir$Type$Constraint$equality,
														$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
														$author$project$Morphir$Type$Infer$metaTypeVarForValue(annotatedSubjectValue))
													]));
											return _Utils_Tuple2(
												A3(
													$author$project$Morphir$IR$Value$UpdateRecord,
													_Utils_Tuple2(va, thisTypeVar),
													annotatedSubjectValue,
													annotatedFieldValues),
												$author$project$Morphir$Type$ConstraintSet$concat(
													_List_fromArray(
														[subjectValueConstraints, fieldValueConstraints, fieldConstraints])));
										}));
							},
							$author$project$Morphir$Type$Count$all(
								A2(
									$elm$core$List$map,
									function (_v51) {
										var fieldName = _v51.a;
										var fieldValue = _v51.b;
										return A2(
											$author$project$Morphir$Type$Count$map,
											$elm$core$Tuple$pair(fieldName),
											A4($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing, fieldValue));
									},
									$elm$core$Dict$toList(fieldValues))));
					},
					A4($author$project$Morphir$Type$Infer$constrainValue, ir, vars, $elm$core$Maybe$Nothing, subjectValue));
			default:
				var va = annotatedValue.a;
				return A2(
					$author$project$Morphir$Type$Count$oneOrReuse,
					maybeThisTypeVar,
					function (thisIndex) {
						var thisTypeVar = $author$project$Morphir$Type$MetaType$variableByIndex(thisIndex);
						return _Utils_Tuple2(
							$author$project$Morphir$IR$Value$Unit(
								_Utils_Tuple2(va, thisTypeVar)),
							$author$project$Morphir$Type$ConstraintSet$singleton(
								A2(
									$author$project$Morphir$Type$Constraint$equality,
									$author$project$Morphir$Type$MetaType$metaVar(thisTypeVar),
									$author$project$Morphir$Type$MetaType$metaUnit)));
					});
		}
	});
var $author$project$Morphir$Type$Solve$SolutionMap = function (a) {
	return {$: 'SolutionMap', a: a};
};
var $author$project$Morphir$Type$Solve$emptySolution = $author$project$Morphir$Type$Solve$SolutionMap($elm$core$Dict$empty);
var $author$project$Morphir$Type$Infer$UnifyError = function (a) {
	return {$: 'UnifyError', a: a};
};
var $author$project$Morphir$Type$MetaType$substituteVariable = F3(
	function (_var, replacement, original) {
		if (A2(
			$elm$core$Set$member,
			_var,
			$author$project$Morphir$Type$MetaType$variables(original))) {
			switch (original.$) {
				case 'MetaVar':
					var thisVar = original.a;
					return _Utils_eq(thisVar, _var) ? replacement : original;
				case 'MetaTuple':
					var metaElems = original.b;
					return $author$project$Morphir$Type$MetaType$metaTuple(
						A2(
							$elm$core$List$map,
							A2($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement),
							metaElems));
				case 'MetaRecord':
					var recordVar = original.b;
					var isOpen = original.c;
					var metaFields = original.d;
					if (_Utils_eq(recordVar, _var)) {
						if (replacement.$ === 'MetaVar') {
							var replacementVar = replacement.a;
							return A3(
								$author$project$Morphir$Type$MetaType$metaRecord,
								replacementVar,
								isOpen,
								A2(
									$elm$core$Dict$map,
									F2(
										function (_v2, fieldType) {
											return A3($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement, fieldType);
										}),
									metaFields));
						} else {
							return replacement;
						}
					} else {
						return A3(
							$author$project$Morphir$Type$MetaType$metaRecord,
							recordVar,
							isOpen,
							A2(
								$elm$core$Dict$map,
								F2(
									function (_v3, fieldType) {
										return A3($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement, fieldType);
									}),
								metaFields));
					}
				case 'MetaFun':
					var metaFunc = original.b;
					var metaArg = original.c;
					return A2(
						$author$project$Morphir$Type$MetaType$metaFun,
						A3($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement, metaFunc),
						A3($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement, metaArg));
				case 'MetaRef':
					var fQName = original.b;
					var args = original.c;
					var maybeAliasedType = original.d;
					if (maybeAliasedType.$ === 'Just') {
						var aliasedType = maybeAliasedType.a;
						return A3(
							$author$project$Morphir$Type$MetaType$metaAlias,
							fQName,
							A2(
								$elm$core$List$map,
								A2($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement),
								args),
							A3($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement, aliasedType));
					} else {
						return A2(
							$author$project$Morphir$Type$MetaType$metaRef,
							fQName,
							A2(
								$elm$core$List$map,
								A2($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement),
								args));
					}
				default:
					return original;
			}
		} else {
			return original;
		}
	});
var $author$project$Morphir$Type$Constraint$substituteVariable = F3(
	function (_var, replacement, constraint) {
		if (constraint.$ === 'Equality') {
			var vars = constraint.a;
			var metaType1 = constraint.b;
			var metaType2 = constraint.c;
			return A2($elm$core$Set$member, _var, vars) ? A2(
				$author$project$Morphir$Type$Constraint$equality,
				A3($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement, metaType1),
				A3($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement, metaType2)) : constraint;
		} else {
			var vars = constraint.a;
			var metaType = constraint.b;
			var cls = constraint.c;
			return A2($elm$core$Set$member, _var, vars) ? A2(
				$author$project$Morphir$Type$Constraint$class,
				A3($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement, metaType),
				cls) : constraint;
		}
	});
var $author$project$Morphir$Type$ConstraintSet$substituteVariable = F3(
	function (_var, replacement, _v0) {
		var constraints = _v0.a;
		return $author$project$Morphir$Type$ConstraintSet$ConstraintSet(
			A2(
				$elm$core$List$filterMap,
				function (constraint) {
					var newConstraint = A3($author$project$Morphir$Type$Constraint$substituteVariable, _var, replacement, constraint);
					return $author$project$Morphir$Type$Constraint$isTrivial(newConstraint) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(newConstraint);
				},
				constraints));
	});
var $author$project$Morphir$Type$Solve$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$toList(dict);
};
var $author$project$Morphir$Type$ConstraintSet$applySubstitutions = F2(
	function (substitutions, constraintSet) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, soFar) {
					var _var = _v0.a;
					var replacement = _v0.b;
					return A3($author$project$Morphir$Type$ConstraintSet$substituteVariable, _var, replacement, soFar);
				}),
			constraintSet,
			$author$project$Morphir$Type$Solve$toList(substitutions));
	});
var $author$project$Morphir$Type$Solve$diff = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $author$project$Morphir$Type$Solve$SolutionMap(
			$elm$core$Dict$fromList(
				A2(
					$elm$core$List$filterMap,
					function (_v2) {
						var k = _v2.a;
						var v1 = _v2.b;
						var _v3 = A2($elm$core$Dict$get, k, dict2);
						if (_v3.$ === 'Just') {
							var v2 = _v3.a;
							return _Utils_eq(v1, v2) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
								_Utils_Tuple2(k, v1));
						} else {
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(k, v1));
						}
					},
					$elm$core$Dict$toList(dict1))));
	});
var $author$project$Morphir$Type$Solve$isEmptySolution = function (_v0) {
	var solutions = _v0.a;
	return $elm$core$Dict$isEmpty(solutions);
};
var $author$project$Morphir$Type$Solve$CouldNotFindField = function (a) {
	return {$: 'CouldNotFindField', a: a};
};
var $author$project$Morphir$Type$Solve$CouldNotUnify = F3(
	function (a, b, c) {
		return {$: 'CouldNotUnify', a: a, b: b, c: c};
	});
var $author$project$Morphir$Type$Solve$FieldMismatch = {$: 'FieldMismatch'};
var $author$project$Morphir$Type$Solve$NoUnificationRule = {$: 'NoUnificationRule'};
var $author$project$Morphir$Type$Solve$RefMismatch = {$: 'RefMismatch'};
var $author$project$Morphir$Type$Solve$TuplesOfDifferentSize = {$: 'TuplesOfDifferentSize'};
var $author$project$Morphir$Type$Solve$UnificationErrors = function (a) {
	return {$: 'UnificationErrors', a: a};
};
var $elm$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			$elm$core$Dict$filter,
			F2(
				function (k, _v0) {
					return A2($elm$core$Dict$member, k, t2);
				}),
			t1);
	});
var $author$project$Morphir$ListOfResults$liftAllErrors = function (results) {
	var oks = A2(
		$elm$core$List$filterMap,
		function (result) {
			return $elm$core$Result$toMaybe(result);
		},
		results);
	var errs = A2(
		$elm$core$List$filterMap,
		function (result) {
			if (result.$ === 'Ok') {
				return $elm$core$Maybe$Nothing;
			} else {
				var e = result.a;
				return $elm$core$Maybe$Just(e);
			}
		},
		results);
	if (!errs.b) {
		return $elm$core$Result$Ok(oks);
	} else {
		return $elm$core$Result$Err(errs);
	}
};
var $author$project$Morphir$Type$MetaType$wrapInAliases = F2(
	function (aliases, tpe) {
		if (!aliases.b) {
			return tpe;
		} else {
			var _v1 = aliases.a;
			var alias = _v1.a;
			var aliasArgs = _v1.b;
			var restOfAliases = aliases.b;
			return A3(
				$author$project$Morphir$Type$MetaType$metaAlias,
				alias,
				aliasArgs,
				A2($author$project$Morphir$Type$MetaType$wrapInAliases, restOfAliases, tpe));
		}
	});
var $author$project$Morphir$Type$Solve$singleSolution = F3(
	function (aliases, _var, metaType) {
		return $author$project$Morphir$Type$Solve$SolutionMap(
			A2(
				$elm$core$Dict$singleton,
				_var,
				A2($author$project$Morphir$Type$MetaType$wrapInAliases, aliases, metaType)));
	});
var $author$project$Morphir$Type$Solve$substituteVariable = F3(
	function (_var, replacement, _v0) {
		var solutions = _v0.a;
		return $author$project$Morphir$Type$Solve$SolutionMap(
			A2(
				$elm$core$Dict$map,
				F2(
					function (_v1, metaType) {
						return A3($author$project$Morphir$Type$MetaType$substituteVariable, _var, replacement, metaType);
					}),
				solutions));
	});
var $elm$core$Set$intersect = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$intersect, dict1, dict2));
	});
var $author$project$Morphir$Type$MetaType$substituteVariables = F2(
	function (replacements, original) {
		if ($elm$core$Set$isEmpty(
			A2(
				$elm$core$Set$intersect,
				$elm$core$Set$fromList(
					$elm$core$Dict$keys(replacements)),
				$author$project$Morphir$Type$MetaType$variables(original)))) {
			return original;
		} else {
			switch (original.$) {
				case 'MetaVar':
					var thisVar = original.a;
					var _v1 = A2($elm$core$Dict$get, thisVar, replacements);
					if (_v1.$ === 'Just') {
						var replacement = _v1.a;
						return replacement;
					} else {
						return original;
					}
				case 'MetaTuple':
					var metaElems = original.b;
					return $author$project$Morphir$Type$MetaType$metaTuple(
						A2(
							$elm$core$List$map,
							$author$project$Morphir$Type$MetaType$substituteVariables(replacements),
							metaElems));
				case 'MetaRecord':
					var recordVar = original.b;
					var isOpen = original.c;
					var metaFields = original.d;
					var _v2 = A2($elm$core$Dict$get, recordVar, replacements);
					if (_v2.$ === 'Just') {
						var replacement = _v2.a;
						if (replacement.$ === 'MetaVar') {
							var replacementVar = replacement.a;
							return A3(
								$author$project$Morphir$Type$MetaType$metaRecord,
								replacementVar,
								isOpen,
								A2(
									$elm$core$Dict$map,
									F2(
										function (_v4, fieldType) {
											return A2($author$project$Morphir$Type$MetaType$substituteVariables, replacements, fieldType);
										}),
									metaFields));
						} else {
							return replacement;
						}
					} else {
						return A3(
							$author$project$Morphir$Type$MetaType$metaRecord,
							recordVar,
							isOpen,
							A2(
								$elm$core$Dict$map,
								F2(
									function (_v5, fieldType) {
										return A2($author$project$Morphir$Type$MetaType$substituteVariables, replacements, fieldType);
									}),
								metaFields));
					}
				case 'MetaFun':
					var metaFunc = original.b;
					var metaArg = original.c;
					return A2(
						$author$project$Morphir$Type$MetaType$metaFun,
						A2($author$project$Morphir$Type$MetaType$substituteVariables, replacements, metaFunc),
						A2($author$project$Morphir$Type$MetaType$substituteVariables, replacements, metaArg));
				case 'MetaRef':
					var fQName = original.b;
					var args = original.c;
					var maybeAliasedType = original.d;
					if (maybeAliasedType.$ === 'Just') {
						var aliasedType = maybeAliasedType.a;
						return A3(
							$author$project$Morphir$Type$MetaType$metaAlias,
							fQName,
							A2(
								$elm$core$List$map,
								$author$project$Morphir$Type$MetaType$substituteVariables(replacements),
								args),
							A2($author$project$Morphir$Type$MetaType$substituteVariables, replacements, aliasedType));
					} else {
						return A2(
							$author$project$Morphir$Type$MetaType$metaRef,
							fQName,
							A2(
								$elm$core$List$map,
								$author$project$Morphir$Type$MetaType$substituteVariables(replacements),
								args));
					}
				default:
					return original;
			}
		}
	});
var $author$project$Morphir$Type$Solve$unifyUnit = F2(
	function (aliases, metaType2) {
		if (metaType2.$ === 'MetaUnit') {
			return $elm$core$Result$Ok($author$project$Morphir$Type$Solve$emptySolution);
		} else {
			return $elm$core$Result$Err(
				A3($author$project$Morphir$Type$Solve$CouldNotUnify, $author$project$Morphir$Type$Solve$NoUnificationRule, $author$project$Morphir$Type$MetaType$MetaUnit, metaType2));
		}
	});
var $author$project$Morphir$Type$MetaType$variableGreaterThan = F2(
	function (var1, var2) {
		return _Utils_cmp(var1, var2) < 0;
	});
var $author$project$Morphir$Type$Solve$unifyVariable = F3(
	function (aliases, var1, metaType2) {
		if (metaType2.$ === 'MetaVar') {
			var var2 = metaType2.a;
			return A2($author$project$Morphir$Type$MetaType$variableGreaterThan, var1, var2) ? $elm$core$Result$Ok(
				A3(
					$author$project$Morphir$Type$Solve$singleSolution,
					aliases,
					var2,
					$author$project$Morphir$Type$MetaType$metaVar(var1))) : $elm$core$Result$Ok(
				A3($author$project$Morphir$Type$Solve$singleSolution, aliases, var1, metaType2));
		} else {
			return $elm$core$Result$Ok(
				A3($author$project$Morphir$Type$Solve$singleSolution, aliases, var1, metaType2));
		}
	});
var $author$project$Morphir$Type$Solve$addSolution = F4(
	function (ir, _var, newSolution, _v12) {
		var currentSolutions = _v12.a;
		var substitutedNewSolution = A2($author$project$Morphir$Type$MetaType$substituteVariables, currentSolutions, newSolution);
		var _v13 = A2($elm$core$Dict$get, _var, currentSolutions);
		if (_v13.$ === 'Just') {
			var existingSolution = _v13.a;
			return A2(
				$elm$core$Result$map,
				function (_v14) {
					var newSubstitutions = _v14.a;
					return A3(
						$author$project$Morphir$Type$Solve$substituteVariable,
						_var,
						substitutedNewSolution,
						$author$project$Morphir$Type$Solve$SolutionMap(
							A2(
								$elm$core$Dict$union,
								newSubstitutions,
								A3(
									$elm$core$Dict$insert,
									_var,
									A2($author$project$Morphir$Type$MetaType$substituteVariables, newSubstitutions, existingSolution),
									currentSolutions))));
				},
				A4($author$project$Morphir$Type$Solve$unifyMetaType, ir, _List_Nil, existingSolution, substitutedNewSolution));
		} else {
			return $elm$core$Result$Ok(
				A3(
					$author$project$Morphir$Type$Solve$substituteVariable,
					_var,
					substitutedNewSolution,
					$author$project$Morphir$Type$Solve$SolutionMap(
						A3($elm$core$Dict$insert, _var, substitutedNewSolution, currentSolutions))));
		}
	});
var $author$project$Morphir$Type$Solve$concatSolutions = F2(
	function (refs, solutionMaps) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (nextSolutions, resultSoFar) {
					return A2(
						$elm$core$Result$andThen,
						function (solutionsSoFar) {
							return A3($author$project$Morphir$Type$Solve$mergeSolutions, refs, solutionsSoFar, nextSolutions);
						},
						resultSoFar);
				}),
			$elm$core$Result$Ok($author$project$Morphir$Type$Solve$emptySolution),
			solutionMaps);
	});
var $author$project$Morphir$Type$Solve$mergeSolutions = F3(
	function (refs, _v10, currentSolutions) {
		var newSolutions = _v10.a;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v11, solutionsSoFar) {
					var _var = _v11.a;
					var newSolution = _v11.b;
					return A2(
						$elm$core$Result$andThen,
						A3($author$project$Morphir$Type$Solve$addSolution, refs, _var, newSolution),
						solutionsSoFar);
				}),
			$elm$core$Result$Ok(currentSolutions),
			$elm$core$Dict$toList(newSolutions));
	});
var $author$project$Morphir$Type$Solve$unifyFields = F7(
	function (ir, oldRecordVar, oldIsOpen, oldFields, newRecordVar, newIsOpen, newFields) {
		var extraOldFields = A2($elm$core$Dict$diff, oldFields, newFields);
		var extraNewFields = A2($elm$core$Dict$diff, newFields, oldFields);
		var commonFieldsOldType = A2($elm$core$Dict$intersect, oldFields, newFields);
		var fieldSolutionsResult = A2(
			$elm$core$Result$andThen,
			$author$project$Morphir$Type$Solve$concatSolutions(ir),
			A2(
				$elm$core$Result$mapError,
				$author$project$Morphir$Type$Solve$UnificationErrors,
				$author$project$Morphir$ListOfResults$liftAllErrors(
					A2(
						$elm$core$List$map,
						function (_v9) {
							var fieldName = _v9.a;
							var originalType = _v9.b;
							return A2(
								$elm$core$Result$andThen,
								A3($author$project$Morphir$Type$Solve$unifyMetaType, ir, _List_Nil, originalType),
								A2(
									$elm$core$Result$fromMaybe,
									$author$project$Morphir$Type$Solve$CouldNotFindField(fieldName),
									A2($elm$core$Dict$get, fieldName, newFields)));
						},
						$elm$core$Dict$toList(commonFieldsOldType)))));
		var unifiedFields = A2(
			$elm$core$Dict$union,
			commonFieldsOldType,
			A2($elm$core$Dict$union, extraOldFields, extraNewFields));
		return ((!oldIsOpen) && (!$elm$core$Dict$isEmpty(extraNewFields))) ? $elm$core$Result$Err(
			A3(
				$author$project$Morphir$Type$Solve$CouldNotUnify,
				$author$project$Morphir$Type$Solve$FieldMismatch,
				A3($author$project$Morphir$Type$MetaType$metaRecord, oldRecordVar, oldIsOpen, oldFields),
				A3($author$project$Morphir$Type$MetaType$metaRecord, newRecordVar, newIsOpen, newFields))) : (((!newIsOpen) && (!$elm$core$Dict$isEmpty(extraOldFields))) ? $elm$core$Result$Err(
			A3(
				$author$project$Morphir$Type$Solve$CouldNotUnify,
				$author$project$Morphir$Type$Solve$FieldMismatch,
				A3($author$project$Morphir$Type$MetaType$metaRecord, oldRecordVar, oldIsOpen, oldFields),
				A3($author$project$Morphir$Type$MetaType$metaRecord, newRecordVar, newIsOpen, newFields))) : A2(
			$elm$core$Result$map,
			$elm$core$Tuple$pair(unifiedFields),
			fieldSolutionsResult));
	});
var $author$project$Morphir$Type$Solve$unifyFun = F5(
	function (ir, aliases, arg1, return1, metaType2) {
		if (metaType2.$ === 'MetaFun') {
			var arg2 = metaType2.b;
			var return2 = metaType2.c;
			return A2(
				$elm$core$Result$andThen,
				$elm$core$Basics$identity,
				A3(
					$elm$core$Result$map2,
					$author$project$Morphir$Type$Solve$mergeSolutions(ir),
					A4($author$project$Morphir$Type$Solve$unifyMetaType, ir, _List_Nil, arg1, arg2),
					A4($author$project$Morphir$Type$Solve$unifyMetaType, ir, _List_Nil, return1, return2)));
		} else {
			return $elm$core$Result$Err(
				A3(
					$author$project$Morphir$Type$Solve$CouldNotUnify,
					$author$project$Morphir$Type$Solve$NoUnificationRule,
					A2($author$project$Morphir$Type$MetaType$metaFun, arg1, return1),
					metaType2));
		}
	});
var $author$project$Morphir$Type$Solve$unifyMetaType = F4(
	function (ir, aliases, metaType1, metaType2) {
		unifyMetaType:
		while (true) {
			var handleCommon = F2(
				function (mt2, specific) {
					_v7$2:
					while (true) {
						switch (mt2.$) {
							case 'MetaVar':
								var var2 = mt2.a;
								return A3($author$project$Morphir$Type$Solve$unifyVariable, aliases, var2, metaType1);
							case 'MetaRef':
								if (mt2.d.$ === 'Just') {
									var ref2 = mt2.b;
									var args2 = mt2.c;
									var aliasedType2 = mt2.d.a;
									return A4(
										$author$project$Morphir$Type$Solve$unifyMetaType,
										ir,
										A2(
											$elm$core$List$cons,
											_Utils_Tuple2(ref2, args2),
											aliases),
										aliasedType2,
										metaType1);
								} else {
									break _v7$2;
								}
							default:
								break _v7$2;
						}
					}
					return specific(mt2);
				});
			if (_Utils_eq(metaType1, metaType2)) {
				return $elm$core$Result$Ok($author$project$Morphir$Type$Solve$emptySolution);
			} else {
				switch (metaType1.$) {
					case 'MetaVar':
						var var1 = metaType1.a;
						return A3($author$project$Morphir$Type$Solve$unifyVariable, aliases, var1, metaType2);
					case 'MetaTuple':
						var elems1 = metaType1.b;
						return A2(
							handleCommon,
							metaType2,
							A3($author$project$Morphir$Type$Solve$unifyTuple, ir, aliases, elems1));
					case 'MetaRef':
						if (metaType1.d.$ === 'Nothing') {
							var ref1 = metaType1.b;
							var args1 = metaType1.c;
							var _v6 = metaType1.d;
							return A2(
								handleCommon,
								metaType2,
								A4($author$project$Morphir$Type$Solve$unifyRef, ir, aliases, ref1, args1));
						} else {
							var ref1 = metaType1.b;
							var args1 = metaType1.c;
							var aliasedType1 = metaType1.d.a;
							var $temp$ir = ir,
								$temp$aliases = A2(
								$elm$core$List$cons,
								_Utils_Tuple2(ref1, args1),
								aliases),
								$temp$metaType1 = aliasedType1,
								$temp$metaType2 = metaType2;
							ir = $temp$ir;
							aliases = $temp$aliases;
							metaType1 = $temp$metaType1;
							metaType2 = $temp$metaType2;
							continue unifyMetaType;
						}
					case 'MetaFun':
						var arg1 = metaType1.b;
						var return1 = metaType1.c;
						return A2(
							handleCommon,
							metaType2,
							A4($author$project$Morphir$Type$Solve$unifyFun, ir, aliases, arg1, return1));
					case 'MetaRecord':
						var recordVar1 = metaType1.b;
						var isOpen1 = metaType1.c;
						var fields1 = metaType1.d;
						return A2(
							handleCommon,
							metaType2,
							A5($author$project$Morphir$Type$Solve$unifyRecord, ir, aliases, recordVar1, isOpen1, fields1));
					default:
						return A2(
							handleCommon,
							metaType2,
							$author$project$Morphir$Type$Solve$unifyUnit(aliases));
				}
			}
		}
	});
var $author$project$Morphir$Type$Solve$unifyRecord = F6(
	function (refs, aliases, recordVar1, isOpen1, fields1, metaType2) {
		if (metaType2.$ === 'MetaRecord') {
			var recordVar2 = metaType2.b;
			var isOpen2 = metaType2.c;
			var fields2 = metaType2.d;
			return A2(
				$elm$core$Result$andThen,
				function (_v4) {
					var newFields = _v4.a;
					var fieldSolutions = _v4.b;
					return isOpen1 ? A3(
						$author$project$Morphir$Type$Solve$mergeSolutions,
						refs,
						fieldSolutions,
						A3(
							$author$project$Morphir$Type$Solve$singleSolution,
							aliases,
							recordVar1,
							A3($author$project$Morphir$Type$MetaType$metaRecord, recordVar2, isOpen2, newFields))) : (isOpen2 ? A3(
						$author$project$Morphir$Type$Solve$mergeSolutions,
						refs,
						fieldSolutions,
						A3(
							$author$project$Morphir$Type$Solve$singleSolution,
							aliases,
							recordVar2,
							A3($author$project$Morphir$Type$MetaType$metaRecord, recordVar1, isOpen1, newFields))) : A3(
						$author$project$Morphir$Type$Solve$mergeSolutions,
						refs,
						fieldSolutions,
						A3(
							$author$project$Morphir$Type$Solve$singleSolution,
							aliases,
							recordVar2,
							A3($author$project$Morphir$Type$MetaType$metaRecord, recordVar1, false, newFields))));
				},
				A7($author$project$Morphir$Type$Solve$unifyFields, refs, recordVar1, isOpen1, fields1, recordVar2, isOpen2, fields2));
		} else {
			return $elm$core$Result$Err(
				A3(
					$author$project$Morphir$Type$Solve$CouldNotUnify,
					$author$project$Morphir$Type$Solve$NoUnificationRule,
					A3($author$project$Morphir$Type$MetaType$metaRecord, recordVar1, isOpen1, fields1),
					metaType2));
		}
	});
var $author$project$Morphir$Type$Solve$unifyRef = F5(
	function (ir, aliases, ref1, args1, metaType2) {
		_v1$2:
		while (true) {
			switch (metaType2.$) {
				case 'MetaRef':
					if (metaType2.d.$ === 'Nothing') {
						var ref2 = metaType2.b;
						var args2 = metaType2.c;
						var _v2 = metaType2.d;
						return _Utils_eq(ref1, ref2) ? (_Utils_eq(
							$elm$core$List$length(args1),
							$elm$core$List$length(args2)) ? A2(
							$elm$core$Result$andThen,
							$author$project$Morphir$Type$Solve$concatSolutions(ir),
							A2(
								$elm$core$Result$mapError,
								$author$project$Morphir$Type$Solve$UnificationErrors,
								$author$project$Morphir$ListOfResults$liftAllErrors(
									A3(
										$elm$core$List$map2,
										A2($author$project$Morphir$Type$Solve$unifyMetaType, ir, _List_Nil),
										args1,
										args2)))) : $elm$core$Result$Err(
							A3(
								$author$project$Morphir$Type$Solve$CouldNotUnify,
								$author$project$Morphir$Type$Solve$TuplesOfDifferentSize,
								A2($author$project$Morphir$Type$MetaType$metaRef, ref1, args1),
								metaType2))) : $elm$core$Result$Err(
							A3(
								$author$project$Morphir$Type$Solve$CouldNotUnify,
								$author$project$Morphir$Type$Solve$RefMismatch,
								A2($author$project$Morphir$Type$MetaType$metaRef, ref1, args1),
								metaType2));
					} else {
						break _v1$2;
					}
				case 'MetaRecord':
					var recordVar2 = metaType2.b;
					var isOpen2 = metaType2.c;
					var fields2 = metaType2.d;
					return A6(
						$author$project$Morphir$Type$Solve$unifyRecord,
						ir,
						aliases,
						recordVar2,
						isOpen2,
						fields2,
						A2($author$project$Morphir$Type$MetaType$metaRef, ref1, args1));
				default:
					break _v1$2;
			}
		}
		return $elm$core$Result$Err(
			A3(
				$author$project$Morphir$Type$Solve$CouldNotUnify,
				$author$project$Morphir$Type$Solve$NoUnificationRule,
				A2($author$project$Morphir$Type$MetaType$metaRef, ref1, args1),
				metaType2));
	});
var $author$project$Morphir$Type$Solve$unifyTuple = F4(
	function (ir, aliases, elems1, metaType2) {
		if (metaType2.$ === 'MetaTuple') {
			var elems2 = metaType2.b;
			return _Utils_eq(
				$elm$core$List$length(elems1),
				$elm$core$List$length(elems2)) ? A2(
				$elm$core$Result$andThen,
				$author$project$Morphir$Type$Solve$concatSolutions(ir),
				A2(
					$elm$core$Result$mapError,
					$author$project$Morphir$Type$Solve$UnificationErrors,
					$author$project$Morphir$ListOfResults$liftAllErrors(
						A3(
							$elm$core$List$map2,
							A2($author$project$Morphir$Type$Solve$unifyMetaType, ir, _List_Nil),
							elems1,
							elems2)))) : $elm$core$Result$Err(
				A3(
					$author$project$Morphir$Type$Solve$CouldNotUnify,
					$author$project$Morphir$Type$Solve$TuplesOfDifferentSize,
					$author$project$Morphir$Type$MetaType$metaTuple(elems1),
					metaType2));
		} else {
			return $elm$core$Result$Err(
				A3(
					$author$project$Morphir$Type$Solve$CouldNotUnify,
					$author$project$Morphir$Type$Solve$NoUnificationRule,
					$author$project$Morphir$Type$MetaType$metaTuple(elems1),
					metaType2));
		}
	});
var $author$project$Morphir$Type$Solve$findSubstitution = F2(
	function (ir, constraints) {
		findSubstitution:
		while (true) {
			if (!constraints.b) {
				return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
			} else {
				var firstConstraint = constraints.a;
				var restOfConstraints = constraints.b;
				if (firstConstraint.$ === 'Equality') {
					var metaType1 = firstConstraint.b;
					var metaType2 = firstConstraint.c;
					return A2(
						$elm$core$Result$andThen,
						function (solutions) {
							return $author$project$Morphir$Type$Solve$isEmptySolution(solutions) ? A2($author$project$Morphir$Type$Solve$findSubstitution, ir, restOfConstraints) : $elm$core$Result$Ok(
								$elm$core$Maybe$Just(solutions));
						},
						A4($author$project$Morphir$Type$Solve$unifyMetaType, ir, _List_Nil, metaType1, metaType2));
				} else {
					var $temp$ir = ir,
						$temp$constraints = restOfConstraints;
					ir = $temp$ir;
					constraints = $temp$constraints;
					continue findSubstitution;
				}
			}
		}
	});
var $author$project$Morphir$Type$Infer$ClassConstraintViolation = F2(
	function (a, b) {
		return {$: 'ClassConstraintViolation', a: a, b: b};
	});
var $author$project$Morphir$Type$Infer$RecursiveConstraint = F2(
	function (a, b) {
		return {$: 'RecursiveConstraint', a: a, b: b};
	});
var $author$project$Morphir$Type$MetaType$contains = F2(
	function (innerType, outerType) {
		if (_Utils_eq(innerType, outerType)) {
			return true;
		} else {
			switch (outerType.$) {
				case 'MetaVar':
					return false;
				case 'MetaTuple':
					var metaElems = outerType.b;
					return A2(
						$elm$core$List$any,
						$author$project$Morphir$Type$MetaType$contains(innerType),
						metaElems);
				case 'MetaRecord':
					var metaFields = outerType.d;
					return A2(
						$elm$core$List$any,
						$author$project$Morphir$Type$MetaType$contains(innerType),
						$elm$core$Dict$values(metaFields));
				case 'MetaFun':
					var metaFunc = outerType.b;
					var metaArg = outerType.c;
					return A2($author$project$Morphir$Type$MetaType$contains, innerType, metaFunc) || A2($author$project$Morphir$Type$MetaType$contains, innerType, metaArg);
				case 'MetaRef':
					var args = outerType.c;
					var maybeAliasedType = outerType.d;
					if (maybeAliasedType.$ === 'Just') {
						var aliasedType = maybeAliasedType.a;
						return A2($author$project$Morphir$Type$MetaType$contains, innerType, aliasedType) || A2(
							$elm$core$List$any,
							$author$project$Morphir$Type$MetaType$contains(innerType),
							args);
					} else {
						return A2(
							$elm$core$List$any,
							$author$project$Morphir$Type$MetaType$contains(innerType),
							args);
					}
				default:
					return false;
			}
		}
	});
var $author$project$Morphir$Type$MetaType$removeAliases = function (original) {
	removeAliases:
	while (true) {
		switch (original.$) {
			case 'MetaVar':
				return original;
			case 'MetaTuple':
				var metaElems = original.b;
				return $author$project$Morphir$Type$MetaType$metaTuple(
					A2($elm$core$List$map, $author$project$Morphir$Type$MetaType$removeAliases, metaElems));
			case 'MetaRecord':
				var recordVar = original.b;
				var isOpen = original.c;
				var metaFields = original.d;
				return A3(
					$author$project$Morphir$Type$MetaType$metaRecord,
					recordVar,
					isOpen,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v1, fieldType) {
								return $author$project$Morphir$Type$MetaType$removeAliases(fieldType);
							}),
						metaFields));
			case 'MetaFun':
				var metaFunc = original.b;
				var metaArg = original.c;
				return A2(
					$author$project$Morphir$Type$MetaType$metaFun,
					$author$project$Morphir$Type$MetaType$removeAliases(metaFunc),
					$author$project$Morphir$Type$MetaType$removeAliases(metaArg));
			case 'MetaRef':
				var fQName = original.b;
				var args = original.c;
				var maybeAliasedType = original.d;
				if (maybeAliasedType.$ === 'Just') {
					var aliasedType = maybeAliasedType.a;
					var $temp$original = aliasedType;
					original = $temp$original;
					continue removeAliases;
				} else {
					return A2(
						$author$project$Morphir$Type$MetaType$metaRef,
						fQName,
						A2($elm$core$List$map, $author$project$Morphir$Type$MetaType$removeAliases, args));
				}
			default:
				return original;
		}
	}
};
var $author$project$Morphir$Type$Constraint$isRecursive = function (constraint) {
	if (constraint.$ === 'Equality') {
		var metaType1 = constraint.b;
		var metaType2 = constraint.c;
		var rawMetaType2 = $author$project$Morphir$Type$MetaType$removeAliases(metaType2);
		var rawMetaType1 = $author$project$Morphir$Type$MetaType$removeAliases(metaType1);
		return (!_Utils_eq(rawMetaType1, rawMetaType2)) && ((!$elm$core$Set$isEmpty(
			$author$project$Morphir$Type$MetaType$variables(rawMetaType1))) && ((!$elm$core$Set$isEmpty(
			$author$project$Morphir$Type$MetaType$variables(rawMetaType2))) && (A2($author$project$Morphir$Type$MetaType$contains, rawMetaType1, rawMetaType2) || A2($author$project$Morphir$Type$MetaType$contains, rawMetaType2, rawMetaType1))));
	} else {
		return false;
	}
};
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Morphir$Type$MetaType$intType = A2(
	$author$project$Morphir$Type$MetaType$metaRef,
	A3($author$project$Morphir$IR$FQName$fqn, 'Morphir.SDK', 'Basics', 'Int'),
	_List_Nil);
var $author$project$Morphir$Type$Class$numberTypes = _List_fromArray(
	[$author$project$Morphir$Type$MetaType$intType, $author$project$Morphir$Type$MetaType$floatType]);
var $author$project$Morphir$Type$Class$member = F2(
	function (metaType, _class) {
		var targetType = function (mt) {
			targetType:
			while (true) {
				if ((mt.$ === 'MetaRef') && (mt.d.$ === 'Just')) {
					var t = mt.d.a;
					var $temp$mt = t;
					mt = $temp$mt;
					continue targetType;
				} else {
					return mt;
				}
			}
		};
		return A2(
			$elm$core$List$member,
			targetType(metaType),
			$author$project$Morphir$Type$Class$numberTypes);
	});
var $author$project$Morphir$Type$Infer$TypeErrors = function (a) {
	return {$: 'TypeErrors', a: a};
};
var $author$project$Morphir$Type$Infer$typeErrors = function (errors) {
	if (errors.b && (!errors.b.b)) {
		var single = errors.a;
		return single;
	} else {
		return $author$project$Morphir$Type$Infer$TypeErrors(errors);
	}
};
var $author$project$Morphir$Type$Infer$validateConstraints = function (constraints) {
	return A2(
		$elm$core$Result$mapError,
		$author$project$Morphir$Type$Infer$typeErrors,
		$author$project$Morphir$ListOfResults$liftAllErrors(
			A2(
				$elm$core$List$map,
				function (constraint) {
					if (constraint.$ === 'Class') {
						if (constraint.b.$ === 'MetaVar') {
							return $elm$core$Result$Ok(constraint);
						} else {
							var metaType = constraint.b;
							var _class = constraint.c;
							return A2($author$project$Morphir$Type$Class$member, metaType, _class) ? $elm$core$Result$Ok(constraint) : $elm$core$Result$Err(
								A2($author$project$Morphir$Type$Infer$ClassConstraintViolation, metaType, _class));
						}
					} else {
						var metaType1 = constraint.b;
						var metaType2 = constraint.c;
						return $author$project$Morphir$Type$Constraint$isRecursive(constraint) ? $elm$core$Result$Err(
							A2($author$project$Morphir$Type$Infer$RecursiveConstraint, metaType1, metaType2)) : $elm$core$Result$Ok(constraint);
					}
				},
				constraints)));
};
var $author$project$Morphir$Type$Infer$solveStep = F3(
	function (refs, solutionsSoFar, constraintSet) {
		var constraints = constraintSet.a;
		var _v0 = $author$project$Morphir$Type$Infer$validateConstraints(constraints);
		if (_v0.$ === 'Ok') {
			var nonTrivialConstraints = _v0.a;
			var _v1 = A2($author$project$Morphir$Type$Solve$findSubstitution, refs, nonTrivialConstraints);
			if (_v1.$ === 'Ok') {
				var maybeNewSolutions = _v1.a;
				if (maybeNewSolutions.$ === 'Nothing') {
					return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
				} else {
					var newSolutions = maybeNewSolutions.a;
					var _v3 = A3($author$project$Morphir$Type$Solve$mergeSolutions, refs, newSolutions, solutionsSoFar);
					if (_v3.$ === 'Ok') {
						var mergedSolutions = _v3.a;
						var newMergedSolutions = A2($author$project$Morphir$Type$Solve$diff, mergedSolutions, solutionsSoFar);
						return $elm$core$Result$Ok(
							$elm$core$Maybe$Just(
								_Utils_Tuple2(
									A2($author$project$Morphir$Type$ConstraintSet$applySubstitutions, newMergedSolutions, constraintSet),
									mergedSolutions)));
					} else {
						var error = _v3.a;
						return $elm$core$Result$Err(
							$author$project$Morphir$Type$Infer$UnifyError(error));
					}
				}
			} else {
				var error = _v1.a;
				return $elm$core$Result$Err(
					$author$project$Morphir$Type$Infer$UnifyError(error));
			}
		} else {
			var error = _v0.a;
			return $elm$core$Result$Err(error);
		}
	});
var $author$project$Morphir$Type$Infer$solveHelp = F3(
	function (ir, solutionsSoFar, constraintSet) {
		solveHelp:
		while (true) {
			var constraints = constraintSet.a;
			var _v0 = $author$project$Morphir$Type$Infer$validateConstraints(constraints);
			if (_v0.$ === 'Ok') {
				var _v1 = A3($author$project$Morphir$Type$Infer$solveStep, ir, solutionsSoFar, constraintSet);
				if (_v1.$ === 'Ok') {
					if (_v1.a.$ === 'Just') {
						var _v2 = _v1.a.a;
						var newConstraints = _v2.a;
						var mergedSolutions = _v2.b;
						if (_Utils_eq(solutionsSoFar, mergedSolutions)) {
							return $elm$core$Result$Ok(
								_Utils_Tuple2(newConstraints, mergedSolutions));
						} else {
							var $temp$ir = ir,
								$temp$solutionsSoFar = mergedSolutions,
								$temp$constraintSet = newConstraints;
							ir = $temp$ir;
							solutionsSoFar = $temp$solutionsSoFar;
							constraintSet = $temp$constraintSet;
							continue solveHelp;
						}
					} else {
						var _v3 = _v1.a;
						return $elm$core$Result$Ok(
							_Utils_Tuple2(constraintSet, solutionsSoFar));
					}
				} else {
					var error = _v1.a;
					return $elm$core$Result$Err(error);
				}
			} else {
				var error = _v0.a;
				return $elm$core$Result$Err(error);
			}
		}
	});
var $author$project$Morphir$Type$Infer$solve = F2(
	function (refs, constraintSet) {
		return A3($author$project$Morphir$Type$Infer$solveHelp, refs, $author$project$Morphir$Type$Solve$emptySolution, constraintSet);
	});
var $author$project$Morphir$Type$Infer$inferValue = F2(
	function (ir, untypedValue) {
		var _v0 = A2(
			$author$project$Morphir$Type$Count$apply,
			0,
			A4($author$project$Morphir$Type$Infer$constrainValue, ir, $elm$core$Dict$empty, $elm$core$Maybe$Nothing, untypedValue));
		var count = _v0.a;
		var _v1 = _v0.b;
		var annotatedValue = _v1.a;
		var constraints = _v1.b;
		var solution = A2($author$project$Morphir$Type$Infer$solve, ir, constraints);
		return A2(
			$elm$core$Result$map,
			A2($author$project$Morphir$Type$Infer$applySolutionToAnnotatedValue, ir, annotatedValue),
			solution);
	});
var $elm$core$Set$foldl = F3(
	function (func, initialState, _v0) {
		var dict = _v0.a;
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm$core$Set$map = F2(
	function (func, set) {
		return $elm$core$Set$fromList(
			A3(
				$elm$core$Set$foldl,
				F2(
					function (x, xs) {
						return A2(
							$elm$core$List$cons,
							func(x),
							xs);
					}),
				_List_Nil,
				set));
	});
var $elm$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				if (rc.$ === 'Err') {
					var x = rc.a;
					return $elm$core$Result$Err(x);
				} else {
					var c = rc.a;
					return $elm$core$Result$Ok(
						A3(func, a, b, c));
				}
			}
		}
	});
var $author$project$Morphir$IR$SDK$Basics$add = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'add'));
};
var $author$project$Morphir$IR$SDK$Basics$and = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'and'));
};
var $author$project$Morphir$IR$SDK$Basics$composeLeft = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'composeLeft'));
};
var $author$project$Morphir$IR$SDK$Basics$composeRight = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'composeRight'));
};
var $author$project$Morphir$IR$SDK$List$moduleName = $author$project$Morphir$IR$Path$fromString('List');
var $author$project$Morphir$IR$SDK$List$construct = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$List$moduleName, 'cons'));
};
var $author$project$Morphir$IR$SDK$Basics$divide = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'divide'));
};
var $author$project$Morphir$IR$SDK$Basics$equal = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'equal'));
};
var $author$project$Morphir$IR$SDK$Basics$greaterThan = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'greaterThan'));
};
var $author$project$Morphir$IR$SDK$Basics$greaterThanOrEqual = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'greaterThanOrEqual'));
};
var $author$project$Morphir$IR$SDK$Basics$integerDivide = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'integerDivide'));
};
var $author$project$Morphir$IR$SDK$Basics$lessThan = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'lessThan'));
};
var $author$project$Morphir$IR$SDK$Basics$lessThanOrEqual = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'lessThanOrEqual'));
};
var $author$project$Morphir$IR$SDK$Basics$multiply = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'multiply'));
};
var $author$project$Morphir$IR$SDK$Basics$notEqual = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'notEqual'));
};
var $author$project$Morphir$IR$SDK$Basics$or = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'or'));
};
var $author$project$Morphir$IR$SDK$Basics$power = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'power'));
};
var $author$project$Morphir$IR$SDK$Basics$subtract = function (a) {
	return A2(
		$author$project$Morphir$IR$Value$Reference,
		a,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'subtract'));
};
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapOperator = F3(
	function (moduleName, range, op) {
		switch (op) {
			case '||':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$or($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '&&':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$and($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '==':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$equal($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '/=':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$notEqual($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '<':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$lessThan($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '>':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$greaterThan($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '<=':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$lessThanOrEqual($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '>=':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$greaterThanOrEqual($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '++':
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							A2(
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$NotSupported,
							A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range),
							'The ++ operator is currently not supported. Please use String.append or List.append. See docs/error-append-not-supported.md')
						]));
			case '+':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$add($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '-':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$subtract($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '*':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$multiply($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '/':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$divide($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '//':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$integerDivide($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '^':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$power($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '<<':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$composeLeft($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '>>':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$Basics$composeRight($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			case '::':
				return $elm$core$Result$Ok(
					$author$project$Morphir$IR$SDK$List$construct($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
			default:
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							A2(
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$NotSupported,
							A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range),
							'OperatorApplication: ' + op)
						]));
		}
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$RecordPatternNotSupported = function (a) {
	return {$: 'RecordPatternNotSupported', a: a};
};
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$SameNameAppearsMultipleTimesInPattern = F2(
	function (a, b) {
		return {$: 'SameNameAppearsMultipleTimesInPattern', a: a, b: b};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$VariableNameCollision = F2(
	function (a, b) {
		return {$: 'VariableNameCollision', a: a, b: b};
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapListOfPatterns = F4(
	function (nameResolver, moduleName, variables, patternNodes) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (patternNode, resultSoFar) {
					var range = patternNode.a;
					return A2(
						$elm$core$Result$andThen,
						function (_v9) {
							var patternVariables = _v9.a;
							var elemPattern = _v9.b;
							return A2(
								$elm$core$Result$andThen,
								function (_v10) {
									var patternVariablesSoFar = _v10.a;
									var elemPatternsSoFar = _v10.b;
									var overlappingVariableNames = A2($elm$core$Set$intersect, patternVariablesSoFar, patternVariables);
									return $elm$core$Set$isEmpty(overlappingVariableNames) ? $elm$core$Result$Ok(
										_Utils_Tuple2(
											A2($elm$core$Set$union, patternVariablesSoFar, patternVariables),
											A2($elm$core$List$cons, elemPattern, elemPatternsSoFar))) : $elm$core$Result$Err(
										_List_fromArray(
											[
												A2(
												$author$project$Morphir$Elm$IncrementalFrontend$Mapper$SameNameAppearsMultipleTimesInPattern,
												A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range),
												overlappingVariableNames)
											]));
								},
								resultSoFar);
						},
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapPattern, nameResolver, moduleName, variables, patternNode));
				}),
			$elm$core$Result$Ok(
				_Utils_Tuple2($elm$core$Set$empty, _List_Nil)),
			patternNodes);
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapPattern = F4(
	function (nameResolver, moduleName, variables, _v0) {
		mapPattern:
		while (true) {
			var range = _v0.a;
			var pattern = _v0.b;
			switch (pattern.$) {
				case 'AllPattern':
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							$elm$core$Set$empty,
							$author$project$Morphir$IR$Value$WildcardPattern($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute)));
				case 'UnitPattern':
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							$elm$core$Set$empty,
							$author$project$Morphir$IR$Value$UnitPattern($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute)));
				case 'CharPattern':
					var _char = pattern.a;
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							$elm$core$Set$empty,
							A2(
								$author$project$Morphir$IR$Value$LiteralPattern,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
								$author$project$Morphir$IR$Literal$CharLiteral(_char))));
				case 'StringPattern':
					var string = pattern.a;
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							$elm$core$Set$empty,
							A2(
								$author$project$Morphir$IR$Value$LiteralPattern,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
								$author$project$Morphir$IR$Literal$StringLiteral(string))));
				case 'IntPattern':
					var _int = pattern.a;
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							$elm$core$Set$empty,
							A2(
								$author$project$Morphir$IR$Value$LiteralPattern,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
								$author$project$Morphir$IR$Literal$WholeNumberLiteral(_int))));
				case 'HexPattern':
					var _int = pattern.a;
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							$elm$core$Set$empty,
							A2(
								$author$project$Morphir$IR$Value$LiteralPattern,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
								$author$project$Morphir$IR$Literal$WholeNumberLiteral(_int))));
				case 'FloatPattern':
					var _float = pattern.a;
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							$elm$core$Set$empty,
							A2(
								$author$project$Morphir$IR$Value$LiteralPattern,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
								$author$project$Morphir$IR$Literal$FloatLiteral(_float))));
				case 'TuplePattern':
					var elemNodes = pattern.a;
					return A2(
						$elm$core$Result$map,
						$elm$core$Tuple$mapSecond(
							$author$project$Morphir$IR$Value$TuplePattern($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute)),
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapListOfPatterns, nameResolver, moduleName, variables, elemNodes));
				case 'RecordPattern':
					return $elm$core$Result$Err(
						_List_fromArray(
							[
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$RecordPatternNotSupported(
								A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range))
							]));
				case 'UnConsPattern':
					var headNode = pattern.a;
					var tailNode = pattern.b;
					return A2(
						$elm$core$Result$andThen,
						function (_v2) {
							var pattern1Variables = _v2.a;
							var headPattern = _v2.b;
							return A2(
								$elm$core$Result$andThen,
								function (_v3) {
									var pattern2Variables = _v3.a;
									var tailPattern = _v3.b;
									var overlappingVariableNames = A2($elm$core$Set$intersect, pattern1Variables, pattern2Variables);
									return $elm$core$Set$isEmpty(overlappingVariableNames) ? $elm$core$Result$Ok(
										_Utils_Tuple2(
											A2($elm$core$Set$union, pattern1Variables, pattern2Variables),
											A3($author$project$Morphir$IR$Value$HeadTailPattern, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute, headPattern, tailPattern))) : $elm$core$Result$Err(
										_List_fromArray(
											[
												A2(
												$author$project$Morphir$Elm$IncrementalFrontend$Mapper$SameNameAppearsMultipleTimesInPattern,
												A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range),
												overlappingVariableNames)
											]));
								},
								A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapPattern, nameResolver, moduleName, variables, tailNode));
						},
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapPattern, nameResolver, moduleName, variables, headNode));
				case 'ListPattern':
					var itemNodes = pattern.a;
					var listToHeadTail = function (patternNodes) {
						if (!patternNodes.b) {
							return $author$project$Morphir$IR$Value$EmptyListPattern($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute);
						} else {
							var headNode = patternNodes.a;
							var tailNodes = patternNodes.b;
							return A3(
								$author$project$Morphir$IR$Value$HeadTailPattern,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
								headNode,
								listToHeadTail(tailNodes));
						}
					};
					return A2(
						$elm$core$Result$map,
						$elm$core$Tuple$mapSecond(listToHeadTail),
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapListOfPatterns, nameResolver, moduleName, variables, itemNodes));
				case 'VarPattern':
					var name = pattern.a;
					return A2($elm$core$Set$member, name, variables) ? $elm$core$Result$Err(
						_List_fromArray(
							[
								A2(
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$VariableNameCollision,
								A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range),
								name)
							])) : $elm$core$Result$Ok(
						_Utils_Tuple2(
							$elm$core$Set$singleton(name),
							A3(
								$author$project$Morphir$IR$Value$AsPattern,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
								$author$project$Morphir$IR$Value$WildcardPattern($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
								$author$project$Morphir$IR$Name$fromString(name))));
				case 'NamedPattern':
					var qualifiedNameRef = pattern.a;
					var argNodes = pattern.b;
					var fullyQualifiedName = A2(
						$elm$core$Result$mapError,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$ResolveError(
								A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range)),
							$elm$core$List$singleton),
						A3(nameResolver, qualifiedNameRef.moduleName, qualifiedNameRef.name, $author$project$Morphir$IR$KindOfName$Constructor));
					var _v5 = _Utils_Tuple2(qualifiedNameRef.moduleName, qualifiedNameRef.name);
					_v5$2:
					while (true) {
						if (!_v5.a.b) {
							switch (_v5.b) {
								case 'True':
									return $elm$core$Result$Ok(
										_Utils_Tuple2(
											$elm$core$Set$empty,
											A2(
												$author$project$Morphir$IR$Value$LiteralPattern,
												$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
												$author$project$Morphir$IR$Literal$BoolLiteral(true))));
								case 'False':
									return $elm$core$Result$Ok(
										_Utils_Tuple2(
											$elm$core$Set$empty,
											A2(
												$author$project$Morphir$IR$Value$LiteralPattern,
												$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
												$author$project$Morphir$IR$Literal$BoolLiteral(false))));
								default:
									break _v5$2;
							}
						} else {
							break _v5$2;
						}
					}
					return A3(
						$elm$core$Result$map2,
						F2(
							function (fqn, _v6) {
								var vars = _v6.a;
								var argPatterns = _v6.b;
								return _Utils_Tuple2(
									vars,
									A3($author$project$Morphir$IR$Value$ConstructorPattern, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute, fqn, argPatterns));
							}),
						fullyQualifiedName,
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapListOfPatterns, nameResolver, moduleName, variables, argNodes));
				case 'AsPattern':
					var subjectNode = pattern.a;
					var _v7 = pattern.b;
					var aliasRange = _v7.a;
					var alias = _v7.b;
					return A2(
						$elm$core$Result$andThen,
						function (_v8) {
							var subjectVariables = _v8.a;
							var subjectPattern = _v8.b;
							return A2($elm$core$Set$member, alias, subjectVariables) ? $elm$core$Result$Err(
								_List_fromArray(
									[
										A2(
										$author$project$Morphir$Elm$IncrementalFrontend$Mapper$SameNameAppearsMultipleTimesInPattern,
										A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, aliasRange),
										$elm$core$Set$singleton(alias))
									])) : (A2($elm$core$Set$member, alias, variables) ? $elm$core$Result$Err(
								_List_fromArray(
									[
										A2(
										$author$project$Morphir$Elm$IncrementalFrontend$Mapper$VariableNameCollision,
										A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, aliasRange),
										alias)
									])) : $elm$core$Result$Ok(
								_Utils_Tuple2(
									A2($elm$core$Set$insert, alias, subjectVariables),
									A3(
										$author$project$Morphir$IR$Value$AsPattern,
										$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
										subjectPattern,
										$author$project$Morphir$IR$Name$fromString(alias)))));
						},
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapPattern, nameResolver, moduleName, variables, subjectNode));
				default:
					var childNode = pattern.a;
					var $temp$nameResolver = nameResolver,
						$temp$moduleName = moduleName,
						$temp$variables = variables,
						$temp$_v0 = childNode;
					nameResolver = $temp$nameResolver;
					moduleName = $temp$moduleName;
					variables = $temp$variables;
					_v0 = $temp$_v0;
					continue mapPattern;
			}
		}
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$namesBoundByPattern = function (p) {
	var namesBound = function (pattern) {
		namesBound:
		while (true) {
			switch (pattern.$) {
				case 'TuplePattern':
					var elemPatternNodes = pattern.a;
					return A2(
						$elm$core$List$concatMap,
						A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, namesBound),
						elemPatternNodes);
				case 'RecordPattern':
					var fieldNameNodes = pattern.a;
					return A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, fieldNameNodes);
				case 'UnConsPattern':
					var _v1 = pattern.a;
					var headPattern = _v1.b;
					var _v2 = pattern.b;
					var tailPattern = _v2.b;
					return _Utils_ap(
						namesBound(headPattern),
						namesBound(tailPattern));
				case 'ListPattern':
					var itemPatternNodes = pattern.a;
					return A2(
						$elm$core$List$concatMap,
						A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, namesBound),
						itemPatternNodes);
				case 'VarPattern':
					var name = pattern.a;
					return _List_fromArray(
						[name]);
				case 'NamedPattern':
					var argPatternNodes = pattern.b;
					return A2(
						$elm$core$List$concatMap,
						A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, namesBound),
						argPatternNodes);
				case 'AsPattern':
					var _v3 = pattern.a;
					var childPattern = _v3.b;
					var _v4 = pattern.b;
					var alias = _v4.b;
					return A2(
						$elm$core$List$cons,
						alias,
						namesBound(childPattern));
				case 'ParenthesizedPattern':
					var _v5 = pattern.a;
					var childPattern = _v5.b;
					var $temp$pattern = childPattern;
					pattern = $temp$pattern;
					continue namesBound;
				default:
					return _List_Nil;
			}
		}
	};
	return $elm$core$Set$fromList(
		namesBound(p));
};
var $author$project$Morphir$IR$SDK$Basics$negate = F3(
	function (refAttributes, valueAttributes, arg) {
		return A3(
			$author$project$Morphir$IR$Value$Apply,
			valueAttributes,
			A2(
				$author$project$Morphir$IR$Value$Reference,
				refAttributes,
				A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'negate')),
			arg);
	});
var $elm_community$intdict$IntDict$values = function (dict) {
	return A3(
		$elm_community$intdict$IntDict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $elm_community$graph$Graph$nodes = A2(
	$elm$core$Basics$composeR,
	$elm_community$graph$Graph$unGraph,
	A2(
		$elm$core$Basics$composeR,
		$elm_community$intdict$IntDict$values,
		$elm$core$List$map(
			function ($) {
				return $.node;
			})));
var $elm_community$graph$Graph$Tree$MkTree = F2(
	function (a, b) {
		return {$: 'MkTree', a: a, b: b};
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm_community$graph$Graph$Tree$empty = A2($elm_community$graph$Graph$Tree$MkTree, 0, $elm$core$Maybe$Nothing);
var $elm_community$graph$Graph$Tree$isEmpty = function (tree) {
	return _Utils_eq(tree, $elm_community$graph$Graph$Tree$empty);
};
var $elm_community$graph$Graph$Tree$size = function (tree) {
	var n = tree.a;
	return n;
};
var $elm_community$graph$Graph$Tree$inner = F2(
	function (label, children) {
		var nonEmptyChildren = A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm_community$graph$Graph$Tree$isEmpty),
			children);
		var totalSize = A3(
			$elm$core$List$foldl,
			A2($elm$core$Basics$composeL, $elm$core$Basics$add, $elm_community$graph$Graph$Tree$size),
			1,
			nonEmptyChildren);
		return A2(
			$elm_community$graph$Graph$Tree$MkTree,
			totalSize,
			$elm$core$Maybe$Just(
				_Utils_Tuple2(label, nonEmptyChildren)));
	});
var $elm_community$graph$Graph$dfsForest = F2(
	function (seeds, graph) {
		var visitNode = F2(
			function (ctx, trees) {
				return _Utils_Tuple2(
					_List_Nil,
					function (children) {
						return A2(
							$elm$core$List$cons,
							A2($elm_community$graph$Graph$Tree$inner, ctx, children),
							trees);
					});
			});
		return $elm$core$List$reverse(
			A5($elm_community$graph$Graph$guidedDfs, $elm_community$graph$Graph$alongOutgoingEdges, visitNode, seeds, _List_Nil, graph).a);
	});
var $elm_community$graph$Graph$empty = $elm_community$graph$Graph$Graph($elm_community$intdict$IntDict$empty);
var $elm_community$graph$Graph$insert = F2(
	function (nodeContext, graph) {
		return A3(
			$elm_community$graph$Graph$update,
			nodeContext.node.id,
			$elm$core$Basics$always(
				$elm$core$Maybe$Just(nodeContext)),
			graph);
	});
var $elm_community$graph$Graph$Tree$listForTraversal = F2(
	function (traversal, tree) {
		var f = F3(
			function (label, children, rest) {
				return A2(
					$elm$core$Basics$composeR,
					$elm$core$List$cons(label),
					rest);
			});
		var acc = $elm$core$Basics$identity;
		return A4(traversal, f, acc, tree, _List_Nil);
	});
var $elm_community$graph$Graph$Tree$root = function (tree) {
	var maybe = tree.b;
	return maybe;
};
var $elm_community$graph$Graph$Tree$preOrder = F3(
	function (visit, acc, tree) {
		var folder = F2(
			function (b, a) {
				return A3($elm_community$graph$Graph$Tree$preOrder, visit, a, b);
			});
		var _v0 = $elm_community$graph$Graph$Tree$root(tree);
		if (_v0.$ === 'Nothing') {
			return acc;
		} else {
			var _v1 = _v0.a;
			var label = _v1.a;
			var children = _v1.b;
			return A3(
				$elm$core$List$foldl,
				folder,
				A3(visit, label, children, acc),
				children);
		}
	});
var $elm_community$graph$Graph$Tree$preOrderList = $elm_community$graph$Graph$Tree$listForTraversal($elm_community$graph$Graph$Tree$preOrder);
var $elm_community$intdict$IntDict$map = F2(
	function (f, dict) {
		switch (dict.$) {
			case 'Empty':
				return $elm_community$intdict$IntDict$empty;
			case 'Leaf':
				var l = dict.a;
				return A2(
					$elm_community$intdict$IntDict$leaf,
					l.key,
					A2(f, l.key, l.value));
			default:
				var i = dict.a;
				return A3(
					$elm_community$intdict$IntDict$inner,
					i.prefix,
					A2($elm_community$intdict$IntDict$map, f, i.left),
					A2($elm_community$intdict$IntDict$map, f, i.right));
		}
	});
var $elm_community$graph$Graph$reverseEdges = function () {
	var updateContext = F2(
		function (nodeId, ctx) {
			return _Utils_update(
				ctx,
				{incoming: ctx.outgoing, outgoing: ctx.incoming});
		});
	return A2(
		$elm$core$Basics$composeR,
		$elm_community$graph$Graph$unGraph,
		A2(
			$elm$core$Basics$composeR,
			$elm_community$intdict$IntDict$map(updateContext),
			$elm_community$graph$Graph$Graph));
}();
var $elm_community$graph$Graph$stronglyConnectedComponents = function (graph) {
	var reversePostOrder = A3(
		$elm_community$graph$Graph$dfs,
		$elm_community$graph$Graph$onFinish(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.node;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.id;
					},
					$elm$core$List$cons))),
		_List_Nil,
		graph);
	return A2(
		$elm$core$Result$mapError,
		function (_v0) {
			var forest = A2(
				$elm_community$graph$Graph$dfsForest,
				reversePostOrder,
				$elm_community$graph$Graph$reverseEdges(graph));
			return A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$elm_community$graph$Graph$Tree$preOrderList,
					A2(
						$elm$core$Basics$composeR,
						A2($elm$core$List$foldr, $elm_community$graph$Graph$insert, $elm_community$graph$Graph$empty),
						$elm_community$graph$Graph$reverseEdges)),
				forest);
		},
		A2($elm_community$graph$Graph$checkForBackEdges, reversePostOrder, graph));
};
var $elm_community$graph$Graph$topologicalSort = function (_v0) {
	var graph = _v0.a;
	var ordering = _v0.b;
	var error = 'Graph.topologicalSort: Invalid `AcyclicGraph`, where the ordering contained nodes not present in the graph';
	return A2(
		$elm$core$List$map,
		function (id) {
			return A3($elm_community$graph$Graph$unsafeGet, error, id, graph);
		},
		ordering);
};
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$valueWithDefaultTypeAttribute = function (value) {
	return A3(
		$author$project$Morphir$IR$Value$mapValueAttributes,
		$elm$core$Basics$always(false),
		$elm$core$Basics$identity,
		value);
};
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression = F4(
	function (resolveReferenceName, moduleName, variables, _v36) {
		mapExpression:
		while (true) {
			var range = _v36.a;
			var expr = _v36.b;
			switch (expr.$) {
				case 'UnitExpr':
					return $elm$core$Result$Ok(
						$author$project$Morphir$IR$Value$Unit($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute));
				case 'Application':
					var expNodes = expr.a;
					var toApply = function (valuesReversed) {
						if (!valuesReversed.b) {
							return $elm$core$Result$Err(
								_List_fromArray(
									[
										$author$project$Morphir$Elm$IncrementalFrontend$Mapper$EmptyApply(
										A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range))
									]));
						} else {
							if (!valuesReversed.b.b) {
								var singleValue = valuesReversed.a;
								return $elm$core$Result$Ok(singleValue);
							} else {
								var lastValue = valuesReversed.a;
								var restOfValuesReversed = valuesReversed.b;
								return A2(
									$elm$core$Result$map,
									function (funValue) {
										return A3($author$project$Morphir$IR$Value$Apply, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute, funValue, lastValue);
									},
									toApply(restOfValuesReversed));
							}
						}
					};
					return A2(
						$elm$core$Result$andThen,
						A2($elm$core$Basics$composeR, $elm$core$List$reverse, toApply),
						A2(
							$elm$core$Result$mapError,
							$elm$core$List$concat,
							$author$project$Morphir$SDK$ResultList$keepAllErrors(
								A2(
									$elm$core$List$map,
									A3($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables),
									expNodes))));
				case 'OperatorApplication':
					var op = expr.a;
					var leftNode = expr.c;
					var rightNode = expr.d;
					switch (op) {
						case '<|':
							return A3(
								$elm$core$Result$map2,
								$author$project$Morphir$IR$Value$Apply($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
								A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, leftNode),
								A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, rightNode));
						case '|>':
							return A3(
								$elm$core$Result$map2,
								$author$project$Morphir$IR$Value$Apply($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
								A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, rightNode),
								A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, leftNode));
						default:
							return A4(
								$elm$core$Result$map3,
								F3(
									function (fun, arg1, arg2) {
										return A3(
											$author$project$Morphir$IR$Value$Apply,
											$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
											A3($author$project$Morphir$IR$Value$Apply, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute, fun, arg1),
											arg2);
									}),
								A3($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapOperator, moduleName, range, op),
								A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, leftNode),
								A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, rightNode));
					}
				case 'FunctionOrValue':
					var modName = expr.a;
					var localName = expr.b;
					return ($elm$core$List$isEmpty(modName) && A2($elm$core$Set$member, localName, variables)) ? $elm$core$Result$Ok(
						A2(
							$author$project$Morphir$IR$Value$Variable,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
							$author$project$Morphir$IR$Name$fromString(localName))) : A2(
						$elm$core$Result$andThen,
						function (_v40) {
							var firstChar = _v40.a;
							if ($elm$core$Char$isUpper(firstChar)) {
								var _v41 = _Utils_Tuple2(modName, localName);
								_v41$2:
								while (true) {
									if (!_v41.a.b) {
										switch (_v41.b) {
											case 'True':
												return $elm$core$Result$Ok(
													A2(
														$author$project$Morphir$IR$Value$Literal,
														$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
														$author$project$Morphir$IR$Literal$BoolLiteral(true)));
											case 'False':
												return $elm$core$Result$Ok(
													A2(
														$author$project$Morphir$IR$Value$Literal,
														$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
														$author$project$Morphir$IR$Literal$BoolLiteral(false)));
											default:
												break _v41$2;
										}
									} else {
										break _v41$2;
									}
								}
								return A2(
									$elm$core$Result$map,
									$author$project$Morphir$IR$Value$Constructor($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
									A2(
										$elm$core$Result$mapError,
										A2(
											$elm$core$Basics$composeR,
											$author$project$Morphir$Elm$IncrementalFrontend$Mapper$ResolveError(
												A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range)),
											$elm$core$List$singleton),
										A3(resolveReferenceName, modName, localName, $author$project$Morphir$IR$KindOfName$Constructor)));
							} else {
								return A2(
									$elm$core$Result$map,
									$author$project$Morphir$IR$Value$Reference($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
									A2(
										$elm$core$Result$mapError,
										A2(
											$elm$core$Basics$composeR,
											$author$project$Morphir$Elm$IncrementalFrontend$Mapper$ResolveError(
												A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range)),
											$elm$core$List$singleton),
										A3(resolveReferenceName, modName, localName, $author$project$Morphir$IR$KindOfName$Value)));
							}
						},
						A2(
							$elm$core$Result$fromMaybe,
							_List_fromArray(
								[
									A2(
									$author$project$Morphir$Elm$IncrementalFrontend$Mapper$NotSupported,
									A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range),
									'Empty value name')
								]),
							$elm$core$String$uncons(localName)));
				case 'IfBlock':
					var condNode = expr.a;
					var thenNode = expr.b;
					var elseNode = expr.c;
					return A4(
						$elm$core$Result$map3,
						$author$project$Morphir$IR$Value$IfThenElse($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, condNode),
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, thenNode),
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, elseNode));
				case 'PrefixOperator':
					var op = expr.a;
					return A3($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapOperator, moduleName, range, op);
				case 'Operator':
					var op = expr.a;
					return A3($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapOperator, moduleName, range, op);
				case 'Integer':
					var value = expr.a;
					return $elm$core$Result$Ok(
						A2(
							$author$project$Morphir$IR$Value$Literal,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
							$author$project$Morphir$IR$Literal$WholeNumberLiteral(value)));
				case 'Hex':
					var value = expr.a;
					return $elm$core$Result$Ok(
						A2(
							$author$project$Morphir$IR$Value$Literal,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
							$author$project$Morphir$IR$Literal$WholeNumberLiteral(value)));
				case 'Floatable':
					var value = expr.a;
					return $elm$core$Result$Ok(
						A2(
							$author$project$Morphir$IR$Value$Literal,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
							$author$project$Morphir$IR$Literal$FloatLiteral(value)));
				case 'Negation':
					var arg = expr.a;
					return A2(
						$elm$core$Result$map,
						A2($author$project$Morphir$IR$SDK$Basics$negate, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, arg));
				case 'Literal':
					var value = expr.a;
					return $elm$core$Result$Ok(
						A2(
							$author$project$Morphir$IR$Value$Literal,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
							$author$project$Morphir$IR$Literal$StringLiteral(value)));
				case 'CharLiteral':
					var value = expr.a;
					return $elm$core$Result$Ok(
						A2(
							$author$project$Morphir$IR$Value$Literal,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
							$author$project$Morphir$IR$Literal$CharLiteral(value)));
				case 'TupledExpression':
					var expNodes = expr.a;
					return A2(
						$elm$core$Result$map,
						$author$project$Morphir$IR$Value$Tuple($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
						A2(
							$elm$core$Result$mapError,
							$elm$core$List$concat,
							$author$project$Morphir$SDK$ResultList$keepAllErrors(
								A2(
									$elm$core$List$map,
									A3($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables),
									expNodes))));
				case 'ParenthesizedExpression':
					var expNode = expr.a;
					var $temp$resolveReferenceName = resolveReferenceName,
						$temp$moduleName = moduleName,
						$temp$variables = variables,
						$temp$_v36 = expNode;
					resolveReferenceName = $temp$resolveReferenceName;
					moduleName = $temp$moduleName;
					variables = $temp$variables;
					_v36 = $temp$_v36;
					continue mapExpression;
				case 'LetExpression':
					var letBlock = expr.a;
					return A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapLetExpression, resolveReferenceName, moduleName, variables, letBlock);
				case 'CaseExpression':
					var caseBlock = expr.a;
					return A3(
						$elm$core$Result$map2,
						$author$project$Morphir$IR$Value$PatternMatch($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, caseBlock.expression),
						A2(
							$elm$core$Result$mapError,
							$elm$core$List$concat,
							$author$project$Morphir$SDK$ResultList$keepAllErrors(
								A2(
									$elm$core$List$map,
									function (_v42) {
										var patternNode = _v42.a;
										var bodyNode = _v42.b;
										return A2(
											$elm$core$Result$andThen,
											function (_v43) {
												var patternVariables = _v43.a;
												var pattern = _v43.b;
												return A2(
													$elm$core$Result$map,
													function (caseBody) {
														return _Utils_Tuple2(pattern, caseBody);
													},
													A4(
														$author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression,
														resolveReferenceName,
														moduleName,
														A2($elm$core$Set$union, patternVariables, variables),
														bodyNode));
											},
											A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapPattern, resolveReferenceName, moduleName, variables, patternNode));
									},
									caseBlock.cases))));
				case 'LambdaExpression':
					var lambda = expr.a;
					var curriedLambda = F3(
						function (lambdaVariables, argNodes, bodyNode) {
							if (!argNodes.b) {
								return A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, lambdaVariables, bodyNode);
							} else {
								var firstArgNode = argNodes.a;
								var restOfArgNodes = argNodes.b;
								return A2(
									$elm$core$Result$andThen,
									function (_v45) {
										var argVariables = _v45.a;
										var argPattern = _v45.b;
										return A2(
											$elm$core$Result$map,
											A2($author$project$Morphir$IR$Value$Lambda, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute, argPattern),
											A3(
												curriedLambda,
												A2($elm$core$Set$union, argVariables, lambdaVariables),
												restOfArgNodes,
												bodyNode));
									},
									A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapPattern, resolveReferenceName, moduleName, lambdaVariables, firstArgNode));
							}
						});
					return A3(curriedLambda, variables, lambda.args, lambda.expression);
				case 'RecordExpr':
					var fieldNodes = expr.a;
					return A2(
						$elm$core$Result$map,
						$author$project$Morphir$IR$Value$Record($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
						A2(
							$elm$core$Result$map,
							$elm$core$Dict$fromList,
							A2(
								$elm$core$Result$mapError,
								$elm$core$List$concat,
								$author$project$Morphir$SDK$ResultList$keepAllErrors(
									A2(
										$elm$core$List$map,
										function (_v46) {
											var _v47 = _v46.a;
											var fieldName = _v47.b;
											var fieldValue = _v46.b;
											return A2(
												$elm$core$Result$map,
												$elm$core$Tuple$pair(
													$author$project$Morphir$IR$Name$fromString(fieldName)),
												A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, fieldValue));
										},
										A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, fieldNodes))))));
				case 'ListExpr':
					var itemNodes = expr.a;
					return A2(
						$elm$core$Result$map,
						$author$project$Morphir$IR$Value$List($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
						A2(
							$elm$core$Result$mapError,
							$elm$core$List$concat,
							$author$project$Morphir$SDK$ResultList$keepAllErrors(
								A2(
									$elm$core$List$map,
									A3($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables),
									itemNodes))));
				case 'RecordAccess':
					var targetNode = expr.a;
					var fieldNameNode = expr.b;
					return A2(
						$elm$core$Result$map,
						function (subjectValue) {
							return A3(
								$author$project$Morphir$IR$Value$Field,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
								subjectValue,
								$author$project$Morphir$IR$Name$fromString(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(fieldNameNode)));
						},
						A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, targetNode));
				case 'RecordAccessFunction':
					var fieldName = expr.a;
					return $elm$core$Result$Ok(
						A2(
							$author$project$Morphir$IR$Value$FieldFunction,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
							$author$project$Morphir$IR$Name$fromString(fieldName)));
				case 'RecordUpdateExpression':
					var _v48 = expr.a;
					var targetVarRange = _v48.a;
					var targetVarName = _v48.b;
					var fieldNodes = expr.b;
					var wrapInUpdateRecord = function (targetValue) {
						return A2(
							$elm$core$Result$map,
							A2($author$project$Morphir$IR$Value$UpdateRecord, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute, targetValue),
							A2(
								$elm$core$Result$map,
								$elm$core$Dict$fromList,
								A2(
									$elm$core$Result$mapError,
									$elm$core$List$concat,
									$author$project$Morphir$SDK$ResultList$keepAllErrors(
										A2(
											$elm$core$List$map,
											function (_v49) {
												var _v50 = _v49.a;
												var fieldName = _v50.b;
												var fieldValue = _v49.b;
												return A2(
													$elm$core$Result$map,
													$elm$core$Tuple$pair(
														$author$project$Morphir$IR$Name$fromString(fieldName)),
													A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveReferenceName, moduleName, variables, fieldValue));
											},
											A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, fieldNodes))))));
					};
					return A2($elm$core$Set$member, targetVarName, variables) ? wrapInUpdateRecord(
						A2(
							$author$project$Morphir$IR$Value$Variable,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
							$author$project$Morphir$IR$Name$fromString(targetVarName))) : A2(
						$elm$core$Result$andThen,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Morphir$IR$Value$Reference($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
							wrapInUpdateRecord),
						A2(
							$elm$core$Result$mapError,
							A2(
								$elm$core$Basics$composeR,
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$ResolveError(
									A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, targetVarRange)),
								$elm$core$List$singleton),
							A3(resolveReferenceName, _List_Nil, targetVarName, $author$project$Morphir$IR$KindOfName$Value)));
				default:
					return $elm$core$Result$Err(
						_List_fromArray(
							[
								A2(
								$author$project$Morphir$Elm$IncrementalFrontend$Mapper$NotSupported,
								A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range),
								'GLSLExpression')
							]));
			}
		}
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapFunction = F4(
	function (resolveName, moduleName, variables, _v33) {
		var functionRange = _v33.a;
		var _function = _v33.b;
		var inferValue = function (value) {
			return A2(
				$elm$core$Result$mapError,
				A2(
					$elm$core$Basics$composeR,
					$author$project$Morphir$Elm$IncrementalFrontend$Mapper$TypeCheckError(
						A2($elm$core$List$map, $author$project$Morphir$IR$Name$fromString, moduleName)),
					$elm$core$List$singleton),
				A2(
					$elm$core$Result$map,
					A2($author$project$Morphir$IR$Value$mapValueAttributes, $elm$core$Basics$identity, $elm$core$Tuple$second),
					A2($author$project$Morphir$Type$Infer$inferValue, $author$project$Morphir$IR$empty, value)));
		};
		var expression = A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			functionRange,
			$stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression(
				{
					args: $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration)._arguments,
					expression: $stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).expression
				}));
		var declaredOrInferredTypeResult = function (value) {
			var _v34 = _function.signature;
			if (_v34.$ === 'Just') {
				var _v35 = _v34.a;
				var signature = _v35.b;
				return A2(
					$elm$core$Result$map,
					$author$project$Morphir$IR$Type$mapTypeAttributes(
						$elm$core$Basics$always(true)),
					A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapTypeAnnotation, resolveName, signature.typeAnnotation));
			} else {
				return A2(
					$elm$core$Result$map,
					A2(
						$elm$core$Basics$composeR,
						$author$project$Morphir$IR$Value$valueAttribute,
						$author$project$Morphir$IR$Type$mapTypeAttributes(
							$elm$core$Basics$always(true))),
					inferValue(
						A3(
							$author$project$Morphir$IR$Value$mapValueAttributes,
							$elm$core$Basics$always(_Utils_Tuple0),
							$elm$core$Basics$identity,
							value)));
			}
		};
		return A2(
			$elm$core$Result$andThen,
			function (value) {
				return A2(
					$elm$core$Result$map,
					function (valueType) {
						return {
							body: A3(
								$author$project$Morphir$IR$Value$mapValueAttributes,
								$elm$core$Basics$always(false),
								$elm$core$Basics$identity,
								value),
							inputTypes: _List_Nil,
							outputType: valueType
						};
					},
					declaredOrInferredTypeResult(value));
			},
			A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, resolveName, moduleName, variables, expression));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapLetExpression = F4(
	function (nameResolver, moduleName, variables, letBlock) {
		var namesReferredByExpression = function (expression) {
			namesReferredByExpression:
			while (true) {
				_v0$14:
				while (true) {
					switch (expression.$) {
						case 'Application':
							var argNodes = expression.a;
							return A2(
								$elm$core$List$concatMap,
								A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, namesReferredByExpression),
								argNodes);
						case 'OperatorApplication':
							var _v1 = expression.c;
							var leftExp = _v1.b;
							var _v2 = expression.d;
							var rightExp = _v2.b;
							return _Utils_ap(
								namesReferredByExpression(leftExp),
								namesReferredByExpression(rightExp));
						case 'FunctionOrValue':
							if (!expression.a.b) {
								var name = expression.b;
								return _List_fromArray(
									[name]);
							} else {
								break _v0$14;
							}
						case 'IfBlock':
							var _v3 = expression.a;
							var condExp = _v3.b;
							var _v4 = expression.b;
							var thenExp = _v4.b;
							var _v5 = expression.c;
							var elseExp = _v5.b;
							return _Utils_ap(
								namesReferredByExpression(condExp),
								_Utils_ap(
									namesReferredByExpression(thenExp),
									namesReferredByExpression(elseExp)));
						case 'Negation':
							var _v6 = expression.a;
							var childExp = _v6.b;
							var $temp$expression = childExp;
							expression = $temp$expression;
							continue namesReferredByExpression;
						case 'TupledExpression':
							var argNodes = expression.a;
							return A2(
								$elm$core$List$concatMap,
								A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, namesReferredByExpression),
								argNodes);
						case 'ParenthesizedExpression':
							var _v7 = expression.a;
							var childExp = _v7.b;
							var $temp$expression = childExp;
							expression = $temp$expression;
							continue namesReferredByExpression;
						case 'LetExpression':
							var innerLetBlock = expression.a;
							return _Utils_ap(
								namesReferredByExpression(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(innerLetBlock.expression)),
								A2(
									$elm$core$List$concatMap,
									function (_v8) {
										var decl = _v8.b;
										if (decl.$ === 'LetFunction') {
											var _function = decl.a;
											return namesReferredByExpression(
												$stil4m$elm_syntax$Elm$Syntax$Node$value(
													$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).expression));
										} else {
											var _v10 = decl.b;
											var childExp = _v10.b;
											return namesReferredByExpression(childExp);
										}
									},
									innerLetBlock.declarations));
						case 'CaseExpression':
							var caseBlock = expression.a;
							return _Utils_ap(
								namesReferredByExpression(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(caseBlock.expression)),
								A2(
									$elm$core$List$concatMap,
									function (_v11) {
										var _v12 = _v11.b;
										var childExp = _v12.b;
										return namesReferredByExpression(childExp);
									},
									caseBlock.cases));
						case 'LambdaExpression':
							var lambda = expression.a;
							return namesReferredByExpression(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(lambda.expression));
						case 'RecordExpr':
							var setterNodes = expression.a;
							return A2(
								$elm$core$List$concatMap,
								function (_v13) {
									var _v14 = _v13.b;
									var _v15 = _v14.b;
									var childExp = _v15.b;
									return namesReferredByExpression(childExp);
								},
								setterNodes);
						case 'ListExpr':
							var argNodes = expression.a;
							return A2(
								$elm$core$List$concatMap,
								A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, namesReferredByExpression),
								argNodes);
						case 'RecordAccess':
							var _v16 = expression.a;
							var childExp = _v16.b;
							var $temp$expression = childExp;
							expression = $temp$expression;
							continue namesReferredByExpression;
						case 'RecordUpdateExpression':
							var _v17 = expression.a;
							var recordRef = _v17.b;
							var setterNodes = expression.b;
							return A2(
								$elm$core$List$cons,
								recordRef,
								A2(
									$elm$core$List$concatMap,
									function (_v18) {
										var _v19 = _v18.b;
										var _v20 = _v19.b;
										var childExp = _v20.b;
										return namesReferredByExpression(childExp);
									},
									setterNodes));
						default:
							break _v0$14;
					}
				}
				return _List_Nil;
			}
		};
		var letBlockToValue = F2(
			function (declarationNodes, inNode) {
				var declarationIndexForName = $elm$core$Dict$fromList(
					$elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (index, _v30) {
									var decl = _v30.b;
									if (decl.$ === 'LetFunction') {
										var _function = decl.a;
										return _List_fromArray(
											[
												_Utils_Tuple2(
												$stil4m$elm_syntax$Elm$Syntax$Node$value(
													$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).name),
												index)
											]);
									} else {
										var _v32 = decl.a;
										var pattern = _v32.b;
										return $elm$core$Set$toList(
											A2(
												$elm$core$Set$map,
												function (name) {
													return _Utils_Tuple2(name, index);
												},
												$author$project$Morphir$Elm$IncrementalFrontend$Mapper$namesBoundByPattern(pattern)));
									}
								}),
							declarationNodes)));
				var declarationDependencyGraph = function () {
					var nodes = A2(
						$elm$core$List$indexedMap,
						F2(
							function (index, declNode) {
								return A2($elm_community$graph$Graph$Node, index, declNode);
							}),
						declarationNodes);
					var edges = $elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (fromIndex, _v28) {
									var decl = _v28.b;
									if (decl.$ === 'LetFunction') {
										var _function = decl.a;
										return A2(
											$elm$core$List$filterMap,
											function (name) {
												return A2(
													$elm$core$Maybe$map,
													function (toIndex) {
														return A3($elm_community$graph$Graph$Edge, fromIndex, toIndex, name);
													},
													A2($elm$core$Dict$get, name, declarationIndexForName));
											},
											namesReferredByExpression(
												$stil4m$elm_syntax$Elm$Syntax$Node$value(
													$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).expression)));
									} else {
										var expression = decl.b;
										return A2(
											$elm$core$List$filterMap,
											function (name) {
												return A2(
													$elm$core$Maybe$map,
													function (toIndex) {
														return A3($elm_community$graph$Graph$Edge, fromIndex, toIndex, name);
													},
													A2($elm$core$Dict$get, name, declarationIndexForName));
											},
											namesReferredByExpression(
												$stil4m$elm_syntax$Elm$Syntax$Node$value(expression)));
									}
								}),
							declarationNodes));
					return A2($elm_community$graph$Graph$fromNodesAndEdges, nodes, edges);
				}();
				var allVariables = A2(
					$elm$core$Set$union,
					$elm$core$Set$fromList(
						$elm$core$Dict$keys(declarationIndexForName)),
					variables);
				var letDeclarationToValue = F2(
					function (letDeclarationNode, valueResult) {
						if (letDeclarationNode.b.$ === 'LetFunction') {
							var range = letDeclarationNode.a;
							var _function = letDeclarationNode.b.a;
							return A3(
								$elm$core$Result$map2,
								F2(
									function (bindingDef, inValue) {
										return A4(
											$author$project$Morphir$IR$Value$LetDefinition,
											$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
											$author$project$Morphir$IR$Name$fromString(
												$stil4m$elm_syntax$Elm$Syntax$Node$value(
													$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).name)),
											bindingDef,
											$author$project$Morphir$Elm$IncrementalFrontend$Mapper$valueWithDefaultTypeAttribute(inValue));
									}),
								A4(
									$author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapFunction,
									nameResolver,
									moduleName,
									allVariables,
									A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, _function)),
								valueResult);
						} else {
							var _v26 = letDeclarationNode.b;
							var patternNode = _v26.a;
							var expPattern = patternNode.b;
							var letExpressionNode = _v26.b;
							return A4(
								$elm$core$Result$map3,
								F3(
									function (_v27, bindValue, inValue) {
										var patternVariables = _v27.a;
										var bindPattern = _v27.b;
										return A4(
											$author$project$Morphir$IR$Value$Destructure,
											$author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute,
											bindPattern,
											$author$project$Morphir$Elm$IncrementalFrontend$Mapper$valueWithDefaultTypeAttribute(bindValue),
											$author$project$Morphir$Elm$IncrementalFrontend$Mapper$valueWithDefaultTypeAttribute(inValue));
									}),
								A4(
									$author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapPattern,
									nameResolver,
									moduleName,
									A2(
										$elm$core$Set$diff,
										$author$project$Morphir$Elm$IncrementalFrontend$Mapper$namesBoundByPattern(expPattern),
										allVariables),
									patternNode),
								A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, nameResolver, moduleName, allVariables, letExpressionNode),
								valueResult);
						}
					});
				var componentGraphToValue = F2(
					function (componentGraph, inValueResult) {
						var _v22 = $elm_community$graph$Graph$checkAcyclic(componentGraph);
						if (_v22.$ === 'Ok') {
							var acyclic = _v22.a;
							return A3(
								$elm$core$List$foldl,
								F2(
									function (nodeContext, innerSoFar) {
										return A2(letDeclarationToValue, nodeContext.node.label, innerSoFar);
									}),
								A2($elm$core$Result$map, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$valueWithDefaultTypeAttribute, inValueResult),
								$elm_community$graph$Graph$topologicalSort(acyclic));
						} else {
							return A3(
								$elm$core$Result$map2,
								$author$project$Morphir$IR$Value$LetRecursion($author$project$Morphir$Elm$IncrementalFrontend$Mapper$defaultValueAttribute),
								A2(
									$elm$core$Result$map,
									$elm$core$Dict$fromList,
									A2(
										$elm$core$Result$mapError,
										$elm$core$List$concat,
										$author$project$Morphir$SDK$ResultList$keepAllErrors(
											A2(
												$elm$core$List$map,
												function (graphNode) {
													var _v23 = graphNode.label;
													if (_v23.b.$ === 'LetFunction') {
														var range = _v23.a;
														var _function = _v23.b.a;
														return A2(
															$elm$core$Result$map,
															$elm$core$Tuple$pair(
																$author$project$Morphir$IR$Name$fromString(
																	$stil4m$elm_syntax$Elm$Syntax$Node$value(
																		$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).name))),
															A4(
																$author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapFunction,
																nameResolver,
																moduleName,
																allVariables,
																A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, _function)));
													} else {
														var range = _v23.a;
														var _v24 = _v23.b;
														return $elm$core$Result$Err(
															_List_fromArray(
																[
																	A2(
																	$author$project$Morphir$Elm$IncrementalFrontend$Mapper$NotSupported,
																	A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range),
																	'Recursive destructuring')
																]));
													}
												},
												$elm_community$graph$Graph$nodes(componentGraph))))),
								A2($elm$core$Result$map, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$valueWithDefaultTypeAttribute, inValueResult));
						}
					});
				var _v21 = $elm_community$graph$Graph$stronglyConnectedComponents(declarationDependencyGraph);
				if (_v21.$ === 'Ok') {
					var acyclic = _v21.a;
					return A3(
						$elm$core$List$foldl,
						F2(
							function (nodeContext, soFar) {
								return A2(letDeclarationToValue, nodeContext.node.label, soFar);
							}),
						A2(
							$elm$core$Result$map,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$valueWithDefaultTypeAttribute,
							A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, nameResolver, moduleName, allVariables, inNode)),
						$elm_community$graph$Graph$topologicalSort(acyclic));
				} else {
					var components = _v21.a;
					return A3(
						$elm$core$List$foldl,
						componentGraphToValue,
						A2(
							$elm$core$Result$map,
							$author$project$Morphir$Elm$IncrementalFrontend$Mapper$valueWithDefaultTypeAttribute,
							A4($author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapExpression, nameResolver, moduleName, allVariables, inNode)),
						components);
				}
			});
		return A2(letBlockToValue, letBlock.declarations, letBlock.expression);
	});
var $author$project$Morphir$Elm$ParsedModule$moduleName = function (_v0) {
	var file = _v0.a;
	var _v1 = $stil4m$elm_syntax$Elm$Syntax$Node$value(file.moduleDefinition);
	switch (_v1.$) {
		case 'NormalModule':
			var defaultModuleData = _v1.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(defaultModuleData.moduleName);
		case 'PortModule':
			var defaultModuleData = _v1.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(defaultModuleData.moduleName);
		default:
			var effectModuleData = _v1.a;
			return $stil4m$elm_syntax$Elm$Syntax$Node$value(effectModuleData.moduleName);
	}
};
var $author$project$Morphir$IR$Type$typeAttributes = function (tpe) {
	switch (tpe.$) {
		case 'Variable':
			var a = tpe.a;
			return a;
		case 'Reference':
			var a = tpe.a;
			return a;
		case 'Tuple':
			var a = tpe.a;
			return a;
		case 'Record':
			var a = tpe.a;
			return a;
		case 'ExtensibleRecord':
			var a = tpe.a;
			return a;
		case 'Function':
			var a = tpe.a;
			return a;
		default:
			var a = tpe.a;
			return a;
	}
};
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapDeclarationsToValue = F3(
	function (resolveName, parsedModule, decls) {
		var moduleName = $author$project$Morphir$Elm$ParsedModule$moduleName(parsedModule);
		return A2(
			$elm$core$Result$mapError,
			$elm$core$List$concat,
			$author$project$Morphir$SDK$ResultList$keepAllErrors(
				A2(
					$elm$core$List$filterMap,
					function (_v0) {
						var range = _v0.a;
						var decl = _v0.b;
						if (decl.$ === 'FunctionDeclaration') {
							var _function = decl.a;
							var valueName = function (localName) {
								return A2(
									$elm$core$Result$mapError,
									A2(
										$elm$core$Basics$composeR,
										$author$project$Morphir$Elm$IncrementalFrontend$Mapper$ResolveError(
											A2($author$project$Morphir$Elm$IncrementalFrontend$Mapper$SourceLocation, moduleName, range)),
										$elm$core$List$singleton),
									A3(resolveName, _List_Nil, localName, $author$project$Morphir$IR$KindOfName$Value));
							}(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).name));
							var valueDoc = A2(
								$elm$core$Maybe$withDefault,
								'',
								A2(
									$elm$core$Maybe$map,
									A2(
										$elm$core$Basics$composeR,
										$stil4m$elm_syntax$Elm$Syntax$Node$value,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$String$dropLeft(3),
											$elm$core$String$dropRight(2))),
									_function.documentation));
							var valueDef = A2(
								$elm$core$Result$map,
								function (maybeTypedValueDef) {
									var maybeValueType = $author$project$Morphir$IR$Type$typeAttributes(maybeTypedValueDef.outputType) ? $elm$core$Maybe$Just(
										A2(
											$author$project$Morphir$IR$Type$mapTypeAttributes,
											$elm$core$Basics$always(_Utils_Tuple0),
											maybeTypedValueDef.outputType)) : $elm$core$Maybe$Nothing;
									return _Utils_Tuple2(
										maybeValueType,
										A3(
											$author$project$Morphir$IR$Value$mapValueAttributes,
											$elm$core$Basics$always(_Utils_Tuple0),
											$elm$core$Basics$identity,
											maybeTypedValueDef.body));
								},
								A4(
									$author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapFunction,
									resolveName,
									moduleName,
									$elm$core$Set$empty,
									A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, _function)));
							return $elm$core$Maybe$Just(
								A3(
									$elm$core$Result$map2,
									F2(
										function (valName, valDef) {
											return _Utils_Tuple2(
												valName,
												_Utils_Tuple2(valDef, valueDoc));
										}),
									valueName,
									valueDef));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					},
					decls)));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$extractValues = F2(
	function (resolveValueName, parsedModule) {
		var declarationsAsDefintionsResult = A2(
			$elm$core$Result$map,
			$elm$core$Dict$fromList,
			A2(
				$elm$core$Result$mapError,
				A2($elm$core$Basics$composeR, $author$project$Morphir$Elm$IncrementalFrontend$MappingError, $elm$core$List$singleton),
				A3(
					$author$project$Morphir$Elm$IncrementalFrontend$Mapper$mapDeclarationsToValue,
					resolveValueName,
					parsedModule,
					$author$project$Morphir$Elm$ParsedModule$declarations(parsedModule))));
		var orderedValueNameResult = A2(
			$elm$core$Result$andThen,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Dict$toList,
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm$core$List$foldl,
						F2(
							function (_v4, dagResultSoFar) {
								var fQName = _v4.a;
								var _v5 = _v4.b;
								var _v6 = _v5.a;
								var body = _v6.b;
								var refs = $author$project$Morphir$IR$Value$collectReferences(body);
								return A2(
									$elm$core$Result$andThen,
									A2($author$project$Morphir$Dependency$DAG$insertNode, fQName, refs),
									dagResultSoFar);
							}),
						$elm$core$Result$Ok($author$project$Morphir$Dependency$DAG$empty)),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Result$mapError(
							function (_v7) {
								var fNode = _v7.a;
								var tNode = _v7.b;
								return _List_fromArray(
									[
										A2($author$project$Morphir$Elm$IncrementalFrontend$ValueCycleDetected, fNode, tNode)
									]);
							}),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Result$map($author$project$Morphir$Dependency$DAG$backwardTopologicalOrdering),
							$elm$core$Result$map($elm$core$List$concat))))),
			declarationsAsDefintionsResult);
		var orderedDeclarationAsDefinitions = A2(
			$elm$core$Result$map,
			function (_v0) {
				var fqNames = _v0.a;
				var defs = _v0.b;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (fqName, listSoFar) {
							var _v1 = A2($elm$core$Dict$get, fqName, defs);
							if (_v1.$ === 'Just') {
								var _v2 = _v1.a;
								var def = _v2.a;
								var doc = _v2.b;
								var _v3 = fqName;
								var name = _v3.c;
								return A2(
									$elm$core$List$append,
									listSoFar,
									_List_fromArray(
										[
											_Utils_Tuple3(name, doc, def)
										]));
							} else {
								return listSoFar;
							}
						}),
					_List_Nil,
					fqNames);
			},
			A2(
				$elm$core$Result$andThen,
				function (fqNames) {
					return A2(
						$elm$core$Result$map,
						$elm$core$Tuple$pair(fqNames),
						declarationsAsDefintionsResult);
				},
				orderedValueNameResult));
		return orderedDeclarationAsDefinitions;
	});
var $author$project$Morphir$IR$Repo$getPackageName = function (_v0) {
	var repo = _v0.a;
	return repo.packageName;
};
var $author$project$Morphir$Elm$ParsedModule$imports = function (_v0) {
	var file = _v0.a;
	return A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, file.imports);
};
var $author$project$Morphir$IR$Repo$ModuleAlreadyExist = function (a) {
	return {$: 'ModuleAlreadyExist', a: a};
};
var $author$project$Morphir$IR$Repo$TypeCycleDetected = function (a) {
	return {$: 'TypeCycleDetected', a: a};
};
var $author$project$Morphir$IR$Repo$ValueCycleDetected = function (a) {
	return {$: 'ValueCycleDetected', a: a};
};
var $author$project$Morphir$IR$Type$collectReferences = function (tpe) {
	var collectUnion = function (values) {
		return A3(
			$elm$core$List$foldl,
			$elm$core$Set$union,
			$elm$core$Set$empty,
			A2($elm$core$List$map, $author$project$Morphir$IR$Type$collectReferences, values));
	};
	switch (tpe.$) {
		case 'Variable':
			return $elm$core$Set$empty;
		case 'Reference':
			var fQName = tpe.b;
			var args = tpe.c;
			return A2(
				$elm$core$Set$insert,
				fQName,
				collectUnion(args));
		case 'Tuple':
			var elements = tpe.b;
			return collectUnion(elements);
		case 'Record':
			var fields = tpe.b;
			return collectUnion(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.tpe;
					},
					fields));
		case 'ExtensibleRecord':
			var fields = tpe.c;
			return collectUnion(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.tpe;
					},
					fields));
		case 'Function':
			var argType = tpe.b;
			var returnType = tpe.c;
			return collectUnion(
				_List_fromArray(
					[argType, returnType]));
		default:
			return $elm$core$Set$empty;
	}
};
var $author$project$Morphir$IR$Type$collectReferencesFromDefintion = function (typeDef) {
	if (typeDef.$ === 'TypeAliasDefinition') {
		var tpe = typeDef.b;
		return $author$project$Morphir$IR$Type$collectReferences(tpe);
	} else {
		var accessControlledType = typeDef.b;
		return A3(
			$elm$core$List$foldl,
			$elm$core$Set$union,
			$elm$core$Set$empty,
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Morphir$IR$Type$collectReferences),
				$elm$core$List$concat(
					$elm$core$Dict$values(accessControlledType.value))));
	}
};
var $author$project$Morphir$IR$Repo$ModuleCycleDetected = function (a) {
	return {$: 'ModuleCycleDetected', a: a};
};
var $author$project$Morphir$IR$Repo$updateModuleDependencies = F3(
	function (moduleName, dependencies, _v0) {
		var repo = _v0.a;
		return A2(
			$elm$core$Result$map,
			function (updatedModDependencies) {
				return $author$project$Morphir$IR$Repo$Repo(
					_Utils_update(
						repo,
						{moduleDependencies: updatedModDependencies}));
			},
			A2(
				$elm$core$Result$mapError,
				A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Repo$ModuleCycleDetected, $elm$core$List$singleton),
				A3($author$project$Morphir$Dependency$DAG$insertNode, moduleName, dependencies, repo.moduleDependencies)));
	});
var $author$project$Morphir$IR$Repo$insertModule = F4(
	function (moduleName, moduleDef, access, _v0) {
		var repo = _v0.a;
		var validationErrors = function () {
			var _v9 = A2($elm$core$Dict$get, moduleName, repo.modules);
			if (_v9.$ === 'Just') {
				return $elm$core$Maybe$Just(
					_List_fromArray(
						[
							$author$project$Morphir$IR$Repo$ModuleAlreadyExist(moduleName)
						]));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var allValuesInModule = A2(
			$elm$core$List$map,
			function (_v8) {
				var name = _v8.a;
				var accessControlledValueDef = _v8.b;
				return _Utils_Tuple2(
					A3(
						$author$project$Morphir$IR$FQName$fQName,
						$author$project$Morphir$IR$Repo$getPackageName(
							$author$project$Morphir$IR$Repo$Repo(repo)),
						moduleName,
						name),
					$author$project$Morphir$IR$Value$collectReferences(accessControlledValueDef.value.value.body));
			},
			$elm$core$Dict$toList(moduleDef.values));
		var updateRepoValueDependencies = function (_v7) {
			var r = _v7.a;
			return A2(
				$elm$core$Result$map,
				function (valueDag) {
					return $author$project$Morphir$IR$Repo$Repo(
						_Utils_update(
							r,
							{valueDependencies: valueDag}));
				},
				A3(
					$elm$core$List$foldl,
					F2(
						function (_v6, dagResultSoFar) {
							var valueFQN = _v6.a;
							var valueDeps = _v6.b;
							return A2(
								$elm$core$Result$andThen,
								A2(
									$elm$core$Basics$composeR,
									A2($author$project$Morphir$Dependency$DAG$insertNode, valueFQN, valueDeps),
									$elm$core$Result$mapError(
										A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Repo$ValueCycleDetected, $elm$core$List$singleton))),
								dagResultSoFar);
						}),
					$elm$core$Result$Ok(r.valueDependencies),
					allValuesInModule));
		};
		var allTypesInModule = A2(
			$elm$core$List$map,
			function (_v5) {
				var name = _v5.a;
				var accessControlledTypeDef = _v5.b;
				return _Utils_Tuple2(
					A3(
						$author$project$Morphir$IR$FQName$fQName,
						$author$project$Morphir$IR$Repo$getPackageName(
							$author$project$Morphir$IR$Repo$Repo(repo)),
						moduleName,
						name),
					$author$project$Morphir$IR$Type$collectReferencesFromDefintion(accessControlledTypeDef.value.value));
			},
			$elm$core$Dict$toList(moduleDef.types));
		var dependenciesCollectedFromTypesAndValues = function () {
			var filter = function (_v4) {
				var modName = _v4.b;
				return _Utils_eq(moduleName, modName) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(modName);
			};
			var depsFrom = function (target) {
				return A2(
					$elm$core$List$filterMap,
					filter,
					$elm$core$List$concat(
						A2(
							$elm$core$List$map,
							A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $elm$core$Set$toList),
							target)));
			};
			return $elm$core$Set$fromList(
				A2(
					$elm$core$List$append,
					depsFrom(allTypesInModule),
					depsFrom(allValuesInModule)));
		}();
		var updateRepoTypeDependencies = function (_v3) {
			var r = _v3.a;
			return A2(
				$elm$core$Result$map,
				function (typeDAG) {
					return $author$project$Morphir$IR$Repo$Repo(
						_Utils_update(
							r,
							{typeDependencies: typeDAG}));
				},
				A3(
					$elm$core$List$foldl,
					F2(
						function (_v2, dagResultSoFar) {
							var typeFQName = _v2.a;
							var typeList = _v2.b;
							return A2(
								$elm$core$Result$andThen,
								A2(
									$elm$core$Basics$composeR,
									A2($author$project$Morphir$Dependency$DAG$insertNode, typeFQName, typeList),
									$elm$core$Result$mapError(
										A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Repo$TypeCycleDetected, $elm$core$List$singleton))),
								dagResultSoFar);
						}),
					$elm$core$Result$Ok(r.typeDependencies),
					allTypesInModule));
		};
		return A2(
			$elm$core$Result$map,
			function (_v1) {
				var r = _v1.a;
				return $author$project$Morphir$IR$Repo$Repo(
					_Utils_update(
						r,
						{
							modules: A3(
								$elm$core$Dict$insert,
								moduleName,
								A2($author$project$Morphir$IR$AccessControlled$AccessControlled, access, moduleDef),
								r.modules)
						}));
			},
			A2(
				$elm$core$Result$andThen,
				A2($author$project$Morphir$IR$Repo$updateModuleDependencies, moduleName, dependenciesCollectedFromTypesAndValues),
				A2(
					$elm$core$Result$andThen,
					updateRepoValueDependencies,
					A2(
						$elm$core$Result$andThen,
						updateRepoTypeDependencies,
						A2(
							$elm$core$Maybe$withDefault,
							$elm$core$Result$Ok(
								$author$project$Morphir$IR$Repo$Repo(repo)),
							A2($elm$core$Maybe$map, $elm$core$Result$Err, validationErrors))))));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$TypeCycleDetected = F2(
	function (a, b) {
		return {$: 'TypeCycleDetected', a: a, b: b};
	});
var $elm$core$Set$filter = F2(
	function (isGood, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A2(
				$elm$core$Dict$filter,
				F2(
					function (key, _v1) {
						return isGood(key);
					}),
				dict));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$orderTypesByDependency = F3(
	function (thisPackageName, thisModuleName, unorderedTypeDefinitions) {
		var typeDefinitionsByName = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v6) {
					var name = _v6.a;
					var doc = _v6.b;
					var def = _v6.c;
					return _Utils_Tuple2(
						name,
						_Utils_Tuple2(def, doc));
				},
				unorderedTypeDefinitions));
		var keepLocalTypesOnly = function (allTypeNames) {
			return A2(
				$elm$core$Set$map,
				function (_v5) {
					var typeName = _v5.c;
					return typeName;
				},
				A2(
					$elm$core$Set$filter,
					function (_v4) {
						var packageName = _v4.a;
						var moduleName = _v4.b;
						return _Utils_eq(packageName, thisPackageName) && _Utils_eq(moduleName, thisModuleName);
					},
					allTypeNames));
		};
		var collectReferences = function (typeDef) {
			if (typeDef.$ === 'TypeAliasDefinition') {
				var typeExp = typeDef.b;
				return $author$project$Morphir$IR$Type$collectReferences(typeExp);
			} else {
				var accessControlledConstructors = typeDef.b;
				return A3(
					$elm$core$List$foldl,
					$elm$core$Set$union,
					$elm$core$Set$empty,
					A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Morphir$IR$Type$collectReferences),
						$elm$core$List$concat(
							$elm$core$Dict$values(accessControlledConstructors.value))));
			}
		};
		var buildDependencyGraph = A3(
			$elm$core$List$foldl,
			F2(
				function (_v2, dagResultSoFar) {
					var nextTypeName = _v2.a;
					var typeDef = _v2.c;
					return A2(
						$elm$core$Result$andThen,
						function (dagSoFar) {
							return A3(
								$author$project$Morphir$Dependency$DAG$insertNode,
								nextTypeName,
								keepLocalTypesOnly(
									collectReferences(typeDef)),
								dagSoFar);
						},
						dagResultSoFar);
				}),
			$elm$core$Result$Ok($author$project$Morphir$Dependency$DAG$empty),
			unorderedTypeDefinitions);
		return A2(
			$elm$core$Result$map,
			function (typeDependencies) {
				return A2(
					$elm$core$List$filterMap,
					function (typeName) {
						return A2(
							$elm$core$Maybe$map,
							function (_v1) {
								var def = _v1.a;
								var doc = _v1.b;
								return _Utils_Tuple3(typeName, doc, def);
							},
							A2($elm$core$Dict$get, typeName, typeDefinitionsByName));
					},
					$elm$core$List$concat(
						$author$project$Morphir$Dependency$DAG$backwardTopologicalOrdering(typeDependencies)));
			},
			A2(
				$elm$core$Result$mapError,
				function (_v0) {
					var from = _v0.a;
					var to = _v0.b;
					return _List_fromArray(
						[
							A2($author$project$Morphir$Elm$IncrementalFrontend$TypeCycleDetected, from, to)
						]);
				},
				buildDependencyGraph));
	});
var $author$project$Morphir$IR$Documented$Documented = F2(
	function (doc, value) {
		return {doc: doc, value: value};
	});
var $author$project$Morphir$IR$Repo$TypeAlreadyExist = function (a) {
	return {$: 'TypeAlreadyExist', a: a};
};
var $author$project$Morphir$IR$Module$emptyDefinition = {doc: $elm$core$Maybe$Nothing, types: $elm$core$Dict$empty, values: $elm$core$Dict$empty};
var $author$project$Morphir$IR$AccessControlled$map = F2(
	function (f, ac) {
		return A2(
			$author$project$Morphir$IR$AccessControlled$AccessControlled,
			ac.access,
			f(ac.value));
	});
var $author$project$Morphir$IR$Repo$modules = function (_v0) {
	var repo = _v0.a;
	return repo.modules;
};
var $author$project$Morphir$IR$AccessControlled$public = function (value) {
	return A2($author$project$Morphir$IR$AccessControlled$AccessControlled, $author$project$Morphir$IR$AccessControlled$Public, value);
};
var $author$project$Morphir$IR$Repo$insertType = F6(
	function (moduleName, typeName, typeDef, access, typeDoc, _v0) {
		var repo = _v0.a;
		var validateTypeExistsResult = function (accessControlledModuleDef) {
			var _v5 = A2($elm$core$Dict$get, typeName, accessControlledModuleDef.value.types);
			if (_v5.$ === 'Just') {
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							$author$project$Morphir$IR$Repo$TypeAlreadyExist(
							_Utils_Tuple3(repo.packageName, moduleName, typeName))
						]));
			} else {
				return $elm$core$Result$Ok(accessControlledModuleDef);
			}
		};
		var updateTypeDependency = function (_v4) {
			var r = _v4.a;
			return A2(
				$elm$core$Result$map,
				function (updatedTypeDep) {
					return $author$project$Morphir$IR$Repo$Repo(
						_Utils_update(
							r,
							{typeDependencies: updatedTypeDep}));
				},
				A2(
					$elm$core$Result$mapError,
					A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Repo$TypeCycleDetected, $elm$core$List$singleton),
					A3(
						$author$project$Morphir$Dependency$DAG$insertNode,
						A3($author$project$Morphir$IR$FQName$fQName, repo.packageName, moduleName, typeName),
						$author$project$Morphir$IR$Type$collectReferencesFromDefintion(typeDef),
						r.typeDependencies)));
		};
		var updateModuleDefWithType = F2(
			function (_v3, accessControlledModDef) {
				var r = _v3.a;
				return function (updatedModules) {
					return $author$project$Morphir$IR$Repo$Repo(
						_Utils_update(
							r,
							{modules: updatedModules}));
				}(
					function (updatedAccessControlledModDef) {
						return A3(
							$elm$core$Dict$insert,
							moduleName,
							updatedAccessControlledModDef,
							$author$project$Morphir$IR$Repo$modules(
								$author$project$Morphir$IR$Repo$Repo(r)));
					}(
						A2(
							$author$project$Morphir$IR$AccessControlled$map,
							function (modDef) {
								return function (updatedTypes) {
									return _Utils_update(
										modDef,
										{types: updatedTypes});
								}(
									A3(
										$elm$core$Dict$insert,
										typeName,
										A2(
											$author$project$Morphir$IR$AccessControlled$AccessControlled,
											access,
											A2($author$project$Morphir$IR$Documented$Documented, typeDoc, typeDef)),
										modDef.types));
							},
							accessControlledModDef)));
			});
		var moduleDepsFromType = $elm$core$Set$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v2) {
					var modName = _v2.b;
					return _Utils_eq(modName, moduleName) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(modName);
				},
				$elm$core$Set$toList(
					$author$project$Morphir$IR$Type$collectReferencesFromDefintion(typeDef))));
		var _v1 = A2($elm$core$Dict$get, moduleName, repo.modules);
		if (_v1.$ === 'Just') {
			var accessControlledModuleDef = _v1.a;
			return A2(
				$elm$core$Result$andThen,
				A2($author$project$Morphir$IR$Repo$updateModuleDependencies, moduleName, moduleDepsFromType),
				A2(
					$elm$core$Result$andThen,
					updateTypeDependency,
					A2(
						$elm$core$Result$map,
						updateModuleDefWithType(
							$author$project$Morphir$IR$Repo$Repo(repo)),
						validateTypeExistsResult(accessControlledModuleDef))));
		} else {
			return A2(
				$elm$core$Result$andThen,
				A2($author$project$Morphir$IR$Repo$updateModuleDependencies, moduleName, moduleDepsFromType),
				updateTypeDependency(
					A2(
						updateModuleDefWithType,
						$author$project$Morphir$IR$Repo$Repo(repo),
						$author$project$Morphir$IR$AccessControlled$public($author$project$Morphir$IR$Module$emptyDefinition))));
		}
	});
var $author$project$Morphir$IR$Repo$IllegalTypeUpdate = function (a) {
	return {$: 'IllegalTypeUpdate', a: a};
};
var $author$project$Morphir$IR$Repo$typeDependencies = function (_v0) {
	var repo = _v0.a;
	return repo.typeDependencies;
};
var $author$project$Morphir$IR$Repo$updateType = F6(
	function (moduleName, typeName, typeDef, typeAccess, typeDoc, repo) {
		var updateTypeInDef = F4(
			function (access, doc, def, _v3) {
				var r = _v3.a;
				var hasExternallyDependentTypes = A3(
					$elm$core$Basics$composeR,
					$elm$core$Set$isEmpty,
					$elm$core$Basics$not,
					A2(
						$elm$core$Set$filter,
						function (_v2) {
							var modName = _v2.b;
							return !_Utils_eq(moduleName, modName);
						},
						A2(
							$author$project$Morphir$Dependency$DAG$incomingEdges,
							_Utils_Tuple3(
								$author$project$Morphir$IR$Repo$getPackageName(
									$author$project$Morphir$IR$Repo$Repo(r)),
								moduleName,
								typeName),
							$author$project$Morphir$IR$Repo$typeDependencies(
								$author$project$Morphir$IR$Repo$Repo(r)))));
				return (hasExternallyDependentTypes && _Utils_eq(access, $author$project$Morphir$IR$AccessControlled$Private)) ? $elm$core$Result$Err(
					_List_fromArray(
						[
							$author$project$Morphir$IR$Repo$IllegalTypeUpdate('Change type Access while other types depend on it')
						])) : function (updatedDef) {
					return A2(
						$elm$core$Result$fromMaybe,
						_List_fromArray(
							[
								$author$project$Morphir$IR$Repo$ModuleNotFound(moduleName)
							]),
						A2(
							$elm$core$Maybe$map,
							A2(
								$elm$core$Basics$composeR,
								$author$project$Morphir$IR$AccessControlled$map(
									function (modDef) {
										return function (updatedTypes) {
											return _Utils_update(
												modDef,
												{types: updatedTypes});
										}(
											A3($elm$core$Dict$insert, typeName, updatedDef, modDef.types));
									}),
								A2(
									$elm$core$Basics$composeR,
									function (updatedAccessControlledModDef) {
										return A3(
											$elm$core$Dict$insert,
											moduleName,
											updatedAccessControlledModDef,
											$author$project$Morphir$IR$Repo$modules(
												$author$project$Morphir$IR$Repo$Repo(r)));
									},
									function (updatedModules) {
										return $author$project$Morphir$IR$Repo$Repo(
											_Utils_update(
												r,
												{modules: updatedModules}));
									})),
							A2(
								$elm$core$Dict$get,
								moduleName,
								$author$project$Morphir$IR$Repo$modules(
									$author$project$Morphir$IR$Repo$Repo(r)))));
				}(
					A2(
						$author$project$Morphir$IR$AccessControlled$AccessControlled,
						access,
						A2($author$project$Morphir$IR$Documented$Documented, doc, def)));
			});
		var updateTypeDependency = F2(
			function (def, _v1) {
				var r = _v1.a;
				return A2(
					$elm$core$Result$map,
					function (updatedTypeDep) {
						return $author$project$Morphir$IR$Repo$Repo(
							_Utils_update(
								r,
								{typeDependencies: updatedTypeDep}));
					},
					A2(
						$elm$core$Result$mapError,
						A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Repo$TypeCycleDetected, $elm$core$List$singleton),
						A3(
							$author$project$Morphir$Dependency$DAG$insertNode,
							A3($author$project$Morphir$IR$FQName$fQName, r.packageName, moduleName, typeName),
							$author$project$Morphir$IR$Type$collectReferencesFromDefintion(def),
							r.typeDependencies)));
			});
		var moduleDepsFromType = function (def) {
			return $elm$core$Set$fromList(
				A2(
					$elm$core$List$filterMap,
					function (_v0) {
						var modName = _v0.b;
						return _Utils_eq(modName, moduleName) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(modName);
					},
					$elm$core$Set$toList(
						$author$project$Morphir$IR$Type$collectReferencesFromDefintion(def))));
		};
		return A2(
			$elm$core$Result$andThen,
			A2(
				$author$project$Morphir$IR$Repo$updateModuleDependencies,
				moduleName,
				moduleDepsFromType(typeDef)),
			A2(
				$elm$core$Result$andThen,
				updateTypeDependency(typeDef),
				A4(updateTypeInDef, typeAccess, typeDoc, typeDef, repo)));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$processType = F6(
	function (moduleName, typeName, typeDef, access, doc, repo) {
		var _v0 = A2(
			$elm$core$Dict$get,
			moduleName,
			$author$project$Morphir$IR$Repo$modules(repo));
		if (_v0.$ === 'Just') {
			var existingModDef = _v0.a;
			var _v1 = A2($elm$core$Dict$member, typeName, existingModDef.value.types);
			if (_v1) {
				return A2(
					$elm$core$Result$mapError,
					A2(
						$elm$core$Basics$composeR,
						$author$project$Morphir$Elm$IncrementalFrontend$RepoError('Cannot process type'),
						$elm$core$List$singleton),
					A6($author$project$Morphir$IR$Repo$updateType, moduleName, typeName, typeDef, access, doc, repo));
			} else {
				return A2(
					$elm$core$Result$mapError,
					A2(
						$elm$core$Basics$composeR,
						$author$project$Morphir$Elm$IncrementalFrontend$RepoError('Cannot process type'),
						$elm$core$List$singleton),
					A6($author$project$Morphir$IR$Repo$insertType, moduleName, typeName, typeDef, access, doc, repo));
			}
		} else {
			return $elm$core$Result$Ok(repo);
		}
	});
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $author$project$Morphir$IR$Repo$TypeCheckError = F3(
	function (a, b, c) {
		return {$: 'TypeCheckError', a: a, b: b, c: c};
	});
var $author$project$Morphir$IR$Value$definitionToSpecification = function (def) {
	return {
		inputs: A2(
			$elm$core$List$map,
			function (_v0) {
				var name = _v0.a;
				var tpe = _v0.c;
				return _Utils_Tuple2(name, tpe);
			},
			def.inputTypes),
		output: def.outputType
	};
};
var $author$project$Morphir$IR$Type$CustomTypeSpecification = F2(
	function (a, b) {
		return {$: 'CustomTypeSpecification', a: a, b: b};
	});
var $author$project$Morphir$IR$Type$TypeAliasSpecification = F2(
	function (a, b) {
		return {$: 'TypeAliasSpecification', a: a, b: b};
	});
var $author$project$Morphir$IR$AccessControlled$withPrivateAccess = function (ac) {
	var _v0 = ac.access;
	if (_v0.$ === 'Public') {
		return ac.value;
	} else {
		return ac.value;
	}
};
var $author$project$Morphir$IR$Type$definitionToSpecificationWithPrivate = function (def) {
	if (def.$ === 'TypeAliasDefinition') {
		var params = def.a;
		var exp = def.b;
		return A2($author$project$Morphir$IR$Type$TypeAliasSpecification, params, exp);
	} else {
		var params = def.a;
		var accessControlledCtors = def.b;
		return A2(
			$author$project$Morphir$IR$Type$CustomTypeSpecification,
			params,
			$author$project$Morphir$IR$AccessControlled$withPrivateAccess(accessControlledCtors));
	}
};
var $author$project$Morphir$IR$Documented$map = F2(
	function (f, d) {
		return A2(
			$author$project$Morphir$IR$Documented$Documented,
			d.doc,
			f(d.value));
	});
var $author$project$Morphir$IR$Module$definitionToSpecificationWithPrivate = function (def) {
	return {
		doc: def.doc,
		types: $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var path = _v0.a;
					var accessControlledType = _v0.b;
					return _Utils_Tuple2(
						path,
						A2(
							$author$project$Morphir$IR$Documented$map,
							$author$project$Morphir$IR$Type$definitionToSpecificationWithPrivate,
							$author$project$Morphir$IR$AccessControlled$withPrivateAccess(accessControlledType)));
				},
				$elm$core$Dict$toList(def.types))),
		values: $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v1) {
					var path = _v1.a;
					var accessControlledValue = _v1.b;
					return _Utils_Tuple2(
						path,
						A2(
							$author$project$Morphir$IR$Documented$map,
							$author$project$Morphir$IR$Value$definitionToSpecification,
							$author$project$Morphir$IR$AccessControlled$withPrivateAccess(accessControlledValue)));
				},
				$elm$core$Dict$toList(def.values)))
	};
};
var $author$project$Morphir$IR$Package$definitionToSpecificationWithPrivate = function (def) {
	return {
		modules: $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var path = _v0.a;
					var accessControlledModule = _v0.b;
					return _Utils_Tuple2(
						path,
						$author$project$Morphir$IR$Module$definitionToSpecificationWithPrivate(
							$author$project$Morphir$IR$AccessControlled$withPrivateAccess(accessControlledModule)));
				},
				$elm$core$Dict$toList(def.modules)))
	};
};
var $author$project$Morphir$IR$flattenPackages = F2(
	function (packages, f) {
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var packageName = _v0.a;
					var _package = _v0.b;
					return A2(f, packageName, _package);
				},
				$elm$core$Dict$toList(packages)));
	});
var $author$project$Morphir$IR$fromPackageSpecifications = function (packageSpecs) {
	var packageValueSpecifications = F2(
		function (packageName, packageSpec) {
			return A2(
				$elm$core$List$concatMap,
				function (_v6) {
					var moduleName = _v6.a;
					var moduleSpec = _v6.b;
					return A2(
						$elm$core$List$map,
						function (_v7) {
							var valueName = _v7.a;
							var valueSpec = _v7.b;
							return _Utils_Tuple2(
								_Utils_Tuple3(packageName, moduleName, valueName),
								valueSpec.value);
						},
						$elm$core$Dict$toList(moduleSpec.values));
				},
				$elm$core$Dict$toList(packageSpec.modules));
		});
	var packageTypeSpecifications = F2(
		function (packageName, packageSpec) {
			return A2(
				$elm$core$List$concatMap,
				function (_v4) {
					var moduleName = _v4.a;
					var moduleSpec = _v4.b;
					return A2(
						$elm$core$List$map,
						function (_v5) {
							var typeName = _v5.a;
							var typeSpec = _v5.b;
							return _Utils_Tuple2(
								_Utils_Tuple3(packageName, moduleName, typeName),
								typeSpec.value);
						},
						$elm$core$Dict$toList(moduleSpec.types));
				},
				$elm$core$Dict$toList(packageSpec.modules));
		});
	var packageTypeConstructors = F2(
		function (packageName, packageSpec) {
			return A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var moduleName = _v0.a;
					var moduleSpec = _v0.b;
					return A2(
						$elm$core$List$concatMap,
						function (_v1) {
							var typeName = _v1.a;
							var typeSpec = _v1.b;
							var _v2 = typeSpec.value;
							if (_v2.$ === 'CustomTypeSpecification') {
								var params = _v2.a;
								var constructors = _v2.b;
								return A2(
									$elm$core$List$map,
									function (_v3) {
										var ctorName = _v3.a;
										var ctorArgs = _v3.b;
										return _Utils_Tuple2(
											_Utils_Tuple3(packageName, moduleName, ctorName),
											_Utils_Tuple3(
												_Utils_Tuple3(packageName, moduleName, typeName),
												params,
												ctorArgs));
									},
									$elm$core$Dict$toList(constructors));
							} else {
								return _List_Nil;
							}
						},
						$elm$core$Dict$toList(moduleSpec.types));
				},
				$elm$core$Dict$toList(packageSpec.modules));
		});
	return {
		typeConstructors: A2($author$project$Morphir$IR$flattenPackages, packageSpecs, packageTypeConstructors),
		typeSpecifications: A2($author$project$Morphir$IR$flattenPackages, packageSpecs, packageTypeSpecifications),
		valueDefinitions: $elm$core$Dict$empty,
		valueSpecifications: A2($author$project$Morphir$IR$flattenPackages, packageSpecs, packageValueSpecifications)
	};
};
var $author$project$Morphir$IR$fromDistribution = function (_v0) {
	var libraryName = _v0.a;
	var dependencies = _v0.b;
	var packageDef = _v0.c;
	var packageValueDefinitions = $elm$core$Dict$fromList(
		A2(
			$elm$core$List$concatMap,
			function (_v1) {
				var moduleName = _v1.a;
				var moduleDef = _v1.b;
				return A2(
					$elm$core$List$map,
					function (_v2) {
						var valueName = _v2.a;
						var valueDef = _v2.b;
						return _Utils_Tuple2(
							_Utils_Tuple3(libraryName, moduleName, valueName),
							valueDef.value.value);
					},
					$elm$core$Dict$toList(moduleDef.value.values));
			},
			$elm$core$Dict$toList(packageDef.modules)));
	var packageSpecs = A3(
		$elm$core$Dict$insert,
		libraryName,
		$author$project$Morphir$IR$Package$definitionToSpecificationWithPrivate(packageDef),
		dependencies);
	var specificationsOnly = $author$project$Morphir$IR$fromPackageSpecifications(packageSpecs);
	return _Utils_update(
		specificationsOnly,
		{valueDefinitions: packageValueDefinitions});
};
var $author$project$Morphir$Type$Infer$applySolutionToAnnotatedDefinition = F4(
	function (ir, typeVarByIndex, annotatedDef, _v0) {
		var residualConstraints = _v0.a;
		var solutionMap = _v0.b;
		var typeVarByType = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v2) {
					var name = _v2.a;
					var idx = _v2.b;
					return _Utils_Tuple2(
						_List_fromArray(
							[
								't',
								$elm$core$String$fromInt(idx)
							]),
						A2($author$project$Morphir$IR$Type$Variable, _Utils_Tuple0, name));
				},
				$elm$core$Dict$toList(typeVarByIndex)));
		return function (valDef) {
			return _Utils_update(
				valDef,
				{
					body: A2($author$project$Morphir$Type$Infer$fixNumberLiterals, ir, valDef.body)
				});
		}(
			A3(
				$author$project$Morphir$IR$Value$mapDefinitionAttributes,
				$elm$core$Basics$identity,
				function (_v1) {
					var va = _v1.a;
					var metaVar = _v1.b;
					return _Utils_Tuple2(
						va,
						A2(
							$elm$core$Maybe$withDefault,
							A2(
								$author$project$Morphir$IR$Type$Variable,
								_Utils_Tuple0,
								_List_fromArray(
									[
										't',
										$elm$core$String$fromInt(metaVar)
									])),
							A2(
								$elm$core$Maybe$map,
								$author$project$Morphir$IR$Type$substituteTypeVariables(typeVarByType),
								A2(
									$elm$core$Maybe$map,
									$author$project$Morphir$Type$MetaTypeMapping$metaTypeToConcreteType(solutionMap),
									A2($author$project$Morphir$Type$Solve$get, metaVar, solutionMap)))));
				},
				annotatedDef));
	});
var $author$project$Morphir$Type$Infer$inferValueDefinition = F2(
	function (ir, def) {
		var _v0 = A2(
			$author$project$Morphir$Type$Count$apply,
			0,
			A3($author$project$Morphir$Type$Infer$constrainDefinition, ir, $elm$core$Dict$empty, def));
		var count = _v0.a;
		var _v1 = _v0.b;
		var defVar = _v1.a;
		var annotatedDef = _v1.b;
		var _v2 = _v1.c;
		var constraints = _v2.a;
		var typeVarToIndex = _v2.b;
		var solution = A2($author$project$Morphir$Type$Infer$solve, ir, constraints);
		return A2(
			$elm$core$Result$map,
			A3($author$project$Morphir$Type$Infer$applySolutionToAnnotatedDefinition, ir, typeVarToIndex, annotatedDef),
			solution);
	});
var $author$project$Morphir$IR$Repo$ValueAlreadyExist = function (a) {
	return {$: 'ValueAlreadyExist', a: a};
};
var $author$project$Morphir$IR$Repo$insertTypedValue = F6(
	function (moduleName, valueName, valueDef, valueAccess, valueDoc, repo) {
		var validateValueExistsResult = function (accessControlledModuleDef) {
			var _v4 = A2($elm$core$Dict$get, valueName, accessControlledModuleDef.value.values);
			if (_v4.$ === 'Just') {
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							$author$project$Morphir$IR$Repo$ValueAlreadyExist(valueName)
						]));
			} else {
				return $elm$core$Result$Ok(accessControlledModuleDef);
			}
		};
		var updateValueDependency = function (_v3) {
			var r = _v3.a;
			return A2(
				$elm$core$Result$map,
				function (updatedValueDep) {
					return $author$project$Morphir$IR$Repo$Repo(
						_Utils_update(
							r,
							{valueDependencies: updatedValueDep}));
				},
				A2(
					$elm$core$Result$mapError,
					A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Repo$ValueCycleDetected, $elm$core$List$singleton),
					A3(
						$author$project$Morphir$Dependency$DAG$insertNode,
						A3($author$project$Morphir$IR$FQName$fQName, r.packageName, moduleName, valueName),
						$author$project$Morphir$IR$Value$collectReferences(valueDef.body),
						r.valueDependencies)));
		};
		var updateModuleDefWithValue = F2(
			function (_v2, accessControlledModDef) {
				var r = _v2.a;
				return function (updatedModules) {
					return $author$project$Morphir$IR$Repo$Repo(
						_Utils_update(
							r,
							{modules: updatedModules}));
				}(
					function (updatedAccessControlledModDef) {
						return A3(
							$elm$core$Dict$insert,
							moduleName,
							updatedAccessControlledModDef,
							$author$project$Morphir$IR$Repo$modules(
								$author$project$Morphir$IR$Repo$Repo(r)));
					}(
						A2(
							$author$project$Morphir$IR$AccessControlled$map,
							function (modDef) {
								return function (updatedValues) {
									return _Utils_update(
										modDef,
										{values: updatedValues});
								}(
									A3(
										$elm$core$Dict$insert,
										valueName,
										A2(
											$author$project$Morphir$IR$AccessControlled$AccessControlled,
											valueAccess,
											A2($author$project$Morphir$IR$Documented$Documented, valueDoc, valueDef)),
										modDef.values));
							},
							accessControlledModDef)));
			});
		var moduleDepsFromValueDef = $elm$core$Set$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v1) {
					var modName = _v1.b;
					return _Utils_eq(modName, moduleName) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(modName);
				},
				$elm$core$Set$toList(
					$author$project$Morphir$IR$Value$collectReferences(valueDef.body))));
		var _v0 = A2(
			$elm$core$Dict$get,
			moduleName,
			$author$project$Morphir$IR$Repo$modules(repo));
		if (_v0.$ === 'Just') {
			var accessControlledModuleDef = _v0.a;
			return A2(
				$elm$core$Result$andThen,
				A2($author$project$Morphir$IR$Repo$updateModuleDependencies, moduleName, moduleDepsFromValueDef),
				A2(
					$elm$core$Result$andThen,
					updateValueDependency,
					A2(
						$elm$core$Result$map,
						updateModuleDefWithValue(repo),
						validateValueExistsResult(accessControlledModuleDef))));
		} else {
			return $elm$core$Result$Err(
				_List_fromArray(
					[
						$author$project$Morphir$IR$Repo$ModuleNotFound(moduleName)
					]));
		}
	});
var $author$project$Morphir$IR$Repo$toDistribution = function (_v0) {
	var repo = _v0.a;
	return A3(
		$author$project$Morphir$IR$Distribution$Library,
		repo.packageName,
		repo.dependencies,
		{modules: repo.modules});
};
var $author$project$Morphir$IR$Value$typeAndValueToDefinition = F2(
	function (valueType, value) {
		var liftLambdaArguments = F3(
			function (args, bodyType, body) {
				liftLambdaArguments:
				while (true) {
					var _v0 = _Utils_Tuple2(body, bodyType);
					if ((((_v0.a.$ === 'Lambda') && (_v0.a.b.$ === 'AsPattern')) && (_v0.a.b.b.$ === 'WildcardPattern')) && (_v0.b.$ === 'Function')) {
						var _v1 = _v0.a;
						var va = _v1.a;
						var _v2 = _v1.b;
						var argName = _v2.c;
						var lambdaBody = _v1.c;
						var _v3 = _v0.b;
						var argType = _v3.b;
						var returnType = _v3.c;
						var $temp$args = _Utils_ap(
							args,
							_List_fromArray(
								[
									_Utils_Tuple3(argName, va, argType)
								])),
							$temp$bodyType = returnType,
							$temp$body = lambdaBody;
						args = $temp$args;
						bodyType = $temp$bodyType;
						body = $temp$body;
						continue liftLambdaArguments;
					} else {
						return {body: body, inputTypes: args, outputType: bodyType};
					}
				}
			});
		return A3(liftLambdaArguments, _List_Nil, valueType, value);
	});
var $author$project$Morphir$IR$Repo$insertValue = F7(
	function (moduleName, valueName, maybeValueType, value, access, valueDoc, repo) {
		var ir = $author$project$Morphir$IR$fromDistribution(
			$author$project$Morphir$IR$Repo$toDistribution(repo));
		if (maybeValueType.$ === 'Just') {
			var valueType = maybeValueType.a;
			var valueDef = A2($author$project$Morphir$IR$Value$typeAndValueToDefinition, valueType, value);
			return A2(
				$elm$core$Result$andThen,
				function (typedValueDef) {
					return A6($author$project$Morphir$IR$Repo$insertTypedValue, moduleName, valueName, typedValueDef, access, valueDoc, repo);
				},
				A2(
					$elm$core$Result$mapError,
					A2(
						$elm$core$Basics$composeR,
						A2($author$project$Morphir$IR$Repo$TypeCheckError, moduleName, valueName),
						$elm$core$List$singleton),
					A2(
						$elm$core$Result$map,
						A2($author$project$Morphir$IR$Value$mapDefinitionAttributes, $elm$core$Basics$identity, $elm$core$Tuple$second),
						A2($author$project$Morphir$Type$Infer$inferValueDefinition, ir, valueDef))));
		} else {
			return A2(
				$elm$core$Result$andThen,
				function (typedValue) {
					var typedValueDef = A2(
						$author$project$Morphir$IR$Value$typeAndValueToDefinition,
						$author$project$Morphir$IR$Value$valueAttribute(typedValue),
						typedValue);
					return A6($author$project$Morphir$IR$Repo$insertTypedValue, moduleName, valueName, typedValueDef, access, valueDoc, repo);
				},
				A2(
					$elm$core$Result$mapError,
					A2(
						$elm$core$Basics$composeR,
						A2($author$project$Morphir$IR$Repo$TypeCheckError, moduleName, valueName),
						$elm$core$List$singleton),
					A2(
						$elm$core$Result$map,
						A2($author$project$Morphir$IR$Value$mapValueAttributes, $elm$core$Basics$identity, $elm$core$Tuple$second),
						A2($author$project$Morphir$Type$Infer$inferValue, ir, value))));
		}
	});
var $elm$core$Debug$log = _Debug_log;
var $elm$core$String$cons = _String_cons;
var $elm$core$Char$toUpper = _Char_toUpper;
var $author$project$Morphir$IR$Name$capitalize = function (string) {
	var _v0 = $elm$core$String$uncons(string);
	if (_v0.$ === 'Just') {
		var _v1 = _v0.a;
		var headChar = _v1.a;
		var tailString = _v1.b;
		return A2(
			$elm$core$String$cons,
			$elm$core$Char$toUpper(headChar),
			tailString);
	} else {
		return string;
	}
};
var $author$project$Morphir$IR$Name$toList = function (words) {
	return words;
};
var $author$project$Morphir$IR$Name$toCamelCase = function (name) {
	var _v0 = $author$project$Morphir$IR$Name$toList(name);
	if (!_v0.b) {
		return '';
	} else {
		var head = _v0.a;
		var tail = _v0.b;
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$cons,
				head,
				A2($elm$core$List$map, $author$project$Morphir$IR$Name$capitalize, tail)));
	}
};
var $author$project$Morphir$IR$Path$toList = function (names) {
	return names;
};
var $author$project$Morphir$IR$Path$toString = F3(
	function (nameToString, sep, path) {
		return A2(
			$elm$core$String$join,
			sep,
			A2(
				$elm$core$List$map,
				nameToString,
				$author$project$Morphir$IR$Path$toList(path)));
	});
var $author$project$Morphir$IR$Name$toTitleCase = function (name) {
	return A2(
		$elm$core$String$join,
		'',
		A2(
			$elm$core$List$map,
			$author$project$Morphir$IR$Name$capitalize,
			$author$project$Morphir$IR$Name$toList(name)));
};
var $author$project$Morphir$Dependency$DAG$outgoingEdges = F2(
	function (fromNode, _v0) {
		var edges = _v0.a;
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Set$empty,
			A2($elm$core$Dict$get, fromNode, edges));
	});
var $author$project$Morphir$IR$Repo$valueDependencies = function (_v0) {
	var repo = _v0.a;
	return repo.valueDependencies;
};
var $author$project$Morphir$IR$Repo$updateValue = F7(
	function (moduleName, valueName, maybeValueType, value, access, doc, repo) {
		var removeValue = function (_v2) {
			var r = _v2.a;
			var valueFQN = _Utils_Tuple3(
				$author$project$Morphir$IR$Repo$getPackageName(repo),
				moduleName,
				valueName);
			return A2(
				$elm$core$Result$map,
				function (_v1) {
					var updatedRepoValue = _v1.a.a;
					var updatedValueDependencies = _v1.b;
					return $author$project$Morphir$IR$Repo$Repo(
						_Utils_update(
							updatedRepoValue,
							{valueDependencies: updatedValueDependencies}));
				},
				A2(
					$elm$core$Result$map,
					function (updatedRepo) {
						return A2(
							$elm$core$Tuple$pair,
							updatedRepo,
							A3(
								$elm$core$Set$foldl,
								$author$project$Morphir$Dependency$DAG$removeEdge(valueFQN),
								$author$project$Morphir$IR$Repo$valueDependencies(updatedRepo),
								A2(
									$author$project$Morphir$Dependency$DAG$outgoingEdges,
									valueFQN,
									$author$project$Morphir$IR$Repo$valueDependencies(updatedRepo))));
					},
					A2(
						$elm$core$Result$fromMaybe,
						_List_fromArray(
							[
								$author$project$Morphir$IR$Repo$ModuleNotFound(moduleName)
							]),
						A2(
							$elm$core$Maybe$map,
							function (accessModDef) {
								return $author$project$Morphir$IR$Repo$Repo(
									_Utils_update(
										r,
										{
											modules: A3($elm$core$Dict$insert, moduleName, accessModDef, r.modules)
										}));
							},
							A2(
								$elm$core$Maybe$map,
								$author$project$Morphir$IR$AccessControlled$map(
									function (modDef) {
										return _Utils_update(
											modDef,
											{
												values: A2($elm$core$Dict$remove, valueName, modDef.values)
											});
									}),
								A2(
									$elm$core$Dict$get,
									moduleName,
									$author$project$Morphir$IR$Repo$modules(repo)))))));
		};
		var ir = $author$project$Morphir$IR$fromDistribution(
			$author$project$Morphir$IR$Repo$toDistribution(repo));
		if (maybeValueType.$ === 'Just') {
			var valueType = maybeValueType.a;
			var valueDef = A2($author$project$Morphir$IR$Value$typeAndValueToDefinition, valueType, value);
			return A2(
				$elm$core$Result$andThen,
				function (typedValueDef) {
					return A2(
						$elm$core$Result$andThen,
						A5($author$project$Morphir$IR$Repo$insertTypedValue, moduleName, valueName, typedValueDef, access, doc),
						removeValue(repo));
				},
				A2(
					$elm$core$Result$mapError,
					A2(
						$elm$core$Basics$composeR,
						A2($author$project$Morphir$IR$Repo$TypeCheckError, moduleName, valueName),
						$elm$core$List$singleton),
					A2(
						$elm$core$Result$map,
						A2($author$project$Morphir$IR$Value$mapDefinitionAttributes, $elm$core$Basics$identity, $elm$core$Tuple$second),
						A2($author$project$Morphir$Type$Infer$inferValueDefinition, ir, valueDef))));
		} else {
			return A2(
				$elm$core$Result$andThen,
				function (typedValue) {
					var typedValueDef = A2(
						$author$project$Morphir$IR$Value$typeAndValueToDefinition,
						$author$project$Morphir$IR$Value$valueAttribute(typedValue),
						typedValue);
					return A2(
						$elm$core$Result$andThen,
						A5($author$project$Morphir$IR$Repo$insertTypedValue, moduleName, valueName, typedValueDef, access, doc),
						removeValue(repo));
				},
				A2(
					$elm$core$Result$mapError,
					A2(
						$elm$core$Basics$composeR,
						A2($author$project$Morphir$IR$Repo$TypeCheckError, moduleName, valueName),
						$elm$core$List$singleton),
					A2(
						$elm$core$Result$map,
						A2($author$project$Morphir$IR$Value$mapValueAttributes, $elm$core$Basics$identity, $elm$core$Tuple$second),
						A2($author$project$Morphir$Type$Infer$inferValue, ir, value))));
		}
	});
var $author$project$Morphir$Elm$IncrementalFrontend$processValue = F6(
	function (access, moduleName, valueName, _v0, valueDoc, repo) {
		var maybeValueType = _v0.a;
		var body = _v0.b;
		var _v1 = A2(
			$elm$core$Debug$log,
			'processing value',
			$elm$core$String$concat(
				_List_fromArray(
					[
						A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', moduleName),
						'.',
						$author$project$Morphir$IR$Name$toCamelCase(valueName)
					])));
		var _v2 = A2(
			$elm$core$Dict$get,
			moduleName,
			$author$project$Morphir$IR$Repo$modules(repo));
		if (_v2.$ === 'Just') {
			var existingModDef = _v2.a;
			var _v3 = A2($elm$core$Dict$member, valueName, existingModDef.value.values);
			if (_v3) {
				return A2(
					$elm$core$Result$mapError,
					A2(
						$elm$core$Basics$composeR,
						$author$project$Morphir$Elm$IncrementalFrontend$RepoError('Cannot process value'),
						$elm$core$List$singleton),
					A7($author$project$Morphir$IR$Repo$updateValue, moduleName, valueName, maybeValueType, body, access, valueDoc, repo));
			} else {
				return A2(
					$elm$core$Result$mapError,
					A2(
						$elm$core$Basics$composeR,
						$author$project$Morphir$Elm$IncrementalFrontend$RepoError('Cannot process value'),
						$elm$core$List$singleton),
					A7($author$project$Morphir$IR$Repo$insertValue, moduleName, valueName, maybeValueType, body, access, valueDoc, repo));
			}
		} else {
			return $elm$core$Result$Ok(repo);
		}
	});
var $author$project$Morphir$Elm$IncrementalResolve$ImportedLocalNameNotFound = F3(
	function (a, b, c) {
		return {$: 'ImportedLocalNameNotFound', a: a, b: b, c: c};
	});
var $author$project$Morphir$Elm$IncrementalResolve$ImportedModuleNotFound = function (a) {
	return {$: 'ImportedModuleNotFound', a: a};
};
var $author$project$Morphir$Elm$IncrementalResolve$ImportingConstructorsOfNonCustomType = F2(
	function (a, b) {
		return {$: 'ImportingConstructorsOfNonCustomType', a: a, b: b};
	});
var $author$project$Morphir$Elm$IncrementalResolve$ResolvedImports = F5(
	function (visibleNamesByModuleName, moduleNamesByAliasOrSingleModuleName, moduleNamesByLocalTypeName, moduleNamesByLocalValueName, moduleNamesByLocalConstructorName) {
		return {moduleNamesByAliasOrSingleModuleName: moduleNamesByAliasOrSingleModuleName, moduleNamesByLocalConstructorName: moduleNamesByLocalConstructorName, moduleNamesByLocalTypeName: moduleNamesByLocalTypeName, moduleNamesByLocalValueName: moduleNamesByLocalValueName, visibleNamesByModuleName: visibleNamesByModuleName};
	});
var $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit = function (a) {
	return {$: 'Explicit', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType = F2(
	function (name, open) {
		return {name: name, open: open};
	});
var $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose = function (a) {
	return {$: 'FunctionExpose', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Import$Import = F3(
	function (moduleName, moduleAlias, exposingList) {
		return {exposingList: exposingList, moduleAlias: moduleAlias, moduleName: moduleName};
	});
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose = function (a) {
	return {$: 'TypeExpose', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose = function (a) {
	return {$: 'TypeOrAliasExpose', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange = {
	end: {column: 0, row: 0},
	start: {column: 0, row: 0}
};
var $author$project$Morphir$Elm$IncrementalResolve$defaultImports = function () {
	var er = $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange;
	var en = function (a) {
		return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, a);
	};
	var defaultBasicValueImports = A2(
		$elm$core$List$map,
		A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose, en),
		_List_fromArray(
			['toFloat', 'round', 'floor', 'ceiling', 'truncate', 'max', 'min', 'compare', 'not', 'xor', 'modBy', 'remainderBy', 'negate', 'abs', 'clamp', 'sqrt', 'logBase', 'e', 'pi', 'cos', 'sin', 'tan', 'acos', 'asin', 'atan', 'atan2', 'degrees', 'radians', 'turns', 'toPolar', 'fromPolar', 'isNaN', 'isInfinite', 'identity', 'always', 'never']));
	var defaultBasicTypeImports = A2(
		$elm$core$List$map,
		en,
		_List_fromArray(
			[
				$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose('Int'),
				$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose('Float'),
				$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
				A2(
					$stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType,
					'Order',
					$elm$core$Maybe$Just(er))),
				$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose('Bool'),
				$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose('Never')
			]));
	var defaultBasicImports = _Utils_ap(defaultBasicTypeImports, defaultBasicValueImports);
	return _List_fromArray(
		[
			A3(
			$stil4m$elm_syntax$Elm$Syntax$Import$Import,
			en(
				_List_fromArray(
					['Basics'])),
			$elm$core$Maybe$Nothing,
			$elm$core$Maybe$Just(
				en(
					$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(defaultBasicImports)))),
			A3(
			$stil4m$elm_syntax$Elm$Syntax$Import$Import,
			en(
				_List_fromArray(
					['List'])),
			$elm$core$Maybe$Nothing,
			$elm$core$Maybe$Just(
				en(
					$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
						_List_fromArray(
							[
								en(
								$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose('List'))
							]))))),
			A3(
			$stil4m$elm_syntax$Elm$Syntax$Import$Import,
			en(
				_List_fromArray(
					['Maybe'])),
			$elm$core$Maybe$Nothing,
			$elm$core$Maybe$Just(
				en(
					$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
						_List_fromArray(
							[
								en(
								$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType,
										'Maybe',
										$elm$core$Maybe$Just(er))))
							]))))),
			A3(
			$stil4m$elm_syntax$Elm$Syntax$Import$Import,
			en(
				_List_fromArray(
					['Result'])),
			$elm$core$Maybe$Nothing,
			$elm$core$Maybe$Just(
				en(
					$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
						_List_fromArray(
							[
								en(
								$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType,
										'Result',
										$elm$core$Maybe$Just(er))))
							]))))),
			A3(
			$stil4m$elm_syntax$Elm$Syntax$Import$Import,
			en(
				_List_fromArray(
					['String'])),
			$elm$core$Maybe$Nothing,
			$elm$core$Maybe$Just(
				en(
					$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
						_List_fromArray(
							[
								en(
								$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose('String'))
							]))))),
			A3(
			$stil4m$elm_syntax$Elm$Syntax$Import$Import,
			en(
				_List_fromArray(
					['Char'])),
			$elm$core$Maybe$Nothing,
			$elm$core$Maybe$Just(
				en(
					$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
						_List_fromArray(
							[
								en(
								$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose('Char'))
							]))))),
			A3(
			$stil4m$elm_syntax$Elm$Syntax$Import$Import,
			en(
				_List_fromArray(
					['Tuple'])),
			$elm$core$Maybe$Nothing,
			$elm$core$Maybe$Nothing)
		]);
}();
var $author$project$Morphir$Elm$IncrementalResolve$insertOrCreateSet = F2(
	function (item, maybeSet) {
		if (maybeSet.$ === 'Just') {
			var set = maybeSet.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$Set$insert, item, set));
		} else {
			return $elm$core$Maybe$Just(
				$elm$core$Set$singleton(item));
		}
	});
var $author$project$Morphir$Elm$IncrementalResolve$insertVisibleName = F3(
	function (name, kindOfName, visibleNames) {
		switch (kindOfName.$) {
			case 'Type':
				return _Utils_update(
					visibleNames,
					{
						types: A2($elm$core$Set$insert, name, visibleNames.types)
					});
			case 'Constructor':
				return _Utils_update(
					visibleNames,
					{
						constructors: A2($elm$core$Set$insert, name, visibleNames.constructors)
					});
			default:
				return _Utils_update(
					visibleNames,
					{
						values: A2($elm$core$Set$insert, name, visibleNames.values)
					});
		}
	});
var $author$project$Morphir$Elm$IncrementalResolve$insertOrCreateVisibleNames = F3(
	function (kindOfName, name, maybeVisibleNames) {
		if (maybeVisibleNames.$ === 'Just') {
			var visibleNames = maybeVisibleNames.a;
			return $elm$core$Maybe$Just(
				A3($author$project$Morphir$Elm$IncrementalResolve$insertVisibleName, name, kindOfName, visibleNames));
		} else {
			return $elm$core$Maybe$Just(
				{constructors: $elm$core$Set$empty, types: $elm$core$Set$empty, values: $elm$core$Set$empty});
		}
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Morphir$IR$Type$OpaqueTypeSpecification = function (a) {
	return {$: 'OpaqueTypeSpecification', a: a};
};
var $author$project$Morphir$IR$AccessControlled$withPublicAccess = function (ac) {
	var _v0 = ac.access;
	if (_v0.$ === 'Public') {
		return $elm$core$Maybe$Just(ac.value);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Morphir$IR$Type$definitionToSpecification = function (def) {
	if (def.$ === 'TypeAliasDefinition') {
		var params = def.a;
		var exp = def.b;
		return A2($author$project$Morphir$IR$Type$TypeAliasSpecification, params, exp);
	} else {
		var params = def.a;
		var accessControlledCtors = def.b;
		var _v1 = $author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledCtors);
		if (_v1.$ === 'Just') {
			var ctors = _v1.a;
			return A2($author$project$Morphir$IR$Type$CustomTypeSpecification, params, ctors);
		} else {
			return $author$project$Morphir$IR$Type$OpaqueTypeSpecification(params);
		}
	}
};
var $author$project$Morphir$IR$Module$definitionToSpecification = function (def) {
	return {
		doc: def.doc,
		types: $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v0) {
					var path = _v0.a;
					var accessControlledType = _v0.b;
					return A2(
						$elm$core$Maybe$map,
						function (typeDef) {
							return _Utils_Tuple2(
								path,
								A2($author$project$Morphir$IR$Documented$map, $author$project$Morphir$IR$Type$definitionToSpecification, typeDef));
						},
						$author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledType));
				},
				$elm$core$Dict$toList(def.types))),
		values: $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v1) {
					var path = _v1.a;
					var accessControlledValue = _v1.b;
					return A2(
						$elm$core$Maybe$map,
						function (valueDef) {
							return _Utils_Tuple2(
								path,
								A2($author$project$Morphir$IR$Documented$map, $author$project$Morphir$IR$Value$definitionToSpecification, valueDef));
						},
						$author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledValue));
				},
				$elm$core$Dict$toList(def.values)))
	};
};
var $author$project$Morphir$IR$Repo$lookupModuleSpecification = F3(
	function (packageName, moduleName, _v0) {
		var repo = _v0.a;
		return _Utils_eq(packageName, repo.packageName) ? A2(
			$elm$core$Maybe$map,
			$author$project$Morphir$IR$Module$definitionToSpecification,
			A2(
				$elm$core$Maybe$map,
				$author$project$Morphir$IR$AccessControlled$withPrivateAccess,
				A2($elm$core$Dict$get, moduleName, repo.modules))) : A2(
			$elm$core$Maybe$andThen,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.modules;
				},
				$elm$core$Dict$get(moduleName)),
			A2($elm$core$Dict$get, packageName, repo.dependencies));
	});
var $stil4m$elm_syntax$Elm$Syntax$Node$map = F2(
	function (f, _v0) {
		var r = _v0.a;
		var a = _v0.b;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			r,
			f(a));
	});
var $author$project$Morphir$Elm$IncrementalResolve$sdkModuleMapping = function () {
	var morphirSdkPrefix = function (elmModuleName) {
		return _Utils_Tuple2(
			_List_fromArray(
				[elmModuleName]),
			_List_fromArray(
				['Morphir', 'SDK', elmModuleName]));
	};
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				morphirSdkPrefix('Basics'),
				morphirSdkPrefix('List'),
				morphirSdkPrefix('Dict'),
				morphirSdkPrefix('Set'),
				morphirSdkPrefix('Maybe'),
				morphirSdkPrefix('Result'),
				morphirSdkPrefix('String'),
				morphirSdkPrefix('Char'),
				morphirSdkPrefix('Tuple'),
				morphirSdkPrefix('Regex')
			]));
}();
var $author$project$Morphir$Elm$IncrementalResolve$mapImport = function (imp) {
	var _v0 = A2(
		$elm$core$Dict$get,
		$stil4m$elm_syntax$Elm$Syntax$Node$value(imp.moduleName),
		$author$project$Morphir$Elm$IncrementalResolve$sdkModuleMapping);
	if (_v0.$ === 'Just') {
		var sdkModuleName = _v0.a;
		return _Utils_update(
			imp,
			{
				moduleAlias: $elm$core$Maybe$Just(imp.moduleName),
				moduleName: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$map,
					$elm$core$Basics$always(sdkModuleName),
					imp.moduleName)
			});
	} else {
		return imp;
	}
};
var $author$project$Morphir$Elm$IncrementalResolve$NoMorphirPackageFoundForElmModule = function (a) {
	return {$: 'NoMorphirPackageFoundForElmModule', a: a};
};
var $author$project$Morphir$IR$Repo$dependsOnPackages = function (_v0) {
	var repo = _v0.a;
	return $elm$core$Set$fromList(
		$elm$core$Dict$keys(repo.dependencies));
};
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $author$project$Morphir$IR$Path$isPrefixOf = F2(
	function (path, prefix) {
		isPrefixOf:
		while (true) {
			var _v0 = _Utils_Tuple2(prefix, path);
			if (!_v0.a.b) {
				return true;
			} else {
				if (!_v0.b.b) {
					return false;
				} else {
					var _v1 = _v0.a;
					var pathHead = _v1.a;
					var pathTail = _v1.b;
					var _v2 = _v0.b;
					var prefixHead = _v2.a;
					var prefixTail = _v2.b;
					if (_Utils_eq(prefixHead, pathHead)) {
						var $temp$path = prefixTail,
							$temp$prefix = pathTail;
						path = $temp$path;
						prefix = $temp$prefix;
						continue isPrefixOf;
					} else {
						return false;
					}
				}
			}
		}
	});
var $author$project$Morphir$Elm$IncrementalResolve$resolveModuleName = F2(
	function (repo, elmModuleName) {
		var visiblePackageNames = A2(
			$elm$core$Set$insert,
			$author$project$Morphir$IR$Repo$getPackageName(repo),
			$author$project$Morphir$IR$Repo$dependsOnPackages(repo));
		var modulePath = A2($elm$core$List$map, $author$project$Morphir$IR$Name$fromString, elmModuleName);
		var findMatchingPackage = function (packageNames) {
			findMatchingPackage:
			while (true) {
				if (!packageNames.b) {
					return $elm$core$Result$Err(
						$author$project$Morphir$Elm$IncrementalResolve$NoMorphirPackageFoundForElmModule(elmModuleName));
				} else {
					var nextPackage = packageNames.a;
					var remainingPackages = packageNames.b;
					if (A2($author$project$Morphir$IR$Path$isPrefixOf, modulePath, nextPackage)) {
						return $elm$core$Result$Ok(
							_Utils_Tuple2(
								nextPackage,
								A2(
									$elm$core$List$drop,
									$elm$core$List$length(nextPackage),
									modulePath)));
					} else {
						var $temp$packageNames = remainingPackages;
						packageNames = $temp$packageNames;
						continue findMatchingPackage;
					}
				}
			}
		};
		return findMatchingPackage(
			$elm$core$Set$toList(visiblePackageNames));
	});
var $author$project$Morphir$Elm$IncrementalResolve$resolveImports = F2(
	function (repo, imports) {
		var moduleSpecToVisibleNames = function (moduleSpec) {
			return {
				constructors: $elm$core$Set$fromList(
					A2(
						$elm$core$List$concatMap,
						function (_v19) {
							var typeSpec = _v19.b;
							var _v20 = typeSpec.value;
							if (_v20.$ === 'CustomTypeSpecification') {
								var constructors = _v20.b;
								return $elm$core$Dict$keys(constructors);
							} else {
								return _List_Nil;
							}
						},
						$elm$core$Dict$toList(moduleSpec.types))),
				types: $elm$core$Set$fromList(
					$elm$core$Dict$keys(moduleSpec.types)),
				values: $elm$core$Set$fromList(
					$elm$core$Dict$keys(moduleSpec.values))
			};
		};
		var maybeAddModuleName = F3(
			function (imp, resolvedModuleName, resolvedImports) {
				var _v17 = imp.moduleName;
				if (_v17.b.b && (!_v17.b.b.b)) {
					var _v18 = _v17.b;
					var singleModuleName = _v18.a;
					return _Utils_update(
						resolvedImports,
						{
							moduleNamesByAliasOrSingleModuleName: A3(
								$elm$core$Dict$update,
								singleModuleName,
								$author$project$Morphir$Elm$IncrementalResolve$insertOrCreateSet(resolvedModuleName),
								resolvedImports.moduleNamesByAliasOrSingleModuleName)
						});
				} else {
					return resolvedImports;
				}
			});
		var maybeAddAlias = F3(
			function (imp, resolvedModuleName, resolvedImports) {
				var _v14 = imp.moduleAlias;
				if (((_v14.$ === 'Just') && _v14.a.b.b) && (!_v14.a.b.b.b)) {
					var _v15 = _v14.a;
					var _v16 = _v15.b;
					var alias = _v16.a;
					return _Utils_update(
						resolvedImports,
						{
							moduleNamesByAliasOrSingleModuleName: A3(
								$elm$core$Dict$update,
								alias,
								$author$project$Morphir$Elm$IncrementalResolve$insertOrCreateSet(resolvedModuleName),
								resolvedImports.moduleNamesByAliasOrSingleModuleName)
						});
				} else {
					return resolvedImports;
				}
			});
		var addModuleSpec = F3(
			function (qualifiedModuleName, moduleSpec, resolvedImports) {
				return _Utils_update(
					resolvedImports,
					{
						visibleNamesByModuleName: A3(
							$elm$core$Dict$update,
							qualifiedModuleName,
							$elm$core$Basics$always(
								$elm$core$Maybe$Just(
									moduleSpecToVisibleNames(moduleSpec))),
							resolvedImports.visibleNamesByModuleName)
					});
			});
		var addLocalName = F4(
			function (kindOfName, qualifiedModuleName, name, resolvedImports) {
				switch (kindOfName.$) {
					case 'Type':
						return _Utils_update(
							resolvedImports,
							{
								moduleNamesByLocalTypeName: A3(
									$elm$core$Dict$update,
									name,
									$author$project$Morphir$Elm$IncrementalResolve$insertOrCreateSet(qualifiedModuleName),
									resolvedImports.moduleNamesByLocalTypeName),
								visibleNamesByModuleName: A3(
									$elm$core$Dict$update,
									qualifiedModuleName,
									A2($author$project$Morphir$Elm$IncrementalResolve$insertOrCreateVisibleNames, kindOfName, name),
									resolvedImports.visibleNamesByModuleName)
							});
					case 'Constructor':
						return _Utils_update(
							resolvedImports,
							{
								moduleNamesByLocalConstructorName: A3(
									$elm$core$Dict$update,
									name,
									$author$project$Morphir$Elm$IncrementalResolve$insertOrCreateSet(qualifiedModuleName),
									resolvedImports.moduleNamesByLocalConstructorName),
								visibleNamesByModuleName: A3(
									$elm$core$Dict$update,
									qualifiedModuleName,
									A2($author$project$Morphir$Elm$IncrementalResolve$insertOrCreateVisibleNames, kindOfName, name),
									resolvedImports.visibleNamesByModuleName)
							});
					default:
						return _Utils_update(
							resolvedImports,
							{
								moduleNamesByLocalValueName: A3(
									$elm$core$Dict$update,
									name,
									$author$project$Morphir$Elm$IncrementalResolve$insertOrCreateSet(qualifiedModuleName),
									resolvedImports.moduleNamesByLocalValueName),
								visibleNamesByModuleName: A3(
									$elm$core$Dict$update,
									qualifiedModuleName,
									A2($author$project$Morphir$Elm$IncrementalResolve$insertOrCreateVisibleNames, kindOfName, name),
									resolvedImports.visibleNamesByModuleName)
							});
				}
			});
		var addLocalNames = F4(
			function (imp, qualifiedModuleName, moduleSpec, resolvedImports) {
				var _v0 = imp.exposingList;
				if (_v0.$ === 'Just') {
					var _v1 = _v0.a;
					var exposingList = _v1.b;
					if (exposingList.$ === 'All') {
						var addValues = function (resolved) {
							return A3(
								$elm$core$List$foldl,
								A2(addLocalName, $author$project$Morphir$IR$KindOfName$Value, qualifiedModuleName),
								resolved,
								$elm$core$Dict$keys(moduleSpec.values));
						};
						var addTypes = function (resolved) {
							return A3(
								$elm$core$List$foldl,
								A2(addLocalName, $author$project$Morphir$IR$KindOfName$Type, qualifiedModuleName),
								resolved,
								$elm$core$Dict$keys(moduleSpec.types));
						};
						var addCtors = function (resolved) {
							return A3(
								$elm$core$List$foldl,
								A2(addLocalName, $author$project$Morphir$IR$KindOfName$Constructor, qualifiedModuleName),
								resolved,
								A2(
									$elm$core$List$concatMap,
									function (_v3) {
										var typeName = _v3.a;
										var documentedTypeSpec = _v3.b;
										var _v4 = documentedTypeSpec.value;
										_v4$2:
										while (true) {
											switch (_v4.$) {
												case 'TypeAliasSpecification':
													if (_v4.b.$ === 'Record') {
														var _v5 = _v4.b;
														return _List_fromArray(
															[typeName]);
													} else {
														break _v4$2;
													}
												case 'CustomTypeSpecification':
													var ctors = _v4.b;
													return $elm$core$Dict$keys(ctors);
												default:
													break _v4$2;
											}
										}
										return _List_Nil;
									},
									$elm$core$Dict$toList(moduleSpec.types)));
						};
						return $elm$core$Result$Ok(
							addValues(
								addCtors(
									addTypes(resolvedImports))));
					} else {
						var explicitExposeNodes = exposingList.a;
						return A3(
							$elm$core$List$foldl,
							F2(
								function (_v6, resolvedImportsSoFar) {
									var explicitExpose = _v6.b;
									var addTypeOrConstructor = function (typeName) {
										return A2(
											$elm$core$Result$andThen,
											function (documentedTypeSpec) {
												var _v11 = documentedTypeSpec.value;
												if ((_v11.$ === 'TypeAliasSpecification') && (_v11.b.$ === 'Record')) {
													var _v12 = _v11.b;
													return A2(
														$elm$core$Result$map,
														function (soFar) {
															return A4(
																addLocalName,
																$author$project$Morphir$IR$KindOfName$Constructor,
																qualifiedModuleName,
																typeName,
																A4(addLocalName, $author$project$Morphir$IR$KindOfName$Type, qualifiedModuleName, typeName, soFar));
														},
														resolvedImportsSoFar);
												} else {
													return A2(
														$elm$core$Result$map,
														A3(addLocalName, $author$project$Morphir$IR$KindOfName$Type, qualifiedModuleName, typeName),
														resolvedImportsSoFar);
												}
											},
											A2(
												$elm$core$Result$fromMaybe,
												A3($author$project$Morphir$Elm$IncrementalResolve$ImportedLocalNameNotFound, qualifiedModuleName, typeName, $author$project$Morphir$IR$KindOfName$Type),
												A2($elm$core$Dict$get, typeName, moduleSpec.types)));
									};
									switch (explicitExpose.$) {
										case 'InfixExpose':
											return resolvedImportsSoFar;
										case 'FunctionExpose':
											var localName = explicitExpose.a;
											var valueName = $author$project$Morphir$IR$Name$fromString(localName);
											return A2($elm$core$Dict$member, valueName, moduleSpec.values) ? A2(
												$elm$core$Result$map,
												A3(addLocalName, $author$project$Morphir$IR$KindOfName$Value, qualifiedModuleName, valueName),
												resolvedImportsSoFar) : $elm$core$Result$Err(
												A3($author$project$Morphir$Elm$IncrementalResolve$ImportedLocalNameNotFound, qualifiedModuleName, valueName, $author$project$Morphir$IR$KindOfName$Value));
										case 'TypeOrAliasExpose':
											var localName = explicitExpose.a;
											var typeName = $author$project$Morphir$IR$Name$fromString(localName);
											return A2($elm$core$Dict$member, typeName, moduleSpec.types) ? addTypeOrConstructor(typeName) : $elm$core$Result$Err(
												A3($author$project$Morphir$Elm$IncrementalResolve$ImportedLocalNameNotFound, qualifiedModuleName, typeName, $author$project$Morphir$IR$KindOfName$Type));
										default:
											var ctorExpose = explicitExpose.a;
											var typeName = $author$project$Morphir$IR$Name$fromString(ctorExpose.name);
											var _v8 = ctorExpose.open;
											if (_v8.$ === 'Just') {
												return A2(
													$elm$core$Result$andThen,
													function (documentedTypeSpec) {
														var _v9 = documentedTypeSpec.value;
														_v9$2:
														while (true) {
															switch (_v9.$) {
																case 'TypeAliasSpecification':
																	if (_v9.b.$ === 'Record') {
																		var _v10 = _v9.b;
																		return A2(
																			$elm$core$Result$map,
																			function (soFar) {
																				return A4(addLocalName, $author$project$Morphir$IR$KindOfName$Constructor, qualifiedModuleName, typeName, soFar);
																			},
																			resolvedImportsSoFar);
																	} else {
																		break _v9$2;
																	}
																case 'CustomTypeSpecification':
																	var ctors = _v9.b;
																	return A2(
																		$elm$core$Result$map,
																		function (soFar) {
																			return A3(
																				$elm$core$List$foldl,
																				A2(addLocalName, $author$project$Morphir$IR$KindOfName$Constructor, qualifiedModuleName),
																				A4(addLocalName, $author$project$Morphir$IR$KindOfName$Type, qualifiedModuleName, typeName, soFar),
																				$elm$core$Dict$keys(ctors));
																		},
																		resolvedImportsSoFar);
																default:
																	break _v9$2;
															}
														}
														return $elm$core$Result$Err(
															A2($author$project$Morphir$Elm$IncrementalResolve$ImportingConstructorsOfNonCustomType, qualifiedModuleName, typeName));
													},
													A2(
														$elm$core$Result$fromMaybe,
														A3($author$project$Morphir$Elm$IncrementalResolve$ImportedLocalNameNotFound, qualifiedModuleName, typeName, $author$project$Morphir$IR$KindOfName$Type),
														A2($elm$core$Dict$get, typeName, moduleSpec.types)));
											} else {
												return addTypeOrConstructor(typeName);
											}
									}
								}),
							$elm$core$Result$Ok(resolvedImports),
							explicitExposeNodes);
					}
				} else {
					return $elm$core$Result$Ok(resolvedImports);
				}
			});
		return A3(
			$elm$core$List$foldl,
			F2(
				function (nextImport, resolvedImportsSoFar) {
					return A2(
						$elm$core$Result$andThen,
						function (resolvedModuleName) {
							var packageName = resolvedModuleName.a;
							var moduleName = resolvedModuleName.b;
							return A2(
								$elm$core$Result$andThen,
								function (moduleSpec) {
									return A2(
										$elm$core$Result$andThen,
										A3(addLocalNames, nextImport, resolvedModuleName, moduleSpec),
										A2(
											$elm$core$Result$map,
											A2(addModuleSpec, resolvedModuleName, moduleSpec),
											A2(
												$elm$core$Result$map,
												A2(maybeAddModuleName, nextImport, resolvedModuleName),
												A2(
													$elm$core$Result$map,
													A2(maybeAddAlias, nextImport, resolvedModuleName),
													resolvedImportsSoFar))));
								},
								A2(
									$elm$core$Result$fromMaybe,
									$author$project$Morphir$Elm$IncrementalResolve$ImportedModuleNotFound(resolvedModuleName),
									A3($author$project$Morphir$IR$Repo$lookupModuleSpecification, packageName, moduleName, repo)));
						},
						A2(
							$author$project$Morphir$Elm$IncrementalResolve$resolveModuleName,
							repo,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(nextImport.moduleName)));
				}),
			$elm$core$Result$Ok(
				A5($author$project$Morphir$Elm$IncrementalResolve$ResolvedImports, $elm$core$Dict$empty, $elm$core$Dict$empty, $elm$core$Dict$empty, $elm$core$Dict$empty, $elm$core$Dict$empty)),
			A2(
				$elm$core$List$map,
				$author$project$Morphir$Elm$IncrementalResolve$mapImport,
				_Utils_ap($author$project$Morphir$Elm$IncrementalResolve$defaultImports, imports)));
	});
var $author$project$Morphir$Elm$IncrementalResolve$LocalNameNotImported = F2(
	function (a, b) {
		return {$: 'LocalNameNotImported', a: a, b: b};
	});
var $author$project$Morphir$Elm$IncrementalResolve$ModuleDoesNotExposeLocalName = F4(
	function (a, b, c, d) {
		return {$: 'ModuleDoesNotExposeLocalName', a: a, b: b, c: c, d: d};
	});
var $author$project$Morphir$Elm$IncrementalResolve$ModuleNotImported = function (a) {
	return {$: 'ModuleNotImported', a: a};
};
var $author$project$Morphir$Elm$IncrementalResolve$ModuleOrAliasNotImported = function (a) {
	return {$: 'ModuleOrAliasNotImported', a: a};
};
var $author$project$Morphir$Elm$IncrementalResolve$ModulesDoNotExposeLocalName = F4(
	function (a, b, c, d) {
		return {$: 'ModulesDoNotExposeLocalName', a: a, b: b, c: c, d: d};
	});
var $author$project$Morphir$Elm$IncrementalResolve$MultipleModulesExposeLocalName = F3(
	function (a, b, c) {
		return {$: 'MultipleModulesExposeLocalName', a: a, b: b, c: c};
	});
var $author$project$Morphir$Elm$IncrementalResolve$isNameVisible = F3(
	function (name, kindOfName, visibleNames) {
		var setOfNames = function () {
			switch (kindOfName.$) {
				case 'Type':
					return visibleNames.types;
				case 'Constructor':
					return visibleNames.constructors;
				default:
					return visibleNames.values;
			}
		}();
		return A2($elm$core$Set$member, name, setOfNames);
	});
var $author$project$Morphir$Elm$IncrementalResolve$resolveLocalName = F7(
	function (repo, currentModuleName, localNames, resolvedImports, elmModuleName, kindOfName, elmLocalName) {
		var localName = $author$project$Morphir$IR$Name$fromString(elmLocalName);
		if (!elmModuleName.b) {
			if (A3($author$project$Morphir$Elm$IncrementalResolve$isNameVisible, localName, kindOfName, localNames)) {
				return $elm$core$Result$Ok(
					_Utils_Tuple3(
						$author$project$Morphir$IR$Repo$getPackageName(repo),
						currentModuleName,
						localName));
			} else {
				var moduleNamesByLocalName = function () {
					switch (kindOfName.$) {
						case 'Type':
							return resolvedImports.moduleNamesByLocalTypeName;
						case 'Constructor':
							return resolvedImports.moduleNamesByLocalConstructorName;
						default:
							return resolvedImports.moduleNamesByLocalValueName;
					}
				}();
				return A2(
					$elm$core$Result$andThen,
					function (moduleNames) {
						var _v1 = $elm$core$Set$toList(moduleNames);
						if (!_v1.b) {
							return $elm$core$Result$Err(
								A2($author$project$Morphir$Elm$IncrementalResolve$LocalNameNotImported, localName, kindOfName));
						} else {
							if (!_v1.b.b) {
								var _v2 = _v1.a;
								var packageName = _v2.a;
								var moduleName = _v2.b;
								return $elm$core$Result$Ok(
									_Utils_Tuple3(packageName, moduleName, localName));
							} else {
								var multipleModuleNames = _v1;
								return $elm$core$Result$Err(
									A3($author$project$Morphir$Elm$IncrementalResolve$MultipleModulesExposeLocalName, multipleModuleNames, localName, kindOfName));
							}
						}
					},
					A2(
						$elm$core$Result$fromMaybe,
						A2($author$project$Morphir$Elm$IncrementalResolve$LocalNameNotImported, localName, kindOfName),
						A2($elm$core$Dict$get, localName, moduleNamesByLocalName)));
			}
		} else {
			if (!elmModuleName.b.b) {
				var elmModuleOrAlias = elmModuleName.a;
				return A2(
					$elm$core$Result$andThen,
					function (matchingPackageAndModuleNames) {
						var modulesThatContainLocalName = $elm$core$Set$toList(
							A2(
								$elm$core$Set$filter,
								function (_v8) {
									var matchingPackageName = _v8.a;
									var matchingModuleName = _v8.b;
									return A2(
										$elm$core$Maybe$withDefault,
										false,
										A2(
											$elm$core$Maybe$map,
											function (moduleSpec) {
												switch (kindOfName.$) {
													case 'Type':
														return A2($elm$core$Dict$member, localName, moduleSpec.types);
													case 'Constructor':
														return A2(
															$elm$core$List$any,
															function (_v10) {
																var typeName = _v10.a;
																var documentedTypeSpec = _v10.b;
																var _v11 = documentedTypeSpec.value;
																_v11$2:
																while (true) {
																	switch (_v11.$) {
																		case 'TypeAliasSpecification':
																			if (_v11.b.$ === 'Record') {
																				var _v12 = _v11.b;
																				return _Utils_eq(typeName, localName);
																			} else {
																				break _v11$2;
																			}
																		case 'CustomTypeSpecification':
																			var ctors = _v11.b;
																			return A2($elm$core$Dict$member, localName, ctors);
																		default:
																			break _v11$2;
																	}
																}
																return false;
															},
															$elm$core$Dict$toList(moduleSpec.types));
													default:
														return A2($elm$core$Dict$member, localName, moduleSpec.values);
												}
											},
											A3($author$project$Morphir$IR$Repo$lookupModuleSpecification, matchingPackageName, matchingModuleName, repo)));
								},
								matchingPackageAndModuleNames));
						if (!modulesThatContainLocalName.b) {
							var _v5 = $elm$core$Set$toList(matchingPackageAndModuleNames);
							if (!_v5.b) {
								return $elm$core$Result$Err(
									$author$project$Morphir$Elm$IncrementalResolve$ModuleOrAliasNotImported(elmModuleOrAlias));
							} else {
								if (!_v5.b.b) {
									var _v6 = _v5.a;
									var matchingPackageName = _v6.a;
									var matchingModuleName = _v6.b;
									return $elm$core$Result$Err(
										A4($author$project$Morphir$Elm$IncrementalResolve$ModuleDoesNotExposeLocalName, matchingPackageName, matchingModuleName, localName, kindOfName));
								} else {
									var matchingModuleNames = _v5;
									return $elm$core$Result$Err(
										A4($author$project$Morphir$Elm$IncrementalResolve$ModulesDoNotExposeLocalName, elmModuleOrAlias, matchingModuleNames, localName, kindOfName));
								}
							}
						} else {
							if (!modulesThatContainLocalName.b.b) {
								var _v7 = modulesThatContainLocalName.a;
								var matchingPackageName = _v7.a;
								var matchingModuleName = _v7.b;
								return $elm$core$Result$Ok(
									_Utils_Tuple3(matchingPackageName, matchingModuleName, localName));
							} else {
								return $elm$core$Result$Err(
									A3($author$project$Morphir$Elm$IncrementalResolve$MultipleModulesExposeLocalName, modulesThatContainLocalName, localName, kindOfName));
							}
						}
					},
					A2(
						$elm$core$Result$fromMaybe,
						$author$project$Morphir$Elm$IncrementalResolve$ModuleOrAliasNotImported(elmModuleOrAlias),
						A2($elm$core$Dict$get, elmModuleOrAlias, resolvedImports.moduleNamesByAliasOrSingleModuleName)));
			} else {
				return A2(
					$elm$core$Result$andThen,
					function (packageAndModuleName) {
						var packageName = packageAndModuleName.a;
						var moduleName = packageAndModuleName.b;
						return A2(
							$elm$core$Result$andThen,
							function (moduleImports) {
								return A3($author$project$Morphir$Elm$IncrementalResolve$isNameVisible, localName, kindOfName, moduleImports) ? $elm$core$Result$Ok(
									_Utils_Tuple3(packageName, moduleName, localName)) : $elm$core$Result$Err(
									A4($author$project$Morphir$Elm$IncrementalResolve$ModuleDoesNotExposeLocalName, packageName, moduleName, localName, kindOfName));
							},
							A2(
								$elm$core$Result$fromMaybe,
								$author$project$Morphir$Elm$IncrementalResolve$ModuleNotImported(elmModuleName),
								A2($elm$core$Dict$get, packageAndModuleName, resolvedImports.visibleNamesByModuleName)));
					},
					A2($author$project$Morphir$Elm$IncrementalResolve$resolveModuleName, repo, elmModuleName));
			}
		}
	});
var $author$project$Morphir$Elm$IncrementalFrontend$processModule = F5(
	function (moduleName, parsedModule, opts, exposedModules, repo) {
		var valueNames = $author$project$Morphir$Elm$IncrementalFrontend$extractValueNames(parsedModule);
		var typeNames = $author$project$Morphir$Elm$IncrementalFrontend$extractTypeNames(parsedModule);
		var repoWithModuleInserted = function () {
			var moduleAccess = A2($elm$core$Set$member, moduleName, exposedModules) ? $author$project$Morphir$IR$AccessControlled$Public : $author$project$Morphir$IR$AccessControlled$Private;
			var documentedModule = {
				doc: $author$project$Morphir$Elm$ParsedModule$documentation(parsedModule),
				types: $elm$core$Dict$empty,
				values: $elm$core$Dict$empty
			};
			return A2(
				$elm$core$Result$withDefault,
				repo,
				A4($author$project$Morphir$IR$Repo$insertModule, moduleName, documentedModule, moduleAccess, repo));
		}();
		var constructorNames = $author$project$Morphir$Elm$IncrementalFrontend$extractConstructorNames(parsedModule);
		var localNames = {
			constructors: $elm$core$Set$fromList(constructorNames),
			types: $elm$core$Set$fromList(typeNames),
			values: $elm$core$Set$fromList(valueNames)
		};
		var accessOf = F2(
			function (kindOfName, localName) {
				var _v2 = $author$project$Morphir$Elm$ParsedModule$exposingList(parsedModule);
				if (_v2.$ === 'All') {
					return $author$project$Morphir$IR$AccessControlled$Public;
				} else {
					var topLevelExposesNodes = _v2.a;
					var isExposed = A2(
						$elm$core$List$any,
						function (topLevelExpose) {
							var _v3 = _Utils_Tuple2(kindOfName, topLevelExpose);
							_v3$4:
							while (true) {
								switch (_v3.a.$) {
									case 'Value':
										if (_v3.b.$ === 'FunctionExpose') {
											var _v4 = _v3.a;
											var functionName = _v3.b.a;
											return _Utils_eq(
												$author$project$Morphir$IR$Name$fromString(functionName),
												localName);
										} else {
											break _v3$4;
										}
									case 'Type':
										switch (_v3.b.$) {
											case 'TypeOrAliasExpose':
												var _v5 = _v3.a;
												var typeName = _v3.b.a;
												return _Utils_eq(
													$author$project$Morphir$IR$Name$fromString(typeName),
													localName);
											case 'TypeExpose':
												var _v6 = _v3.a;
												var typeExpose = _v3.b.a;
												return _Utils_eq(
													$author$project$Morphir$IR$Name$fromString(typeExpose.name),
													localName);
											default:
												break _v3$4;
										}
									default:
										if (_v3.b.$ === 'TypeExpose') {
											var _v7 = _v3.a;
											var te = _v3.b.a;
											var _v8 = te.open;
											if (_v8.$ === 'Just') {
												return _Utils_eq(
													$author$project$Morphir$IR$Name$fromString(te.name),
													localName);
											} else {
												return false;
											}
										} else {
											break _v3$4;
										}
								}
							}
							return false;
						},
						A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, topLevelExposesNodes));
					return isExposed ? $author$project$Morphir$IR$AccessControlled$Public : $author$project$Morphir$IR$AccessControlled$Private;
				}
			});
		return A2(
			$elm$core$Result$andThen,
			function (resolvedImports) {
				var resolveName = F3(
					function (modName, localName, kindOfName) {
						return A7($author$project$Morphir$Elm$IncrementalResolve$resolveLocalName, repoWithModuleInserted, moduleName, localNames, resolvedImports, modName, kindOfName, localName);
					});
				return A2(
					$elm$core$Result$andThen,
					function (repoWithTypesInserted) {
						return opts.typesOnly ? $elm$core$Result$Ok(repoWithTypesInserted) : A2(
							$elm$core$Result$andThen,
							A2(
								$elm$core$List$foldl,
								F2(
									function (_v1, repoResultSoFar) {
										var valueName = _v1.a;
										var valueDoc = _v1.b;
										var valueDef = _v1.c;
										return A2(
											$elm$core$Result$andThen,
											A5(
												$author$project$Morphir$Elm$IncrementalFrontend$processValue,
												A2(accessOf, $author$project$Morphir$IR$KindOfName$Value, valueName),
												moduleName,
												valueName,
												valueDef,
												valueDoc),
											repoResultSoFar);
									}),
								$elm$core$Result$Ok(repoWithTypesInserted)),
							A2($author$project$Morphir$Elm$IncrementalFrontend$extractValues, resolveName, parsedModule));
					},
					A2(
						$elm$core$Result$andThen,
						A2(
							$elm$core$List$foldl,
							F2(
								function (_v0, repoResultForType) {
									var typeName = _v0.a;
									var typeDoc = _v0.b;
									var typeDef = _v0.c;
									return A2(
										$elm$core$Result$andThen,
										A5(
											$author$project$Morphir$Elm$IncrementalFrontend$processType,
											moduleName,
											typeName,
											typeDef,
											A2(accessOf, $author$project$Morphir$IR$KindOfName$Type, typeName),
											typeDoc),
										repoResultForType);
								}),
							$elm$core$Result$Ok(repoWithModuleInserted)),
						A2(
							$elm$core$Result$andThen,
							A2(
								$author$project$Morphir$Elm$IncrementalFrontend$orderTypesByDependency,
								$author$project$Morphir$IR$Repo$getPackageName(repoWithModuleInserted),
								moduleName),
							A3($author$project$Morphir$Elm$IncrementalFrontend$extractTypes, resolveName, accessOf, parsedModule))));
			},
			A2(
				$elm$core$Result$mapError,
				A2(
					$elm$core$Basics$composeR,
					$author$project$Morphir$Elm$IncrementalFrontend$ResolveError(moduleName),
					$elm$core$List$singleton),
				A2(
					$author$project$Morphir$Elm$IncrementalResolve$resolveImports,
					repoWithModuleInserted,
					$author$project$Morphir$Elm$ParsedModule$imports(parsedModule))));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$applyInsert = F5(
	function (moduleName, parsedModule, opts, exposedModules, repo) {
		return A5($author$project$Morphir$Elm$IncrementalFrontend$processModule, moduleName, parsedModule, opts, exposedModules, repo);
	});
var $author$project$Morphir$Elm$IncrementalFrontend$applyUpdate = F5(
	function (moduleName, parsedModule, opts, exposedModules, repo) {
		return A5($author$project$Morphir$Elm$IncrementalFrontend$processModule, moduleName, parsedModule, opts, exposedModules, repo);
	});
var $author$project$Morphir$IR$Repo$deleteType = F3(
	function (moduleName, typeName, _v0) {
		var repo = _v0.a;
		var _v1 = A2($elm$core$Dict$get, moduleName, repo.modules);
		if (_v1.$ === 'Just') {
			var accessControlModDef = _v1.a;
			return $elm$core$Result$Ok(
				function (_v2) {
					var updatedRepo = _v2.a;
					return function (updatedTypeDeps) {
						return $author$project$Morphir$IR$Repo$Repo(
							_Utils_update(
								updatedRepo,
								{typeDependencies: updatedTypeDeps}));
					}(
						A2(
							$author$project$Morphir$Dependency$DAG$removeNode,
							_Utils_Tuple3(repo.packageName, moduleName, typeName),
							updatedRepo.typeDependencies));
				}(
					function (updatedModDef) {
						return $author$project$Morphir$IR$Repo$Repo(
							_Utils_update(
								repo,
								{
									modules: A3($elm$core$Dict$insert, moduleName, updatedModDef, repo.modules)
								}));
					}(
						A2(
							$author$project$Morphir$IR$AccessControlled$map,
							function (modDef) {
								return function (updatedTypes) {
									return _Utils_update(
										modDef,
										{types: updatedTypes});
								}(
									A2($elm$core$Dict$remove, typeName, modDef.types));
							},
							accessControlModDef))));
		} else {
			return $elm$core$Result$Err(
				_List_fromArray(
					[
						$author$project$Morphir$IR$Repo$ModuleNotFound(moduleName)
					]));
		}
	});
var $author$project$Morphir$IR$Repo$deleteValue = F3(
	function (moduleName, valueName, _v0) {
		var repo = _v0.a;
		var _v1 = A2($elm$core$Dict$get, moduleName, repo.modules);
		if (_v1.$ === 'Just') {
			var accessControlModDef = _v1.a;
			return $elm$core$Result$Ok(
				function (_v2) {
					var updatedRepo = _v2.a;
					return function (updatedValueDeps) {
						return $author$project$Morphir$IR$Repo$Repo(
							_Utils_update(
								updatedRepo,
								{valueDependencies: updatedValueDeps}));
					}(
						A2(
							$author$project$Morphir$Dependency$DAG$removeNode,
							_Utils_Tuple3(repo.packageName, moduleName, valueName),
							updatedRepo.valueDependencies));
				}(
					function (updatedModDef) {
						return $author$project$Morphir$IR$Repo$Repo(
							_Utils_update(
								repo,
								{
									modules: A3($elm$core$Dict$insert, moduleName, updatedModDef, repo.modules)
								}));
					}(
						A2(
							$author$project$Morphir$IR$AccessControlled$map,
							function (modDef) {
								return function (updatedValues) {
									return _Utils_update(
										modDef,
										{values: updatedValues});
								}(
									A2($elm$core$Dict$remove, valueName, modDef.values));
							},
							accessControlModDef))));
		} else {
			return $elm$core$Result$Err(
				_List_fromArray(
					[
						$author$project$Morphir$IR$Repo$ModuleNotFound(moduleName)
					]));
		}
	});
var $author$project$Morphir$Dependency$DAG$forwardTopologicalOrdering = function (dag) {
	return $elm$core$List$reverse(
		$author$project$Morphir$Dependency$DAG$backwardTopologicalOrdering(dag));
};
var $author$project$Morphir$Elm$IncrementalFrontend$applyUpdateCleanup = F4(
	function (moduleName, parsedModule, oldRepoState, newRepoState) {
		var previousValues = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Set$empty,
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.value;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.values;
						},
						A2($elm$core$Basics$composeR, $elm$core$Dict$keys, $elm$core$Set$fromList))),
				A2(
					$elm$core$Dict$get,
					moduleName,
					$author$project$Morphir$IR$Repo$modules(oldRepoState))));
		var previousTypes = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Set$empty,
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.value;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.types;
						},
						A2($elm$core$Basics$composeR, $elm$core$Dict$keys, $elm$core$Set$fromList))),
				A2(
					$elm$core$Dict$get,
					moduleName,
					$author$project$Morphir$IR$Repo$modules(oldRepoState))));
		var currentValues = $elm$core$Set$fromList(
			$author$project$Morphir$Elm$IncrementalFrontend$extractValueNames(parsedModule));
		var deletedValues = A2($elm$core$Set$diff, previousValues, currentValues);
		var deletedValuesOrderedByDeps = A2(
			$elm$core$List$filterMap,
			function (_v1) {
				var mn = _v1.b;
				var name = _v1.c;
				return (_Utils_eq(mn, moduleName) && A2($elm$core$Set$member, name, deletedValues)) ? $elm$core$Maybe$Just(name) : $elm$core$Maybe$Nothing;
			},
			A3(
				$elm$core$Basics$composeR,
				$author$project$Morphir$Dependency$DAG$forwardTopologicalOrdering,
				$elm$core$List$concat,
				$author$project$Morphir$IR$Repo$valueDependencies(oldRepoState)));
		var currentTypes = $elm$core$Set$fromList(
			$author$project$Morphir$Elm$IncrementalFrontend$extractTypeNames(parsedModule));
		var deletedTypes = A2($elm$core$Set$diff, previousTypes, currentTypes);
		var deletedTypesOrderedByDeps = A2(
			$elm$core$List$filterMap,
			function (_v0) {
				var mn = _v0.b;
				var name = _v0.c;
				return (_Utils_eq(mn, moduleName) && A2($elm$core$Set$member, name, deletedTypes)) ? $elm$core$Maybe$Just(name) : $elm$core$Maybe$Nothing;
			},
			A3(
				$elm$core$Basics$composeR,
				$author$project$Morphir$Dependency$DAG$forwardTopologicalOrdering,
				$elm$core$List$concat,
				$author$project$Morphir$IR$Repo$typeDependencies(oldRepoState)));
		return function (repoResultWithValueDeleted) {
			return A3(
				$elm$core$List$foldl,
				F2(
					function (typeName, repoResultSoFar) {
						return A2(
							$elm$core$Result$andThen,
							A2(
								$elm$core$Basics$composeR,
								A2($author$project$Morphir$IR$Repo$deleteType, moduleName, typeName),
								$elm$core$Result$mapError(
									A2(
										$elm$core$Basics$composeR,
										$author$project$Morphir$Elm$IncrementalFrontend$RepoError('could not delete type'),
										$elm$core$List$singleton))),
							repoResultSoFar);
					}),
				repoResultWithValueDeleted,
				deletedTypesOrderedByDeps);
		}(
			A3(
				$elm$core$List$foldl,
				F2(
					function (valueName, repoResultSoFar) {
						return A2(
							$elm$core$Result$andThen,
							A2(
								$elm$core$Basics$composeR,
								A2($author$project$Morphir$IR$Repo$deleteValue, moduleName, valueName),
								$elm$core$Result$mapError(
									A2(
										$elm$core$Basics$composeR,
										$author$project$Morphir$Elm$IncrementalFrontend$RepoError('could not delete value'),
										$elm$core$List$singleton))),
							repoResultSoFar);
					}),
				$elm$core$Result$Ok(newRepoState),
				deletedValuesOrderedByDeps));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$collectImplicitlyExposedModules = F3(
	function (packageName, moduleDefs, exposedModules) {
		var lookupTypeDef = function (fqn) {
			var modPath = fqn.b;
			var tpeName = fqn.c;
			return A2(
				$elm$core$Maybe$andThen,
				A2(
					$elm$core$Basics$composeL,
					$elm$core$Dict$get(tpeName),
					function ($) {
						return $.types;
					}),
				A2($elm$core$Dict$get, modPath, moduleDefs));
		};
		var collectImplicitlyExposedReferencesFromDef = function (accessControlledTpeDef) {
			if (_Utils_eq(accessControlledTpeDef.access, $author$project$Morphir$IR$AccessControlled$Public)) {
				var _v5 = accessControlledTpeDef.value.value;
				if (_v5.$ === 'TypeAliasDefinition') {
					var tpe = _v5.b;
					return $author$project$Morphir$IR$Type$collectReferences(tpe);
				} else {
					var accessControlledCtors = _v5.b;
					return _Utils_eq(accessControlledCtors.access, $author$project$Morphir$IR$AccessControlled$Public) ? A3(
						$elm$core$List$foldl,
						$elm$core$Set$union,
						$elm$core$Set$empty,
						A2(
							$elm$core$List$map,
							A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Morphir$IR$Type$collectReferences),
							A2(
								$elm$core$List$concatMap,
								$elm$core$Tuple$second,
								$elm$core$Dict$toList(accessControlledCtors.value)))) : $elm$core$Set$empty;
				}
			} else {
				return $elm$core$Set$empty;
			}
		};
		var exposedTypesRef = function () {
			var inputTypes = $elm$core$List$map(
				function (_v4) {
					var tpe = _v4.c;
					return tpe;
				});
			var getPubliclyExposedTypeRefs = function (modDef) {
				return A2(
					$elm$core$Set$union,
					A3(
						$elm$core$Dict$foldl,
						F3(
							function (_v2, accessControlledTpe, publicExposedTypeRefSoFar) {
								return A2(
									$elm$core$Set$union,
									publicExposedTypeRefSoFar,
									collectImplicitlyExposedReferencesFromDef(accessControlledTpe));
							}),
						$elm$core$Set$empty,
						modDef.types),
					A3(
						$elm$core$Dict$foldl,
						F3(
							function (_v3, accessControlledVal, publicExposedTypeRefsSoFar) {
								return _Utils_eq(accessControlledVal.access, $author$project$Morphir$IR$AccessControlled$Public) ? A3(
									$elm$core$List$foldl,
									$elm$core$Set$union,
									publicExposedTypeRefsSoFar,
									A2(
										$elm$core$List$map,
										$author$project$Morphir$IR$Type$collectReferences,
										A2(
											$elm$core$List$cons,
											accessControlledVal.value.value.outputType,
											inputTypes(accessControlledVal.value.value.inputTypes)))) : publicExposedTypeRefsSoFar;
							}),
						$elm$core$Set$empty,
						modDef.values));
			};
			return A3(
				$elm$core$Set$foldl,
				F2(
					function (modName, exposedTypeRefsSoFar) {
						return A2(
							$elm$core$Set$union,
							exposedTypeRefsSoFar,
							A2(
								$elm$core$Maybe$withDefault,
								$elm$core$Set$empty,
								A2(
									$elm$core$Maybe$map,
									getPubliclyExposedTypeRefs,
									A2($elm$core$Dict$get, modName, moduleDefs))));
					}),
				$elm$core$Set$empty,
				exposedModules);
		}();
		var extractImplicitDependencies = F2(
			function (publiclyExposedTypes, implicitlyExposedModules) {
				extractImplicitDependencies:
				while (true) {
					var _v0 = $elm$core$Set$toList(publiclyExposedTypes);
					if (!_v0.b) {
						return implicitlyExposedModules;
					} else {
						var tpeFQN = _v0.a;
						var otherExposedTypes = _v0.b;
						var pkgName = tpeFQN.a;
						var modName = tpeFQN.b;
						if (!_Utils_eq(pkgName, packageName)) {
							var $temp$publiclyExposedTypes = $elm$core$Set$fromList(otherExposedTypes),
								$temp$implicitlyExposedModules = implicitlyExposedModules;
							publiclyExposedTypes = $temp$publiclyExposedTypes;
							implicitlyExposedModules = $temp$implicitlyExposedModules;
							continue extractImplicitDependencies;
						} else {
							if (A2($elm$core$Set$member, modName, exposedModules)) {
								var $temp$publiclyExposedTypes = $elm$core$Set$fromList(otherExposedTypes),
									$temp$implicitlyExposedModules = implicitlyExposedModules;
								publiclyExposedTypes = $temp$publiclyExposedTypes;
								implicitlyExposedModules = $temp$implicitlyExposedModules;
								continue extractImplicitDependencies;
							} else {
								if (A2($elm$core$Set$member, modName, implicitlyExposedModules)) {
									var $temp$publiclyExposedTypes = $elm$core$Set$fromList(otherExposedTypes),
										$temp$implicitlyExposedModules = implicitlyExposedModules;
									publiclyExposedTypes = $temp$publiclyExposedTypes;
									implicitlyExposedModules = $temp$implicitlyExposedModules;
									continue extractImplicitDependencies;
								} else {
									var withNewRefs = A2(
										$elm$core$Set$union,
										$elm$core$Set$fromList(otherExposedTypes),
										A2(
											$elm$core$Maybe$withDefault,
											$elm$core$Set$empty,
											A2(
												$elm$core$Maybe$map,
												collectImplicitlyExposedReferencesFromDef,
												lookupTypeDef(tpeFQN))));
									var $temp$publiclyExposedTypes = withNewRefs,
										$temp$implicitlyExposedModules = A2($elm$core$Set$insert, modName, implicitlyExposedModules);
									publiclyExposedTypes = $temp$publiclyExposedTypes;
									implicitlyExposedModules = $temp$implicitlyExposedModules;
									continue extractImplicitDependencies;
								}
							}
						}
					}
				}
			});
		return A2(extractImplicitDependencies, exposedTypesRef, $elm$core$Set$empty);
	});
var $author$project$Morphir$IR$Repo$moduleDependencies = function (_v0) {
	var repo = _v0.a;
	return repo.moduleDependencies;
};
var $author$project$Morphir$IR$Repo$removeUnusedModules = F2(
	function (exposedModules, repo) {
		var usedModules = A3(
			$elm$core$List$foldl,
			F2(
				function (modName, usedModulesSoFar) {
					return A2(
						$elm$core$Set$union,
						usedModulesSoFar,
						A2(
							$author$project$Morphir$Dependency$DAG$collectForwardReachableNodes,
							modName,
							$author$project$Morphir$IR$Repo$moduleDependencies(repo)));
				}),
			exposedModules,
			$elm$core$Set$toList(exposedModules));
		var unusedModules = A2(
			$elm$core$List$filter,
			function (modName) {
				return !A2($elm$core$Set$member, modName, usedModules);
			},
			$elm$core$Dict$keys(
				$author$project$Morphir$IR$Repo$modules(repo)));
		return A3(
			$elm$core$List$foldl,
			F2(
				function (modName, repoResultSoFar) {
					return A2(
						$elm$core$Result$andThen,
						$author$project$Morphir$IR$Repo$deleteModule(modName),
						repoResultSoFar);
				}),
			$elm$core$Result$Ok(repo),
			unusedModules);
	});
var $author$project$Morphir$IR$Repo$updateModuleAccess = F3(
	function (access, moduleName, _v0) {
		var repo = _v0.a;
		return $author$project$Morphir$IR$Repo$Repo(
			_Utils_update(
				repo,
				{
					modules: A3(
						$elm$core$Dict$update,
						moduleName,
						$elm$core$Maybe$map(
							function (_v1) {
								var value = _v1.value;
								return A2($author$project$Morphir$IR$AccessControlled$AccessControlled, access, value);
							}),
						repo.modules)
				}));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$applyChangesByOrder = F4(
	function (orderedChanges, opts, exposedModules, repo) {
		return A2(
			$elm$core$Result$map,
			function (r) {
				return A3(
					$elm$core$Set$foldl,
					$author$project$Morphir$IR$Repo$updateModuleAccess($author$project$Morphir$IR$AccessControlled$Public),
					r,
					A3(
						$author$project$Morphir$Elm$IncrementalFrontend$collectImplicitlyExposedModules,
						$author$project$Morphir$IR$Repo$getPackageName(r),
						A2(
							$elm$core$Dict$map,
							F2(
								function (_v2, accessControlledModuleDef) {
									return accessControlledModuleDef.value;
								}),
							$author$project$Morphir$IR$Repo$modules(r)),
						exposedModules));
			},
			A2(
				$elm$core$Result$andThen,
				A2(
					$elm$core$Basics$composeR,
					$author$project$Morphir$IR$Repo$removeUnusedModules(exposedModules),
					$elm$core$Result$mapError(
						A2(
							$elm$core$Basics$composeR,
							$author$project$Morphir$Elm$IncrementalFrontend$RepoError(''),
							$elm$core$List$singleton))),
				A2(
					$elm$core$Result$andThen,
					function (updatedRepo) {
						return A3(
							$elm$core$List$foldl,
							F2(
								function (modChange, repoResultSoFar) {
									switch (modChange.$) {
										case 'ModuleInsert':
											return repoResultSoFar;
										case 'ModuleUpdate':
											var modName = modChange.a;
											var parsedModule = modChange.b;
											return A2(
												$elm$core$Result$andThen,
												A3($author$project$Morphir$Elm$IncrementalFrontend$applyUpdateCleanup, modName, parsedModule, repo),
												repoResultSoFar);
										default:
											var modName = modChange.a;
											return A2(
												$elm$core$Result$andThen,
												$author$project$Morphir$Elm$IncrementalFrontend$applyDelete(modName),
												repoResultSoFar);
									}
								}),
							$elm$core$Result$Ok(updatedRepo),
							$elm$core$List$reverse(orderedChanges));
					},
					A3(
						$elm$core$List$foldl,
						F2(
							function (modChange, repoResultSoFar) {
								switch (modChange.$) {
									case 'ModuleInsert':
										var modName = modChange.a;
										var parsedModule = modChange.b;
										return A2(
											$elm$core$Result$andThen,
											A4($author$project$Morphir$Elm$IncrementalFrontend$applyInsert, modName, parsedModule, opts, exposedModules),
											repoResultSoFar);
									case 'ModuleUpdate':
										var modName = modChange.a;
										var parsedModule = modChange.b;
										return A2(
											$elm$core$Result$andThen,
											A4($author$project$Morphir$Elm$IncrementalFrontend$applyUpdate, modName, parsedModule, opts, exposedModules),
											repoResultSoFar);
									default:
										return repoResultSoFar;
								}
							}),
						$elm$core$Result$Ok(repo),
						orderedChanges))));
	});
var $author$project$Morphir$Elm$ModuleName$toIRModuleName = F2(
	function (packageName, elmModuleName) {
		var moduleName = A2($elm$core$List$map, $author$project$Morphir$IR$Name$fromString, elmModuleName);
		return A2($author$project$Morphir$IR$Path$isPrefixOf, moduleName, packageName) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$List$drop,
				$elm$core$List$length(packageName),
				moduleName)) : $elm$core$Maybe$Nothing;
	});
var $author$project$Morphir$Elm$IncrementalFrontend$applyFileChanges = F5(
	function (packageName, fileChanges, opts, maybeExposedModules, repo) {
		if (maybeExposedModules.$ === 'Just') {
			var exposedModules = maybeExposedModules.a;
			if ($elm$core$Set$isEmpty(exposedModules)) {
				return $elm$core$Result$Ok(repo);
			} else {
				var usedModules = function (modulesDeps) {
					return A3(
						$elm$core$Set$foldl,
						F2(
							function (exposedModule, usedModulesSoFar) {
								return A2(
									$elm$core$Set$union,
									usedModulesSoFar,
									A2(
										$elm$core$Debug$log,
										'DAG.collectForwardReachableNodes exposedModule',
										A2($author$project$Morphir$Dependency$DAG$collectForwardReachableNodes, exposedModule, modulesDeps)));
							}),
						exposedModules,
						exposedModules);
				};
				var updateRepoModDep = F2(
					function (_v6, moduleDepDAGRes) {
						var modName = _v6.a;
						var modDeps = _v6.b;
						return A2(
							$elm$core$Result$andThen,
							A2(
								$elm$core$Basics$composeR,
								A2($author$project$Morphir$Dependency$DAG$insertNode, modName, modDeps),
								$elm$core$Result$mapError(
									function (_v5) {
										var from = _v5.a;
										var to = _v5.b;
										return _List_fromArray(
											[
												A2($author$project$Morphir$Elm$IncrementalFrontend$ModuleCycleDetected, from, to)
											]);
									})),
							moduleDepDAGRes);
					});
				var modulesToProcess = function (usedModuleSet) {
					var _v3 = A2($elm$core$Debug$log, 'Used Modules:', usedModuleSet);
					return A2(
						$elm$core$List$filter,
						function (fileChange) {
							switch (fileChange.$) {
								case 'ModuleInsert':
									var moduleName = fileChange.a;
									return A2($elm$core$Set$member, moduleName, usedModuleSet);
								case 'ModuleUpdate':
									var moduleName = fileChange.a;
									return A2($elm$core$Set$member, moduleName, usedModuleSet);
								default:
									var moduleName = fileChange.a;
									return A2($elm$core$Set$member, moduleName, usedModuleSet);
							}
						},
						fileChanges);
				};
				var insertsAndUpdates = A2(
					$elm$core$List$filterMap,
					function (change) {
						switch (change.$) {
							case 'ModuleInsert':
								var modName = change.a;
								var parsedMod = change.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(modName, parsedMod));
							case 'ModuleUpdate':
								var modName = change.a;
								var parsedMod = change.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(modName, parsedMod));
							default:
								return $elm$core$Maybe$Nothing;
						}
					},
					fileChanges);
				var updatedModuleDep = A3(
					$elm$core$List$foldl,
					updateRepoModDep,
					$elm$core$Result$Ok(
						$author$project$Morphir$IR$Repo$moduleDependencies(repo)),
					A2(
						$elm$core$List$map,
						function (_v1) {
							var modName = _v1.a;
							var parsedModule = _v1.b;
							return A2(
								$elm$core$Tuple$pair,
								modName,
								$elm$core$Set$fromList(
									A2(
										$elm$core$List$filterMap,
										function (imp) {
											var importedModuleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(imp.moduleName);
											return A2($author$project$Morphir$Elm$ModuleName$toIRModuleName, packageName, importedModuleName);
										},
										$author$project$Morphir$Elm$ParsedModule$imports(parsedModule))));
						},
						insertsAndUpdates));
				return A2(
					$elm$core$Result$andThen,
					function (filteredFileChanges) {
						return A4($author$project$Morphir$Elm$IncrementalFrontend$applyChangesByOrder, filteredFileChanges, opts, exposedModules, repo);
					},
					A2(
						$elm$core$Result$map,
						A2($elm$core$Basics$composeR, usedModules, modulesToProcess),
						updatedModuleDep));
			}
		} else {
			var insertsAndUpdateChanges = A2(
				$elm$core$List$filterMap,
				function (modChange) {
					switch (modChange.$) {
						case 'ModuleInsert':
							var modName = modChange.a;
							return $elm$core$Maybe$Just(modName);
						case 'ModuleUpdate':
							var modName = modChange.a;
							return $elm$core$Maybe$Just(modName);
						default:
							return $elm$core$Maybe$Nothing;
					}
				},
				fileChanges);
			return function (exposedMods) {
				return A4($author$project$Morphir$Elm$IncrementalFrontend$applyChangesByOrder, fileChanges, opts, exposedMods, repo);
			}(
				$elm$core$Set$fromList(
					A2(
						$elm$core$List$append,
						insertsAndUpdateChanges,
						$elm$core$Dict$keys(
							$author$project$Morphir$IR$Repo$modules(repo)))));
		}
	});
var $author$project$Morphir$Stats$Backend$incrementOrAdd = F2(
	function (feature, features) {
		var featuresWithoutFeature = A2(
			$elm$core$List$filter,
			function (_v4) {
				var feat = _v4.a;
				return !_Utils_eq(feat, feature);
			},
			features);
		var featureInFeatures = A2(
			$elm$core$List$filter,
			function (_v3) {
				var feat = _v3.a;
				return _Utils_eq(feat, feature);
			},
			features);
		if (!featureInFeatures.b) {
			return A2(
				$elm$core$List$append,
				_List_fromArray(
					[
						_Utils_Tuple2(feature, 1)
					]),
				featuresWithoutFeature);
		} else {
			if (!featureInFeatures.b.b) {
				var _v1 = featureInFeatures.a;
				var feat = _v1.a;
				var freq = _v1.b;
				return A2(
					$elm$core$List$append,
					_List_fromArray(
						[
							_Utils_Tuple2(feat, freq + 1)
						]),
					featuresWithoutFeature);
			} else {
				var more = featureInFeatures;
				var cumulativeFreq = A3(
					$elm$core$List$foldl,
					F2(
						function (_v2, total) {
							var freq = _v2.b;
							return total + freq;
						}),
					0,
					more);
				return A2(
					$elm$core$List$append,
					_List_fromArray(
						[
							_Utils_Tuple2(feature, cumulativeFreq + 1)
						]),
					featuresWithoutFeature);
			}
		}
	});
var $author$project$Morphir$IR$FQName$toString = function (_v0) {
	var p = _v0.a;
	var m = _v0.b;
	var l = _v0.c;
	return A2(
		$elm$core$String$join,
		':',
		_List_fromArray(
			[
				A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', p),
				A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', m),
				$author$project$Morphir$IR$Name$toCamelCase(l)
			]));
};
var $author$project$Morphir$Stats$Backend$collectSDKFeatures = F2(
	function (fqn, featureCollection) {
		var packagePath = fqn.a;
		var _v0 = A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', packagePath);
		if (_v0 === 'Morphir.SDK') {
			return A2(
				$author$project$Morphir$Stats$Backend$incrementOrAdd,
				$author$project$Morphir$IR$FQName$toString(fqn),
				featureCollection);
		} else {
			return featureCollection;
		}
	});
var $author$project$Morphir$Stats$Backend$collectFeaturesFromType = F3(
	function (ir, tpe, featureCollection) {
		switch (tpe.$) {
			case 'Variable':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.Variable', featureCollection);
			case 'Reference':
				var fQName = tpe.b;
				var types = tpe.c;
				var extractTypes = function (fqn) {
					var _v1 = A2($author$project$Morphir$IR$lookupTypeSpecification, fqn, ir);
					if (_v1.$ === 'Just') {
						var spec = _v1.a;
						switch (spec.$) {
							case 'TypeAliasSpecification':
								var t = spec.b;
								return A2(
									$elm$core$List$cons,
									A2(
										$author$project$Morphir$IR$Type$mapTypeAttributes,
										$elm$core$Basics$always(
											$author$project$Morphir$IR$Type$typeAttributes(tpe)),
										t),
									types);
							case 'OpaqueTypeSpecification':
								return types;
							case 'CustomTypeSpecification':
								var constructors = spec.b;
								return A2(
									$elm$core$List$append,
									types,
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Tuple$second,
											$author$project$Morphir$IR$Type$mapTypeAttributes(
												$elm$core$Basics$always(
													$author$project$Morphir$IR$Type$typeAttributes(tpe)))),
										$elm$core$List$concat(
											$elm$core$Dict$values(constructors))));
							default:
								var config = spec.b;
								return A2(
									$elm$core$List$cons,
									A2(
										$author$project$Morphir$IR$Type$mapTypeAttributes,
										$elm$core$Basics$always(
											$author$project$Morphir$IR$Type$typeAttributes(tpe)),
										config.baseType),
									types);
						}
					} else {
						return types;
					}
				};
				return A2(
					$author$project$Morphir$Stats$Backend$collectSDKFeatures,
					fQName,
					A3(
						$elm$core$List$foldl,
						$author$project$Morphir$Stats$Backend$collectFeaturesFromType(ir),
						A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.Reference', featureCollection),
						extractTypes(fQName)));
			case 'Tuple':
				var types = tpe.b;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectFeaturesFromType(ir),
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.Tuple', featureCollection),
					types);
			case 'Record':
				var fields = tpe.b;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectFeaturesFromType(ir),
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.Record', featureCollection),
					A2(
						$elm$core$List$map,
						function ($) {
							return $.tpe;
						},
						fields));
			case 'ExtensibleRecord':
				var fields = tpe.c;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectFeaturesFromType(ir),
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.ExtensibleRecord', featureCollection),
					A2(
						$elm$core$List$map,
						function ($) {
							return $.tpe;
						},
						fields));
			case 'Function':
				var inputType = tpe.b;
				var outputType = tpe.c;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectFeaturesFromType(ir),
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.Function', featureCollection),
					_List_fromArray(
						[inputType, outputType]));
			default:
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.Unit', featureCollection);
		}
	});
var $elm$core$Debug$todo = _Debug_todo;
var $author$project$Morphir$Stats$Backend$collectLiteralFeatures = F2(
	function (literal, featureCollection) {
		switch (literal.$) {
			case 'BoolLiteral':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'BoolLiteral', featureCollection);
			case 'CharLiteral':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'CharLiteral', featureCollection);
			case 'StringLiteral':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'StringLiteral', featureCollection);
			case 'WholeNumberLiteral':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'WholeNumberLiteral', featureCollection);
			case 'FloatLiteral':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'FloatLiteral', featureCollection);
			default:
				return _Debug_todo(
					'Morphir.Stats.Backend',
					{
						start: {line: 337, column: 13},
						end: {line: 337, column: 23}
					})('branch \'DecimalLiteral _\' not implemented');
		}
	});
var $author$project$Morphir$Stats$Backend$collectPatternFeatures = F2(
	function (pattern, featureCollection) {
		switch (pattern.$) {
			case 'WildcardPattern':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'WildcardPattern', featureCollection);
			case 'AsPattern':
				if (pattern.b.$ === 'WildcardPattern') {
					return featureCollection;
				} else {
					var pat = pattern.b;
					return A2(
						$author$project$Morphir$Stats$Backend$collectPatternFeatures,
						pat,
						A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'AsPattern', featureCollection));
				}
			case 'TuplePattern':
				var patterns = pattern.b;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectPatternFeatures,
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'TuplePattern', featureCollection),
					patterns);
			case 'ConstructorPattern':
				var patterns = pattern.c;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectPatternFeatures,
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'ConstructorPattern', featureCollection),
					patterns);
			case 'EmptyListPattern':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'EmptyListPattern', featureCollection);
			case 'HeadTailPattern':
				var head = pattern.b;
				var tail = pattern.c;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectPatternFeatures,
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'HeadTailPattern', featureCollection),
					_List_fromArray(
						[head, tail]));
			case 'LiteralPattern':
				var literal = pattern.b;
				return A2(
					$author$project$Morphir$Stats$Backend$collectLiteralFeatures,
					literal,
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'LiteralPattern', featureCollection));
			default:
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'UnitPattern', featureCollection);
		}
	});
var $author$project$Morphir$Stats$Backend$collectFeaturesFromValue = F3(
	function (ir, value, featureCollection) {
		switch (value.$) {
			case 'Literal':
				var literal = value.b;
				return A2(
					$author$project$Morphir$Stats$Backend$collectLiteralFeatures,
					literal,
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Literal', featureCollection));
			case 'Constructor':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Constructor', featureCollection);
			case 'Tuple':
				var values = value.b;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectFeaturesFromValue(ir),
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Tuple', featureCollection),
					values);
			case 'List':
				var values = value.b;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectFeaturesFromValue(ir),
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.List', featureCollection),
					values);
			case 'Record':
				var values = value.b;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectFeaturesFromValue(ir),
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Record', featureCollection),
					$elm$core$Dict$values(values));
			case 'Variable':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Variable', featureCollection);
			case 'Reference':
				var fqn = value.b;
				return A2(
					$author$project$Morphir$Stats$Backend$collectSDKFeatures,
					fqn,
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Reference', featureCollection));
			case 'Field':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Field', featureCollection);
			case 'FieldFunction':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.FieldFunction', featureCollection);
			case 'Apply':
				var apply = value;
				var argsAndTarget = F2(
					function (lst, v) {
						argsAndTarget:
						while (true) {
							if (v.$ === 'Apply') {
								var target = v.b;
								var args = v.c;
								var $temp$lst = A2($elm$core$List$cons, args, lst),
									$temp$v = target;
								lst = $temp$lst;
								v = $temp$v;
								continue argsAndTarget;
							} else {
								return _Utils_Tuple2(lst, v);
							}
						}
					});
				return function (_v3) {
					var args = _v3.a;
					var targetVal = _v3.b;
					return A3(
						$author$project$Morphir$Stats$Backend$collectFeaturesFromValue,
						ir,
						targetVal,
						A3(
							$elm$core$List$foldl,
							$author$project$Morphir$Stats$Backend$collectFeaturesFromValue(ir),
							A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Apply', featureCollection),
							args));
				}(
					A2(argsAndTarget, _List_Nil, apply));
			case 'Lambda':
				var pattern = value.b;
				return A2(
					$author$project$Morphir$Stats$Backend$collectPatternFeatures,
					pattern,
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Lambda', featureCollection));
			case 'LetDefinition':
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.LetDefinition', featureCollection);
			case 'LetRecursion':
				var definitions = value.b;
				var inValue = value.c;
				return A3(
					$author$project$Morphir$Stats$Backend$collectFeaturesFromValue,
					ir,
					inValue,
					A3(
						$author$project$Morphir$Stats$Backend$collectFeaturesFromValueDefs,
						ir,
						$elm$core$Dict$values(definitions),
						A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.LetRecursion', featureCollection)));
			case 'Destructure':
				var pattern = value.b;
				var fromValue = value.c;
				var toValue = value.d;
				return A2(
					$author$project$Morphir$Stats$Backend$collectPatternFeatures,
					pattern,
					A3(
						$elm$core$List$foldl,
						$author$project$Morphir$Stats$Backend$collectFeaturesFromValue(ir),
						A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Destructure', featureCollection),
						_List_fromArray(
							[fromValue, toValue])));
			case 'IfThenElse':
				var cond = value.b;
				var thenBlock = value.c;
				var elseBlock = value.d;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectFeaturesFromValue(ir),
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.IfThenElse', featureCollection),
					_List_fromArray(
						[cond, thenBlock, elseBlock]));
			case 'PatternMatch':
				var patterns = value.c;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectPatternFeatures,
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.PatternMatch', featureCollection),
					A2($elm$core$List$map, $elm$core$Tuple$first, patterns));
			case 'UpdateRecord':
				var updates = value.c;
				return A3(
					$elm$core$List$foldl,
					$author$project$Morphir$Stats$Backend$collectFeaturesFromValue(ir),
					A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.UpdateRecord', featureCollection),
					$elm$core$Dict$values(updates));
			default:
				return A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Value.Unit', featureCollection);
		}
	});
var $author$project$Morphir$Stats$Backend$collectFeaturesFromValueDefs = F3(
	function (ir, values, featureCollection) {
		var collectTypesFromValueDef = function (def) {
			return A2(
				$elm$core$List$append,
				_List_fromArray(
					[def.outputType]),
				A2(
					$elm$core$List$map,
					function (_v0) {
						var tpe = _v0.c;
						return tpe;
					},
					def.inputTypes));
		};
		var typeAndValueFeaturesFromValueSign = A3(
			$elm$core$List$foldl,
			F2(
				function (valueDef, featureSetSoFar) {
					return A3(
						$author$project$Morphir$Stats$Backend$collectFeaturesFromValue,
						ir,
						valueDef.body,
						A3(
							$elm$core$List$foldl,
							$author$project$Morphir$Stats$Backend$collectFeaturesFromType(ir),
							featureSetSoFar,
							collectTypesFromValueDef(valueDef)));
				}),
			featureCollection,
			values);
		return typeAndValueFeaturesFromValueSign;
	});
var $author$project$Morphir$Stats$Backend$collectTypeFeatures = F3(
	function (ir, types, featureCollection) {
		var typeFeaturesFromTypes = A3(
			$elm$core$List$foldl,
			F2(
				function (accDocTypeDef, featureSetSoFar) {
					var _v0 = accDocTypeDef.value.value;
					if (_v0.$ === 'TypeAliasDefinition') {
						var names = _v0.a;
						var tpe = _v0.b;
						var withTypeAlias = A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.TypeAlias', featureSetSoFar);
						var withTypeVariables = ($elm$core$List$length(names) > 0) ? A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.Variable', featureSetSoFar) : withTypeAlias;
						return A3($author$project$Morphir$Stats$Backend$collectFeaturesFromType, ir, tpe, withTypeVariables);
					} else {
						var names = _v0.a;
						var accessControlledConstructors = _v0.b;
						var withCustomType = A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.CustomType', featureSetSoFar);
						var withCustomTypeVariables = ($elm$core$List$length(names) > 0) ? A2($author$project$Morphir$Stats$Backend$incrementOrAdd, 'Type.Variable', featureSetSoFar) : withCustomType;
						return A3(
							$elm$core$List$foldl,
							$author$project$Morphir$Stats$Backend$collectFeaturesFromType(ir),
							withCustomTypeVariables,
							A2(
								$elm$core$List$map,
								$elm$core$Tuple$second,
								$elm$core$List$concat(
									$elm$core$Dict$values(accessControlledConstructors.value))));
					}
				}),
			featureCollection,
			types);
		return typeFeaturesFromTypes;
	});
var $author$project$Morphir$Stats$Backend$collectFeaturesFromPackage = F2(
	function (ir, definition) {
		var values = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.value;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.values;
						},
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Dict$values,
							$elm$core$List$map(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.value;
									},
									function ($) {
										return $.value;
									}))))),
				$elm$core$Dict$values(definition.modules)));
		var types = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.value;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.types;
						},
						$elm$core$Dict$values)),
				$elm$core$Dict$values(definition.modules)));
		var emptyFeatureCollection = _List_Nil;
		return A3(
			$author$project$Morphir$Stats$Backend$collectFeaturesFromValueDefs,
			ir,
			values,
			A3($author$project$Morphir$Stats$Backend$collectTypeFeatures, ir, types, emptyFeatureCollection));
	});
var $elm$json$Json$Encode$dict = F3(
	function (toKey, toValue, dictionary) {
		return _Json_wrap(
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, value, obj) {
						return A3(
							_Json_addField,
							toKey(key),
							toValue(value),
							obj);
					}),
				_Json_emptyObject(_Utils_Tuple0),
				dictionary));
	});
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Morphir$Stats$Backend$collectFeaturesFromDistribution = function (distribution) {
	var packageDefinition = distribution.c;
	var ir = $author$project$Morphir$IR$fromDistribution(distribution);
	var featureList = A2($author$project$Morphir$Stats$Backend$collectFeaturesFromPackage, ir, packageDefinition);
	var featureListFormattedAsMD = A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$append,
			_List_fromArray(
				['# Morphir Features & Frequencies\n']),
			A2(
				$elm$core$List$map,
				function (_v1) {
					var feat = _v1.a;
					var freq = _v1.b;
					return '- [ ] ' + (feat + (' - ' + $elm$core$String$fromInt(freq)));
				},
				$elm$core$List$reverse(
					A2($elm$core$List$sortBy, $elm$core$Tuple$second, featureList)))));
	var encodedFeatureListAsJSON = A2(
		$elm$json$Json$Encode$encode,
		4,
		A3(
			$elm$json$Json$Encode$dict,
			$elm$core$Basics$identity,
			$elm$json$Json$Encode$int,
			$elm$core$Dict$fromList(featureList)));
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				_Utils_Tuple2(_List_Nil, 'FeatureMetrics.json'),
				encodedFeatureListAsJSON),
				_Utils_Tuple2(
				_Utils_Tuple2(_List_Nil, 'FeatureMetrics.md'),
				featureListFormattedAsMD)
			]));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Morphir$Elm$CLI$decodeFailed = _Platform_outgoingPort('decodeFailed', $elm$json$Json$Encode$string);
var $author$project$Morphir$File$FileChanges$Delete = {$: 'Delete'};
var $author$project$Morphir$File$FileChanges$Insert = function (a) {
	return {$: 'Insert', a: a};
};
var $author$project$Morphir$File$FileChanges$Update = function (a) {
	return {$: 'Update', a: a};
};
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Morphir$File$FileChanges$Codec$decodeChange = A2(
	$elm$json$Json$Decode$andThen,
	function (tag) {
		switch (tag) {
			case 'Insert':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$File$FileChanges$Insert,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$string));
			case 'Update':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$File$FileChanges$Update,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$string));
			case 'Delete':
				return $elm$json$Json$Decode$succeed($author$project$Morphir$File$FileChanges$Delete);
			default:
				var other = tag;
				return $elm$json$Json$Decode$fail('Unknown tag: ' + other);
		}
	},
	A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $author$project$Morphir$File$FileChanges$Codec$decodeFileChanges = $elm$json$Json$Decode$dict($author$project$Morphir$File$FileChanges$Codec$decodeChange);
var $author$project$Morphir$File$FileSnapshot$Codec$decodeFileSnapshot = $elm$json$Json$Decode$dict($elm$json$Json$Decode$string);
var $author$project$Morphir$Elm$Frontend$Options = function (typesOnly) {
	return {typesOnly: typesOnly};
};
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $author$project$Morphir$Elm$Frontend$Codec$decodeOptions = A2(
	$elm$json$Json$Decode$map,
	$author$project$Morphir$Elm$Frontend$Options,
	A2($elm$json$Json$Decode$field, 'typesOnly', $elm$json$Json$Decode$bool));
var $author$project$Morphir$Elm$Target$CypherOptions = function (a) {
	return {$: 'CypherOptions', a: a};
};
var $author$project$Morphir$Elm$Target$JsonSchemaOptions = function (a) {
	return {$: 'JsonSchemaOptions', a: a};
};
var $author$project$Morphir$Scala$Spark$Backend$Options = {};
var $author$project$Morphir$Elm$Target$ScalaOptions = function (a) {
	return {$: 'ScalaOptions', a: a};
};
var $author$project$Morphir$Elm$Target$SemanticOptions = function (a) {
	return {$: 'SemanticOptions', a: a};
};
var $author$project$Morphir$Elm$Target$SparkOptions = function (a) {
	return {$: 'SparkOptions', a: a};
};
var $author$project$Morphir$Elm$Target$SpringBootOptions = function (a) {
	return {$: 'SpringBootOptions', a: a};
};
var $author$project$Morphir$Elm$Target$TypeScriptOptions = function (a) {
	return {$: 'TypeScriptOptions', a: a};
};
var $author$project$Morphir$Graph$CypherBackend$Options = {};
var $author$project$Morphir$Graph$Backend$Codec$decodeOptions = $elm$json$Json$Decode$succeed($author$project$Morphir$Graph$CypherBackend$Options);
var $author$project$Morphir$JsonSchema$Backend$Options = F3(
	function (filename, limitToModules, include) {
		return {filename: filename, include: include, limitToModules: limitToModules};
	});
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$Morphir$JsonSchema$Backend$Codec$decodeOptions = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Morphir$JsonSchema$Backend$Options,
	A2($elm$json$Json$Decode$field, 'filename', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'limitToModules',
		$elm$json$Json$Decode$maybe(
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Set$fromList,
				$elm$json$Json$Decode$list(
					A2($elm$json$Json$Decode$map, $author$project$Morphir$IR$Path$fromString, $elm$json$Json$Decode$string))))),
	A2(
		$elm$json$Json$Decode$field,
		'include',
		$elm$json$Json$Decode$maybe(
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Set$fromList,
				$elm$json$Json$Decode$list($elm$json$Json$Decode$string)))));
var $author$project$Morphir$Scala$Backend$Options = F3(
	function (limitToModules, includeCodecs, testOptions) {
		return {includeCodecs: includeCodecs, limitToModules: limitToModules, testOptions: testOptions};
	});
var $author$project$Morphir$Scala$Feature$TestBackend$Options = F2(
	function (includeGenericTests, includeScalaTests) {
		return {includeGenericTests: includeGenericTests, includeScalaTests: includeScalaTests};
	});
var $elm$json$Json$Decode$map2 = _Json_map2;
var $author$project$Morphir$Scala$Backend$Codec$decodeTestOptions = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (maybeGenericTest, maybeScalaTest) {
			return A2(
				$author$project$Morphir$Scala$Feature$TestBackend$Options,
				A2($elm$core$Maybe$withDefault, false, maybeGenericTest),
				A2($elm$core$Maybe$withDefault, false, maybeScalaTest));
		}),
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'generateTestGeneric', $elm$json$Json$Decode$bool)),
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'generateTestScalatest', $elm$json$Json$Decode$bool)));
var $author$project$Morphir$Scala$Backend$Codec$decodeOptions = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Morphir$Scala$Backend$Options,
	A2(
		$elm$json$Json$Decode$field,
		'limitToModules',
		$elm$json$Json$Decode$maybe(
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Set$fromList,
				$elm$json$Json$Decode$list(
					A2($elm$json$Json$Decode$map, $author$project$Morphir$IR$Path$fromString, $elm$json$Json$Decode$string))))),
	A2($elm$json$Json$Decode$field, 'includeCodecs', $elm$json$Json$Decode$bool),
	$author$project$Morphir$Scala$Backend$Codec$decodeTestOptions);
var $author$project$Morphir$SpringBoot$Backend$Options = {};
var $author$project$Morphir$SpringBoot$Backend$Codec$decodeOptions = $elm$json$Json$Decode$succeed($author$project$Morphir$SpringBoot$Backend$Options);
var $author$project$Morphir$Elm$Target$decodeOptions = function (gen) {
	_v0$6:
	while (true) {
		if (gen.$ === 'Ok') {
			switch (gen.a) {
				case 'SpringBoot':
					return A2(
						$elm$json$Json$Decode$map,
						function (options) {
							return $author$project$Morphir$Elm$Target$SpringBootOptions(options);
						},
						$author$project$Morphir$SpringBoot$Backend$Codec$decodeOptions);
				case 'semantic':
					return A2(
						$elm$json$Json$Decode$map,
						function (options) {
							return $author$project$Morphir$Elm$Target$SemanticOptions(options);
						},
						$author$project$Morphir$Graph$Backend$Codec$decodeOptions);
				case 'cypher':
					return A2(
						$elm$json$Json$Decode$map,
						function (options) {
							return $author$project$Morphir$Elm$Target$CypherOptions(options);
						},
						$author$project$Morphir$Graph$Backend$Codec$decodeOptions);
				case 'TypeScript':
					return A2(
						$elm$json$Json$Decode$map,
						function (options) {
							return $author$project$Morphir$Elm$Target$TypeScriptOptions(options);
						},
						$author$project$Morphir$Graph$Backend$Codec$decodeOptions);
				case 'Spark':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$Elm$Target$SparkOptions,
						$elm$json$Json$Decode$succeed($author$project$Morphir$Scala$Spark$Backend$Options));
				case 'JsonSchema':
					return A2(
						$elm$json$Json$Decode$map,
						function (options) {
							return $author$project$Morphir$Elm$Target$JsonSchemaOptions(options);
						},
						$author$project$Morphir$JsonSchema$Backend$Codec$decodeOptions);
				default:
					break _v0$6;
			}
		} else {
			break _v0$6;
		}
	}
	return A2(
		$elm$json$Json$Decode$map,
		function (options) {
			return $author$project$Morphir$Elm$Target$ScalaOptions(options);
		},
		$author$project$Morphir$Scala$Backend$Codec$decodeOptions);
};
var $author$project$Morphir$Elm$Frontend$PackageInfo = F2(
	function (name, exposedModules) {
		return {exposedModules: exposedModules, name: name};
	});
var $author$project$Morphir$Elm$Frontend$Codec$decodePackageInfo = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Morphir$Elm$Frontend$PackageInfo,
	A2(
		$elm$json$Json$Decode$field,
		'name',
		A2($elm$json$Json$Decode$map, $author$project$Morphir$IR$Path$fromString, $elm$json$Json$Decode$string)),
	$elm$json$Json$Decode$maybe(
		A2(
			$elm$json$Json$Decode$field,
			'exposedModules',
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Set$fromList,
				$elm$json$Json$Decode$list(
					A2($elm$json$Json$Decode$map, $author$project$Morphir$IR$Path$fromString, $elm$json$Json$Decode$string))))));
var $author$project$Morphir$IR$Name$CodecV1$decodeName = A2(
	$elm$json$Json$Decode$map,
	$author$project$Morphir$IR$Name$fromList,
	$elm$json$Json$Decode$list($elm$json$Json$Decode$string));
var $author$project$Morphir$IR$Path$CodecV1$decodePath = A2(
	$elm$json$Json$Decode$map,
	$author$project$Morphir$IR$Path$fromList,
	$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$CodecV1$decodeName));
var $author$project$Morphir$IR$FQName$CodecV1$decodeFQName = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Morphir$IR$FQName$fQName,
	A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Path$CodecV1$decodePath),
	A2($elm$json$Json$Decode$index, 1, $author$project$Morphir$IR$Path$CodecV1$decodePath),
	A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$CodecV1$decodeName));
var $author$project$Morphir$Correctness$Test$TestCase = F3(
	function (inputs, expectedOutput, description) {
		return {description: description, expectedOutput: expectedOutput, inputs: inputs};
	});
var $author$project$Morphir$IR$Literal$DecimalLiteral = function (a) {
	return {$: 'DecimalLiteral', a: a};
};
var $author$project$Morphir$Value$Error$BindPatternDidNotMatch = F2(
	function (a, b) {
		return {$: 'BindPatternDidNotMatch', a: a, b: b};
	});
var $author$project$Morphir$Value$Error$ErrorWhileEvaluatingReference = F2(
	function (a, b) {
		return {$: 'ErrorWhileEvaluatingReference', a: a, b: b};
	});
var $author$project$Morphir$Value$Error$ErrorWhileEvaluatingVariable = F2(
	function (a, b) {
		return {$: 'ErrorWhileEvaluatingVariable', a: a, b: b};
	});
var $author$project$Morphir$Value$Error$ExactlyOneArgumentExpected = function (a) {
	return {$: 'ExactlyOneArgumentExpected', a: a};
};
var $author$project$Morphir$Value$Error$FieldNotFound = F2(
	function (a, b) {
		return {$: 'FieldNotFound', a: a, b: b};
	});
var $author$project$Morphir$Value$Error$IfThenElseConditionShouldEvaluateToBool = F2(
	function (a, b) {
		return {$: 'IfThenElseConditionShouldEvaluateToBool', a: a, b: b};
	});
var $author$project$Morphir$Value$Error$LambdaArgumentDidNotMatch = function (a) {
	return {$: 'LambdaArgumentDidNotMatch', a: a};
};
var $author$project$Morphir$Value$Error$NoArgumentToPassToLambda = {$: 'NoArgumentToPassToLambda'};
var $author$project$Morphir$Value$Error$NoPatternsMatch = F2(
	function (a, b) {
		return {$: 'NoPatternsMatch', a: a, b: b};
	});
var $author$project$Morphir$Value$Error$RecordExpected = F2(
	function (a, b) {
		return {$: 'RecordExpected', a: a, b: b};
	});
var $author$project$Morphir$Value$Error$ReferenceNotFound = function (a) {
	return {$: 'ReferenceNotFound', a: a};
};
var $author$project$Morphir$Value$Error$VariableNotFound = function (a) {
	return {$: 'VariableNotFound', a: a};
};
var $author$project$Morphir$IR$Value$definitionToValue = function (def) {
	var _v0 = def.inputTypes;
	if (!_v0.b) {
		return def.body;
	} else {
		var _v1 = _v0.a;
		var firstArgName = _v1.a;
		var va = _v1.b;
		var restOfArgs = _v0.b;
		return A3(
			$author$project$Morphir$IR$Value$Lambda,
			va,
			A3(
				$author$project$Morphir$IR$Value$AsPattern,
				va,
				$author$project$Morphir$IR$Value$WildcardPattern(va),
				firstArgName),
			$author$project$Morphir$IR$Value$definitionToValue(
				_Utils_update(
					def,
					{inputTypes: restOfArgs})));
	}
};
var $author$project$Morphir$SDK$ResultList$keepFirstError = function (results) {
	var _v0 = $author$project$Morphir$SDK$ResultList$keepAllErrors(results);
	if (_v0.$ === 'Ok') {
		var a = _v0.a;
		return $elm$core$Result$Ok(a);
	} else {
		var errs = _v0.a;
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Result$Ok(_List_Nil),
			A2(
				$elm$core$Maybe$map,
				$elm$core$Result$Err,
				$elm$core$List$head(errs)));
	}
};
var $author$project$Morphir$ListOfResults$liftFirstError = function (results) {
	var _v0 = $author$project$Morphir$ListOfResults$liftAllErrors(results);
	if (_v0.$ === 'Ok') {
		var a = _v0.a;
		return $elm$core$Result$Ok(a);
	} else {
		var errors = _v0.a;
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Result$Ok(_List_Nil),
			A2(
				$elm$core$Maybe$map,
				$elm$core$Result$Err,
				$elm$core$List$head(errors)));
	}
};
var $author$project$Morphir$IR$lookupValueDefinition = F2(
	function (fqn, ir) {
		return A2($elm$core$Dict$get, fqn, ir.valueDefinitions);
	});
var $author$project$Morphir$Value$Error$PatternMismatch = F2(
	function (a, b) {
		return {$: 'PatternMismatch', a: a, b: b};
	});
var $author$project$Morphir$Value$Interpreter$matchPattern = F2(
	function (pattern, value) {
		var error = $elm$core$Result$Err(
			A2($author$project$Morphir$Value$Error$PatternMismatch, pattern, value));
		switch (pattern.$) {
			case 'WildcardPattern':
				return $elm$core$Result$Ok($elm$core$Dict$empty);
			case 'AsPattern':
				var subjectPattern = pattern.b;
				var alias = pattern.c;
				return A2(
					$elm$core$Result$map,
					function (subjectVariables) {
						return A3($elm$core$Dict$insert, alias, value, subjectVariables);
					},
					A2($author$project$Morphir$Value$Interpreter$matchPattern, subjectPattern, value));
			case 'TuplePattern':
				var elemPatterns = pattern.b;
				if (value.$ === 'Tuple') {
					var elemValues = value.b;
					var valueLength = $elm$core$List$length(elemValues);
					var patternLength = $elm$core$List$length(elemPatterns);
					return _Utils_eq(patternLength, valueLength) ? A2(
						$elm$core$Result$map,
						A2($elm$core$List$foldl, $elm$core$Dict$union, $elm$core$Dict$empty),
						$author$project$Morphir$ListOfResults$liftFirstError(
							A3($elm$core$List$map2, $author$project$Morphir$Value$Interpreter$matchPattern, elemPatterns, elemValues))) : error;
				} else {
					return error;
				}
			case 'ConstructorPattern':
				var ctorPatternFQName = pattern.b;
				var argPatterns = pattern.c;
				var uncurry = function (v) {
					if (v.$ === 'Apply') {
						var f = v.b;
						var a = v.c;
						var _v3 = uncurry(f);
						var nestedV = _v3.a;
						var nestedArgs = _v3.b;
						return _Utils_Tuple2(
							nestedV,
							_Utils_ap(
								nestedArgs,
								_List_fromArray(
									[a])));
					} else {
						return _Utils_Tuple2(v, _List_Nil);
					}
				};
				var _v4 = uncurry(value);
				var ctorValue = _v4.a;
				var argValues = _v4.b;
				if (ctorValue.$ === 'Constructor') {
					var ctorFQName = ctorValue.b;
					if (_Utils_eq(ctorPatternFQName, ctorFQName)) {
						var valueLength = $elm$core$List$length(argValues);
						var patternLength = $elm$core$List$length(argPatterns);
						return _Utils_eq(patternLength, valueLength) ? A2(
							$elm$core$Result$map,
							A2($elm$core$List$foldl, $elm$core$Dict$union, $elm$core$Dict$empty),
							$author$project$Morphir$ListOfResults$liftFirstError(
								A3($elm$core$List$map2, $author$project$Morphir$Value$Interpreter$matchPattern, argPatterns, argValues))) : error;
					} else {
						return error;
					}
				} else {
					return error;
				}
			case 'EmptyListPattern':
				if ((value.$ === 'List') && (!value.b.b)) {
					return $elm$core$Result$Ok($elm$core$Dict$empty);
				} else {
					return error;
				}
			case 'HeadTailPattern':
				var headPattern = pattern.b;
				var tailPattern = pattern.c;
				if ((value.$ === 'List') && value.b.b) {
					var a = value.a;
					var _v8 = value.b;
					var headValue = _v8.a;
					var tailValue = _v8.b;
					return A3(
						$elm$core$Result$map2,
						$elm$core$Dict$union,
						A2($author$project$Morphir$Value$Interpreter$matchPattern, headPattern, headValue),
						A2(
							$author$project$Morphir$Value$Interpreter$matchPattern,
							tailPattern,
							A2($author$project$Morphir$IR$Value$List, a, tailValue)));
				} else {
					return error;
				}
			case 'LiteralPattern':
				var matchLiteral = pattern.b;
				if (value.$ === 'Literal') {
					var valueLiteral = value.b;
					return _Utils_eq(matchLiteral, valueLiteral) ? $elm$core$Result$Ok($elm$core$Dict$empty) : error;
				} else {
					return error;
				}
			default:
				if (value.$ === 'Unit') {
					return $elm$core$Result$Ok($elm$core$Dict$empty);
				} else {
					return error;
				}
		}
	});
var $author$project$Morphir$IR$resolveAliases = F2(
	function (fQName, ir) {
		return A2(
			$elm$core$Maybe$withDefault,
			fQName,
			A2(
				$elm$core$Maybe$map,
				function (typeSpec) {
					if ((typeSpec.$ === 'TypeAliasSpecification') && (typeSpec.b.$ === 'Reference')) {
						var _v1 = typeSpec.b;
						var aliasFQName = _v1.b;
						return aliasFQName;
					} else {
						return fQName;
					}
				},
				A2($author$project$Morphir$IR$lookupTypeSpecification, fQName, ir)));
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Morphir$IR$Value$toRawValue = function (value) {
	return A3(
		$author$project$Morphir$IR$Value$mapValueAttributes,
		$elm$core$Basics$always(_Utils_Tuple0),
		$elm$core$Basics$always(_Utils_Tuple0),
		value);
};
var $author$project$Morphir$Value$Interpreter$evaluateFunctionValue = F4(
	function (nativeFunctions, ir, fQName, variableValues) {
		return A2(
			$elm$core$Result$andThen,
			function (valueDef) {
				return A5(
					$author$project$Morphir$Value$Interpreter$evaluateValue,
					nativeFunctions,
					ir,
					$elm$core$Dict$fromList(
						A3(
							$elm$core$List$map2,
							$elm$core$Tuple$pair,
							A2(
								$elm$core$List$map,
								function (_v18) {
									var name = _v18.a;
									return name;
								},
								valueDef.inputTypes),
							A2(
								$elm$core$List$map,
								$elm$core$Maybe$withDefault(
									$author$project$Morphir$IR$Value$Unit(_Utils_Tuple0)),
								variableValues))),
					_List_Nil,
					$author$project$Morphir$IR$Value$toRawValue(valueDef.body));
			},
			A2(
				$elm$core$Result$fromMaybe,
				$author$project$Morphir$Value$Error$ReferenceNotFound(fQName),
				A2($author$project$Morphir$IR$lookupValueDefinition, fQName, ir)));
	});
var $author$project$Morphir$Value$Interpreter$evaluateValue = F5(
	function (nativeFunctions, ir, variables, _arguments, value) {
		evaluateValue:
		while (true) {
			switch (value.$) {
				case 'Literal':
					return $elm$core$Result$Ok(value);
				case 'Constructor':
					var fQName = value.b;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArgs) {
							var _v1 = A2(
								$author$project$Morphir$IR$lookupTypeSpecification,
								A2($author$project$Morphir$IR$resolveAliases, fQName, ir),
								ir);
							if (((_v1.$ === 'Just') && (_v1.a.$ === 'TypeAliasSpecification')) && (_v1.a.b.$ === 'Record')) {
								var _v2 = _v1.a;
								var _v3 = _v2.b;
								var fields = _v3.b;
								return $elm$core$Result$Ok(
									A2(
										$author$project$Morphir$IR$Value$Record,
										_Utils_Tuple0,
										$elm$core$Dict$fromList(
											A3(
												$elm$core$List$map2,
												$elm$core$Tuple$pair,
												A2(
													$elm$core$List$map,
													function ($) {
														return $.name;
													},
													fields),
												evaluatedArgs))));
							} else {
								var applyArgs = F2(
									function (subject, argsReversed) {
										if (!argsReversed.b) {
											return subject;
										} else {
											var lastArg = argsReversed.a;
											var restOfArgsReversed = argsReversed.b;
											return A3(
												$author$project$Morphir$IR$Value$Apply,
												_Utils_Tuple0,
												A2(applyArgs, subject, restOfArgsReversed),
												lastArg);
										}
									});
								return $elm$core$Result$Ok(
									A2(
										applyArgs,
										value,
										$elm$core$List$reverse(evaluatedArgs)));
							}
						},
						$author$project$Morphir$ListOfResults$liftFirstError(
							A2(
								$elm$core$List$map,
								A4($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil),
								_arguments)));
				case 'Tuple':
					var elems = value.b;
					return A2(
						$elm$core$Result$map,
						$author$project$Morphir$IR$Value$Tuple(_Utils_Tuple0),
						$author$project$Morphir$ListOfResults$liftFirstError(
							A2(
								$elm$core$List$map,
								A4($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil),
								elems)));
				case 'List':
					var items = value.b;
					return A2(
						$elm$core$Result$map,
						$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
						$author$project$Morphir$ListOfResults$liftFirstError(
							A2(
								$elm$core$List$map,
								A4($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil),
								items)));
				case 'Record':
					var fields = value.b;
					return A2(
						$elm$core$Result$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Dict$fromList,
							$author$project$Morphir$IR$Value$Record(_Utils_Tuple0)),
						$author$project$Morphir$ListOfResults$liftFirstError(
							A2(
								$elm$core$List$map,
								function (_v5) {
									var fieldName = _v5.a;
									var fieldValue = _v5.b;
									return A2(
										$elm$core$Result$map,
										$elm$core$Tuple$pair(fieldName),
										A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil, fieldValue));
								},
								$elm$core$Dict$toList(fields))));
				case 'Variable':
					var varName = value.b;
					return A2(
						$elm$core$Result$mapError,
						$author$project$Morphir$Value$Error$ErrorWhileEvaluatingVariable(varName),
						A2(
							$elm$core$Result$fromMaybe,
							$author$project$Morphir$Value$Error$VariableNotFound(varName),
							A2($elm$core$Dict$get, varName, variables)));
				case 'Reference':
					var fQName = value.b;
					var packageName = fQName.a;
					var moduleName = fQName.b;
					var localName = fQName.c;
					var _v6 = A2(
						$elm$core$Dict$get,
						_Utils_Tuple3(packageName, moduleName, localName),
						nativeFunctions);
					if (_v6.$ === 'Just') {
						var nativeFunction = _v6.a;
						return A2(
							$elm$core$Result$mapError,
							$author$project$Morphir$Value$Error$ErrorWhileEvaluatingReference(fQName),
							A2(
								nativeFunction,
								A4($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil),
								_arguments));
					} else {
						return A2(
							$elm$core$Result$andThen,
							A3($author$project$Morphir$Value$Interpreter$evaluateFunctionValue, nativeFunctions, ir, fQName),
							A2(
								$elm$core$Result$map,
								function (resultList) {
									return A2(
										$elm$core$List$map,
										function (result) {
											return $elm$core$Maybe$Just(result);
										},
										resultList);
								},
								$author$project$Morphir$SDK$ResultList$keepFirstError(
									A2(
										$elm$core$List$map,
										A4($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil),
										_arguments))));
					}
				case 'Field':
					var subjectValue = value.b;
					var fieldName = value.c;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedSubjectValue) {
							if (evaluatedSubjectValue.$ === 'Record') {
								var fields = evaluatedSubjectValue.b;
								return A2(
									$elm$core$Result$fromMaybe,
									A2($author$project$Morphir$Value$Error$FieldNotFound, subjectValue, fieldName),
									A2($elm$core$Dict$get, fieldName, fields));
							} else {
								return $elm$core$Result$Err(
									A2($author$project$Morphir$Value$Error$RecordExpected, subjectValue, evaluatedSubjectValue));
							}
						},
						A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil, subjectValue));
				case 'FieldFunction':
					var fieldName = value.b;
					if (_arguments.b && (!_arguments.b.b)) {
						var subjectValue = _arguments.a;
						return A2(
							$elm$core$Result$andThen,
							function (evaluatedSubjectValue) {
								if (evaluatedSubjectValue.$ === 'Record') {
									var fields = evaluatedSubjectValue.b;
									return A2(
										$elm$core$Result$fromMaybe,
										A2($author$project$Morphir$Value$Error$FieldNotFound, subjectValue, fieldName),
										A2($elm$core$Dict$get, fieldName, fields));
								} else {
									return $elm$core$Result$Err(
										A2($author$project$Morphir$Value$Error$RecordExpected, subjectValue, evaluatedSubjectValue));
								}
							},
							A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil, subjectValue));
					} else {
						var other = _arguments;
						return $elm$core$Result$Err(
							$author$project$Morphir$Value$Error$ExactlyOneArgumentExpected(other));
					}
				case 'Apply':
					var _function = value.b;
					var argument = value.c;
					var $temp$nativeFunctions = nativeFunctions,
						$temp$ir = ir,
						$temp$variables = variables,
						$temp$arguments = A2($elm$core$List$cons, argument, _arguments),
						$temp$value = _function;
					nativeFunctions = $temp$nativeFunctions;
					ir = $temp$ir;
					variables = $temp$variables;
					_arguments = $temp$arguments;
					value = $temp$value;
					continue evaluateValue;
				case 'Lambda':
					var argumentPattern = value.b;
					var body = value.c;
					return A2(
						$elm$core$Result$andThen,
						function (argumentVariables) {
							return A5(
								$author$project$Morphir$Value$Interpreter$evaluateValue,
								nativeFunctions,
								ir,
								A2($elm$core$Dict$union, argumentVariables, variables),
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									$elm$core$List$tail(_arguments)),
								body);
						},
						A2(
							$elm$core$Result$andThen,
							function (argumentValue) {
								return A2(
									$elm$core$Result$mapError,
									$author$project$Morphir$Value$Error$LambdaArgumentDidNotMatch,
									A2($author$project$Morphir$Value$Interpreter$matchPattern, argumentPattern, argumentValue));
							},
							A2(
								$elm$core$Result$fromMaybe,
								$author$project$Morphir$Value$Error$NoArgumentToPassToLambda,
								$elm$core$List$head(_arguments))));
				case 'LetDefinition':
					var defName = value.b;
					var def = value.c;
					var inValue = value.d;
					return A2(
						$elm$core$Result$andThen,
						function (defValue) {
							return A5(
								$author$project$Morphir$Value$Interpreter$evaluateValue,
								nativeFunctions,
								ir,
								A3($elm$core$Dict$insert, defName, defValue, variables),
								_List_Nil,
								inValue);
						},
						A5(
							$author$project$Morphir$Value$Interpreter$evaluateValue,
							nativeFunctions,
							ir,
							variables,
							_List_Nil,
							$author$project$Morphir$IR$Value$definitionToValue(def)));
				case 'LetRecursion':
					var defs = value.b;
					var inValue = value.c;
					var defVariables = A2(
						$elm$core$Dict$map,
						F2(
							function (_v10, def) {
								return $author$project$Morphir$IR$Value$definitionToValue(def);
							}),
						defs);
					var $temp$nativeFunctions = nativeFunctions,
						$temp$ir = ir,
						$temp$variables = A2($elm$core$Dict$union, defVariables, variables),
						$temp$arguments = _List_Nil,
						$temp$value = inValue;
					nativeFunctions = $temp$nativeFunctions;
					ir = $temp$ir;
					variables = $temp$variables;
					_arguments = $temp$arguments;
					value = $temp$value;
					continue evaluateValue;
				case 'Destructure':
					var bindPattern = value.b;
					var bindValue = value.c;
					var inValue = value.d;
					return A2(
						$elm$core$Result$andThen,
						function (bindVariables) {
							return A5(
								$author$project$Morphir$Value$Interpreter$evaluateValue,
								nativeFunctions,
								ir,
								A2($elm$core$Dict$union, bindVariables, variables),
								_List_Nil,
								inValue);
						},
						A2(
							$elm$core$Result$andThen,
							A2(
								$elm$core$Basics$composeR,
								$author$project$Morphir$Value$Interpreter$matchPattern(bindPattern),
								$elm$core$Result$mapError(
									$author$project$Morphir$Value$Error$BindPatternDidNotMatch(bindValue))),
							A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil, bindValue)));
				case 'IfThenElse':
					var condition = value.b;
					var thenBranch = value.c;
					var elseBranch = value.d;
					return A2(
						$elm$core$Result$andThen,
						function (conditionValue) {
							if ((conditionValue.$ === 'Literal') && (conditionValue.b.$ === 'BoolLiteral')) {
								var conditionTrue = conditionValue.b.a;
								var branchToFollow = conditionTrue ? thenBranch : elseBranch;
								return A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil, branchToFollow);
							} else {
								return $elm$core$Result$Err(
									A2($author$project$Morphir$Value$Error$IfThenElseConditionShouldEvaluateToBool, condition, conditionValue));
							}
						},
						A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil, condition));
				case 'PatternMatch':
					var subjectValue = value.b;
					var cases = value.c;
					var findMatch = F2(
						function (remainingCases, evaluatedSubject) {
							findMatch:
							while (true) {
								if (remainingCases.b) {
									var _v13 = remainingCases.a;
									var nextPattern = _v13.a;
									var nextBody = _v13.b;
									var restOfCases = remainingCases.b;
									var _v14 = A2($author$project$Morphir$Value$Interpreter$matchPattern, nextPattern, evaluatedSubject);
									if (_v14.$ === 'Ok') {
										var patternVariables = _v14.a;
										return A5(
											$author$project$Morphir$Value$Interpreter$evaluateValue,
											nativeFunctions,
											ir,
											A2($elm$core$Dict$union, patternVariables, variables),
											_List_Nil,
											nextBody);
									} else {
										var $temp$remainingCases = restOfCases,
											$temp$evaluatedSubject = evaluatedSubject;
										remainingCases = $temp$remainingCases;
										evaluatedSubject = $temp$evaluatedSubject;
										continue findMatch;
									}
								} else {
									return $elm$core$Result$Err(
										A2(
											$author$project$Morphir$Value$Error$NoPatternsMatch,
											evaluatedSubject,
											A2($elm$core$List$map, $elm$core$Tuple$first, cases)));
								}
							}
						});
					return A2(
						$elm$core$Result$andThen,
						findMatch(cases),
						A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil, subjectValue));
				case 'UpdateRecord':
					var subjectValue = value.b;
					var fieldUpdates = value.c;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedSubjectValue) {
							if (evaluatedSubjectValue.$ === 'Record') {
								var fields = evaluatedSubjectValue.b;
								return A2(
									$elm$core$Result$map,
									$author$project$Morphir$IR$Value$Record(_Utils_Tuple0),
									A3(
										$elm$core$List$foldl,
										F2(
											function (_v16, fieldsResultSoFar) {
												var fieldName = _v16.a;
												var newFieldValue = _v16.b;
												return A2(
													$elm$core$Result$andThen,
													function (fieldsSoFar) {
														return A2(
															$elm$core$Result$andThen,
															function (_v17) {
																return A2(
																	$elm$core$Result$map,
																	function (evaluatedNewFieldValue) {
																		return A3($elm$core$Dict$insert, fieldName, evaluatedNewFieldValue, fieldsSoFar);
																	},
																	A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil, newFieldValue));
															},
															A2(
																$elm$core$Result$fromMaybe,
																A2($author$project$Morphir$Value$Error$FieldNotFound, subjectValue, fieldName),
																A2($elm$core$Dict$get, fieldName, fieldsSoFar)));
													},
													fieldsResultSoFar);
											}),
										$elm$core$Result$Ok(fields),
										$elm$core$Dict$toList(fieldUpdates)));
							} else {
								return $elm$core$Result$Err(
									A2($author$project$Morphir$Value$Error$RecordExpected, subjectValue, evaluatedSubjectValue));
							}
						},
						A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, variables, _List_Nil, subjectValue));
				default:
					return $elm$core$Result$Ok(value);
			}
		}
	});
var $author$project$Morphir$Value$Interpreter$evaluate = F3(
	function (nativeFunctions, ir, value) {
		return A5($author$project$Morphir$Value$Interpreter$evaluateValue, nativeFunctions, ir, $elm$core$Dict$empty, _List_Nil, value);
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $chain_partners$elm_bignum$Decimal$Decimal = F2(
	function (a, b) {
		return {$: 'Decimal', a: a, b: b};
	});
var $chain_partners$elm_bignum$Integer$Integer = F2(
	function (a, b) {
		return {$: 'Integer', a: a, b: b};
	});
var $chain_partners$elm_bignum$Integer$Negative = {$: 'Negative'};
var $chain_partners$elm_bignum$Integer$Positive = {$: 'Positive'};
var $chain_partners$elm_bignum$Integer$Zero = {$: 'Zero'};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $elm$core$Basics$pow = _Basics_pow;
var $chain_partners$elm_bignum$Integer$defaultBase = A2($elm$core$Basics$pow, 10, 7);
var $chain_partners$elm_bignum$Integer$magnitudeFromInt_ = F2(
	function (acc, i) {
		magnitudeFromInt_:
		while (true) {
			var q = (i / $chain_partners$elm_bignum$Integer$defaultBase) | 0;
			if (!q) {
				return $elm$core$List$reverse(
					A2($elm$core$List$cons, i, acc));
			} else {
				var $temp$acc = A2($elm$core$List$cons, i % $chain_partners$elm_bignum$Integer$defaultBase, acc),
					$temp$i = q;
				acc = $temp$acc;
				i = $temp$i;
				continue magnitudeFromInt_;
			}
		}
	});
var $chain_partners$elm_bignum$Integer$magnitudeFromInt = $chain_partners$elm_bignum$Integer$magnitudeFromInt_(_List_Nil);
var $chain_partners$elm_bignum$Integer$fromInt = function (i) {
	var _v0 = A2($elm$core$Basics$compare, i, 0);
	switch (_v0.$) {
		case 'GT':
			return A2(
				$chain_partners$elm_bignum$Integer$Integer,
				$chain_partners$elm_bignum$Integer$Positive,
				$chain_partners$elm_bignum$Integer$magnitudeFromInt(i));
		case 'EQ':
			return $chain_partners$elm_bignum$Integer$Zero;
		default:
			return A2(
				$chain_partners$elm_bignum$Integer$Integer,
				$chain_partners$elm_bignum$Integer$Negative,
				$chain_partners$elm_bignum$Integer$magnitudeFromInt(
					$elm$core$Basics$abs(i)));
	}
};
var $chain_partners$elm_bignum$Decimal$minExponent = -32;
var $chain_partners$elm_bignum$Decimal$Zero = {$: 'Zero'};
var $elm$core$String$endsWith = _String_endsWith;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$regex$Regex$contains = _Regex_contains;
var $chain_partners$elm_bignum$Integer$isValidString = $elm$regex$Regex$contains(
	A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^-?\\d+$')));
var $chain_partners$elm_bignum$Integer$combine = A2(
	$elm$core$List$foldl,
	F2(
		function (x, acc) {
			if (x.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var i = x.a;
				return A2(
					$elm$core$Maybe$map,
					$elm$core$List$cons(i),
					acc);
			}
		}),
	$elm$core$Maybe$Just(_List_Nil));
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $chain_partners$elm_bignum$Integer$splitFromEndBy = F3(
	function (n, acc, s) {
		splitFromEndBy:
		while (true) {
			if (s === '') {
				return acc;
			} else {
				var rest = A2($elm$core$String$dropRight, n, s);
				var chunk = A2($elm$core$String$right, n, s);
				var $temp$n = n,
					$temp$acc = A2($elm$core$List$cons, chunk, acc),
					$temp$s = rest;
				n = $temp$n;
				acc = $temp$acc;
				s = $temp$s;
				continue splitFromEndBy;
			}
		}
	});
var $elm$core$String$toInt = _String_toInt;
var $chain_partners$elm_bignum$Integer$magnitudeFromString = function (s) {
	return $chain_partners$elm_bignum$Integer$combine(
		A2(
			$elm$core$List$map,
			$elm$core$String$toInt,
			A3($chain_partners$elm_bignum$Integer$splitFromEndBy, 7, _List_Nil, s)));
};
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $chain_partners$elm_bignum$Integer$trimLeadingZeroFromStr = A2(
	$elm$regex$Regex$replace,
	A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^0*')),
	function (_v0) {
		return '';
	});
var $chain_partners$elm_bignum$Integer$fromString = function (s) {
	if ($chain_partners$elm_bignum$Integer$isValidString(s)) {
		var _v0 = A2($elm$core$String$startsWith, '-', s) ? _Utils_Tuple2(
			$chain_partners$elm_bignum$Integer$Negative,
			$chain_partners$elm_bignum$Integer$trimLeadingZeroFromStr(
				A2($elm$core$String$dropLeft, 1, s))) : _Utils_Tuple2(
			$chain_partners$elm_bignum$Integer$Positive,
			$chain_partners$elm_bignum$Integer$trimLeadingZeroFromStr(s));
		var sign = _v0.a;
		var num = _v0.b;
		return $elm$core$String$isEmpty(num) ? $elm$core$Maybe$Just($chain_partners$elm_bignum$Integer$Zero) : A2(
			$elm$core$Maybe$map,
			$chain_partners$elm_bignum$Integer$Integer(sign),
			$chain_partners$elm_bignum$Integer$magnitudeFromString(num));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $chain_partners$elm_bignum$Integer$toString = function (i) {
	if (i.$ === 'Zero') {
		return '0';
	} else {
		var s = i.a;
		var m = i.b;
		var sign = _Utils_eq(s, $chain_partners$elm_bignum$Integer$Negative) ? '-' : '';
		var num = $chain_partners$elm_bignum$Integer$trimLeadingZeroFromStr(
			A3(
				$elm$core$List$foldl,
				$elm$core$Basics$append,
				'',
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$fromInt,
						A2(
							$elm$core$String$padLeft,
							7,
							_Utils_chr('0'))),
					m)));
		return _Utils_ap(sign, num);
	}
};
var $chain_partners$elm_bignum$Decimal$trimTrailingZero = A2(
	$elm$regex$Regex$replace,
	A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('0*$')),
	function (_v0) {
		return '';
	});
var $chain_partners$elm_bignum$Integer$zero = $chain_partners$elm_bignum$Integer$Zero;
var $chain_partners$elm_bignum$Decimal$sigExpFromInteger = function (i) {
	var s_ = $chain_partners$elm_bignum$Decimal$trimTrailingZero(
		$chain_partners$elm_bignum$Integer$toString(i));
	var s = $chain_partners$elm_bignum$Integer$toString(i);
	var i_ = A2(
		$elm$core$Maybe$withDefault,
		$chain_partners$elm_bignum$Integer$zero,
		$chain_partners$elm_bignum$Integer$fromString(s_));
	var e = $elm$core$String$length(s) - $elm$core$String$length(s_);
	return _Utils_Tuple2(i_, e);
};
var $chain_partners$elm_bignum$Decimal$moveZeroesToE = F2(
	function (minE, d) {
		moveZeroesToE:
		while (true) {
			if (d.$ === 'Zero') {
				return $chain_partners$elm_bignum$Decimal$Zero;
			} else {
				var s = d.a;
				var e = d.b;
				var _v1 = $chain_partners$elm_bignum$Decimal$sigExpFromInteger(s);
				var s_ = _v1.a;
				var e_ = _v1.b;
				var e__ = A2($elm$core$Basics$max, e + e_, minE);
				var s__ = (_Utils_cmp(e + e_, minE) < 0) ? A3(
					$elm$core$Basics$composeR,
					$chain_partners$elm_bignum$Integer$toString,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$dropRight(minE - (e + e_)),
						A2(
							$elm$core$Basics$composeR,
							$chain_partners$elm_bignum$Integer$fromString,
							$elm$core$Maybe$withDefault($chain_partners$elm_bignum$Integer$zero))),
					s_) : s_;
				if (_Utils_eq(
					s__,
					$chain_partners$elm_bignum$Integer$fromInt(0))) {
					return $chain_partners$elm_bignum$Decimal$Zero;
				} else {
					if (A3(
						$elm$core$Basics$composeR,
						$chain_partners$elm_bignum$Integer$toString,
						$elm$core$String$endsWith('0'),
						s__)) {
						var $temp$minE = minE,
							$temp$d = A2($chain_partners$elm_bignum$Decimal$Decimal, s__, e__);
						minE = $temp$minE;
						d = $temp$d;
						continue moveZeroesToE;
					} else {
						return A2($chain_partners$elm_bignum$Decimal$Decimal, s__, e__);
					}
				}
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$sigExpFromInt = function (_v0) {
	sigExpFromInt:
	while (true) {
		var i = _v0.a;
		var e = _v0.b;
		var _v1 = _Utils_Tuple2((i / 10) | 0, i % 10);
		if (!_v1.b) {
			if (!_v1.a) {
				return _Utils_Tuple2(i, e);
			} else {
				var $temp$_v0 = _Utils_Tuple2((i / 10) | 0, e + 1);
				_v0 = $temp$_v0;
				continue sigExpFromInt;
			}
		} else {
			return _Utils_Tuple2(i, e);
		}
	}
};
var $chain_partners$elm_bignum$Decimal$fromInt = function (i) {
	var _v0 = $chain_partners$elm_bignum$Decimal$sigExpFromInt(
		_Utils_Tuple2(i, 0));
	var s = _v0.a;
	var e = _v0.b;
	var integer = $chain_partners$elm_bignum$Integer$fromInt(s);
	return A2(
		$chain_partners$elm_bignum$Decimal$moveZeroesToE,
		$chain_partners$elm_bignum$Decimal$minExponent,
		A2($chain_partners$elm_bignum$Decimal$Decimal, integer, e));
};
var $author$project$Morphir$SDK$Decimal$fromInt = function (n) {
	return $chain_partners$elm_bignum$Decimal$fromInt(n);
};
var $chain_partners$elm_bignum$Decimal$decimalNotationRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^-?(\\d+\\.?\\d+|\\d+)$'));
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$fromDecimalNotation = F2(
	function (minE, s) {
		var _v0 = A2($elm$core$String$split, '.', s);
		_v0$2:
		while (true) {
			if (_v0.b) {
				if (!_v0.b.b) {
					var i = _v0.a;
					var trimmedSig = $chain_partners$elm_bignum$Decimal$trimTrailingZero(i);
					var e = $elm$core$String$length(i) - $elm$core$String$length(trimmedSig);
					return A3(
						$elm$core$Maybe$map2,
						$chain_partners$elm_bignum$Decimal$Decimal,
						$chain_partners$elm_bignum$Integer$fromString(trimmedSig),
						$elm$core$Maybe$Just(e));
				} else {
					if (!_v0.b.b.b) {
						var i = _v0.a;
						var _v1 = _v0.b;
						var f = _v1.a;
						var trimmedF = $chain_partners$elm_bignum$Decimal$trimTrailingZero(f);
						var f_ = A2($elm$core$String$left, -minE, trimmedF);
						var mbSig = $chain_partners$elm_bignum$Integer$fromString(
							_Utils_ap(i, f_));
						var e = -$elm$core$String$length(f_);
						return A3(
							$elm$core$Maybe$map2,
							$chain_partners$elm_bignum$Decimal$Decimal,
							mbSig,
							$elm$core$Maybe$Just(e));
					} else {
						break _v0$2;
					}
				}
			} else {
				break _v0$2;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $chain_partners$elm_bignum$Decimal$fromScientificNotation = F2(
	function (minE, s) {
		var _v0 = A2(
			$elm$core$String$split,
			'e',
			$elm$core$String$toLower(s));
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var co = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var _v2 = A2($elm$core$String$split, '.', co);
			_v2$2:
			while (true) {
				if (_v2.b) {
					if (!_v2.b.b) {
						var i = _v2.a;
						if ($elm$core$String$length(i) > 1) {
							return $elm$core$Maybe$Nothing;
						} else {
							var mbE = A2(
								$elm$core$Maybe$andThen,
								function (e) {
									return (_Utils_cmp(e, minE) < 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(e);
								},
								$elm$core$String$toInt(exp));
							return (i === '0') ? $elm$core$Maybe$Just($chain_partners$elm_bignum$Decimal$Zero) : A3(
								$elm$core$Maybe$map2,
								$chain_partners$elm_bignum$Decimal$Decimal,
								$chain_partners$elm_bignum$Integer$fromString(i),
								mbE);
						}
					} else {
						if (!_v2.b.b.b) {
							var i = _v2.a;
							var _v3 = _v2.b;
							var f = _v3.a;
							var mbE = A2(
								$elm$core$Maybe$andThen,
								function (e) {
									return (_Utils_cmp(e, minE) < 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(e);
								},
								A2(
									$elm$core$Maybe$map,
									function (e) {
										return e - $elm$core$String$length(f);
									},
									$elm$core$String$toInt(exp)));
							return A3(
								$elm$core$Maybe$map2,
								$chain_partners$elm_bignum$Decimal$Decimal,
								$chain_partners$elm_bignum$Integer$fromString(
									_Utils_ap(i, f)),
								mbE);
						} else {
							break _v2$2;
						}
					}
				} else {
					break _v2$2;
				}
			}
			return $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $chain_partners$elm_bignum$Decimal$scientificNotationRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^-?\\d{1}(\\.\\d*[1-9]|)e{1}-?\\d+$'));
var $chain_partners$elm_bignum$Decimal$fromStringWithMinE = F2(
	function (minE, s) {
		if (s === '0') {
			return $elm$core$Maybe$Just($chain_partners$elm_bignum$Decimal$Zero);
		} else {
			return A2($elm$regex$Regex$contains, $chain_partners$elm_bignum$Decimal$decimalNotationRegex, s) ? A2(
				$elm$core$Maybe$map,
				$chain_partners$elm_bignum$Decimal$moveZeroesToE(minE),
				A2($chain_partners$elm_bignum$Decimal$fromDecimalNotation, minE, s)) : (A2($elm$regex$Regex$contains, $chain_partners$elm_bignum$Decimal$scientificNotationRegex, s) ? A2(
				$elm$core$Maybe$map,
				$chain_partners$elm_bignum$Decimal$moveZeroesToE(minE),
				A2($chain_partners$elm_bignum$Decimal$fromScientificNotation, minE, s)) : $elm$core$Maybe$Nothing);
		}
	});
var $chain_partners$elm_bignum$Decimal$fromString = $chain_partners$elm_bignum$Decimal$fromStringWithMinE($chain_partners$elm_bignum$Decimal$minExponent);
var $author$project$Morphir$SDK$Decimal$fromString = function (str) {
	return $chain_partners$elm_bignum$Decimal$fromString(str);
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $author$project$Morphir$IR$SDK$Maybe$moduleName = $author$project$Morphir$IR$Path$fromString('Maybe');
var $author$project$Morphir$IR$SDK$Maybe$just = F2(
	function (va, v) {
		return A3(
			$author$project$Morphir$IR$Value$Apply,
			va,
			A2(
				$author$project$Morphir$IR$Value$Constructor,
				va,
				A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Maybe$moduleName, 'Just')),
			v);
	});
var $author$project$Morphir$IR$SDK$Aggregate$nativeFunctions = _List_Nil;
var $author$project$Morphir$Value$Error$UnexpectedArguments = function (a) {
	return {$: 'UnexpectedArguments', a: a};
};
var $author$project$Morphir$Value$Native$binaryLazy = function (f) {
	return F2(
		function (_eval, args) {
			if ((args.b && args.b.b) && (!args.b.b.b)) {
				var arg1 = args.a;
				var _v1 = args.b;
				var arg2 = _v1.a;
				return A3(f, _eval, arg1, arg2);
			} else {
				return $elm$core$Result$Err(
					$author$project$Morphir$Value$Error$UnexpectedArguments(args));
			}
		});
};
var $author$project$Morphir$Value$Native$binaryStrict = function (f) {
	return $author$project$Morphir$Value$Native$binaryLazy(
		F3(
			function (_eval, arg1, arg2) {
				return A2(
					$elm$core$Result$andThen,
					function (a1) {
						return A2(
							$elm$core$Result$andThen,
							f(a1),
							_eval(arg2));
					},
					_eval(arg1));
			}));
};
var $author$project$Morphir$Value$Error$ExpectedBoolLiteral = function (a) {
	return {$: 'ExpectedBoolLiteral', a: a};
};
var $author$project$Morphir$Value$Native$boolLiteral = function (lit) {
	if (lit.$ === 'BoolLiteral') {
		var v = lit.a;
		return $elm$core$Result$Ok(v);
	} else {
		return $elm$core$Result$Err(
			$author$project$Morphir$Value$Error$ExpectedBoolLiteral(
				A2($author$project$Morphir$IR$Value$Literal, _Utils_Tuple0, lit)));
	}
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $author$project$Morphir$Value$Error$TupleLengthNotMatchException = F2(
	function (a, b) {
		return {$: 'TupleLengthNotMatchException', a: a, b: b};
	});
var $author$project$Morphir$Value$Native$Comparable$compareValue = F2(
	function (arg1, arg2) {
		var _v0 = _Utils_Tuple2(arg1, arg2);
		_v0$6:
		while (true) {
			switch (_v0.a.$) {
				case 'Literal':
					if (_v0.b.$ === 'Literal') {
						switch (_v0.a.b.$) {
							case 'WholeNumberLiteral':
								if (_v0.b.b.$ === 'WholeNumberLiteral') {
									var _v1 = _v0.a;
									var val1 = _v1.b.a;
									var _v2 = _v0.b;
									var val2 = _v2.b.a;
									return $elm$core$Result$Ok(
										A2($elm$core$Basics$compare, val1, val2));
								} else {
									break _v0$6;
								}
							case 'FloatLiteral':
								if (_v0.b.b.$ === 'FloatLiteral') {
									var _v3 = _v0.a;
									var val1 = _v3.b.a;
									var _v4 = _v0.b;
									var val2 = _v4.b.a;
									return $elm$core$Result$Ok(
										A2($elm$core$Basics$compare, val1, val2));
								} else {
									break _v0$6;
								}
							case 'CharLiteral':
								if (_v0.b.b.$ === 'CharLiteral') {
									var _v5 = _v0.a;
									var val1 = _v5.b.a;
									var _v6 = _v0.b;
									var val2 = _v6.b.a;
									return $elm$core$Result$Ok(
										A2($elm$core$Basics$compare, val1, val2));
								} else {
									break _v0$6;
								}
							case 'StringLiteral':
								if (_v0.b.b.$ === 'StringLiteral') {
									var _v7 = _v0.a;
									var val1 = _v7.b.a;
									var _v8 = _v0.b;
									var val2 = _v8.b.a;
									return $elm$core$Result$Ok(
										A2($elm$core$Basics$compare, val1, val2));
								} else {
									break _v0$6;
								}
							default:
								break _v0$6;
						}
					} else {
						break _v0$6;
					}
				case 'List':
					if (_v0.b.$ === 'List') {
						var _v9 = _v0.a;
						var list1 = _v9.b;
						var _v10 = _v0.b;
						var list2 = _v10.b;
						var fun = F2(
							function (listA, listB) {
								fun:
								while (true) {
									var _v11 = _Utils_Tuple2(listA, listB);
									if (!_v11.a.b) {
										if (!_v11.b.b) {
											return $elm$core$Result$Ok($elm$core$Basics$EQ);
										} else {
											return $elm$core$Result$Ok($elm$core$Basics$LT);
										}
									} else {
										if (!_v11.b.b) {
											return $elm$core$Result$Ok($elm$core$Basics$GT);
										} else {
											var _v12 = _v11.a;
											var head1 = _v12.a;
											var tail1 = _v12.b;
											var _v13 = _v11.b;
											var head2 = _v13.a;
											var tail2 = _v13.b;
											var _v14 = A2($author$project$Morphir$Value$Native$Comparable$compareValue, head1, head2);
											if ((_v14.$ === 'Ok') && (_v14.a.$ === 'EQ')) {
												var _v15 = _v14.a;
												var $temp$listA = tail1,
													$temp$listB = tail2;
												listA = $temp$listA;
												listB = $temp$listB;
												continue fun;
											} else {
												var other = _v14;
												return other;
											}
										}
									}
								}
							});
						return A2(fun, list1, list2);
					} else {
						break _v0$6;
					}
				case 'Tuple':
					if (_v0.b.$ === 'Tuple') {
						var _v16 = _v0.a;
						var tupleList1 = _v16.b;
						var _v17 = _v0.b;
						var tupleList2 = _v17.b;
						var fun = F2(
							function (listA, listB) {
								fun:
								while (true) {
									var _v18 = _Utils_Tuple2(listA, listB);
									if (!_v18.a.b) {
										if (!_v18.b.b) {
											return $elm$core$Result$Ok($elm$core$Basics$EQ);
										} else {
											return $elm$core$Result$Err(
												A2($author$project$Morphir$Value$Error$TupleLengthNotMatchException, tupleList1, tupleList2));
										}
									} else {
										if (!_v18.b.b) {
											return $elm$core$Result$Err(
												A2($author$project$Morphir$Value$Error$TupleLengthNotMatchException, tupleList1, tupleList2));
										} else {
											var _v19 = _v18.a;
											var head1 = _v19.a;
											var tail1 = _v19.b;
											var _v20 = _v18.b;
											var head2 = _v20.a;
											var tail2 = _v20.b;
											var _v21 = A2($author$project$Morphir$Value$Native$Comparable$compareValue, head1, head2);
											if ((_v21.$ === 'Ok') && (_v21.a.$ === 'EQ')) {
												var _v22 = _v21.a;
												var $temp$listA = tail1,
													$temp$listB = tail2;
												listA = $temp$listA;
												listB = $temp$listB;
												continue fun;
											} else {
												var other = _v21;
												return other;
											}
										}
									}
								}
							});
						return A2(fun, tupleList1, tupleList2);
					} else {
						break _v0$6;
					}
				default:
					break _v0$6;
			}
		}
		var a = _v0.a;
		var b = _v0.b;
		return $elm$core$Result$Err(
			$author$project$Morphir$Value$Error$UnexpectedArguments(
				_List_fromArray(
					[a, b])));
	});
var $author$project$Morphir$Value$Error$ExpectedList = function (a) {
	return {$: 'ExpectedList', a: a};
};
var $author$project$Morphir$Value$Native$decodeList = F3(
	function (decodeItem, _eval, value) {
		var _v0 = _eval(value);
		if (_v0.$ === 'Ok') {
			if (_v0.a.$ === 'List') {
				var _v1 = _v0.a;
				var values = _v1.b;
				return $author$project$Morphir$ListOfResults$liftFirstError(
					A2(
						$elm$core$List$map,
						decodeItem(_eval),
						values));
			} else {
				return $elm$core$Result$Err(
					$author$project$Morphir$Value$Error$ExpectedList(value));
			}
		} else {
			var error = _v0.a;
			return $elm$core$Result$Err(error);
		}
	});
var $author$project$Morphir$Value$Error$ExpectedLiteral = function (a) {
	return {$: 'ExpectedLiteral', a: a};
};
var $author$project$Morphir$Value$Native$decodeLiteral = F3(
	function (decodeLit, _eval, value) {
		var _v0 = _eval(value);
		if (_v0.$ === 'Ok') {
			if (_v0.a.$ === 'Literal') {
				var _v1 = _v0.a;
				var lit = _v1.b;
				return decodeLit(lit);
			} else {
				return $elm$core$Result$Err(
					$author$project$Morphir$Value$Error$ExpectedLiteral(value));
			}
		} else {
			var error = _v0.a;
			return $elm$core$Result$Err(error);
		}
	});
var $author$project$Morphir$Value$Native$decodeRaw = F2(
	function (_eval, value) {
		return _eval(value);
	});
var $author$project$Morphir$Value$Native$encodeList = F2(
	function (encodeA, list) {
		return A2(
			$elm$core$Result$map,
			$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
			$author$project$Morphir$ListOfResults$liftFirstError(
				A2($elm$core$List$map, encodeA, list)));
	});
var $author$project$Morphir$Value$Native$encodeLiteral = F2(
	function (toLit, a) {
		return $elm$core$Result$Ok(
			A2(
				$author$project$Morphir$IR$Value$Literal,
				_Utils_Tuple0,
				toLit(a)));
	});
var $author$project$Morphir$IR$SDK$Basics$encodeOrder = function (order) {
	var val = function () {
		switch (order.$) {
			case 'GT':
				return 'GT';
			case 'LT':
				return 'LT';
			default:
				return 'EQ';
		}
	}();
	return A2(
		$author$project$Morphir$IR$Value$Constructor,
		_Utils_Tuple0,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, val));
};
var $author$project$Morphir$Value$Native$encodeRaw = function (value) {
	return $elm$core$Result$Ok(value);
};
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $author$project$Morphir$IR$Value$isData = function (value) {
	switch (value.$) {
		case 'Literal':
			return true;
		case 'Constructor':
			return true;
		case 'Tuple':
			var elems = value.b;
			return A2($elm$core$List$all, $author$project$Morphir$IR$Value$isData, elems);
		case 'List':
			var items = value.b;
			return A2($elm$core$List$all, $author$project$Morphir$IR$Value$isData, items);
		case 'Record':
			var fields = value.b;
			return A2(
				$elm$core$List$all,
				$author$project$Morphir$IR$Value$isData,
				$elm$core$Dict$values(fields));
		case 'Apply':
			var fun = value.b;
			var arg = value.c;
			return $author$project$Morphir$IR$Value$isData(fun) && $author$project$Morphir$IR$Value$isData(arg);
		case 'Unit':
			return true;
		default:
			return false;
	}
};
var $author$project$Morphir$Value$Native$Eq$equal = F2(
	function (arg1, arg2) {
		return ($author$project$Morphir$IR$Value$isData(arg1) && $author$project$Morphir$IR$Value$isData(arg2)) ? $elm$core$Result$Ok(
			_Utils_eq(arg1, arg2)) : $elm$core$Result$Err(
			$author$project$Morphir$Value$Error$UnexpectedArguments(
				_List_fromArray(
					[arg1, arg2])));
	});
var $author$project$Morphir$Value$Native$eval1 = F5(
	function (f, decodeA, encodeR, _eval, args) {
		if (args.b && (!args.b.b)) {
			var arg1 = args.a;
			return A2(
				$elm$core$Result$andThen,
				function (a) {
					return encodeR(
						f(a));
				},
				A2(decodeA, _eval, arg1));
		} else {
			return $elm$core$Result$Err(
				$author$project$Morphir$Value$Error$UnexpectedArguments(args));
		}
	});
var $author$project$Morphir$Value$Native$eval2 = F6(
	function (f, decodeA, decodeB, encodeR, _eval, args) {
		if ((args.b && args.b.b) && (!args.b.b.b)) {
			var arg1 = args.a;
			var _v1 = args.b;
			var arg2 = _v1.a;
			return A2(
				$elm$core$Result$andThen,
				function (a) {
					return A2(
						$elm$core$Result$andThen,
						function (b) {
							return encodeR(
								A2(f, a, b));
						},
						A2(decodeB, _eval, arg2));
				},
				A2(decodeA, _eval, arg1));
		} else {
			return $elm$core$Result$Err(
				$author$project$Morphir$Value$Error$UnexpectedArguments(args));
		}
	});
var $author$project$Morphir$Value$Native$eval3 = F7(
	function (f, decodeA, decodeB, decodeC, encodeR, _eval, args) {
		if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
			var arg1 = args.a;
			var _v1 = args.b;
			var arg2 = _v1.a;
			var _v2 = _v1.b;
			var arg3 = _v2.a;
			return A2(
				$elm$core$Result$andThen,
				function (a) {
					return A2(
						$elm$core$Result$andThen,
						function (b) {
							return A2(
								$elm$core$Result$andThen,
								function (c) {
									return encodeR(
										A3(f, a, b, c));
								},
								A2(decodeC, _eval, arg3));
						},
						A2(decodeB, _eval, arg2));
				},
				A2(decodeA, _eval, arg1));
		} else {
			return $elm$core$Result$Err(
				$author$project$Morphir$Value$Error$UnexpectedArguments(args));
		}
	});
var $author$project$Morphir$Value$Error$ExpectedFloatLiteral = function (a) {
	return {$: 'ExpectedFloatLiteral', a: a};
};
var $author$project$Morphir$Value$Native$floatLiteral = function (lit) {
	if (lit.$ === 'FloatLiteral') {
		var v = lit.a;
		return $elm$core$Result$Ok(v);
	} else {
		return $elm$core$Result$Err(
			$author$project$Morphir$Value$Error$ExpectedFloatLiteral(
				A2($author$project$Morphir$IR$Value$Literal, _Utils_Tuple0, lit)));
	}
};
var $author$project$Morphir$Value$Native$Comparable$greaterThan = F2(
	function (arg1, arg2) {
		return A2(
			$elm$core$Result$map,
			function (order) {
				if (order.$ === 'GT') {
					return true;
				} else {
					return false;
				}
			},
			A2($author$project$Morphir$Value$Native$Comparable$compareValue, arg1, arg2));
	});
var $author$project$Morphir$Value$Native$Comparable$greaterThanOrEqual = F2(
	function (arg1, arg2) {
		return A2(
			$elm$core$Result$map,
			function (order) {
				if (order.$ === 'LT') {
					return false;
				} else {
					return true;
				}
			},
			A2($author$project$Morphir$Value$Native$Comparable$compareValue, arg1, arg2));
	});
var $author$project$Morphir$Value$Error$ExpectedIntLiteral = function (a) {
	return {$: 'ExpectedIntLiteral', a: a};
};
var $author$project$Morphir$Value$Native$intLiteral = function (lit) {
	if (lit.$ === 'WholeNumberLiteral') {
		var v = lit.a;
		return $elm$core$Result$Ok(v);
	} else {
		return $elm$core$Result$Err(
			$author$project$Morphir$Value$Error$ExpectedIntLiteral(
				A2($author$project$Morphir$IR$Value$Literal, _Utils_Tuple0, lit)));
	}
};
var $author$project$Morphir$Value$Native$Comparable$lessThan = F2(
	function (arg1, arg2) {
		return A2(
			$elm$core$Result$map,
			function (order) {
				if (order.$ === 'LT') {
					return true;
				} else {
					return false;
				}
			},
			A2($author$project$Morphir$Value$Native$Comparable$compareValue, arg1, arg2));
	});
var $author$project$Morphir$Value$Native$Comparable$lessThanOrEqual = F2(
	function (arg1, arg2) {
		return A2(
			$elm$core$Result$map,
			function (order) {
				if (order.$ === 'GT') {
					return false;
				} else {
					return true;
				}
			},
			A2($author$project$Morphir$Value$Native$Comparable$compareValue, arg1, arg2));
	});
var $author$project$Morphir$Value$Native$Comparable$max = F2(
	function (arg1, arg2) {
		return A2(
			$elm$core$Result$map,
			function (order) {
				if (order.$ === 'LT') {
					return arg2;
				} else {
					return arg1;
				}
			},
			A2($author$project$Morphir$Value$Native$Comparable$compareValue, arg1, arg2));
	});
var $author$project$Morphir$Value$Native$Comparable$min = F2(
	function (arg1, arg2) {
		return A2(
			$elm$core$Result$map,
			function (order) {
				if (order.$ === 'GT') {
					return arg2;
				} else {
					return arg1;
				}
			},
			A2($author$project$Morphir$Value$Native$Comparable$compareValue, arg1, arg2));
	});
var $author$project$Morphir$Value$Native$Eq$notEqual = F2(
	function (arg1, arg2) {
		return A2(
			$elm$core$Result$map,
			$elm$core$Basics$not,
			A2($author$project$Morphir$Value$Native$Eq$equal, arg1, arg2));
	});
var $author$project$Morphir$Value$Error$NotImplemented = {$: 'NotImplemented'};
var $author$project$Morphir$Value$Native$oneOf = function (funs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (nextFun, funSoFar) {
				return F2(
					function (_eval, args) {
						var _v0 = A2(funSoFar, _eval, args);
						if (_v0.$ === 'Ok') {
							var result = _v0.a;
							return $elm$core$Result$Ok(result);
						} else {
							return A2(nextFun, _eval, args);
						}
					});
			}),
		F2(
			function (_eval, args) {
				return $elm$core$Result$Err($author$project$Morphir$Value$Error$NotImplemented);
			}),
		funs);
};
var $author$project$Morphir$Value$Error$ExpectedStringLiteral = function (a) {
	return {$: 'ExpectedStringLiteral', a: a};
};
var $author$project$Morphir$Value$Native$stringLiteral = function (lit) {
	if (lit.$ === 'StringLiteral') {
		var v = lit.a;
		return $elm$core$Result$Ok(v);
	} else {
		return $elm$core$Result$Err(
			$author$project$Morphir$Value$Error$ExpectedStringLiteral(
				A2($author$project$Morphir$IR$Value$Literal, _Utils_Tuple0, lit)));
	}
};
var $author$project$Morphir$Value$Native$unaryLazy = function (f) {
	return F2(
		function (_eval, args) {
			if (args.b && (!args.b.b)) {
				var arg = args.a;
				return A2(f, _eval, arg);
			} else {
				return $elm$core$Result$Err(
					$author$project$Morphir$Value$Error$UnexpectedArguments(args));
			}
		});
};
var $author$project$Morphir$Value$Native$unaryStrict = function (f) {
	return $author$project$Morphir$Value$Native$unaryLazy(
		F2(
			function (_eval, arg) {
				return A2(
					$elm$core$Result$andThen,
					f(_eval),
					_eval(arg));
			}));
};
var $elm$core$Basics$xor = _Basics_xor;
var $author$project$Morphir$IR$SDK$Basics$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple2(
		'not',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$not,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'and',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$and,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'or',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$or,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'xor',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$xor,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'add',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$add,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)),
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$add,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))
				]))),
		_Utils_Tuple2(
		'subtract',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$sub,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)),
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$sub,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))
				]))),
		_Utils_Tuple2(
		'multiply',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$mul,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)),
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$mul,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))
				]))),
		_Utils_Tuple2(
		'divide',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$fdiv,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple2(
		'integerDivide',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$idiv,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple2(
		'power',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$pow,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)),
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$pow,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))
				]))),
		_Utils_Tuple2(
		'equal',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, arg2) {
					return A2(
						$elm$core$Result$map,
						function (bool) {
							return A2(
								$author$project$Morphir$IR$Value$Literal,
								_Utils_Tuple0,
								$author$project$Morphir$IR$Literal$BoolLiteral(bool));
						},
						A2($author$project$Morphir$Value$Native$Eq$equal, arg1, arg2));
				}))),
		_Utils_Tuple2(
		'notEqual',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, arg2) {
					return A2(
						$elm$core$Result$map,
						function (bool) {
							return A2(
								$author$project$Morphir$IR$Value$Literal,
								_Utils_Tuple0,
								$author$project$Morphir$IR$Literal$BoolLiteral(bool));
						},
						A2($author$project$Morphir$Value$Native$Eq$notEqual, arg1, arg2));
				}))),
		_Utils_Tuple2(
		'identity',
		$author$project$Morphir$Value$Native$unaryStrict(
			function (arg1) {
				return arg1;
			})),
		_Utils_Tuple2(
		'always',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, _v0) {
					return $elm$core$Result$Ok(arg1);
				}))),
		_Utils_Tuple2(
		'never',
		F2(
			function (_eval, args) {
				return $elm$core$Result$Err(
					$author$project$Morphir$Value$Error$UnexpectedArguments(args));
			})),
		_Utils_Tuple2(
		'composeLeft',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun1 = args.a;
					var _v2 = args.b;
					var fun2 = _v2.a;
					var _v3 = _v2.b;
					var arg1 = _v3.a;
					return A2(
						$elm$core$Result$andThen,
						function (arg2) {
							return _eval(
								A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun1, arg2));
						},
						_eval(
							A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun2, arg1)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'composeRight',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun1 = args.a;
					var _v5 = args.b;
					var fun2 = _v5.a;
					var _v6 = _v5.b;
					var arg1 = _v6.a;
					return A2(
						$elm$core$Result$andThen,
						function (arg2) {
							return _eval(
								A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun2, arg2));
						},
						_eval(
							A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun1, arg1)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'lessThan',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, arg2) {
					return A2(
						$elm$core$Result$map,
						function (bool) {
							return A2(
								$author$project$Morphir$IR$Value$Literal,
								_Utils_Tuple0,
								$author$project$Morphir$IR$Literal$BoolLiteral(bool));
						},
						A2($author$project$Morphir$Value$Native$Comparable$lessThan, arg1, arg2));
				}))),
		_Utils_Tuple2(
		'greaterThan',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, arg2) {
					return A2(
						$elm$core$Result$map,
						function (bool) {
							return A2(
								$author$project$Morphir$IR$Value$Literal,
								_Utils_Tuple0,
								$author$project$Morphir$IR$Literal$BoolLiteral(bool));
						},
						A2($author$project$Morphir$Value$Native$Comparable$greaterThan, arg1, arg2));
				}))),
		_Utils_Tuple2(
		'lessThanOrEqual',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, arg2) {
					return A2(
						$elm$core$Result$map,
						function (bool) {
							return A2(
								$author$project$Morphir$IR$Value$Literal,
								_Utils_Tuple0,
								$author$project$Morphir$IR$Literal$BoolLiteral(bool));
						},
						A2($author$project$Morphir$Value$Native$Comparable$lessThanOrEqual, arg1, arg2));
				}))),
		_Utils_Tuple2(
		'greaterThanOrEqual',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, arg2) {
					return A2(
						$elm$core$Result$map,
						function (bool) {
							return A2(
								$author$project$Morphir$IR$Value$Literal,
								_Utils_Tuple0,
								$author$project$Morphir$IR$Literal$BoolLiteral(bool));
						},
						A2($author$project$Morphir$Value$Native$Comparable$greaterThanOrEqual, arg1, arg2));
				}))),
		_Utils_Tuple2(
		'abs',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A3(
					$author$project$Morphir$Value$Native$eval1,
					$elm$core$Basics$abs,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)),
					A3(
					$author$project$Morphir$Value$Native$eval1,
					$elm$core$Basics$abs,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))
				]))),
		_Utils_Tuple2(
		'toFloat',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A3(
					$author$project$Morphir$Value$Native$eval1,
					$elm$core$Basics$toFloat,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))
				]))),
		_Utils_Tuple2(
		'negate',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A3(
					$author$project$Morphir$Value$Native$eval1,
					$elm$core$Basics$negate,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)),
					A3(
					$author$project$Morphir$Value$Native$eval1,
					$elm$core$Basics$negate,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))
				]))),
		_Utils_Tuple2(
		'clamp',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A5(
					$author$project$Morphir$Value$Native$eval3,
					$elm$core$Basics$clamp,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)),
					A5(
					$author$project$Morphir$Value$Native$eval3,
					$elm$core$Basics$clamp,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))
				]))),
		_Utils_Tuple2(
		'max',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, arg2) {
					return A2($author$project$Morphir$Value$Native$Comparable$max, arg1, arg2);
				}))),
		_Utils_Tuple2(
		'min',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, arg2) {
					return A2($author$project$Morphir$Value$Native$Comparable$min, arg1, arg2);
				}))),
		_Utils_Tuple2(
		'append',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$append,
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral)),
					A4(
					$author$project$Morphir$Value$Native$eval2,
					$elm$core$Basics$append,
					$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
					$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
					$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))
				]))),
		_Utils_Tuple2(
		'compare',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (arg1, arg2) {
					return A2(
						$elm$core$Result$map,
						$author$project$Morphir$IR$SDK$Basics$encodeOrder,
						A2($author$project$Morphir$Value$Native$Comparable$compareValue, arg1, arg2));
				})))
	]);
var $chain_partners$elm_bignum$Integer$abs = function (i) {
	if (i.$ === 'Zero') {
		return $chain_partners$elm_bignum$Integer$Zero;
	} else {
		if (i.a.$ === 'Positive') {
			var _v1 = i.a;
			return i;
		} else {
			var _v2 = i.a;
			var m = i.b;
			return A2($chain_partners$elm_bignum$Integer$Integer, $chain_partners$elm_bignum$Integer$Positive, m);
		}
	}
};
var $chain_partners$elm_bignum$Decimal$abs = function (d) {
	if (d.$ === 'Zero') {
		return $chain_partners$elm_bignum$Decimal$Zero;
	} else {
		var s = d.a;
		var e = d.b;
		return A2(
			$chain_partners$elm_bignum$Decimal$Decimal,
			$chain_partners$elm_bignum$Integer$abs(s),
			e);
	}
};
var $author$project$Morphir$SDK$Decimal$abs = function (value) {
	return $chain_partners$elm_bignum$Decimal$abs(value);
};
var $chain_partners$elm_bignum$Integer$addMagnitudes_ = F3(
	function (m1, m2, acc) {
		addMagnitudes_:
		while (true) {
			var _v0 = _Utils_Tuple2(m1, m2);
			if (!_v0.a.b) {
				if (!_v0.b.b) {
					return $elm$core$List$reverse(acc);
				} else {
					return _Utils_ap(
						$elm$core$List$reverse(acc),
						m2);
				}
			} else {
				if (!_v0.b.b) {
					return _Utils_ap(
						$elm$core$List$reverse(acc),
						m1);
				} else {
					var _v1 = _v0.a;
					var d1 = _v1.a;
					var ds1 = _v1.b;
					var _v2 = _v0.b;
					var d2 = _v2.a;
					var ds2 = _v2.b;
					var $temp$m1 = ds1,
						$temp$m2 = ds2,
						$temp$acc = A2($elm$core$List$cons, d1 + d2, acc);
					m1 = $temp$m1;
					m2 = $temp$m2;
					acc = $temp$acc;
					continue addMagnitudes_;
				}
			}
		}
	});
var $chain_partners$elm_bignum$Integer$handleFinalCarry = function (_v0) {
	var c = _v0.a;
	var m = _v0.b;
	if (!c) {
		return m;
	} else {
		if (!m.b) {
			return _List_Nil;
		} else {
			var d = m.a;
			var ds = m.b;
			return (!(d + c)) ? ds : A2($elm$core$List$cons, c, m);
		}
	}
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $chain_partners$elm_bignum$Integer$normalizeDigit = F2(
	function (d, _v0) {
		var prevCarry = _v0.a;
		var acc = _v0.b;
		var sum = d + prevCarry;
		var d_ = A2($elm$core$Basics$modBy, $chain_partners$elm_bignum$Integer$defaultBase, sum);
		var carry = (sum < 0) ? (-1) : ((sum / $chain_partners$elm_bignum$Integer$defaultBase) | 0);
		return _Utils_Tuple2(
			carry,
			A2($elm$core$List$cons, d_, acc));
	});
var $chain_partners$elm_bignum$Integer$trimLeadingZeroFromMag = A2(
	$elm$core$List$foldr,
	F2(
		function (x, xs) {
			return ((!x) && $elm$core$List$isEmpty(xs)) ? _List_Nil : A2($elm$core$List$cons, x, xs);
		}),
	_List_Nil);
var $chain_partners$elm_bignum$Integer$normalizeMagnitude = function (m) {
	return $chain_partners$elm_bignum$Integer$trimLeadingZeroFromMag(
		$elm$core$List$reverse(
			$chain_partners$elm_bignum$Integer$handleFinalCarry(
				A3(
					$elm$core$List$foldl,
					$chain_partners$elm_bignum$Integer$normalizeDigit,
					_Utils_Tuple2(0, _List_Nil),
					m))));
};
var $chain_partners$elm_bignum$Integer$addMagnitudes = F2(
	function (m1, m2) {
		return $chain_partners$elm_bignum$Integer$normalizeMagnitude(
			A3($chain_partners$elm_bignum$Integer$addMagnitudes_, m1, m2, _List_Nil));
	});
var $chain_partners$elm_bignum$Integer$compareMag_ = F2(
	function (m1, m2) {
		compareMag_:
		while (true) {
			var _v0 = _Utils_Tuple2(m1, m2);
			if (!_v0.a.b) {
				if (!_v0.b.b) {
					return $elm$core$Basics$EQ;
				} else {
					var _v2 = _v0.b;
					var d = _v2.a;
					var ds = _v2.b;
					return $elm$core$Basics$LT;
				}
			} else {
				if (!_v0.b.b) {
					var _v1 = _v0.a;
					var d = _v1.a;
					var ds = _v1.b;
					return $elm$core$Basics$GT;
				} else {
					var _v3 = _v0.a;
					var d1 = _v3.a;
					var ds1 = _v3.b;
					var _v4 = _v0.b;
					var d2 = _v4.a;
					var ds2 = _v4.b;
					var _v5 = A2($elm$core$Basics$compare, d1, d2);
					switch (_v5.$) {
						case 'GT':
							return $elm$core$Basics$GT;
						case 'EQ':
							var $temp$m1 = ds1,
								$temp$m2 = ds2;
							m1 = $temp$m1;
							m2 = $temp$m2;
							continue compareMag_;
						default:
							return $elm$core$Basics$LT;
					}
				}
			}
		}
	});
var $chain_partners$elm_bignum$Integer$compareMag = F2(
	function (m1, m2) {
		var _v0 = A2(
			$elm$core$Basics$compare,
			$elm$core$List$length(m1),
			$elm$core$List$length(m2));
		switch (_v0.$) {
			case 'GT':
				return $elm$core$Basics$GT;
			case 'LT':
				return $elm$core$Basics$LT;
			default:
				return A2(
					$chain_partners$elm_bignum$Integer$compareMag_,
					$elm$core$List$reverse(m1),
					$elm$core$List$reverse(m2));
		}
	});
var $chain_partners$elm_bignum$Integer$add = F2(
	function (i1, i2) {
		var _v0 = _Utils_Tuple2(i1, i2);
		_v0$4:
		while (true) {
			if (_v0.a.$ === 'Zero') {
				var _v1 = _v0.a;
				return i2;
			} else {
				if (_v0.b.$ === 'Zero') {
					var _v2 = _v0.b;
					return i1;
				} else {
					if (_v0.a.a.$ === 'Positive') {
						if (_v0.b.a.$ === 'Negative') {
							var _v3 = _v0.a;
							var _v4 = _v3.a;
							var m1 = _v3.b;
							var _v5 = _v0.b;
							var _v6 = _v5.a;
							var m2 = _v5.b;
							var _v7 = A2($chain_partners$elm_bignum$Integer$compareMag, m1, m2);
							switch (_v7.$) {
								case 'GT':
									return A2(
										$chain_partners$elm_bignum$Integer$Integer,
										$chain_partners$elm_bignum$Integer$Positive,
										A2(
											$chain_partners$elm_bignum$Integer$addMagnitudes,
											m1,
											A2($elm$core$List$map, $elm$core$Basics$negate, m2)));
								case 'EQ':
									return $chain_partners$elm_bignum$Integer$Zero;
								default:
									return A2(
										$chain_partners$elm_bignum$Integer$Integer,
										$chain_partners$elm_bignum$Integer$Negative,
										A2(
											$chain_partners$elm_bignum$Integer$addMagnitudes,
											A2($elm$core$List$map, $elm$core$Basics$negate, m1),
											m2));
							}
						} else {
							break _v0$4;
						}
					} else {
						if (_v0.b.a.$ === 'Positive') {
							var _v8 = _v0.a;
							var _v9 = _v8.a;
							var m1 = _v8.b;
							var _v10 = _v0.b;
							var _v11 = _v10.a;
							var m2 = _v10.b;
							var _v12 = A2($chain_partners$elm_bignum$Integer$compareMag, m1, m2);
							switch (_v12.$) {
								case 'GT':
									return A2(
										$chain_partners$elm_bignum$Integer$Integer,
										$chain_partners$elm_bignum$Integer$Negative,
										A2(
											$chain_partners$elm_bignum$Integer$addMagnitudes,
											m1,
											A2($elm$core$List$map, $elm$core$Basics$negate, m2)));
								case 'EQ':
									return $chain_partners$elm_bignum$Integer$Zero;
								default:
									return A2(
										$chain_partners$elm_bignum$Integer$Integer,
										$chain_partners$elm_bignum$Integer$Positive,
										A2(
											$chain_partners$elm_bignum$Integer$addMagnitudes,
											A2($elm$core$List$map, $elm$core$Basics$negate, m1),
											m2));
							}
						} else {
							break _v0$4;
						}
					}
				}
			}
		}
		var _v13 = _v0.a;
		var s1 = _v13.a;
		var m1 = _v13.b;
		var _v14 = _v0.b;
		var s2 = _v14.a;
		var m2 = _v14.b;
		return A2(
			$chain_partners$elm_bignum$Integer$Integer,
			s1,
			A2($chain_partners$elm_bignum$Integer$addMagnitudes, m1, m2));
	});
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $chain_partners$elm_bignum$Integer$addScaleToPartialProducts = function (magList) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (m, _v0) {
				var digit = _v0.a;
				var acc = _v0.b;
				return _Utils_Tuple2(
					digit + 1,
					A2(
						$elm$core$List$cons,
						A2(
							$elm$core$List$append,
							A2($elm$core$List$repeat, digit, 0),
							m),
						acc));
			}),
		_Utils_Tuple2(0, _List_Nil),
		magList).b;
};
var $chain_partners$elm_bignum$Integer$calculatePartialProducts = F2(
	function (m1, m2) {
		return A2(
			$elm$core$List$map,
			function (d) {
				return A2(
					$elm$core$List$map,
					$elm$core$Basics$mul(d),
					m1);
			},
			m2);
	});
var $chain_partners$elm_bignum$Integer$sumPartialProducts = function (magList) {
	return A3($elm$core$List$foldl, $chain_partners$elm_bignum$Integer$addMagnitudes, _List_Nil, magList);
};
var $chain_partners$elm_bignum$Integer$multiplyMagnitudes = F2(
	function (m1, m2) {
		return $chain_partners$elm_bignum$Integer$normalizeMagnitude(
			$chain_partners$elm_bignum$Integer$sumPartialProducts(
				$chain_partners$elm_bignum$Integer$addScaleToPartialProducts(
					A2($chain_partners$elm_bignum$Integer$calculatePartialProducts, m1, m2))));
	});
var $chain_partners$elm_bignum$Integer$mul = F2(
	function (i1, i2) {
		var _v0 = _Utils_Tuple2(i1, i2);
		if (_v0.a.$ === 'Zero') {
			var _v1 = _v0.a;
			return $chain_partners$elm_bignum$Integer$Zero;
		} else {
			if (_v0.b.$ === 'Zero') {
				var _v2 = _v0.b;
				return $chain_partners$elm_bignum$Integer$Zero;
			} else {
				var _v3 = _v0.a;
				var s1 = _v3.a;
				var m1 = _v3.b;
				var _v4 = _v0.b;
				var s2 = _v4.a;
				var m2 = _v4.b;
				var sign = _Utils_eq(s1, s2) ? $chain_partners$elm_bignum$Integer$Positive : $chain_partners$elm_bignum$Integer$Negative;
				var magnitude = function () {
					var _v5 = A2(
						$elm$core$Basics$compare,
						$elm$core$List$length(m1),
						$elm$core$List$length(m2));
					if (_v5.$ === 'GT') {
						return A2($chain_partners$elm_bignum$Integer$multiplyMagnitudes, m1, m2);
					} else {
						return A2($chain_partners$elm_bignum$Integer$multiplyMagnitudes, m2, m1);
					}
				}();
				return A2($chain_partners$elm_bignum$Integer$Integer, sign, magnitude);
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$toCommonE = function (_v0) {
	var d1 = _v0.a;
	var d2 = _v0.b;
	var _v1 = _Utils_Tuple2(d1, d2);
	if (_v1.a.$ === 'Zero') {
		if (_v1.b.$ === 'Zero') {
			var _v2 = _v1.a;
			var _v3 = _v1.b;
			return _Utils_Tuple2($chain_partners$elm_bignum$Decimal$Zero, $chain_partners$elm_bignum$Decimal$Zero);
		} else {
			var _v4 = _v1.a;
			return _Utils_Tuple2($chain_partners$elm_bignum$Decimal$Zero, d2);
		}
	} else {
		if (_v1.b.$ === 'Zero') {
			var _v5 = _v1.b;
			return _Utils_Tuple2(d1, $chain_partners$elm_bignum$Decimal$Zero);
		} else {
			var _v6 = _v1.a;
			var s1 = _v6.a;
			var e1 = _v6.b;
			var _v7 = _v1.b;
			var s2 = _v7.a;
			var e2 = _v7.b;
			if (_Utils_eq(e1, e2)) {
				return _Utils_Tuple2(d1, d2);
			} else {
				var eDiff = A2($elm$core$Basics$max, e1, e2) - A2($elm$core$Basics$min, e1, e2);
				var eEqualizer = (eDiff < 11) ? $chain_partners$elm_bignum$Integer$fromInt(
					A2($elm$core$Basics$pow, 10, eDiff)) : A2(
					$elm$core$Maybe$withDefault,
					$chain_partners$elm_bignum$Integer$zero,
					$chain_partners$elm_bignum$Integer$fromString(
						'1' + A2($elm$core$String$repeat, eDiff, '0')));
				var commonE = A2($elm$core$Basics$min, e1, e2);
				return (_Utils_cmp(e1, e2) > 0) ? _Utils_Tuple2(
					A2(
						$chain_partners$elm_bignum$Decimal$Decimal,
						A2($chain_partners$elm_bignum$Integer$mul, s1, eEqualizer),
						commonE),
					A2($chain_partners$elm_bignum$Decimal$Decimal, s2, commonE)) : _Utils_Tuple2(
					A2($chain_partners$elm_bignum$Decimal$Decimal, s1, commonE),
					A2(
						$chain_partners$elm_bignum$Decimal$Decimal,
						A2($chain_partners$elm_bignum$Integer$mul, s2, eEqualizer),
						commonE));
			}
		}
	}
};
var $chain_partners$elm_bignum$Decimal$add = F2(
	function (d1, d2) {
		var _v0 = $chain_partners$elm_bignum$Decimal$toCommonE(
			_Utils_Tuple2(d1, d2));
		if (_v0.a.$ === 'Zero') {
			var _v1 = _v0.a;
			return d2;
		} else {
			if (_v0.b.$ === 'Zero') {
				var _v2 = _v0.b;
				return d1;
			} else {
				var _v3 = _v0.a;
				var s1 = _v3.a;
				var e1 = _v3.b;
				var _v4 = _v0.b;
				var s2 = _v4.a;
				var e2 = _v4.b;
				var resultS = A2($chain_partners$elm_bignum$Integer$add, s1, s2);
				return A2(
					$chain_partners$elm_bignum$Decimal$moveZeroesToE,
					e1,
					A2($chain_partners$elm_bignum$Decimal$Decimal, resultS, e1));
			}
		}
	});
var $author$project$Morphir$SDK$Decimal$add = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$add, a, b);
	});
var $elm$core$String$fromFloat = _String_fromNumber;
var $chain_partners$elm_bignum$Decimal$fromFloat = function (f) {
	return A2(
		$elm$core$Maybe$withDefault,
		A2($chain_partners$elm_bignum$Decimal$Decimal, $chain_partners$elm_bignum$Integer$zero, 0),
		$chain_partners$elm_bignum$Decimal$fromString(
			$elm$core$String$fromFloat(f)));
};
var $author$project$Morphir$SDK$Decimal$bps = function (n) {
	return $chain_partners$elm_bignum$Decimal$fromFloat(n * 0.0001);
};
var $chain_partners$elm_bignum$Integer$reverseOrder = function (o) {
	switch (o.$) {
		case 'GT':
			return $elm$core$Basics$LT;
		case 'EQ':
			return $elm$core$Basics$EQ;
		default:
			return $elm$core$Basics$GT;
	}
};
var $chain_partners$elm_bignum$Integer$compare = F2(
	function (i1, i2) {
		var _v0 = _Utils_Tuple2(i1, i2);
		_v0$7:
		while (true) {
			if (_v0.a.$ === 'Zero') {
				if (_v0.b.$ === 'Zero') {
					var _v1 = _v0.a;
					var _v2 = _v0.b;
					return $elm$core$Basics$EQ;
				} else {
					if (_v0.b.a.$ === 'Positive') {
						var _v3 = _v0.a;
						var _v4 = _v0.b;
						var _v5 = _v4.a;
						return $elm$core$Basics$LT;
					} else {
						var _v6 = _v0.a;
						var _v7 = _v0.b;
						var _v8 = _v7.a;
						return $elm$core$Basics$GT;
					}
				}
			} else {
				if (_v0.b.$ === 'Zero') {
					if (_v0.a.a.$ === 'Positive') {
						var _v9 = _v0.a;
						var _v10 = _v9.a;
						var _v11 = _v0.b;
						return $elm$core$Basics$GT;
					} else {
						var _v12 = _v0.a;
						var _v13 = _v12.a;
						var _v14 = _v0.b;
						return $elm$core$Basics$LT;
					}
				} else {
					if (_v0.a.a.$ === 'Positive') {
						if (_v0.b.a.$ === 'Negative') {
							var _v15 = _v0.a;
							var _v16 = _v15.a;
							var _v17 = _v0.b;
							var _v18 = _v17.a;
							return $elm$core$Basics$GT;
						} else {
							break _v0$7;
						}
					} else {
						if (_v0.b.a.$ === 'Positive') {
							var _v19 = _v0.a;
							var _v20 = _v19.a;
							var _v21 = _v0.b;
							var _v22 = _v21.a;
							return $elm$core$Basics$LT;
						} else {
							break _v0$7;
						}
					}
				}
			}
		}
		var _v23 = _v0.a;
		var s1 = _v23.a;
		var m1 = _v23.b;
		var _v24 = _v0.b;
		var s2 = _v24.a;
		var m2 = _v24.b;
		var ord = A2($chain_partners$elm_bignum$Integer$compareMag, m1, m2);
		return (_Utils_eq(s1, $chain_partners$elm_bignum$Integer$Negative) && _Utils_eq(s2, $chain_partners$elm_bignum$Integer$Negative)) ? $chain_partners$elm_bignum$Integer$reverseOrder(ord) : ord;
	});
var $chain_partners$elm_bignum$Decimal$compare = F2(
	function (d1, d2) {
		var _v0 = $chain_partners$elm_bignum$Decimal$toCommonE(
			_Utils_Tuple2(d1, d2));
		if (_v0.a.$ === 'Zero') {
			if (_v0.b.$ === 'Zero') {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $elm$core$Basics$EQ;
			} else {
				var _v3 = _v0.a;
				var _v4 = _v0.b;
				var s = _v4.a;
				return A2($chain_partners$elm_bignum$Integer$compare, $chain_partners$elm_bignum$Integer$zero, s);
			}
		} else {
			if (_v0.b.$ === 'Zero') {
				var _v5 = _v0.a;
				var s = _v5.a;
				var _v6 = _v0.b;
				return A2($chain_partners$elm_bignum$Integer$compare, s, $chain_partners$elm_bignum$Integer$zero);
			} else {
				var _v7 = _v0.a;
				var s1 = _v7.a;
				var e1 = _v7.b;
				var _v8 = _v0.b;
				var s2 = _v8.a;
				var e2 = _v8.b;
				return A2($chain_partners$elm_bignum$Integer$compare, s1, s2);
			}
		}
	});
var $author$project$Morphir$SDK$Decimal$compare = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$compare, a, b);
	});
var $author$project$Morphir$Value$Error$ExpectedDecimalLiteral = function (a) {
	return {$: 'ExpectedDecimalLiteral', a: a};
};
var $author$project$Morphir$Value$Native$decimalLiteral = function (lit) {
	if (lit.$ === 'DecimalLiteral') {
		var v = lit.a;
		return $elm$core$Result$Ok(v);
	} else {
		return $elm$core$Result$Err(
			$author$project$Morphir$Value$Error$ExpectedDecimalLiteral(
				A2($author$project$Morphir$IR$Value$Literal, _Utils_Tuple0, lit)));
	}
};
var $chain_partners$elm_bignum$Integer$countDigits = function (i) {
	var s = $chain_partners$elm_bignum$Integer$toString(i);
	return A2($elm$core$String$startsWith, '-', s) ? $elm$core$String$length(
		A2($elm$core$String$dropLeft, 1, s)) : $elm$core$String$length(s);
};
var $chain_partners$elm_bignum$Integer$negate = function (i) {
	if (i.$ === 'Zero') {
		return $chain_partners$elm_bignum$Integer$Zero;
	} else {
		if (i.a.$ === 'Positive') {
			var _v1 = i.a;
			var m = i.b;
			return A2($chain_partners$elm_bignum$Integer$Integer, $chain_partners$elm_bignum$Integer$Negative, m);
		} else {
			var _v2 = i.a;
			var m = i.b;
			return A2($chain_partners$elm_bignum$Integer$Integer, $chain_partners$elm_bignum$Integer$Positive, m);
		}
	}
};
var $chain_partners$elm_bignum$Integer$adjustSign = F3(
	function (dividend, divisor, _v0) {
		var q = _v0.a;
		var r = _v0.b;
		var _v1 = _Utils_Tuple2(dividend, divisor);
		_v1$3:
		while (true) {
			if (_v1.a.$ === 'Integer') {
				if (_v1.a.a.$ === 'Positive') {
					if ((_v1.b.$ === 'Integer') && (_v1.b.a.$ === 'Negative')) {
						var _v2 = _v1.a;
						var _v3 = _v2.a;
						var _v4 = _v1.b;
						var _v5 = _v4.a;
						return _Utils_Tuple2(
							$chain_partners$elm_bignum$Integer$negate(q),
							r);
					} else {
						break _v1$3;
					}
				} else {
					if (_v1.b.$ === 'Integer') {
						if (_v1.b.a.$ === 'Positive') {
							var _v6 = _v1.a;
							var _v7 = _v6.a;
							var _v8 = _v1.b;
							var _v9 = _v8.a;
							return _Utils_Tuple2(
								$chain_partners$elm_bignum$Integer$negate(q),
								$chain_partners$elm_bignum$Integer$negate(r));
						} else {
							var _v10 = _v1.a;
							var _v11 = _v10.a;
							var _v12 = _v1.b;
							var _v13 = _v12.a;
							return _Utils_Tuple2(
								q,
								$chain_partners$elm_bignum$Integer$negate(r));
						}
					} else {
						break _v1$3;
					}
				}
			} else {
				break _v1$3;
			}
		}
		return _Utils_Tuple2(q, r);
	});
var $chain_partners$elm_bignum$Integer$one = A2(
	$chain_partners$elm_bignum$Integer$Integer,
	$chain_partners$elm_bignum$Integer$Positive,
	_List_fromArray(
		[1]));
var $chain_partners$elm_bignum$Integer$sub = F2(
	function (i1, i2) {
		var _v0 = _Utils_Tuple2(i1, i2);
		if (_v0.a.$ === 'Zero') {
			var _v1 = _v0.a;
			return $chain_partners$elm_bignum$Integer$negate(i2);
		} else {
			if (_v0.b.$ === 'Zero') {
				var _v2 = _v0.b;
				return i1;
			} else {
				var _v3 = _v0.a;
				var s1 = _v3.a;
				var m1 = _v3.b;
				var _v4 = _v0.b;
				var s2 = _v4.a;
				var m2 = _v4.b;
				return A2(
					$chain_partners$elm_bignum$Integer$add,
					i1,
					$chain_partners$elm_bignum$Integer$negate(i2));
			}
		}
	});
var $chain_partners$elm_bignum$Integer$divmodPartialDividend = F4(
	function (dividend, divisor, divExpediter, acc) {
		divmodPartialDividend:
		while (true) {
			var _v0 = A2($chain_partners$elm_bignum$Integer$compare, dividend, divisor);
			switch (_v0.$) {
				case 'LT':
					return _Utils_Tuple2(acc, dividend);
				case 'EQ':
					return _Utils_Tuple2(
						A2($chain_partners$elm_bignum$Integer$add, acc, $chain_partners$elm_bignum$Integer$one),
						$chain_partners$elm_bignum$Integer$Zero);
				default:
					var divisorTimesDivExpediter = A2(
						$chain_partners$elm_bignum$Integer$mul,
						divisor,
						$chain_partners$elm_bignum$Integer$fromInt(divExpediter));
					var _v1 = A2($chain_partners$elm_bignum$Integer$compare, dividend, divisorTimesDivExpediter);
					switch (_v1.$) {
						case 'LT':
							var $temp$dividend = dividend,
								$temp$divisor = divisor,
								$temp$divExpediter = (divExpediter / 2) | 0,
								$temp$acc = acc;
							dividend = $temp$dividend;
							divisor = $temp$divisor;
							divExpediter = $temp$divExpediter;
							acc = $temp$acc;
							continue divmodPartialDividend;
						case 'EQ':
							return _Utils_Tuple2(
								A2(
									$chain_partners$elm_bignum$Integer$add,
									acc,
									$chain_partners$elm_bignum$Integer$fromInt(divExpediter)),
								$chain_partners$elm_bignum$Integer$Zero);
						default:
							var dividend_ = A2($chain_partners$elm_bignum$Integer$sub, dividend, divisorTimesDivExpediter);
							var $temp$dividend = dividend_,
								$temp$divisor = divisor,
								$temp$divExpediter = divExpediter,
								$temp$acc = A2(
								$chain_partners$elm_bignum$Integer$add,
								acc,
								$chain_partners$elm_bignum$Integer$fromInt(divExpediter));
							dividend = $temp$dividend;
							divisor = $temp$divisor;
							divExpediter = $temp$divExpediter;
							acc = $temp$acc;
							continue divmodPartialDividend;
					}
			}
		}
	});
var $chain_partners$elm_bignum$Integer$headAndTail = function (i) {
	if (i.$ === 'Zero') {
		return _Utils_Tuple2($chain_partners$elm_bignum$Integer$Zero, $chain_partners$elm_bignum$Integer$Zero);
	} else {
		var s = i.a;
		var m = i.b;
		var rM = $elm$core$List$reverse(m);
		if (!rM.b) {
			return _Utils_Tuple2($chain_partners$elm_bignum$Integer$Zero, $chain_partners$elm_bignum$Integer$Zero);
		} else {
			if (!rM.b.b) {
				var d = rM.a;
				return _Utils_Tuple2(
					$chain_partners$elm_bignum$Integer$fromInt(d),
					$chain_partners$elm_bignum$Integer$Zero);
			} else {
				var d = rM.a;
				var ds = rM.b;
				return _Utils_Tuple2(
					$chain_partners$elm_bignum$Integer$fromInt(d),
					A2(
						$chain_partners$elm_bignum$Integer$Integer,
						s,
						$elm$core$List$reverse(ds)));
			}
		}
	}
};
var $chain_partners$elm_bignum$Integer$shiftRightBy = F2(
	function (n, i) {
		shiftRightBy:
		while (true) {
			if (i.$ === 'Zero') {
				return $chain_partners$elm_bignum$Integer$Zero;
			} else {
				var s = i.a;
				var m = i.b;
				if (n <= 0) {
					return i;
				} else {
					var $temp$n = n - 1,
						$temp$i = A2(
						$chain_partners$elm_bignum$Integer$Integer,
						s,
						A2($elm$core$List$cons, 0, m));
					n = $temp$n;
					i = $temp$i;
					continue shiftRightBy;
				}
			}
		}
	});
var $chain_partners$elm_bignum$Integer$divmod_ = F4(
	function (dividend, divisor, qAcc, prevR) {
		divmod_:
		while (true) {
			var _v0 = _Utils_Tuple2(dividend, divisor);
			if (_v0.a.$ === 'Zero') {
				var _v1 = _v0.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(qAcc, prevR));
			} else {
				var _v2 = $chain_partners$elm_bignum$Integer$headAndTail(dividend);
				var firstDigit = _v2.a;
				var remainingDigits = _v2.b;
				var currentDividend = A2(
					$chain_partners$elm_bignum$Integer$add,
					firstDigit,
					A2($chain_partners$elm_bignum$Integer$shiftRightBy, 1, prevR));
				var _v3 = A4($chain_partners$elm_bignum$Integer$divmodPartialDividend, currentDividend, divisor, $chain_partners$elm_bignum$Integer$defaultBase, $chain_partners$elm_bignum$Integer$Zero);
				var q = _v3.a;
				var r = _v3.b;
				var qAcc_ = A2(
					$chain_partners$elm_bignum$Integer$add,
					q,
					A2($chain_partners$elm_bignum$Integer$shiftRightBy, 1, qAcc));
				var $temp$dividend = remainingDigits,
					$temp$divisor = divisor,
					$temp$qAcc = qAcc_,
					$temp$prevR = r;
				dividend = $temp$dividend;
				divisor = $temp$divisor;
				qAcc = $temp$qAcc;
				prevR = $temp$prevR;
				continue divmod_;
			}
		}
	});
var $chain_partners$elm_bignum$Integer$divmod = F2(
	function (dividend, divisor) {
		var _v0 = _Utils_Tuple2(dividend, divisor);
		_v0$0:
		while (true) {
			_v0$4:
			while (true) {
				if (_v0.b.$ === 'Zero') {
					if (_v0.a.$ === 'Zero') {
						break _v0$0;
					} else {
						var _v2 = _v0.b;
						return $elm$core$Maybe$Nothing;
					}
				} else {
					if (_v0.a.$ === 'Zero') {
						break _v0$0;
					} else {
						if (_v0.b.a.$ === 'Positive') {
							if ((_v0.b.b.b && (_v0.b.b.a === 1)) && (!_v0.b.b.b.b)) {
								var _v3 = _v0.b;
								var _v4 = _v3.a;
								var _v5 = _v3.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(dividend, $chain_partners$elm_bignum$Integer$Zero));
							} else {
								break _v0$4;
							}
						} else {
							if ((_v0.b.b.b && (_v0.b.b.a === 1)) && (!_v0.b.b.b.b)) {
								var _v6 = _v0.b;
								var _v7 = _v6.a;
								var _v8 = _v6.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										$chain_partners$elm_bignum$Integer$negate(dividend),
										$chain_partners$elm_bignum$Integer$Zero));
							} else {
								break _v0$4;
							}
						}
					}
				}
			}
			var _v9 = _v0.a;
			var s1 = _v9.a;
			var m1 = _v9.b;
			var _v10 = _v0.b;
			var s2 = _v10.a;
			var m2 = _v10.b;
			var _v11 = A2($chain_partners$elm_bignum$Integer$compareMag, m1, m2);
			switch (_v11.$) {
				case 'LT':
					return $elm$core$Maybe$Just(
						_Utils_Tuple2($chain_partners$elm_bignum$Integer$Zero, dividend));
				case 'EQ':
					var sign = _Utils_eq(s1, s2) ? $chain_partners$elm_bignum$Integer$Positive : $chain_partners$elm_bignum$Integer$Negative;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2(
								$chain_partners$elm_bignum$Integer$Integer,
								sign,
								_List_fromArray(
									[1])),
							$chain_partners$elm_bignum$Integer$Zero));
				default:
					return A2(
						$elm$core$Maybe$map,
						A2($chain_partners$elm_bignum$Integer$adjustSign, dividend, divisor),
						A4(
							$chain_partners$elm_bignum$Integer$divmod_,
							$chain_partners$elm_bignum$Integer$abs(dividend),
							$chain_partners$elm_bignum$Integer$abs(divisor),
							$chain_partners$elm_bignum$Integer$Zero,
							$chain_partners$elm_bignum$Integer$Zero));
			}
		}
		var _v1 = _v0.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$Zero, $chain_partners$elm_bignum$Integer$Zero));
	});
var $chain_partners$elm_bignum$Integer$eq = F2(
	function (i1, i2) {
		var _v0 = A2($chain_partners$elm_bignum$Integer$compare, i1, i2);
		if (_v0.$ === 'EQ') {
			return true;
		} else {
			return false;
		}
	});
var $chain_partners$elm_bignum$Integer$ten = A2(
	$chain_partners$elm_bignum$Integer$Integer,
	$chain_partners$elm_bignum$Integer$Positive,
	_List_fromArray(
		[10]));
var $chain_partners$elm_bignum$Decimal$divToMinE_ = F3(
	function (minE, dividend, divisor) {
		return $elm$core$Maybe$andThen(
			function (_v0) {
				var qS = _v0.a;
				var qE = _v0.b;
				return (A2($chain_partners$elm_bignum$Integer$eq, dividend, $chain_partners$elm_bignum$Integer$zero) || (_Utils_cmp(qE, minE) < 0)) ? $elm$core$Maybe$Just(
					_Utils_Tuple2(qS, qE + 1)) : A2(
					$elm$core$Maybe$andThen,
					function (_v1) {
						var q = _v1.a;
						var r = _v1.b;
						var qS_ = A2(
							$chain_partners$elm_bignum$Integer$add,
							A2($chain_partners$elm_bignum$Integer$mul, qS, $chain_partners$elm_bignum$Integer$ten),
							q);
						var dividend_ = A2($chain_partners$elm_bignum$Integer$mul, r, $chain_partners$elm_bignum$Integer$ten);
						return (A2($chain_partners$elm_bignum$Integer$eq, r, $chain_partners$elm_bignum$Integer$zero) || (_Utils_cmp(
							$chain_partners$elm_bignum$Integer$countDigits(q) + qE,
							minE) < 0)) ? $elm$core$Maybe$Just(
							_Utils_Tuple2(qS_, qE)) : A4(
							$chain_partners$elm_bignum$Decimal$divToMinE_,
							minE,
							dividend_,
							divisor,
							$elm$core$Maybe$Just(
								_Utils_Tuple2(qS_, qE - 1)));
					},
					A2($chain_partners$elm_bignum$Integer$divmod, dividend, divisor));
			});
	});
var $chain_partners$elm_bignum$Decimal$tupleToDecimal = function (_v0) {
	var s = _v0.a;
	var e = _v0.b;
	return A2($chain_partners$elm_bignum$Decimal$Decimal, s, e);
};
var $chain_partners$elm_bignum$Decimal$divToMinE = F3(
	function (minE, dividend, divisor) {
		var _v0 = _Utils_Tuple2(dividend, divisor);
		if (_v0.a.$ === 'Zero') {
			if (_v0.b.$ === 'Zero') {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $elm$core$Maybe$Nothing;
			} else {
				var _v3 = _v0.a;
				return $elm$core$Maybe$Just($chain_partners$elm_bignum$Decimal$Zero);
			}
		} else {
			if (_v0.b.$ === 'Zero') {
				var _v4 = _v0.b;
				return $elm$core$Maybe$Nothing;
			} else {
				var _v5 = _v0.a;
				var dividendS = _v5.a;
				var dividendE = _v5.b;
				var _v6 = _v0.b;
				var divisorS = _v6.a;
				var divisorE = _v6.b;
				var initE = dividendE - divisorE;
				var maybeResult = A4(
					$chain_partners$elm_bignum$Decimal$divToMinE_,
					minE,
					dividendS,
					divisorS,
					$elm$core$Maybe$Just(
						_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, initE)));
				var result = A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$chain_partners$elm_bignum$Decimal$tupleToDecimal,
						$chain_partners$elm_bignum$Decimal$moveZeroesToE(minE)),
					maybeResult);
				return result;
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$div = $chain_partners$elm_bignum$Decimal$divToMinE($chain_partners$elm_bignum$Decimal$minExponent);
var $author$project$Morphir$SDK$Decimal$div = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$div, a, b);
	});
var $author$project$Morphir$SDK$Decimal$divWithDefault = F3(
	function (_default, a, b) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2($author$project$Morphir$SDK$Decimal$div, a, b));
	});
var $author$project$Morphir$Value$Native$encodeMaybe = F2(
	function (encodeA, maybe) {
		if (maybe.$ === 'Just') {
			var a = maybe.a;
			return A2(
				$elm$core$Result$map,
				A2(
					$author$project$Morphir$IR$Value$Apply,
					_Utils_Tuple0,
					A2(
						$author$project$Morphir$IR$Value$Constructor,
						_Utils_Tuple0,
						_Utils_Tuple3(
							_List_fromArray(
								[
									_List_fromArray(
									['morphir']),
									_List_fromArray(
									['s', 'd', 'k'])
								]),
							_List_fromArray(
								[
									_List_fromArray(
									['maybe'])
								]),
							_List_fromArray(
								['just'])))),
				encodeA(a));
		} else {
			return $elm$core$Result$Ok(
				A2(
					$author$project$Morphir$IR$Value$Constructor,
					_Utils_Tuple0,
					_Utils_Tuple3(
						_List_fromArray(
							[
								_List_fromArray(
								['morphir']),
								_List_fromArray(
								['s', 'd', 'k'])
							]),
						_List_fromArray(
							[
								_List_fromArray(
								['maybe'])
							]),
						_List_fromArray(
							['nothing']))));
		}
	});
var $chain_partners$elm_bignum$Decimal$eq = F2(
	function (d1, d2) {
		var _v0 = A2($chain_partners$elm_bignum$Decimal$compare, d1, d2);
		if (_v0.$ === 'EQ') {
			return true;
		} else {
			return false;
		}
	});
var $author$project$Morphir$SDK$Decimal$eq = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$eq, a, b);
	});
var $author$project$Morphir$Value$Native$eval0 = F2(
	function (r, encodeR) {
		return F2(
			function (_eval, args) {
				if (!args.b) {
					return encodeR(r);
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			});
	});
var $author$project$Morphir$SDK$Decimal$zero = $chain_partners$elm_bignum$Decimal$fromInt(0);
var $author$project$Morphir$SDK$Decimal$fromFloat = function (f) {
	var dec = $chain_partners$elm_bignum$Decimal$fromFloat(f);
	return A2($chain_partners$elm_bignum$Decimal$eq, dec, $author$project$Morphir$SDK$Decimal$zero) ? $author$project$Morphir$SDK$Decimal$zero : dec;
};
var $chain_partners$elm_bignum$Decimal$gt = F2(
	function (d1, d2) {
		var _v0 = A2($chain_partners$elm_bignum$Decimal$compare, d1, d2);
		if (_v0.$ === 'GT') {
			return true;
		} else {
			return false;
		}
	});
var $author$project$Morphir$SDK$Decimal$gt = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$gt, a, b);
	});
var $chain_partners$elm_bignum$Decimal$gte = F2(
	function (d1, d2) {
		var _v0 = A2($chain_partners$elm_bignum$Decimal$compare, d1, d2);
		switch (_v0.$) {
			case 'GT':
				return true;
			case 'EQ':
				return true;
			default:
				return false;
		}
	});
var $author$project$Morphir$SDK$Decimal$gte = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$gte, a, b);
	});
var $author$project$Morphir$SDK$Decimal$hundred = function (n) {
	return $chain_partners$elm_bignum$Decimal$fromInt(100 * n);
};
var $author$project$Morphir$SDK$Decimal$hundredth = function (n) {
	return $chain_partners$elm_bignum$Decimal$fromFloat(n * 0.01);
};
var $chain_partners$elm_bignum$Decimal$lt = F2(
	function (d1, d2) {
		var _v0 = A2($chain_partners$elm_bignum$Decimal$compare, d1, d2);
		if (_v0.$ === 'LT') {
			return true;
		} else {
			return false;
		}
	});
var $author$project$Morphir$SDK$Decimal$lt = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$lt, a, b);
	});
var $chain_partners$elm_bignum$Decimal$lte = F2(
	function (d1, d2) {
		var _v0 = A2($chain_partners$elm_bignum$Decimal$compare, d1, d2);
		switch (_v0.$) {
			case 'LT':
				return true;
			case 'EQ':
				return true;
			default:
				return false;
		}
	});
var $author$project$Morphir$SDK$Decimal$lte = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$lte, a, b);
	});
var $author$project$Morphir$SDK$Decimal$million = function (n) {
	return $chain_partners$elm_bignum$Decimal$fromInt(n * 1000000);
};
var $author$project$Morphir$SDK$Decimal$millionth = function (n) {
	return $chain_partners$elm_bignum$Decimal$fromFloat(n * 0.000001);
};
var $author$project$Morphir$SDK$Decimal$minusOne = $chain_partners$elm_bignum$Decimal$fromInt(-1);
var $chain_partners$elm_bignum$Decimal$mulToMinE = F3(
	function (minE, d1, d2) {
		var _v0 = _Utils_Tuple2(d1, d2);
		if (_v0.a.$ === 'Zero') {
			var _v1 = _v0.a;
			return $chain_partners$elm_bignum$Decimal$Zero;
		} else {
			if (_v0.b.$ === 'Zero') {
				var _v2 = _v0.b;
				return $chain_partners$elm_bignum$Decimal$Zero;
			} else {
				var _v3 = _v0.a;
				var s1 = _v3.a;
				var e1 = _v3.b;
				var _v4 = _v0.b;
				var s2 = _v4.a;
				var e2 = _v4.b;
				var s_ = A2($chain_partners$elm_bignum$Integer$mul, s1, s2);
				var e_ = e1 + e2;
				return A2(
					$chain_partners$elm_bignum$Decimal$moveZeroesToE,
					minE,
					A2($chain_partners$elm_bignum$Decimal$Decimal, s_, e_));
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$mul = $chain_partners$elm_bignum$Decimal$mulToMinE($chain_partners$elm_bignum$Decimal$minExponent);
var $author$project$Morphir$SDK$Decimal$mul = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$mul, a, b);
	});
var $chain_partners$elm_bignum$Decimal$negate = function (d) {
	if (d.$ === 'Zero') {
		return $chain_partners$elm_bignum$Decimal$Zero;
	} else {
		var s = d.a;
		var e = d.b;
		return A2(
			$chain_partners$elm_bignum$Decimal$Decimal,
			$chain_partners$elm_bignum$Integer$negate(s),
			e);
	}
};
var $author$project$Morphir$SDK$Decimal$negate = function (value) {
	return $chain_partners$elm_bignum$Decimal$negate(value);
};
var $author$project$Morphir$SDK$Decimal$neq = F2(
	function (a, b) {
		return !A2($author$project$Morphir$SDK$Decimal$eq, a, b);
	});
var $author$project$Morphir$SDK$Decimal$one = $chain_partners$elm_bignum$Decimal$fromInt(1);
var $chain_partners$elm_bignum$Decimal$HalfToEven = {$: 'HalfToEven'};
var $chain_partners$elm_bignum$Integer$lt = F2(
	function (i1, i2) {
		var _v0 = A2($chain_partners$elm_bignum$Integer$compare, i1, i2);
		if (_v0.$ === 'LT') {
			return true;
		} else {
			return false;
		}
	});
var $chain_partners$elm_bignum$Decimal$roundAwayFromZero = F2(
	function (i1, i2) {
		var z = $chain_partners$elm_bignum$Integer$zero;
		var isPositive = _Utils_eq(
			A2($chain_partners$elm_bignum$Integer$lt, i1, z),
			A2($chain_partners$elm_bignum$Integer$lt, i2, z));
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2));
		var q = _v0.a;
		var r = _v0.b;
		if (A2($chain_partners$elm_bignum$Integer$eq, r, z)) {
			return q;
		} else {
			var _v1 = A2($chain_partners$elm_bignum$Integer$compare, q, z);
			switch (_v1.$) {
				case 'LT':
					return A2(
						$chain_partners$elm_bignum$Integer$add,
						q,
						$chain_partners$elm_bignum$Integer$fromInt(-1));
				case 'EQ':
					return isPositive ? A2($chain_partners$elm_bignum$Integer$add, q, $chain_partners$elm_bignum$Integer$one) : A2(
						$chain_partners$elm_bignum$Integer$add,
						q,
						$chain_partners$elm_bignum$Integer$fromInt(-1));
				default:
					return A2($chain_partners$elm_bignum$Integer$add, q, $chain_partners$elm_bignum$Integer$one);
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$roundDown = F2(
	function (i1, i2) {
		var z = $chain_partners$elm_bignum$Integer$zero;
		var isPositive = _Utils_eq(
			A2($chain_partners$elm_bignum$Integer$lt, i1, z),
			A2($chain_partners$elm_bignum$Integer$lt, i2, z));
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2));
		var q = _v0.a;
		var r = _v0.b;
		if (A2($chain_partners$elm_bignum$Integer$eq, r, z)) {
			return q;
		} else {
			var _v1 = A2($chain_partners$elm_bignum$Integer$compare, q, z);
			switch (_v1.$) {
				case 'LT':
					return A2(
						$chain_partners$elm_bignum$Integer$add,
						q,
						$chain_partners$elm_bignum$Integer$fromInt(-1));
				case 'EQ':
					return isPositive ? q : A2(
						$chain_partners$elm_bignum$Integer$add,
						q,
						$chain_partners$elm_bignum$Integer$fromInt(-1));
				default:
					return q;
			}
		}
	});
var $chain_partners$elm_bignum$Integer$remainderBy = F2(
	function (dividend, divisor) {
		return A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$second,
			A2($chain_partners$elm_bignum$Integer$divmod, dividend, divisor));
	});
var $chain_partners$elm_bignum$Decimal$roundHalfToEven = F2(
	function (i1, i2) {
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2));
		var q = _v0.a;
		var r = _v0.b;
		var mod = function () {
			var _v1 = A2(
				$chain_partners$elm_bignum$Integer$compare,
				$chain_partners$elm_bignum$Integer$abs(
					A2(
						$chain_partners$elm_bignum$Integer$mul,
						$chain_partners$elm_bignum$Integer$fromInt(2),
						r)),
				$chain_partners$elm_bignum$Integer$abs(i2));
			switch (_v1.$) {
				case 'LT':
					return $chain_partners$elm_bignum$Integer$zero;
				case 'EQ':
					if (!_Utils_eq(
						A2(
							$elm$core$Maybe$withDefault,
							$chain_partners$elm_bignum$Integer$zero,
							A2(
								$chain_partners$elm_bignum$Integer$remainderBy,
								q,
								$chain_partners$elm_bignum$Integer$fromInt(2))),
						$chain_partners$elm_bignum$Integer$zero)) {
						var _v2 = A2($chain_partners$elm_bignum$Integer$compare, i1, $chain_partners$elm_bignum$Integer$zero);
						switch (_v2.$) {
							case 'LT':
								return $chain_partners$elm_bignum$Integer$fromInt(-1);
							case 'EQ':
								return $chain_partners$elm_bignum$Integer$zero;
							default:
								return $chain_partners$elm_bignum$Integer$one;
						}
					} else {
						return $chain_partners$elm_bignum$Integer$zero;
					}
				default:
					var _v3 = A2($chain_partners$elm_bignum$Integer$compare, i1, $chain_partners$elm_bignum$Integer$zero);
					switch (_v3.$) {
						case 'LT':
							return $chain_partners$elm_bignum$Integer$fromInt(-1);
						case 'EQ':
							return $chain_partners$elm_bignum$Integer$zero;
						default:
							return $chain_partners$elm_bignum$Integer$one;
					}
			}
		}();
		return A2($chain_partners$elm_bignum$Integer$add, q, mod);
	});
var $chain_partners$elm_bignum$Decimal$roundTowardsZero = F2(
	function (i1, i2) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2)).a;
	});
var $chain_partners$elm_bignum$Decimal$roundUp = F2(
	function (i1, i2) {
		var z = $chain_partners$elm_bignum$Integer$zero;
		var isPositive = _Utils_eq(
			A2($chain_partners$elm_bignum$Integer$lt, i1, z),
			A2($chain_partners$elm_bignum$Integer$lt, i2, z));
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2));
		var q = _v0.a;
		var r = _v0.b;
		if (A2($chain_partners$elm_bignum$Integer$eq, r, z)) {
			return q;
		} else {
			var _v1 = A2($chain_partners$elm_bignum$Integer$compare, q, z);
			switch (_v1.$) {
				case 'LT':
					return q;
				case 'EQ':
					return isPositive ? A2($chain_partners$elm_bignum$Integer$add, q, $chain_partners$elm_bignum$Integer$one) : q;
				default:
					return A2($chain_partners$elm_bignum$Integer$add, q, $chain_partners$elm_bignum$Integer$one);
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$divRound = F3(
	function (mode, i1, i2) {
		switch (mode.$) {
			case 'Down':
				return A2($chain_partners$elm_bignum$Decimal$roundDown, i1, i2);
			case 'Up':
				return A2($chain_partners$elm_bignum$Decimal$roundUp, i1, i2);
			case 'TowardsZero':
				return A2($chain_partners$elm_bignum$Decimal$roundTowardsZero, i1, i2);
			case 'AwayFromZero':
				return A2($chain_partners$elm_bignum$Decimal$roundAwayFromZero, i1, i2);
			default:
				return A2($chain_partners$elm_bignum$Decimal$roundHalfToEven, i1, i2);
		}
	});
var $chain_partners$elm_bignum$Decimal$roundWithContext = F2(
	function (context, d) {
		if (d.$ === 'Zero') {
			return $chain_partners$elm_bignum$Decimal$Zero;
		} else {
			var s = d.a;
			var e = d.b;
			if (_Utils_cmp(context.e, e) < 1) {
				return d;
			} else {
				if (_Utils_cmp(
					context.e,
					$chain_partners$elm_bignum$Integer$countDigits(s) + e) > 0) {
					return $chain_partners$elm_bignum$Decimal$Zero;
				} else {
					var eDiff = context.e - e;
					var divisor = (eDiff < 11) ? $chain_partners$elm_bignum$Integer$fromInt(
						A2($elm$core$Basics$pow, 10, eDiff)) : A2(
						$elm$core$Maybe$withDefault,
						$chain_partners$elm_bignum$Integer$zero,
						$chain_partners$elm_bignum$Integer$fromString(
							'1' + A2($elm$core$String$repeat, eDiff, '0')));
					var s_ = A3($chain_partners$elm_bignum$Decimal$divRound, context.mode, s, divisor);
					return A2($chain_partners$elm_bignum$Integer$eq, s_, $chain_partners$elm_bignum$Integer$zero) ? $chain_partners$elm_bignum$Decimal$Zero : A2(
						$chain_partners$elm_bignum$Decimal$moveZeroesToE,
						A2($elm$core$Basics$min, context.e, $chain_partners$elm_bignum$Decimal$minExponent),
						A2($chain_partners$elm_bignum$Decimal$Decimal, s_, context.e));
				}
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$round = $chain_partners$elm_bignum$Decimal$roundWithContext(
	{e: 0, mode: $chain_partners$elm_bignum$Decimal$HalfToEven});
var $author$project$Morphir$SDK$Decimal$round = function (n) {
	return $chain_partners$elm_bignum$Decimal$round(n);
};
var $author$project$Morphir$SDK$Decimal$shiftDecimalLeft = F2(
	function (n, value) {
		return A2(
			$author$project$Morphir$SDK$Decimal$mul,
			value,
			$author$project$Morphir$SDK$Decimal$fromFloat(
				A2($elm$core$Basics$pow, 10.0, -n)));
	});
var $author$project$Morphir$SDK$Decimal$shiftDecimalRight = F2(
	function (n, value) {
		return A2(
			$author$project$Morphir$SDK$Decimal$mul,
			value,
			$author$project$Morphir$SDK$Decimal$fromInt(
				A2($elm$core$Basics$pow, 10, n)));
	});
var $chain_partners$elm_bignum$Decimal$sub = F2(
	function (d1, d2) {
		return A2(
			$chain_partners$elm_bignum$Decimal$add,
			d1,
			$chain_partners$elm_bignum$Decimal$negate(d2));
	});
var $author$project$Morphir$SDK$Decimal$sub = F2(
	function (a, b) {
		return A2($chain_partners$elm_bignum$Decimal$sub, a, b);
	});
var $author$project$Morphir$SDK$Decimal$thousand = function (n) {
	return $chain_partners$elm_bignum$Decimal$fromInt(1000 * n);
};
var $author$project$Morphir$SDK$Decimal$thousandth = function (n) {
	return $chain_partners$elm_bignum$Decimal$fromFloat(n * 0.001);
};
var $chain_partners$elm_bignum$Decimal$Dec = {$: 'Dec'};
var $chain_partners$elm_bignum$Integer$gte = F2(
	function (i1, i2) {
		var _v0 = A2($chain_partners$elm_bignum$Integer$compare, i1, i2);
		switch (_v0.$) {
			case 'GT':
				return true;
			case 'EQ':
				return true;
			default:
				return false;
		}
	});
var $chain_partners$elm_bignum$Decimal$normalize = function (d) {
	if (d.$ === 'Zero') {
		return _Utils_Tuple2($chain_partners$elm_bignum$Decimal$Zero, 0);
	} else {
		var s = d.a;
		var e = d.b;
		var coefficientE = -($chain_partners$elm_bignum$Integer$countDigits(s) - 1);
		return _Utils_Tuple2(
			A2($chain_partners$elm_bignum$Decimal$Decimal, s, coefficientE),
			e - coefficientE);
	}
};
var $chain_partners$elm_bignum$Decimal$toStringIn = F2(
	function (notation, d) {
		if (d.$ === 'Zero') {
			return '0';
		} else {
			var s = d.a;
			var e = d.b;
			if (notation.$ === 'Sci') {
				var _v2 = $chain_partners$elm_bignum$Decimal$normalize(d);
				var co = _v2.a;
				var exp = _v2.b;
				var coString = $chain_partners$elm_bignum$Decimal$cyclic$toString()(co);
				var expString = 'e' + $elm$core$String$fromInt(exp);
				return _Utils_ap(coString, expString);
			} else {
				var sign = A2($chain_partners$elm_bignum$Integer$gte, s, $chain_partners$elm_bignum$Integer$zero) ? '' : '-';
				var sigString = $chain_partners$elm_bignum$Integer$toString(
					$chain_partners$elm_bignum$Integer$abs(s));
				var decString = function () {
					var _v3 = A2($elm$core$Basics$compare, e, 0);
					switch (_v3.$) {
						case 'GT':
							return _Utils_ap(
								sigString,
								A2($elm$core$String$repeat, e, '0'));
						case 'EQ':
							return sigString;
						default:
							var _v4 = A2(
								$elm$core$Basics$compare,
								$elm$core$String$length(sigString),
								-e);
							switch (_v4.$) {
								case 'GT':
									return A2(
										$elm$core$String$join,
										'.',
										_List_fromArray(
											[
												A2($elm$core$String$dropRight, -e, sigString),
												A2($elm$core$String$right, -e, sigString)
											]));
								case 'EQ':
									return '0.' + sigString;
								default:
									return '0.' + A3(
										$elm$core$String$padLeft,
										-e,
										_Utils_chr('0'),
										sigString);
							}
					}
				}();
				return _Utils_ap(sign, decString);
			}
		}
	});
function $chain_partners$elm_bignum$Decimal$cyclic$toString() {
	return $chain_partners$elm_bignum$Decimal$toStringIn($chain_partners$elm_bignum$Decimal$Dec);
}
try {
	var $chain_partners$elm_bignum$Decimal$toString = $chain_partners$elm_bignum$Decimal$cyclic$toString();
	$chain_partners$elm_bignum$Decimal$cyclic$toString = function () {
		return $chain_partners$elm_bignum$Decimal$toString;
	};
} catch ($) {
	throw 'Some top-level definitions from `Decimal` are causing infinite recursion:\n\n  ┌─────┐\n  │    toString\n  │     ↓\n  │    toStringIn\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Morphir$SDK$Decimal$toString = function (decimalValue) {
	return $chain_partners$elm_bignum$Decimal$toString(decimalValue);
};
var $chain_partners$elm_bignum$Decimal$TowardsZero = {$: 'TowardsZero'};
var $chain_partners$elm_bignum$Decimal$truncate = $chain_partners$elm_bignum$Decimal$roundWithContext(
	{e: 0, mode: $chain_partners$elm_bignum$Decimal$TowardsZero});
var $author$project$Morphir$SDK$Decimal$truncate = function (n) {
	return $chain_partners$elm_bignum$Decimal$truncate(n);
};
var $author$project$Morphir$IR$SDK$Decimal$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple2(
		'fromInt',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$fromInt,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'toString',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$toString,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple2(
		'fromFloat',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$fromFloat,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'hundred',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$hundred,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'thousand',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$thousand,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'million',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$million,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'hundredth',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$hundredth,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'thousandth',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$thousandth,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'millionth',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$millionth,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'tenth',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$millionth,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'bps',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$bps,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'add',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$add,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'sub',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$sub,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'negate',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$negate,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'mul',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$mul,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'div',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$div,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeMaybe(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral)))),
		_Utils_Tuple2(
		'divWithDefault',
		A5(
			$author$project$Morphir$Value$Native$eval3,
			$author$project$Morphir$SDK$Decimal$divWithDefault,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'truncate',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$truncate,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'round',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$round,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'gt',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$gt,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'gte',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$gte,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'eq',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$eq,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'neq',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$neq,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'lt',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$lt,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'lte',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$lte,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'compare',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$compare,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			A2($elm$core$Basics$composeR, $author$project$Morphir$IR$SDK$Basics$encodeOrder, $elm$core$Result$Ok))),
		_Utils_Tuple2(
		'abs',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$Decimal$abs,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'shiftDecimalLeft',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$shiftDecimalLeft,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'shiftDecimalRight',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$author$project$Morphir$SDK$Decimal$shiftDecimalRight,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$decimalLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'zero',
		A2(
			$author$project$Morphir$Value$Native$eval0,
			$author$project$Morphir$SDK$Decimal$zero,
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'one',
		A2(
			$author$project$Morphir$Value$Native$eval0,
			$author$project$Morphir$SDK$Decimal$one,
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral))),
		_Utils_Tuple2(
		'minusOne',
		A2(
			$author$project$Morphir$Value$Native$eval0,
			$author$project$Morphir$SDK$Decimal$minusOne,
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$DecimalLiteral)))
	]);
var $author$project$Morphir$Value$Error$TupleExpected = {$: 'TupleExpected'};
var $author$project$Morphir$IR$SDK$Dict$fromListValue = F2(
	function (a, list) {
		return A3(
			$author$project$Morphir$IR$Value$Apply,
			a,
			A2(
				$author$project$Morphir$IR$Value$Reference,
				a,
				_Utils_Tuple3(
					_List_fromArray(
						[
							_List_fromArray(
							['morphir']),
							_List_fromArray(
							['s', 'd', 'k'])
						]),
					_List_fromArray(
						[
							_List_fromArray(
							['dict'])
						]),
					_List_fromArray(
						['from', 'list']))),
			list);
	});
var $author$project$Morphir$IR$SDK$Maybe$nothing = function (va) {
	return A2(
		$author$project$Morphir$IR$Value$Constructor,
		va,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Maybe$moduleName, 'Nothing'));
};
var $author$project$Morphir$IR$SDK$Dict$toListValue = F2(
	function (a, list) {
		return A3(
			$author$project$Morphir$IR$Value$Apply,
			a,
			A2(
				$author$project$Morphir$IR$Value$Reference,
				a,
				_Utils_Tuple3(
					_List_fromArray(
						[
							_List_fromArray(
							['morphir']),
							_List_fromArray(
							['s', 'd', 'k'])
						]),
					_List_fromArray(
						[
							_List_fromArray(
							['dict'])
						]),
					_List_fromArray(
						['to', 'list']))),
			list);
	});
var $author$project$Morphir$Value$Native$trinaryLazy = function (f) {
	return F2(
		function (_eval, args) {
			if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
				var arg1 = args.a;
				var _v1 = args.b;
				var arg2 = _v1.a;
				var _v2 = _v1.b;
				var arg3 = _v2.a;
				return A4(f, _eval, arg1, arg2, arg3);
			} else {
				return $elm$core$Result$Err(
					$author$project$Morphir$Value$Error$UnexpectedArguments(args));
			}
		});
};
var $author$project$Morphir$Value$Native$trinaryStrict = function (f) {
	return $author$project$Morphir$Value$Native$trinaryLazy(
		F4(
			function (_eval, arg1, arg2, arg3) {
				return A2(
					$elm$core$Result$andThen,
					function (a1) {
						return A2(
							$elm$core$Result$andThen,
							function (a2) {
								return A2(
									$elm$core$Result$andThen,
									A2(f, a1, a2),
									_eval(arg3));
							},
							_eval(arg2));
					},
					_eval(arg1));
			}));
};
var $author$project$Morphir$IR$SDK$Dict$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple2(
		'empty',
		F2(
			function (_eval, args) {
				return $elm$core$Result$Ok(
					A3(
						$author$project$Morphir$IR$Value$Apply,
						_Utils_Tuple0,
						A2(
							$author$project$Morphir$IR$Value$Reference,
							_Utils_Tuple0,
							_Utils_Tuple3(
								_List_fromArray(
									[
										_List_fromArray(
										['morphir']),
										_List_fromArray(
										['s', 'd', 'k'])
									]),
								_List_fromArray(
									[
										_List_fromArray(
										['dict'])
									]),
								_List_fromArray(
									['from', 'list']))),
						A2($author$project$Morphir$IR$Value$List, _Utils_Tuple0, _List_Nil)));
			})),
		_Utils_Tuple2(
		'singleton',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (key, value) {
					return $elm$core$Result$Ok(
						A3(
							$author$project$Morphir$IR$Value$Apply,
							_Utils_Tuple0,
							A2(
								$author$project$Morphir$IR$Value$Reference,
								_Utils_Tuple0,
								_Utils_Tuple3(
									_List_fromArray(
										[
											_List_fromArray(
											['morphir']),
											_List_fromArray(
											['s', 'd', 'k'])
										]),
									_List_fromArray(
										[
											_List_fromArray(
											['dict'])
										]),
									_List_fromArray(
										['from', 'list']))),
							A2(
								$author$project$Morphir$IR$Value$List,
								_Utils_Tuple0,
								_List_fromArray(
									[
										A2(
										$author$project$Morphir$IR$Value$Tuple,
										_Utils_Tuple0,
										_List_fromArray(
											[key, value]))
									]))));
				}))),
		_Utils_Tuple2(
		'insert',
		$author$project$Morphir$Value$Native$trinaryStrict(
			F3(
				function (keyToAdd, valueToAdd, dict) {
					if (((((((((((((((((((((((((dict.$ === 'Apply') && (dict.b.$ === 'Reference')) && dict.b.b.a.b) && dict.b.b.a.a.b) && (dict.b.b.a.a.a === 'morphir')) && (!dict.b.b.a.a.b.b)) && dict.b.b.a.b.b) && dict.b.b.a.b.a.b) && (dict.b.b.a.b.a.a === 's')) && dict.b.b.a.b.a.b.b) && (dict.b.b.a.b.a.b.a === 'd')) && dict.b.b.a.b.a.b.b.b) && (dict.b.b.a.b.a.b.b.a === 'k')) && (!dict.b.b.a.b.a.b.b.b.b)) && (!dict.b.b.a.b.b.b)) && dict.b.b.b.b) && dict.b.b.b.a.b) && (dict.b.b.b.a.a === 'dict')) && (!dict.b.b.b.a.b.b)) && (!dict.b.b.b.b.b)) && dict.b.b.c.b) && (dict.b.b.c.a === 'from')) && dict.b.b.c.b.b) && (dict.b.b.c.b.a === 'list')) && (!dict.b.b.c.b.b.b)) {
						var _v1 = dict.b;
						var _v2 = _v1.b;
						var _v3 = _v2.a;
						var _v4 = _v3.a;
						var _v5 = _v3.b;
						var _v6 = _v5.a;
						var _v7 = _v6.b;
						var _v8 = _v7.b;
						var _v9 = _v2.b;
						var _v10 = _v9.a;
						var _v11 = _v2.c;
						var _v12 = _v11.b;
						var arg = dict.c;
						if (arg.$ === 'List') {
							var list = arg.b;
							var find = F2(
								function (initList, updatedList) {
									find:
									while (true) {
										if (!initList.b) {
											return $elm$core$Result$Ok(
												_Utils_ap(
													updatedList,
													_List_fromArray(
														[
															A2(
															$author$project$Morphir$IR$Value$Tuple,
															_Utils_Tuple0,
															_List_fromArray(
																[keyToAdd, valueToAdd]))
														])));
										} else {
											var head = initList.a;
											var tail = initList.b;
											if ((((head.$ === 'Tuple') && head.b.b) && head.b.b.b) && (!head.b.b.b.b)) {
												var _v16 = head.b;
												var key = _v16.a;
												var _v17 = _v16.b;
												var _v18 = A2($author$project$Morphir$Value$Native$Comparable$compareValue, key, keyToAdd);
												if (_v18.$ === 'Ok') {
													switch (_v18.a.$) {
														case 'LT':
															var _v19 = _v18.a;
															var $temp$initList = tail,
																$temp$updatedList = $elm$core$List$concat(
																_List_fromArray(
																	[
																		updatedList,
																		_List_fromArray(
																		[head])
																	]));
															initList = $temp$initList;
															updatedList = $temp$updatedList;
															continue find;
														case 'GT':
															var _v20 = _v18.a;
															return $elm$core$Result$Ok(
																$elm$core$List$concat(
																	_List_fromArray(
																		[
																			updatedList,
																			_List_fromArray(
																			[
																				A2(
																				$author$project$Morphir$IR$Value$Tuple,
																				_Utils_Tuple0,
																				_List_fromArray(
																					[keyToAdd, valueToAdd])),
																				head
																			]),
																			tail
																		])));
														default:
															var _v21 = _v18.a;
															return $elm$core$Result$Ok(
																$elm$core$List$concat(
																	_List_fromArray(
																		[
																			updatedList,
																			_List_fromArray(
																			[
																				A2(
																				$author$project$Morphir$IR$Value$Tuple,
																				_Utils_Tuple0,
																				_List_fromArray(
																					[keyToAdd, valueToAdd]))
																			]),
																			tail
																		])));
													}
												} else {
													var error = _v18.a;
													return $elm$core$Result$Err(error);
												}
											} else {
												return $elm$core$Result$Err($author$project$Morphir$Value$Error$TupleExpected);
											}
										}
									}
								});
							return A2(
								$elm$core$Result$map,
								function (updatedList) {
									return A3(
										$author$project$Morphir$IR$Value$Apply,
										_Utils_Tuple0,
										A2(
											$author$project$Morphir$IR$Value$Reference,
											_Utils_Tuple0,
											_Utils_Tuple3(
												_List_fromArray(
													[
														_List_fromArray(
														['morphir']),
														_List_fromArray(
														['s', 'd', 'k'])
													]),
												_List_fromArray(
													[
														_List_fromArray(
														['dict'])
													]),
												_List_fromArray(
													['from', 'list']))),
										A2($author$project$Morphir$IR$Value$List, _Utils_Tuple0, updatedList));
								},
								A2(find, list, _List_Nil));
						} else {
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedList(arg));
						}
					} else {
						return $elm$core$Result$Err(
							$author$project$Morphir$Value$Error$UnexpectedArguments(
								_List_fromArray(
									[dict])));
					}
				}))),
		_Utils_Tuple2(
		'update',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var arg1 = args.a;
					var _v23 = args.b;
					var fun = _v23.a;
					var _v24 = _v23.b;
					var arg2 = _v24.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A3(
							$elm$core$Result$map2,
							F2(
								function (keyToUpdate, dict) {
									if (((((((((((((((((((((((((dict.$ === 'Apply') && (dict.b.$ === 'Reference')) && dict.b.b.a.b) && dict.b.b.a.a.b) && (dict.b.b.a.a.a === 'morphir')) && (!dict.b.b.a.a.b.b)) && dict.b.b.a.b.b) && dict.b.b.a.b.a.b) && (dict.b.b.a.b.a.a === 's')) && dict.b.b.a.b.a.b.b) && (dict.b.b.a.b.a.b.a === 'd')) && dict.b.b.a.b.a.b.b.b) && (dict.b.b.a.b.a.b.b.a === 'k')) && (!dict.b.b.a.b.a.b.b.b.b)) && (!dict.b.b.a.b.b.b)) && dict.b.b.b.b) && dict.b.b.b.a.b) && (dict.b.b.b.a.a === 'dict')) && (!dict.b.b.b.a.b.b)) && (!dict.b.b.b.b.b)) && dict.b.b.c.b) && (dict.b.b.c.a === 'from')) && dict.b.b.c.b.b) && (dict.b.b.c.b.a === 'list')) && (!dict.b.b.c.b.b.b)) {
										var _v26 = dict.b;
										var _v27 = _v26.b;
										var _v28 = _v27.a;
										var _v29 = _v28.a;
										var _v30 = _v28.b;
										var _v31 = _v30.a;
										var _v32 = _v31.b;
										var _v33 = _v32.b;
										var _v34 = _v27.b;
										var _v35 = _v34.a;
										var _v36 = _v27.c;
										var _v37 = _v36.b;
										var arg = dict.c;
										if (arg.$ === 'List') {
											var list = arg.b;
											var find = F2(
												function (initList, updatedList) {
													find:
													while (true) {
														if (!initList.b) {
															return $elm$core$Result$Ok(updatedList);
														} else {
															var head = initList.a;
															var tail = initList.b;
															if ((((head.$ === 'Tuple') && head.b.b) && head.b.b.b) && (!head.b.b.b.b)) {
																var _v41 = head.b;
																var key = _v41.a;
																var _v42 = _v41.b;
																var value = _v42.a;
																var _v43 = A2($author$project$Morphir$Value$Native$Comparable$compareValue, key, keyToUpdate);
																if (_v43.$ === 'Ok') {
																	switch (_v43.a.$) {
																		case 'LT':
																			var _v44 = _v43.a;
																			var $temp$initList = tail,
																				$temp$updatedList = A2(
																				$elm$core$List$append,
																				updatedList,
																				_List_fromArray(
																					[head]));
																			initList = $temp$initList;
																			updatedList = $temp$updatedList;
																			continue find;
																		case 'GT':
																			var _v45 = _v43.a;
																			var $temp$initList = _List_Nil,
																				$temp$updatedList = A2($elm$core$List$append, updatedList, tail);
																			initList = $temp$initList;
																			updatedList = $temp$updatedList;
																			continue find;
																		default:
																			var _v46 = _v43.a;
																			return A2(
																				$elm$core$Result$andThen,
																				function (updatedValue) {
																					return A2(
																						find,
																						_List_Nil,
																						$elm$core$List$concat(
																							_List_fromArray(
																								[
																									updatedList,
																									_List_fromArray(
																									[
																										A2(
																										$author$project$Morphir$IR$Value$Tuple,
																										_Utils_Tuple0,
																										_List_fromArray(
																											[keyToUpdate, updatedValue]))
																									]),
																									tail
																								])));
																				},
																				_eval(
																					A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value)));
																	}
																} else {
																	var error = _v43.a;
																	return $elm$core$Result$Err(error);
																}
															} else {
																return $elm$core$Result$Err($author$project$Morphir$Value$Error$TupleExpected);
															}
														}
													}
												});
											return A2(
												$elm$core$Result$map,
												function (updatedList) {
													return A3(
														$author$project$Morphir$IR$Value$Apply,
														_Utils_Tuple0,
														A2(
															$author$project$Morphir$IR$Value$Reference,
															_Utils_Tuple0,
															_Utils_Tuple3(
																_List_fromArray(
																	[
																		_List_fromArray(
																		['morphir']),
																		_List_fromArray(
																		['s', 'd', 'k'])
																	]),
																_List_fromArray(
																	[
																		_List_fromArray(
																		['dict'])
																	]),
																_List_fromArray(
																	['from', 'list']))),
														A2($author$project$Morphir$IR$Value$List, _Utils_Tuple0, updatedList));
												},
												A2(find, list, _List_Nil));
										} else {
											return $elm$core$Result$Err(
												$author$project$Morphir$Value$Error$ExpectedList(arg));
										}
									} else {
										return $elm$core$Result$Err(
											$author$project$Morphir$Value$Error$UnexpectedArguments(
												_List_fromArray(
													[dict])));
									}
								}),
							_eval(arg1),
							_eval(arg2)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'remove',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (keyToRemove, dict) {
					if (((((((((((((((((((((((((dict.$ === 'Apply') && (dict.b.$ === 'Reference')) && dict.b.b.a.b) && dict.b.b.a.a.b) && (dict.b.b.a.a.a === 'morphir')) && (!dict.b.b.a.a.b.b)) && dict.b.b.a.b.b) && dict.b.b.a.b.a.b) && (dict.b.b.a.b.a.a === 's')) && dict.b.b.a.b.a.b.b) && (dict.b.b.a.b.a.b.a === 'd')) && dict.b.b.a.b.a.b.b.b) && (dict.b.b.a.b.a.b.b.a === 'k')) && (!dict.b.b.a.b.a.b.b.b.b)) && (!dict.b.b.a.b.b.b)) && dict.b.b.b.b) && dict.b.b.b.a.b) && (dict.b.b.b.a.a === 'dict')) && (!dict.b.b.b.a.b.b)) && (!dict.b.b.b.b.b)) && dict.b.b.c.b) && (dict.b.b.c.a === 'from')) && dict.b.b.c.b.b) && (dict.b.b.c.b.a === 'list')) && (!dict.b.b.c.b.b.b)) {
						var _v48 = dict.b;
						var _v49 = _v48.b;
						var _v50 = _v49.a;
						var _v51 = _v50.a;
						var _v52 = _v50.b;
						var _v53 = _v52.a;
						var _v54 = _v53.b;
						var _v55 = _v54.b;
						var _v56 = _v49.b;
						var _v57 = _v56.a;
						var _v58 = _v49.c;
						var _v59 = _v58.b;
						var arg = dict.c;
						if (arg.$ === 'List') {
							var list = arg.b;
							var find = F2(
								function (l, ans) {
									find:
									while (true) {
										if (!l.b) {
											return $elm$core$Result$Ok(ans);
										} else {
											var head = l.a;
											var tail = l.b;
											if ((((head.$ === 'Tuple') && head.b.b) && head.b.b.b) && (!head.b.b.b.b)) {
												var _v63 = head.b;
												var key = _v63.a;
												var _v64 = _v63.b;
												if (_Utils_eq(key, keyToRemove)) {
													var $temp$l = tail,
														$temp$ans = ans;
													l = $temp$l;
													ans = $temp$ans;
													continue find;
												} else {
													var $temp$l = tail,
														$temp$ans = A2(
														$elm$core$List$append,
														ans,
														_List_fromArray(
															[head]));
													l = $temp$l;
													ans = $temp$ans;
													continue find;
												}
											} else {
												return $elm$core$Result$Err($author$project$Morphir$Value$Error$TupleExpected);
											}
										}
									}
								});
							return A2(
								$elm$core$Result$map,
								function (updatedList) {
									return A3(
										$author$project$Morphir$IR$Value$Apply,
										_Utils_Tuple0,
										A2(
											$author$project$Morphir$IR$Value$Reference,
											_Utils_Tuple0,
											_Utils_Tuple3(
												_List_fromArray(
													[
														_List_fromArray(
														['morphir']),
														_List_fromArray(
														['s', 'd', 'k'])
													]),
												_List_fromArray(
													[
														_List_fromArray(
														['dict'])
													]),
												_List_fromArray(
													['from', 'list']))),
										A2($author$project$Morphir$IR$Value$List, _Utils_Tuple0, updatedList));
								},
								A2(find, list, _List_Nil));
						} else {
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedList(arg));
						}
					} else {
						return $elm$core$Result$Err(
							$author$project$Morphir$Value$Error$UnexpectedArguments(
								_List_fromArray(
									[dict])));
					}
				}))),
		_Utils_Tuple2(
		'isEmpty',
		$author$project$Morphir$Value$Native$unaryStrict(
			F2(
				function (_v65, dict) {
					if (((((((((((((((((((((((((dict.$ === 'Apply') && (dict.b.$ === 'Reference')) && dict.b.b.a.b) && dict.b.b.a.a.b) && (dict.b.b.a.a.a === 'morphir')) && (!dict.b.b.a.a.b.b)) && dict.b.b.a.b.b) && dict.b.b.a.b.a.b) && (dict.b.b.a.b.a.a === 's')) && dict.b.b.a.b.a.b.b) && (dict.b.b.a.b.a.b.a === 'd')) && dict.b.b.a.b.a.b.b.b) && (dict.b.b.a.b.a.b.b.a === 'k')) && (!dict.b.b.a.b.a.b.b.b.b)) && (!dict.b.b.a.b.b.b)) && dict.b.b.b.b) && dict.b.b.b.a.b) && (dict.b.b.b.a.a === 'dict')) && (!dict.b.b.b.a.b.b)) && (!dict.b.b.b.b.b)) && dict.b.b.c.b) && (dict.b.b.c.a === 'from')) && dict.b.b.c.b.b) && (dict.b.b.c.b.a === 'list')) && (!dict.b.b.c.b.b.b)) {
						var _v67 = dict.b;
						var _v68 = _v67.b;
						var _v69 = _v68.a;
						var _v70 = _v69.a;
						var _v71 = _v69.b;
						var _v72 = _v71.a;
						var _v73 = _v72.b;
						var _v74 = _v73.b;
						var _v75 = _v68.b;
						var _v76 = _v75.a;
						var _v77 = _v68.c;
						var _v78 = _v77.b;
						var arg = dict.c;
						if (arg.$ === 'List') {
							var list = arg.b;
							var find = function (l) {
								if (!l.b) {
									return $elm$core$Result$Ok(
										A2(
											$author$project$Morphir$IR$Value$Literal,
											_Utils_Tuple0,
											$author$project$Morphir$IR$Literal$BoolLiteral(true)));
								} else {
									var head = l.a;
									var tail = l.b;
									if ((((head.$ === 'Tuple') && head.b.b) && head.b.b.b) && (!head.b.b.b.b)) {
										var _v82 = head.b;
										var key = _v82.a;
										var _v83 = _v82.b;
										var value = _v83.a;
										return $elm$core$Result$Ok(
											A2(
												$author$project$Morphir$IR$Value$Literal,
												_Utils_Tuple0,
												$author$project$Morphir$IR$Literal$BoolLiteral(false)));
									} else {
										return $elm$core$Result$Err($author$project$Morphir$Value$Error$TupleExpected);
									}
								}
							};
							return find(list);
						} else {
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedList(arg));
						}
					} else {
						return $elm$core$Result$Err(
							$author$project$Morphir$Value$Error$UnexpectedArguments(
								_List_fromArray(
									[dict])));
					}
				}))),
		_Utils_Tuple2(
		'member',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (keyToGet, dict) {
					if (((((((((((((((((((((((((dict.$ === 'Apply') && (dict.b.$ === 'Reference')) && dict.b.b.a.b) && dict.b.b.a.a.b) && (dict.b.b.a.a.a === 'morphir')) && (!dict.b.b.a.a.b.b)) && dict.b.b.a.b.b) && dict.b.b.a.b.a.b) && (dict.b.b.a.b.a.a === 's')) && dict.b.b.a.b.a.b.b) && (dict.b.b.a.b.a.b.a === 'd')) && dict.b.b.a.b.a.b.b.b) && (dict.b.b.a.b.a.b.b.a === 'k')) && (!dict.b.b.a.b.a.b.b.b.b)) && (!dict.b.b.a.b.b.b)) && dict.b.b.b.b) && dict.b.b.b.a.b) && (dict.b.b.b.a.a === 'dict')) && (!dict.b.b.b.a.b.b)) && (!dict.b.b.b.b.b)) && dict.b.b.c.b) && (dict.b.b.c.a === 'from')) && dict.b.b.c.b.b) && (dict.b.b.c.b.a === 'list')) && (!dict.b.b.c.b.b.b)) {
						var _v85 = dict.b;
						var _v86 = _v85.b;
						var _v87 = _v86.a;
						var _v88 = _v87.a;
						var _v89 = _v87.b;
						var _v90 = _v89.a;
						var _v91 = _v90.b;
						var _v92 = _v91.b;
						var _v93 = _v86.b;
						var _v94 = _v93.a;
						var _v95 = _v86.c;
						var _v96 = _v95.b;
						var arg = dict.c;
						if (arg.$ === 'List') {
							var list = arg.b;
							var find = function (l) {
								find:
								while (true) {
									if (!l.b) {
										return $elm$core$Result$Ok(
											A2(
												$author$project$Morphir$IR$Value$Literal,
												_Utils_Tuple0,
												$author$project$Morphir$IR$Literal$BoolLiteral(false)));
									} else {
										var head = l.a;
										var tail = l.b;
										if ((((head.$ === 'Tuple') && head.b.b) && head.b.b.b) && (!head.b.b.b.b)) {
											var _v100 = head.b;
											var key = _v100.a;
											var _v101 = _v100.b;
											var value = _v101.a;
											if (_Utils_eq(key, keyToGet)) {
												return $elm$core$Result$Ok(
													A2(
														$author$project$Morphir$IR$Value$Literal,
														_Utils_Tuple0,
														$author$project$Morphir$IR$Literal$BoolLiteral(true)));
											} else {
												var $temp$l = tail;
												l = $temp$l;
												continue find;
											}
										} else {
											return $elm$core$Result$Err($author$project$Morphir$Value$Error$TupleExpected);
										}
									}
								}
							};
							return find(list);
						} else {
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedList(arg));
						}
					} else {
						return $elm$core$Result$Err(
							$author$project$Morphir$Value$Error$UnexpectedArguments(
								_List_fromArray(
									[dict])));
					}
				}))),
		_Utils_Tuple2(
		'get',
		$author$project$Morphir$Value$Native$binaryStrict(
			F2(
				function (keyToGet, dict) {
					if (((((((((((((((((((((((((dict.$ === 'Apply') && (dict.b.$ === 'Reference')) && dict.b.b.a.b) && dict.b.b.a.a.b) && (dict.b.b.a.a.a === 'morphir')) && (!dict.b.b.a.a.b.b)) && dict.b.b.a.b.b) && dict.b.b.a.b.a.b) && (dict.b.b.a.b.a.a === 's')) && dict.b.b.a.b.a.b.b) && (dict.b.b.a.b.a.b.a === 'd')) && dict.b.b.a.b.a.b.b.b) && (dict.b.b.a.b.a.b.b.a === 'k')) && (!dict.b.b.a.b.a.b.b.b.b)) && (!dict.b.b.a.b.b.b)) && dict.b.b.b.b) && dict.b.b.b.a.b) && (dict.b.b.b.a.a === 'dict')) && (!dict.b.b.b.a.b.b)) && (!dict.b.b.b.b.b)) && dict.b.b.c.b) && (dict.b.b.c.a === 'from')) && dict.b.b.c.b.b) && (dict.b.b.c.b.a === 'list')) && (!dict.b.b.c.b.b.b)) {
						var _v103 = dict.b;
						var _v104 = _v103.b;
						var _v105 = _v104.a;
						var _v106 = _v105.a;
						var _v107 = _v105.b;
						var _v108 = _v107.a;
						var _v109 = _v108.b;
						var _v110 = _v109.b;
						var _v111 = _v104.b;
						var _v112 = _v111.a;
						var _v113 = _v104.c;
						var _v114 = _v113.b;
						var arg = dict.c;
						if (arg.$ === 'List') {
							var list = arg.b;
							var find = function (l) {
								find:
								while (true) {
									if (!l.b) {
										return $elm$core$Result$Ok(
											$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
									} else {
										var head = l.a;
										var tail = l.b;
										if ((((head.$ === 'Tuple') && head.b.b) && head.b.b.b) && (!head.b.b.b.b)) {
											var _v118 = head.b;
											var key = _v118.a;
											var _v119 = _v118.b;
											var value = _v119.a;
											if (_Utils_eq(key, keyToGet)) {
												return $elm$core$Result$Ok(
													A2($author$project$Morphir$IR$SDK$Maybe$just, _Utils_Tuple0, value));
											} else {
												var $temp$l = tail;
												l = $temp$l;
												continue find;
											}
										} else {
											return $elm$core$Result$Err($author$project$Morphir$Value$Error$TupleExpected);
										}
									}
								}
							};
							return find(list);
						} else {
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedList(arg));
						}
					} else {
						return $elm$core$Result$Err(
							$author$project$Morphir$Value$Error$UnexpectedArguments(
								_List_fromArray(
									[dict])));
					}
				}))),
		_Utils_Tuple2(
		'size',
		$author$project$Morphir$Value$Native$unaryStrict(
			F2(
				function (_v120, dict) {
					if (((((((((((((((((((((((((dict.$ === 'Apply') && (dict.b.$ === 'Reference')) && dict.b.b.a.b) && dict.b.b.a.a.b) && (dict.b.b.a.a.a === 'morphir')) && (!dict.b.b.a.a.b.b)) && dict.b.b.a.b.b) && dict.b.b.a.b.a.b) && (dict.b.b.a.b.a.a === 's')) && dict.b.b.a.b.a.b.b) && (dict.b.b.a.b.a.b.a === 'd')) && dict.b.b.a.b.a.b.b.b) && (dict.b.b.a.b.a.b.b.a === 'k')) && (!dict.b.b.a.b.a.b.b.b.b)) && (!dict.b.b.a.b.b.b)) && dict.b.b.b.b) && dict.b.b.b.a.b) && (dict.b.b.b.a.a === 'dict')) && (!dict.b.b.b.a.b.b)) && (!dict.b.b.b.b.b)) && dict.b.b.c.b) && (dict.b.b.c.a === 'from')) && dict.b.b.c.b.b) && (dict.b.b.c.b.a === 'list')) && (!dict.b.b.c.b.b.b)) {
						var _v122 = dict.b;
						var _v123 = _v122.b;
						var _v124 = _v123.a;
						var _v125 = _v124.a;
						var _v126 = _v124.b;
						var _v127 = _v126.a;
						var _v128 = _v127.b;
						var _v129 = _v128.b;
						var _v130 = _v123.b;
						var _v131 = _v130.a;
						var _v132 = _v123.c;
						var _v133 = _v132.b;
						var arg = dict.c;
						if (arg.$ === 'List') {
							var list = arg.b;
							var find = F2(
								function (l, length) {
									find:
									while (true) {
										if (!l.b) {
											return $elm$core$Result$Ok(length);
										} else {
											var head = l.a;
											var tail = l.b;
											if ((((head.$ === 'Tuple') && head.b.b) && head.b.b.b) && (!head.b.b.b.b)) {
												var _v137 = head.b;
												var _v138 = _v137.b;
												var $temp$l = tail,
													$temp$length = length + 1;
												l = $temp$l;
												length = $temp$length;
												continue find;
											} else {
												return $elm$core$Result$Err($author$project$Morphir$Value$Error$TupleExpected);
											}
										}
									}
								});
							return A2(
								$elm$core$Result$map,
								function (len) {
									return A2(
										$author$project$Morphir$IR$Value$Literal,
										_Utils_Tuple0,
										$author$project$Morphir$IR$Literal$WholeNumberLiteral(len));
								},
								A2(find, list, 0));
						} else {
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedList(arg));
						}
					} else {
						return $elm$core$Result$Err(
							$author$project$Morphir$Value$Error$UnexpectedArguments(
								_List_fromArray(
									[dict])));
					}
				}))),
		_Utils_Tuple2(
		'keys',
		$author$project$Morphir$Value$Native$unaryStrict(
			F2(
				function (_v139, dict) {
					if (((((((((((((((((((((((((dict.$ === 'Apply') && (dict.b.$ === 'Reference')) && dict.b.b.a.b) && dict.b.b.a.a.b) && (dict.b.b.a.a.a === 'morphir')) && (!dict.b.b.a.a.b.b)) && dict.b.b.a.b.b) && dict.b.b.a.b.a.b) && (dict.b.b.a.b.a.a === 's')) && dict.b.b.a.b.a.b.b) && (dict.b.b.a.b.a.b.a === 'd')) && dict.b.b.a.b.a.b.b.b) && (dict.b.b.a.b.a.b.b.a === 'k')) && (!dict.b.b.a.b.a.b.b.b.b)) && (!dict.b.b.a.b.b.b)) && dict.b.b.b.b) && dict.b.b.b.a.b) && (dict.b.b.b.a.a === 'dict')) && (!dict.b.b.b.a.b.b)) && (!dict.b.b.b.b.b)) && dict.b.b.c.b) && (dict.b.b.c.a === 'from')) && dict.b.b.c.b.b) && (dict.b.b.c.b.a === 'list')) && (!dict.b.b.c.b.b.b)) {
						var _v141 = dict.b;
						var _v142 = _v141.b;
						var _v143 = _v142.a;
						var _v144 = _v143.a;
						var _v145 = _v143.b;
						var _v146 = _v145.a;
						var _v147 = _v146.b;
						var _v148 = _v147.b;
						var _v149 = _v142.b;
						var _v150 = _v149.a;
						var _v151 = _v142.c;
						var _v152 = _v151.b;
						var arg = dict.c;
						if (arg.$ === 'List') {
							var list = arg.b;
							var find = F2(
								function (l, keysList) {
									find:
									while (true) {
										if (!l.b) {
											return $elm$core$Result$Ok(keysList);
										} else {
											var head = l.a;
											var tail = l.b;
											if ((((head.$ === 'Tuple') && head.b.b) && head.b.b.b) && (!head.b.b.b.b)) {
												var _v156 = head.b;
												var key = _v156.a;
												var _v157 = _v156.b;
												var $temp$l = tail,
													$temp$keysList = A2(
													$elm$core$List$append,
													keysList,
													_List_fromArray(
														[key]));
												l = $temp$l;
												keysList = $temp$keysList;
												continue find;
											} else {
												return $elm$core$Result$Err($author$project$Morphir$Value$Error$TupleExpected);
											}
										}
									}
								});
							return A2(
								$elm$core$Result$map,
								function (keyList) {
									return A2($author$project$Morphir$IR$Value$List, _Utils_Tuple0, keyList);
								},
								A2(find, list, _List_Nil));
						} else {
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedList(arg));
						}
					} else {
						return $elm$core$Result$Err(
							$author$project$Morphir$Value$Error$UnexpectedArguments(
								_List_fromArray(
									[dict])));
					}
				}))),
		_Utils_Tuple2(
		'value',
		$author$project$Morphir$Value$Native$unaryStrict(
			F2(
				function (_v158, dict) {
					if (((((((((((((((((((((((((dict.$ === 'Apply') && (dict.b.$ === 'Reference')) && dict.b.b.a.b) && dict.b.b.a.a.b) && (dict.b.b.a.a.a === 'morphir')) && (!dict.b.b.a.a.b.b)) && dict.b.b.a.b.b) && dict.b.b.a.b.a.b) && (dict.b.b.a.b.a.a === 's')) && dict.b.b.a.b.a.b.b) && (dict.b.b.a.b.a.b.a === 'd')) && dict.b.b.a.b.a.b.b.b) && (dict.b.b.a.b.a.b.b.a === 'k')) && (!dict.b.b.a.b.a.b.b.b.b)) && (!dict.b.b.a.b.b.b)) && dict.b.b.b.b) && dict.b.b.b.a.b) && (dict.b.b.b.a.a === 'dict')) && (!dict.b.b.b.a.b.b)) && (!dict.b.b.b.b.b)) && dict.b.b.c.b) && (dict.b.b.c.a === 'from')) && dict.b.b.c.b.b) && (dict.b.b.c.b.a === 'list')) && (!dict.b.b.c.b.b.b)) {
						var _v160 = dict.b;
						var _v161 = _v160.b;
						var _v162 = _v161.a;
						var _v163 = _v162.a;
						var _v164 = _v162.b;
						var _v165 = _v164.a;
						var _v166 = _v165.b;
						var _v167 = _v166.b;
						var _v168 = _v161.b;
						var _v169 = _v168.a;
						var _v170 = _v161.c;
						var _v171 = _v170.b;
						var arg = dict.c;
						if (arg.$ === 'List') {
							var list = arg.b;
							var find = F2(
								function (l, valuesList) {
									find:
									while (true) {
										if (!l.b) {
											return $elm$core$Result$Ok(valuesList);
										} else {
											var head = l.a;
											var tail = l.b;
											if ((((head.$ === 'Tuple') && head.b.b) && head.b.b.b) && (!head.b.b.b.b)) {
												var _v175 = head.b;
												var _v176 = _v175.b;
												var value = _v176.a;
												var $temp$l = tail,
													$temp$valuesList = A2(
													$elm$core$List$append,
													valuesList,
													_List_fromArray(
														[value]));
												l = $temp$l;
												valuesList = $temp$valuesList;
												continue find;
											} else {
												return $elm$core$Result$Err($author$project$Morphir$Value$Error$TupleExpected);
											}
										}
									}
								});
							return A2(
								$elm$core$Result$map,
								function (valueList) {
									return A2($author$project$Morphir$IR$Value$List, _Utils_Tuple0, valueList);
								},
								A2(find, list, _List_Nil));
						} else {
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedList(arg));
						}
					} else {
						return $elm$core$Result$Err(
							$author$project$Morphir$Value$Error$UnexpectedArguments(
								_List_fromArray(
									[dict])));
					}
				}))),
		_Utils_Tuple2(
		'toList',
		$author$project$Morphir$Value$Native$unaryStrict(
			F2(
				function (_v177, arg) {
					return $elm$core$Result$Ok(
						A2($author$project$Morphir$IR$SDK$Dict$toListValue, _Utils_Tuple0, arg));
				}))),
		_Utils_Tuple2(
		'fromList',
		$author$project$Morphir$Value$Native$unaryStrict(
			F2(
				function (_v178, arg) {
					return $elm$core$Result$Ok(
						A2($author$project$Morphir$IR$SDK$Dict$fromListValue, _Utils_Tuple0, arg));
				})))
	]);
var $author$project$Morphir$Value$Native$decodeFun1 = F4(
	function (encodeA, decodeR, _eval, fun) {
		return $elm$core$Result$Ok(
			function (a) {
				return A2(
					$elm$core$Result$andThen,
					decodeR(_eval),
					A2(
						$elm$core$Result$andThen,
						function (arg) {
							return _eval(
								A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, arg));
						},
						encodeA(a)));
			});
	});
var $author$project$Morphir$Value$Error$ExpectedTuple = function (a) {
	return {$: 'ExpectedTuple', a: a};
};
var $author$project$Morphir$Value$Native$decodeTuple2 = F3(
	function (_v0, _eval, value) {
		var decodeA = _v0.a;
		var decodeB = _v0.b;
		var _v1 = _eval(value);
		if (_v1.$ === 'Ok') {
			if ((((_v1.a.$ === 'Tuple') && _v1.a.b.b) && _v1.a.b.b.b) && (!_v1.a.b.b.b.b)) {
				var _v2 = _v1.a;
				var _v3 = _v2.b;
				var val1 = _v3.a;
				var _v4 = _v3.b;
				var val2 = _v4.a;
				return A3(
					$elm$core$Result$map2,
					F2(
						function (a1, b1) {
							return _Utils_Tuple2(a1, b1);
						}),
					A2(decodeA, _eval, val1),
					A2(decodeB, _eval, val2));
			} else {
				return $elm$core$Result$Err(
					$author$project$Morphir$Value$Error$ExpectedTuple(value));
			}
		} else {
			var error = _v1.a;
			return $elm$core$Result$Err(error);
		}
	});
var $author$project$Morphir$Value$Native$encodeResultList = function (listOfValueResults) {
	return A2(
		$elm$core$Result$map,
		$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
		$author$project$Morphir$ListOfResults$liftFirstError(listOfValueResults));
};
var $author$project$Morphir$Value$Native$encodeTuple2 = F2(
	function (_v0, _v1) {
		var encodeA = _v0.a;
		var encodeB = _v0.b;
		var a = _v1.a;
		var b = _v1.b;
		return A3(
			$elm$core$Result$map2,
			F2(
				function (a1, b1) {
					return A2(
						$author$project$Morphir$IR$Value$Tuple,
						_Utils_Tuple0,
						_List_fromArray(
							[a1, b1]));
				}),
			encodeA(a),
			encodeB(b));
	});
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $elm$core$List$map3 = _List_map3;
var $elm$core$List$map4 = _List_map4;
var $elm$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				if (rc.$ === 'Err') {
					var x = rc.a;
					return $elm$core$Result$Err(x);
				} else {
					var c = rc.a;
					if (rd.$ === 'Err') {
						var x = rd.a;
						return $elm$core$Result$Err(x);
					} else {
						var d = rd.a;
						return $elm$core$Result$Ok(
							A4(func, a, b, c, d));
					}
				}
			}
		}
	});
var $elm$core$List$map5 = _List_map5;
var $elm$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				if (rc.$ === 'Err') {
					var x = rc.a;
					return $elm$core$Result$Err(x);
				} else {
					var c = rc.a;
					if (rd.$ === 'Err') {
						var x = rd.a;
						return $elm$core$Result$Err(x);
					} else {
						var d = rd.a;
						if (re.$ === 'Err') {
							var x = re.a;
							return $elm$core$Result$Err(x);
						} else {
							var e = re.a;
							return $elm$core$Result$Ok(
								A5(func, a, b, c, d, e));
						}
					}
				}
			}
		}
	});
var $author$project$Morphir$IR$SDK$List$nativeJoin = F3(
	function (isOuter, _eval, args) {
		if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
			var listB = args.a;
			var _v1 = args.b;
			var fun = _v1.a;
			var _v2 = _v1.b;
			var listA = _v2.a;
			return A2(
				$elm$core$Result$andThen,
				function (evaluatedListA) {
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedListB) {
							if (evaluatedListA.$ === 'List') {
								var listAItems = evaluatedListA.b;
								return A2(
									$elm$core$Result$map,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$List$concat,
										$author$project$Morphir$IR$Value$List(_Utils_Tuple0)),
									$author$project$Morphir$SDK$ResultList$keepFirstError(
										A2(
											$elm$core$List$map,
											function (listAItem) {
												var filterListB = A3(
													$author$project$Morphir$IR$Value$Apply,
													_Utils_Tuple0,
													A3(
														$author$project$Morphir$IR$Value$Apply,
														_Utils_Tuple0,
														A2(
															$author$project$Morphir$IR$Value$Reference,
															_Utils_Tuple0,
															A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$List$moduleName, 'filter')),
														A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, listAItem)),
													evaluatedListB);
												return A2(
													$elm$core$Result$andThen,
													function (filteredListB) {
														if (filteredListB.$ === 'List') {
															var listBItems = filteredListB.b;
															return isOuter ? ($elm$core$List$isEmpty(listBItems) ? $elm$core$Result$Ok(
																_List_fromArray(
																	[
																		A2(
																		$author$project$Morphir$IR$Value$Tuple,
																		_Utils_Tuple0,
																		_List_fromArray(
																			[
																				listAItem,
																				$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0)
																			]))
																	])) : $elm$core$Result$Ok(
																A2(
																	$elm$core$List$map,
																	function (listBItem) {
																		return A2(
																			$author$project$Morphir$IR$Value$Tuple,
																			_Utils_Tuple0,
																			_List_fromArray(
																				[
																					listAItem,
																					A2($author$project$Morphir$IR$SDK$Maybe$just, _Utils_Tuple0, listBItem)
																				]));
																	},
																	listBItems))) : $elm$core$Result$Ok(
																A2(
																	$elm$core$List$map,
																	function (listBItem) {
																		return A2(
																			$author$project$Morphir$IR$Value$Tuple,
																			_Utils_Tuple0,
																			_List_fromArray(
																				[listAItem, listBItem]));
																	},
																	listBItems));
														} else {
															return $elm$core$Result$Err(
																$author$project$Morphir$Value$Error$ExpectedList(filteredListB));
														}
													},
													_eval(filterListB));
											},
											listAItems)));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedListB));
							}
						},
						_eval(listB));
				},
				_eval(listA));
		} else {
			return $elm$core$Result$Err(
				$author$project$Morphir$Value$Error$UnexpectedArguments(args));
		}
	});
var $elm$core$List$product = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$mul, 1, numbers);
};
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $elm$core$List$unzip = function (pairs) {
	var step = F2(
		function (_v0, _v1) {
			var x = _v0.a;
			var y = _v0.b;
			var xs = _v1.a;
			var ys = _v1.b;
			return _Utils_Tuple2(
				A2($elm$core$List$cons, x, xs),
				A2($elm$core$List$cons, y, ys));
		});
	return A3(
		$elm$core$List$foldr,
		step,
		_Utils_Tuple2(_List_Nil, _List_Nil),
		pairs);
};
var $author$project$Morphir$IR$SDK$List$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple2(
		'singleton',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$List$singleton,
			$author$project$Morphir$Value$Native$decodeRaw,
			$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'repeat',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$List$repeat,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeRaw,
			$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'cons',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$List$cons,
			$author$project$Morphir$Value$Native$decodeRaw,
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'map',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$List$map,
			A2($author$project$Morphir$Value$Native$decodeFun1, $author$project$Morphir$Value$Native$encodeRaw, $author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeResultList)),
		_Utils_Tuple2(
		'filter',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v1 = args.b;
					var arg1 = _v1.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if (evaluatedArg1.$ === 'List') {
								var listItems = evaluatedArg1.b;
								var evaluate = F2(
									function (list, items) {
										evaluate:
										while (true) {
											if (!items.b) {
												return $elm$core$Result$Ok(list);
											} else {
												var head = items.a;
												var tail = items.b;
												var _v4 = _eval(
													A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, head));
												if (_v4.$ === 'Ok') {
													if ((_v4.a.$ === 'Literal') && (_v4.a.b.$ === 'BoolLiteral')) {
														if (_v4.a.b.a) {
															var _v5 = _v4.a;
															var $temp$list = _Utils_ap(
																list,
																_List_fromArray(
																	[head])),
																$temp$items = tail;
															list = $temp$list;
															items = $temp$items;
															continue evaluate;
														} else {
															var _v6 = _v4.a;
															var $temp$list = list,
																$temp$items = tail;
															list = $temp$list;
															items = $temp$items;
															continue evaluate;
														}
													} else {
														var other = _v4.a;
														return $elm$core$Result$Err(
															$author$project$Morphir$Value$Error$ExpectedBoolLiteral(other));
													}
												} else {
													var other = _v4.a;
													return $elm$core$Result$Err(other);
												}
											}
										}
									});
								return A2(
									$elm$core$Result$map,
									$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
									A2(evaluate, _List_Nil, listItems));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'filterMap',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v8 = args.b;
					var arg1 = _v8.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if (evaluatedArg1.$ === 'List') {
								var listItems = evaluatedArg1.b;
								var evaluate = F2(
									function (list, items) {
										evaluate:
										while (true) {
											if (!items.b) {
												return $elm$core$Result$Ok(list);
											} else {
												var head = items.a;
												var tail = items.b;
												var _v11 = _eval(
													A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, head));
												_v11$2:
												while (true) {
													if (_v11.$ === 'Ok') {
														switch (_v11.a.$) {
															case 'Apply':
																if ((((((((((((((((((((((_v11.a.b.$ === 'Constructor') && _v11.a.b.b.a.b) && _v11.a.b.b.a.a.b) && (_v11.a.b.b.a.a.a === 'morphir')) && (!_v11.a.b.b.a.a.b.b)) && _v11.a.b.b.a.b.b) && _v11.a.b.b.a.b.a.b) && (_v11.a.b.b.a.b.a.a === 's')) && _v11.a.b.b.a.b.a.b.b) && (_v11.a.b.b.a.b.a.b.a === 'd')) && _v11.a.b.b.a.b.a.b.b.b) && (_v11.a.b.b.a.b.a.b.b.a === 'k')) && (!_v11.a.b.b.a.b.a.b.b.b.b)) && (!_v11.a.b.b.a.b.b.b)) && _v11.a.b.b.b.b) && _v11.a.b.b.b.a.b) && (_v11.a.b.b.b.a.a === 'maybe')) && (!_v11.a.b.b.b.a.b.b)) && (!_v11.a.b.b.b.b.b)) && _v11.a.b.b.c.b) && (_v11.a.b.b.c.a === 'just')) && (!_v11.a.b.b.c.b.b)) {
																	var _v12 = _v11.a;
																	var _v13 = _v12.b;
																	var _v14 = _v13.b;
																	var _v15 = _v14.a;
																	var _v16 = _v15.a;
																	var _v17 = _v15.b;
																	var _v18 = _v17.a;
																	var _v19 = _v18.b;
																	var _v20 = _v19.b;
																	var _v21 = _v14.b;
																	var _v22 = _v21.a;
																	var _v23 = _v14.c;
																	var value = _v12.c;
																	var $temp$list = _Utils_ap(
																		list,
																		_List_fromArray(
																			[value])),
																		$temp$items = tail;
																	list = $temp$list;
																	items = $temp$items;
																	continue evaluate;
																} else {
																	break _v11$2;
																}
															case 'Constructor':
																if ((((((((((((((((((((_v11.a.b.a.b && _v11.a.b.a.a.b) && (_v11.a.b.a.a.a === 'morphir')) && (!_v11.a.b.a.a.b.b)) && _v11.a.b.a.b.b) && _v11.a.b.a.b.a.b) && (_v11.a.b.a.b.a.a === 's')) && _v11.a.b.a.b.a.b.b) && (_v11.a.b.a.b.a.b.a === 'd')) && _v11.a.b.a.b.a.b.b.b) && (_v11.a.b.a.b.a.b.b.a === 'k')) && (!_v11.a.b.a.b.a.b.b.b.b)) && (!_v11.a.b.a.b.b.b)) && _v11.a.b.b.b) && _v11.a.b.b.a.b) && (_v11.a.b.b.a.a === 'maybe')) && (!_v11.a.b.b.a.b.b)) && (!_v11.a.b.b.b.b)) && _v11.a.b.c.b) && (_v11.a.b.c.a === 'nothing')) && (!_v11.a.b.c.b.b)) {
																	var _v24 = _v11.a;
																	var _v25 = _v24.b;
																	var _v26 = _v25.a;
																	var _v27 = _v26.a;
																	var _v28 = _v26.b;
																	var _v29 = _v28.a;
																	var _v30 = _v29.b;
																	var _v31 = _v30.b;
																	var _v32 = _v25.b;
																	var _v33 = _v32.a;
																	var _v34 = _v25.c;
																	var $temp$list = list,
																		$temp$items = tail;
																	list = $temp$list;
																	items = $temp$items;
																	continue evaluate;
																} else {
																	break _v11$2;
																}
															default:
																break _v11$2;
														}
													} else {
														var other = _v11.a;
														return $elm$core$Result$Err(other);
													}
												}
												var other = _v11.a;
												return $elm$core$Result$Err(
													$author$project$Morphir$Value$Error$ExpectedBoolLiteral(other));
											}
										}
									});
								return A2(
									$elm$core$Result$map,
									$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
									A2(evaluate, _List_Nil, listItems));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'foldl',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun = args.a;
					var _v36 = args.b;
					var arg1 = _v36.a;
					var _v37 = _v36.b;
					var arg2 = _v37.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg2) {
							if (evaluatedArg2.$ === 'List') {
								var listItems = evaluatedArg2.b;
								return A3(
									$elm$core$List$foldl,
									F2(
										function (next, resultSoFar) {
											return A2(
												$elm$core$Result$andThen,
												function (soFar) {
													return A2(
														$elm$core$Result$andThen,
														function (evaluatedNext) {
															return _eval(
																A3(
																	$author$project$Morphir$IR$Value$Apply,
																	_Utils_Tuple0,
																	A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, evaluatedNext),
																	soFar));
														},
														_eval(next));
												},
												resultSoFar);
										}),
									_eval(arg1),
									listItems);
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg2));
							}
						},
						_eval(arg2));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'foldr',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun = args.a;
					var _v40 = args.b;
					var arg1 = _v40.a;
					var _v41 = _v40.b;
					var arg2 = _v41.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg2) {
							if (evaluatedArg2.$ === 'List') {
								var listItems = evaluatedArg2.b;
								return A3(
									$elm$core$List$foldr,
									F2(
										function (next, resultSoFar) {
											return A2(
												$elm$core$Result$andThen,
												function (soFar) {
													return A2(
														$elm$core$Result$andThen,
														function (evaluatedNext) {
															return _eval(
																A3(
																	$author$project$Morphir$IR$Value$Apply,
																	_Utils_Tuple0,
																	A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, evaluatedNext),
																	soFar));
														},
														_eval(next));
												},
												resultSoFar);
										}),
									_eval(arg1),
									listItems);
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg2));
							}
						},
						_eval(arg2));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'length',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$List$length,
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple2(
		'reverse',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$List$reverse,
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'member',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$List$member,
			$author$project$Morphir$Value$Native$decodeRaw,
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'all',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v44 = args.b;
					var arg1 = _v44.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if (evaluatedArg1.$ === 'List') {
								var listItems = evaluatedArg1.b;
								var evaluate = function (items) {
									evaluate:
									while (true) {
										if (!items.b) {
											return $elm$core$Result$Ok(true);
										} else {
											var head1 = items.a;
											var tail1 = items.b;
											var _v47 = _eval(
												A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, head1));
											if (_v47.$ === 'Ok') {
												if ((_v47.a.$ === 'Literal') && (_v47.a.b.$ === 'BoolLiteral')) {
													if (_v47.a.b.a) {
														var _v48 = _v47.a;
														var $temp$items = tail1;
														items = $temp$items;
														continue evaluate;
													} else {
														var _v49 = _v47.a;
														return $elm$core$Result$Ok(false);
													}
												} else {
													var other = _v47.a;
													return $elm$core$Result$Err(
														$author$project$Morphir$Value$Error$ExpectedBoolLiteral(other));
												}
											} else {
												var other = _v47.a;
												return $elm$core$Result$Err(other);
											}
										}
									}
								};
								return A2(
									$elm$core$Result$map,
									function (val) {
										return A2(
											$author$project$Morphir$IR$Value$Literal,
											_Utils_Tuple0,
											$author$project$Morphir$IR$Literal$BoolLiteral(val));
									},
									evaluate(listItems));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'any',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v51 = args.b;
					var arg1 = _v51.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if (evaluatedArg1.$ === 'List') {
								var listItems = evaluatedArg1.b;
								var evaluate = function (items) {
									evaluate:
									while (true) {
										if (!items.b) {
											return $elm$core$Result$Ok(false);
										} else {
											var head1 = items.a;
											var tail1 = items.b;
											var _v54 = _eval(
												A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, head1));
											if (_v54.$ === 'Ok') {
												if ((_v54.a.$ === 'Literal') && (_v54.a.b.$ === 'BoolLiteral')) {
													if (!_v54.a.b.a) {
														var _v55 = _v54.a;
														var $temp$items = tail1;
														items = $temp$items;
														continue evaluate;
													} else {
														var _v56 = _v54.a;
														return $elm$core$Result$Ok(true);
													}
												} else {
													var other = _v54.a;
													return $elm$core$Result$Err(
														$author$project$Morphir$Value$Error$ExpectedBoolLiteral(other));
												}
											} else {
												var other = _v54.a;
												return $elm$core$Result$Err(other);
											}
										}
									}
								};
								return A2(
									$elm$core$Result$map,
									function (val) {
										return A2(
											$author$project$Morphir$IR$Value$Literal,
											_Utils_Tuple0,
											$author$project$Morphir$IR$Literal$BoolLiteral(val));
									},
									evaluate(listItems));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'maximum',
		F2(
			function (_eval, args) {
				if (args.b && (!args.b.b)) {
					var arg1 = args.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if (evaluatedArg1.$ === 'List') {
								var listItems = evaluatedArg1.b;
								var evaluate = function (items) {
									if (!items.b) {
										return $elm$core$Result$Ok(
											$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
									} else {
										var head = items.a;
										var tail = items.b;
										return A2(
											$elm$core$Result$map,
											$author$project$Morphir$IR$SDK$Maybe$just(_Utils_Tuple0),
											A3(
												$elm$core$List$foldl,
												F2(
													function (next, resultSoFar) {
														return A2(
															$elm$core$Result$andThen,
															function (soFar) {
																return A2(
																	$elm$core$Result$andThen,
																	function (evaluatedNext) {
																		return A2(
																			$elm$core$Result$map,
																			function (order) {
																				if (order.$ === 'LT') {
																					return soFar;
																				} else {
																					return evaluatedNext;
																				}
																			},
																			A2($author$project$Morphir$Value$Native$Comparable$compareValue, evaluatedNext, soFar));
																	},
																	_eval(next));
															},
															resultSoFar);
													}),
												_eval(head),
												tail));
									}
								};
								return evaluate(listItems);
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'minimum',
		F2(
			function (_eval, args) {
				if (args.b && (!args.b.b)) {
					var arg1 = args.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if (evaluatedArg1.$ === 'List') {
								var listItems = evaluatedArg1.b;
								var evaluate = function (items) {
									if (!items.b) {
										return $elm$core$Result$Ok(
											$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
									} else {
										var head = items.a;
										var tail = items.b;
										return A2(
											$elm$core$Result$map,
											$author$project$Morphir$IR$SDK$Maybe$just(_Utils_Tuple0),
											A3(
												$elm$core$List$foldl,
												F2(
													function (next, resultSoFar) {
														return A2(
															$elm$core$Result$andThen,
															function (soFar) {
																return A2(
																	$elm$core$Result$andThen,
																	function (evaluatedNext) {
																		return A2(
																			$elm$core$Result$map,
																			function (order) {
																				if (order.$ === 'LT') {
																					return evaluatedNext;
																				} else {
																					return soFar;
																				}
																			},
																			A2($author$project$Morphir$Value$Native$Comparable$compareValue, evaluatedNext, soFar));
																	},
																	_eval(next));
															},
															resultSoFar);
													}),
												_eval(head),
												tail));
									}
								};
								return evaluate(listItems);
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'sum',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A3(
					$author$project$Morphir$Value$Native$eval1,
					$elm$core$List$sum,
					$author$project$Morphir$Value$Native$decodeList(
						$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral)),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral)),
					A3(
					$author$project$Morphir$Value$Native$eval1,
					$elm$core$List$sum,
					$author$project$Morphir$Value$Native$decodeList(
						$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral)),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))
				]))),
		_Utils_Tuple2(
		'product',
		$author$project$Morphir$Value$Native$oneOf(
			_List_fromArray(
				[
					A3(
					$author$project$Morphir$Value$Native$eval1,
					$elm$core$List$product,
					$author$project$Morphir$Value$Native$decodeList(
						$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral)),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral)),
					A3(
					$author$project$Morphir$Value$Native$eval1,
					$elm$core$List$product,
					$author$project$Morphir$Value$Native$decodeList(
						$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral)),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))
				]))),
		_Utils_Tuple2(
		'append',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$List$append,
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'concat',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$List$concat,
			$author$project$Morphir$Value$Native$decodeList(
				$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw)),
			$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'intersperse',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$List$intersperse,
			$author$project$Morphir$Value$Native$decodeRaw,
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'indexedMap',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v66 = args.b;
					var arg1 = _v66.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A2(
							$elm$core$Result$map,
							function (evaluatedArg1) {
								if (evaluatedArg1.$ === 'List') {
									var listItems1 = evaluatedArg1.b;
									return A2(
										$elm$core$Result$map,
										$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
										$author$project$Morphir$ListOfResults$liftFirstError(
											A2(
												$elm$core$List$indexedMap,
												F2(
													function (index, item1) {
														return _eval(
															A3(
																$author$project$Morphir$IR$Value$Apply,
																_Utils_Tuple0,
																A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, item1),
																A2(
																	$author$project$Morphir$IR$Value$Literal,
																	_Utils_Tuple0,
																	$author$project$Morphir$IR$Literal$WholeNumberLiteral(index))));
													}),
												listItems1)));
								} else {
									return $elm$core$Result$Err(
										$author$project$Morphir$Value$Error$UnexpectedArguments(args));
								}
							},
							_eval(arg1)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map2',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun = args.a;
					var _v69 = args.b;
					var arg1 = _v69.a;
					var _v70 = _v69.b;
					var arg2 = _v70.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A3(
							$elm$core$Result$map2,
							F2(
								function (evaluatedArg1, evaluatedArg2) {
									var _v71 = _Utils_Tuple2(evaluatedArg1, evaluatedArg2);
									if ((_v71.a.$ === 'List') && (_v71.b.$ === 'List')) {
										var _v72 = _v71.a;
										var listItems1 = _v72.b;
										var _v73 = _v71.b;
										var listItems2 = _v73.b;
										return A2(
											$elm$core$Result$map,
											$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
											$author$project$Morphir$ListOfResults$liftFirstError(
												A3(
													$elm$core$List$map2,
													F2(
														function (item1, item2) {
															return _eval(
																A3(
																	$author$project$Morphir$IR$Value$Apply,
																	_Utils_Tuple0,
																	A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, item1),
																	item2));
														}),
													listItems1,
													listItems2)));
									} else {
										return $elm$core$Result$Err(
											$author$project$Morphir$Value$Error$UnexpectedArguments(args));
									}
								}),
							_eval(arg1),
							_eval(arg2)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map3',
		F2(
			function (_eval, args) {
				if ((((args.b && args.b.b) && args.b.b.b) && args.b.b.b.b) && (!args.b.b.b.b.b)) {
					var fun = args.a;
					var _v75 = args.b;
					var arg1 = _v75.a;
					var _v76 = _v75.b;
					var arg2 = _v76.a;
					var _v77 = _v76.b;
					var arg3 = _v77.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A4(
							$elm$core$Result$map3,
							F3(
								function (evaluatedArg1, evaluatedArg2, evaluatedArg3) {
									var _v78 = _Utils_Tuple3(evaluatedArg1, evaluatedArg2, evaluatedArg3);
									if (((_v78.a.$ === 'List') && (_v78.b.$ === 'List')) && (_v78.c.$ === 'List')) {
										var _v79 = _v78.a;
										var listItems1 = _v79.b;
										var _v80 = _v78.b;
										var listItems2 = _v80.b;
										var _v81 = _v78.c;
										var listItems3 = _v81.b;
										return A2(
											$elm$core$Result$map,
											$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
											$author$project$Morphir$ListOfResults$liftFirstError(
												A4(
													$elm$core$List$map3,
													F3(
														function (item1, item2, item3) {
															return _eval(
																A3(
																	$author$project$Morphir$IR$Value$Apply,
																	_Utils_Tuple0,
																	A3(
																		$author$project$Morphir$IR$Value$Apply,
																		_Utils_Tuple0,
																		A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, item1),
																		item2),
																	item3));
														}),
													listItems1,
													listItems2,
													listItems3)));
									} else {
										return $elm$core$Result$Err(
											$author$project$Morphir$Value$Error$UnexpectedArguments(args));
									}
								}),
							_eval(arg1),
							_eval(arg2),
							_eval(arg3)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map4',
		F2(
			function (_eval, args) {
				if (((((args.b && args.b.b) && args.b.b.b) && args.b.b.b.b) && args.b.b.b.b.b) && (!args.b.b.b.b.b.b)) {
					var fun = args.a;
					var _v83 = args.b;
					var arg1 = _v83.a;
					var _v84 = _v83.b;
					var arg2 = _v84.a;
					var _v85 = _v84.b;
					var arg3 = _v85.a;
					var _v86 = _v85.b;
					var arg4 = _v86.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A5(
							$elm$core$Result$map4,
							F4(
								function (evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4) {
									var _v87 = _List_fromArray(
										[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4]);
									if ((((((((_v87.b && (_v87.a.$ === 'List')) && _v87.b.b) && (_v87.b.a.$ === 'List')) && _v87.b.b.b) && (_v87.b.b.a.$ === 'List')) && _v87.b.b.b.b) && (_v87.b.b.b.a.$ === 'List')) && (!_v87.b.b.b.b.b)) {
										var _v88 = _v87.a;
										var listItems1 = _v88.b;
										var _v89 = _v87.b;
										var _v90 = _v89.a;
										var listItems2 = _v90.b;
										var _v91 = _v89.b;
										var _v92 = _v91.a;
										var listItems3 = _v92.b;
										var _v93 = _v91.b;
										var _v94 = _v93.a;
										var listItems4 = _v94.b;
										return A2(
											$elm$core$Result$map,
											$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
											$author$project$Morphir$ListOfResults$liftFirstError(
												A5(
													$elm$core$List$map4,
													F4(
														function (item1, item2, item3, item4) {
															return _eval(
																A3(
																	$author$project$Morphir$IR$Value$Apply,
																	_Utils_Tuple0,
																	A3(
																		$author$project$Morphir$IR$Value$Apply,
																		_Utils_Tuple0,
																		A3(
																			$author$project$Morphir$IR$Value$Apply,
																			_Utils_Tuple0,
																			A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, item1),
																			item2),
																		item3),
																	item4));
														}),
													listItems1,
													listItems2,
													listItems3,
													listItems4)));
									} else {
										return $elm$core$Result$Err(
											$author$project$Morphir$Value$Error$UnexpectedArguments(args));
									}
								}),
							_eval(arg1),
							_eval(arg2),
							_eval(arg3),
							_eval(arg4)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map5',
		F2(
			function (_eval, args) {
				if ((((((args.b && args.b.b) && args.b.b.b) && args.b.b.b.b) && args.b.b.b.b.b) && args.b.b.b.b.b.b) && (!args.b.b.b.b.b.b.b)) {
					var fun = args.a;
					var _v96 = args.b;
					var arg1 = _v96.a;
					var _v97 = _v96.b;
					var arg2 = _v97.a;
					var _v98 = _v97.b;
					var arg3 = _v98.a;
					var _v99 = _v98.b;
					var arg4 = _v99.a;
					var _v100 = _v99.b;
					var arg5 = _v100.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A6(
							$elm$core$Result$map5,
							F5(
								function (evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4, evaluatedArg5) {
									var _v101 = _List_fromArray(
										[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4, evaluatedArg5]);
									if ((((((((((_v101.b && (_v101.a.$ === 'List')) && _v101.b.b) && (_v101.b.a.$ === 'List')) && _v101.b.b.b) && (_v101.b.b.a.$ === 'List')) && _v101.b.b.b.b) && (_v101.b.b.b.a.$ === 'List')) && _v101.b.b.b.b.b) && (_v101.b.b.b.b.a.$ === 'List')) && (!_v101.b.b.b.b.b.b)) {
										var _v102 = _v101.a;
										var listItems1 = _v102.b;
										var _v103 = _v101.b;
										var _v104 = _v103.a;
										var listItems2 = _v104.b;
										var _v105 = _v103.b;
										var _v106 = _v105.a;
										var listItems3 = _v106.b;
										var _v107 = _v105.b;
										var _v108 = _v107.a;
										var listItems4 = _v108.b;
										var _v109 = _v107.b;
										var _v110 = _v109.a;
										var listItems5 = _v110.b;
										return A2(
											$elm$core$Result$map,
											$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
											$author$project$Morphir$ListOfResults$liftFirstError(
												A6(
													$elm$core$List$map5,
													F5(
														function (item1, item2, item3, item4, item5) {
															return _eval(
																A3(
																	$author$project$Morphir$IR$Value$Apply,
																	_Utils_Tuple0,
																	A3(
																		$author$project$Morphir$IR$Value$Apply,
																		_Utils_Tuple0,
																		A3(
																			$author$project$Morphir$IR$Value$Apply,
																			_Utils_Tuple0,
																			A3(
																				$author$project$Morphir$IR$Value$Apply,
																				_Utils_Tuple0,
																				A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, item1),
																				item2),
																			item3),
																		item4),
																	item5));
														}),
													listItems1,
													listItems2,
													listItems3,
													listItems4,
													listItems5)));
									} else {
										return $elm$core$Result$Err(
											$author$project$Morphir$Value$Error$UnexpectedArguments(args));
									}
								}),
							_eval(arg1),
							_eval(arg2),
							_eval(arg3),
							_eval(arg4),
							_eval(arg5)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'concatMap',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v112 = args.b;
					var arg1 = _v112.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if (evaluatedArg1.$ === 'List') {
								var listItems = evaluatedArg1.b;
								var evaluate = F2(
									function (resultList, items) {
										evaluate:
										while (true) {
											if (!items.b) {
												return $elm$core$Result$Ok(resultList);
											} else {
												var head1 = items.a;
												var tail1 = items.b;
												var _v115 = _eval(
													A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, head1));
												if (_v115.$ === 'Ok') {
													if (_v115.a.$ === 'List') {
														var _v116 = _v115.a;
														var list = _v116.b;
														var $temp$resultList = _Utils_ap(resultList, list),
															$temp$items = tail1;
														resultList = $temp$resultList;
														items = $temp$items;
														continue evaluate;
													} else {
														var other = _v115.a;
														return $elm$core$Result$Err(
															$author$project$Morphir$Value$Error$ExpectedList(other));
													}
												} else {
													var other = _v115.a;
													return $elm$core$Result$Err(other);
												}
											}
										}
									});
								return A2(
									$elm$core$Result$map,
									$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
									A2(evaluate, _List_Nil, listItems));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'isEmpty',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$List$isEmpty,
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple2(
		'head',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$List$head,
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeMaybe($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'tail',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$List$tail,
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeMaybe(
				$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw)))),
		_Utils_Tuple2(
		'take',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$List$take,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'drop',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$List$drop,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeList($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))),
		_Utils_Tuple2(
		'partition',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v118 = args.b;
					var arg1 = _v118.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if (evaluatedArg1.$ === 'List') {
								var listItems = evaluatedArg1.b;
								var evaluate = F3(
									function (list1, list2, items) {
										evaluate:
										while (true) {
											if (!items.b) {
												return $elm$core$Result$Ok(
													_Utils_Tuple2(list1, list2));
											} else {
												var head1 = items.a;
												var tail1 = items.b;
												var _v121 = _eval(
													A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, head1));
												if (_v121.$ === 'Ok') {
													if ((_v121.a.$ === 'Literal') && (_v121.a.b.$ === 'BoolLiteral')) {
														if (_v121.a.b.a) {
															var _v122 = _v121.a;
															var $temp$list1 = _Utils_ap(
																list1,
																_List_fromArray(
																	[head1])),
																$temp$list2 = list2,
																$temp$items = tail1;
															list1 = $temp$list1;
															list2 = $temp$list2;
															items = $temp$items;
															continue evaluate;
														} else {
															var _v123 = _v121.a;
															var $temp$list1 = list1,
																$temp$list2 = _Utils_ap(
																list2,
																_List_fromArray(
																	[head1])),
																$temp$items = tail1;
															list1 = $temp$list1;
															list2 = $temp$list2;
															items = $temp$items;
															continue evaluate;
														}
													} else {
														var other = _v121.a;
														return $elm$core$Result$Err(
															$author$project$Morphir$Value$Error$ExpectedBoolLiteral(other));
													}
												} else {
													var other = _v121.a;
													return $elm$core$Result$Err(other);
												}
											}
										}
									});
								return A2(
									$elm$core$Result$map,
									function (_v124) {
										var list1 = _v124.a;
										var list2 = _v124.b;
										return A2(
											$author$project$Morphir$IR$Value$Tuple,
											_Utils_Tuple0,
											_List_fromArray(
												[
													A2($author$project$Morphir$IR$Value$List, _Utils_Tuple0, list1),
													A2($author$project$Morphir$IR$Value$List, _Utils_Tuple0, list2)
												]));
									},
									A3(evaluate, _List_Nil, _List_Nil, listItems));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedList(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'unzip',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$List$unzip,
			$author$project$Morphir$Value$Native$decodeList(
				$author$project$Morphir$Value$Native$decodeTuple2(
					_Utils_Tuple2($author$project$Morphir$Value$Native$decodeRaw, $author$project$Morphir$Value$Native$decodeRaw))),
			$author$project$Morphir$Value$Native$encodeTuple2(
				_Utils_Tuple2(
					$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw),
					$author$project$Morphir$Value$Native$encodeList($author$project$Morphir$Value$Native$encodeRaw))))),
		_Utils_Tuple2(
		'innerJoin',
		$author$project$Morphir$IR$SDK$List$nativeJoin(false)),
		_Utils_Tuple2(
		'leftJoin',
		$author$project$Morphir$IR$SDK$List$nativeJoin(true))
	]);
var $author$project$Morphir$Value$Error$ErrorWhileEvaluatingDerivedType = function (a) {
	return {$: 'ErrorWhileEvaluatingDerivedType', a: a};
};
var $author$project$Morphir$Value$Error$ExpectedDerivedType = F2(
	function (a, b) {
		return {$: 'ExpectedDerivedType', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $justinmimbs$date$Date$deadEndToString = function (_v0) {
	var problem = _v0.problem;
	if (problem.$ === 'Problem') {
		var message = problem.a;
		return message;
	} else {
		return 'Expected a date in ISO 8601 format';
	}
};
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $justinmimbs$date$Date$MonthAndDay = F2(
	function (a, b) {
		return {$: 'MonthAndDay', a: a, b: b};
	});
var $justinmimbs$date$Date$OrdinalDay = function (a) {
	return {$: 'OrdinalDay', a: a};
};
var $justinmimbs$date$Date$WeekAndWeekday = F2(
	function (a, b) {
		return {$: 'WeekAndWeekday', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $elm$parser$Parser$Advanced$commit = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, true, a, s);
		});
};
var $elm$parser$Parser$commit = $elm$parser$Parser$Advanced$commit;
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$mapChompedString = $elm$parser$Parser$Advanced$mapChompedString;
var $justinmimbs$date$Date$int1 = A2(
	$elm$parser$Parser$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	$elm$parser$Parser$chompIf($elm$core$Char$isDigit));
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $justinmimbs$date$Date$int2 = A2(
	$elm$parser$Parser$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(_Utils_Tuple0),
			$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
		$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
var $justinmimbs$date$Date$int3 = A2(
	$elm$parser$Parser$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_Utils_Tuple0),
				$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
			$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
		$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$token = function (str) {
	return $elm$parser$Parser$Advanced$token(
		$elm$parser$Parser$toToken(str));
};
var $justinmimbs$date$Date$dayOfYear = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$token('-')),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$backtrackable(
						A2(
							$elm$parser$Parser$andThen,
							$elm$parser$Parser$commit,
							A2($elm$parser$Parser$map, $justinmimbs$date$Date$OrdinalDay, $justinmimbs$date$Date$int3))),
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed($justinmimbs$date$Date$MonthAndDay),
							$justinmimbs$date$Date$int2),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$token('-')),
									$justinmimbs$date$Date$int2),
									$elm$parser$Parser$succeed(1)
								]))),
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($justinmimbs$date$Date$WeekAndWeekday),
								$elm$parser$Parser$token('W')),
							$justinmimbs$date$Date$int2),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$token('-')),
									$justinmimbs$date$Date$int1),
									$elm$parser$Parser$succeed(1)
								])))
					]))),
			$elm$parser$Parser$backtrackable(
			A2(
				$elm$parser$Parser$andThen,
				$elm$parser$Parser$commit,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed($justinmimbs$date$Date$MonthAndDay),
						$justinmimbs$date$Date$int2),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$justinmimbs$date$Date$int2,
								$elm$parser$Parser$succeed(1)
							]))))),
			A2($elm$parser$Parser$map, $justinmimbs$date$Date$OrdinalDay, $justinmimbs$date$Date$int3),
			A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($justinmimbs$date$Date$WeekAndWeekday),
					$elm$parser$Parser$token('W')),
				$justinmimbs$date$Date$int2),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$justinmimbs$date$Date$int1,
						$elm$parser$Parser$succeed(1)
					]))),
			$elm$parser$Parser$succeed(
			$justinmimbs$date$Date$OrdinalDay(1))
		]));
var $justinmimbs$date$Date$RD = function (a) {
	return {$: 'RD', a: a};
};
var $justinmimbs$date$Date$isLeapYear = function (y) {
	return ((!A2($elm$core$Basics$modBy, 4, y)) && (!(!A2($elm$core$Basics$modBy, 100, y)))) || (!A2($elm$core$Basics$modBy, 400, y));
};
var $justinmimbs$date$Date$daysBeforeMonth = F2(
	function (y, m) {
		var leapDays = $justinmimbs$date$Date$isLeapYear(y) ? 1 : 0;
		switch (m.$) {
			case 'Jan':
				return 0;
			case 'Feb':
				return 31;
			case 'Mar':
				return 59 + leapDays;
			case 'Apr':
				return 90 + leapDays;
			case 'May':
				return 120 + leapDays;
			case 'Jun':
				return 151 + leapDays;
			case 'Jul':
				return 181 + leapDays;
			case 'Aug':
				return 212 + leapDays;
			case 'Sep':
				return 243 + leapDays;
			case 'Oct':
				return 273 + leapDays;
			case 'Nov':
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});
var $justinmimbs$date$Date$floorDiv = F2(
	function (a, b) {
		return $elm$core$Basics$floor(a / b);
	});
var $justinmimbs$date$Date$daysBeforeYear = function (y1) {
	var y = y1 - 1;
	var leapYears = (A2($justinmimbs$date$Date$floorDiv, y, 4) - A2($justinmimbs$date$Date$floorDiv, y, 100)) + A2($justinmimbs$date$Date$floorDiv, y, 400);
	return (365 * y) + leapYears;
};
var $justinmimbs$date$Date$daysInMonth = F2(
	function (y, m) {
		switch (m.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $justinmimbs$date$Date$isBetweenInt = F3(
	function (a, b, x) {
		return (_Utils_cmp(a, x) < 1) && (_Utils_cmp(x, b) < 1);
	});
var $justinmimbs$date$Date$monthToName = function (m) {
	switch (m.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $justinmimbs$date$Date$numberToMonth = function (mn) {
	var _v0 = A2($elm$core$Basics$max, 1, mn);
	switch (_v0) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		default:
			return $elm$time$Time$Dec;
	}
};
var $justinmimbs$date$Date$fromCalendarParts = F3(
	function (y, mn, d) {
		return (!A3($justinmimbs$date$Date$isBetweenInt, 1, 12, mn)) ? $elm$core$Result$Err(
			'Invalid date: ' + (('month ' + ($elm$core$String$fromInt(mn) + ' is out of range')) + (' (1 to 12)' + ('; received (year ' + ($elm$core$String$fromInt(y) + (', month ' + ($elm$core$String$fromInt(mn) + (', day ' + ($elm$core$String$fromInt(d) + ')'))))))))) : ((!A3(
			$justinmimbs$date$Date$isBetweenInt,
			1,
			A2(
				$justinmimbs$date$Date$daysInMonth,
				y,
				$justinmimbs$date$Date$numberToMonth(mn)),
			d)) ? $elm$core$Result$Err(
			'Invalid date: ' + (('day ' + ($elm$core$String$fromInt(d) + ' is out of range')) + ((' (1 to ' + ($elm$core$String$fromInt(
				A2(
					$justinmimbs$date$Date$daysInMonth,
					y,
					$justinmimbs$date$Date$numberToMonth(mn))) + ')')) + ((' for ' + $justinmimbs$date$Date$monthToName(
				$justinmimbs$date$Date$numberToMonth(mn))) + ((((mn === 2) && (d === 29)) ? (' (' + ($elm$core$String$fromInt(y) + ' is not a leap year)')) : '') + ('; received (year ' + ($elm$core$String$fromInt(y) + (', month ' + ($elm$core$String$fromInt(mn) + (', day ' + ($elm$core$String$fromInt(d) + ')'))))))))))) : $elm$core$Result$Ok(
			$justinmimbs$date$Date$RD(
				($justinmimbs$date$Date$daysBeforeYear(y) + A2(
					$justinmimbs$date$Date$daysBeforeMonth,
					y,
					$justinmimbs$date$Date$numberToMonth(mn))) + d)));
	});
var $justinmimbs$date$Date$fromOrdinalParts = F2(
	function (y, od) {
		var daysInYear = $justinmimbs$date$Date$isLeapYear(y) ? 366 : 365;
		return (!A3($justinmimbs$date$Date$isBetweenInt, 1, daysInYear, od)) ? $elm$core$Result$Err(
			'Invalid ordinal date: ' + (('ordinal-day ' + ($elm$core$String$fromInt(od) + ' is out of range')) + ((' (1 to ' + ($elm$core$String$fromInt(daysInYear) + ')')) + ((' for ' + $elm$core$String$fromInt(y)) + ('; received (year ' + ($elm$core$String$fromInt(y) + (', ordinal-day ' + ($elm$core$String$fromInt(od) + ')')))))))) : $elm$core$Result$Ok(
			$justinmimbs$date$Date$RD(
				$justinmimbs$date$Date$daysBeforeYear(y) + od));
	});
var $justinmimbs$date$Date$weekdayNumber = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($elm$core$Basics$modBy, 7, rd);
	if (!_v1) {
		return 7;
	} else {
		var n = _v1;
		return n;
	}
};
var $justinmimbs$date$Date$daysBeforeWeekYear = function (y) {
	var jan4 = $justinmimbs$date$Date$daysBeforeYear(y) + 4;
	return jan4 - $justinmimbs$date$Date$weekdayNumber(
		$justinmimbs$date$Date$RD(jan4));
};
var $justinmimbs$date$Date$firstOfYear = function (y) {
	return $justinmimbs$date$Date$RD(
		$justinmimbs$date$Date$daysBeforeYear(y) + 1);
};
var $justinmimbs$date$Date$is53WeekYear = function (y) {
	var wdnJan1 = $justinmimbs$date$Date$weekdayNumber(
		$justinmimbs$date$Date$firstOfYear(y));
	return (wdnJan1 === 4) || ((wdnJan1 === 3) && $justinmimbs$date$Date$isLeapYear(y));
};
var $justinmimbs$date$Date$fromWeekParts = F3(
	function (wy, wn, wdn) {
		var weeksInYear = $justinmimbs$date$Date$is53WeekYear(wy) ? 53 : 52;
		return (!A3($justinmimbs$date$Date$isBetweenInt, 1, weeksInYear, wn)) ? $elm$core$Result$Err(
			'Invalid week date: ' + (('week ' + ($elm$core$String$fromInt(wn) + ' is out of range')) + ((' (1 to ' + ($elm$core$String$fromInt(weeksInYear) + ')')) + ((' for ' + $elm$core$String$fromInt(wy)) + ('; received (year ' + ($elm$core$String$fromInt(wy) + (', week ' + ($elm$core$String$fromInt(wn) + (', weekday ' + ($elm$core$String$fromInt(wdn) + ')')))))))))) : ((!A3($justinmimbs$date$Date$isBetweenInt, 1, 7, wdn)) ? $elm$core$Result$Err(
			'Invalid week date: ' + (('weekday ' + ($elm$core$String$fromInt(wdn) + ' is out of range')) + (' (1 to 7)' + ('; received (year ' + ($elm$core$String$fromInt(wy) + (', week ' + ($elm$core$String$fromInt(wn) + (', weekday ' + ($elm$core$String$fromInt(wdn) + ')'))))))))) : $elm$core$Result$Ok(
			$justinmimbs$date$Date$RD(
				($justinmimbs$date$Date$daysBeforeWeekYear(wy) + ((wn - 1) * 7)) + wdn)));
	});
var $justinmimbs$date$Date$fromYearAndDayOfYear = function (_v0) {
	var y = _v0.a;
	var doy = _v0.b;
	switch (doy.$) {
		case 'MonthAndDay':
			var mn = doy.a;
			var d = doy.b;
			return A3($justinmimbs$date$Date$fromCalendarParts, y, mn, d);
		case 'WeekAndWeekday':
			var wn = doy.a;
			var wdn = doy.b;
			return A3($justinmimbs$date$Date$fromWeekParts, y, wn, wdn);
		default:
			var od = doy.a;
			return A2($justinmimbs$date$Date$fromOrdinalParts, y, od);
	}
};
var $justinmimbs$date$Date$int4 = A2(
	$elm$parser$Parser$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(_Utils_Tuple0),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									$elm$parser$Parser$chompIf(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr('-'));
									}),
									$elm$parser$Parser$succeed(_Utils_Tuple0)
								]))),
					$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
				$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
			$elm$parser$Parser$chompIf($elm$core$Char$isDigit)),
		$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $justinmimbs$date$Date$resultToParser = function (result) {
	if (result.$ === 'Ok') {
		var x = result.a;
		return $elm$parser$Parser$succeed(x);
	} else {
		var message = result.a;
		return $elm$parser$Parser$problem(message);
	}
};
var $justinmimbs$date$Date$parser = A2(
	$elm$parser$Parser$andThen,
	A2($elm$core$Basics$composeR, $justinmimbs$date$Date$fromYearAndDayOfYear, $justinmimbs$date$Date$resultToParser),
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Tuple$pair),
			$justinmimbs$date$Date$int4),
		$justinmimbs$date$Date$dayOfYear));
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $justinmimbs$date$Date$fromIsoString = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run(
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			A2(
				$elm$parser$Parser$ignorer,
				$justinmimbs$date$Date$parser,
				A2(
					$elm$parser$Parser$andThen,
					$justinmimbs$date$Date$resultToParser,
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								A2($elm$parser$Parser$map, $elm$core$Result$Ok, $elm$parser$Parser$end),
								A2(
								$elm$parser$Parser$map,
								$elm$core$Basics$always(
									$elm$core$Result$Err('Expected a date only, not a date and time')),
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$eq(
										_Utils_chr('T')))),
								$elm$parser$Parser$succeed(
								$elm$core$Result$Err('Expected a date only'))
							])))))),
	$elm$core$Result$mapError(
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$map($justinmimbs$date$Date$deadEndToString),
				$elm$core$Maybe$withDefault('')))));
var $author$project$Morphir$SDK$LocalDate$fromISO = function (iso) {
	return $elm$core$Result$toMaybe(
		$justinmimbs$date$Date$fromIsoString(iso));
};
var $author$project$Morphir$Value$Native$decodeLocalDate = F2(
	function (_v0, value) {
		if (((((((((((((((((((((((((((((((((value.$ === 'Apply') && (value.b.$ === 'Reference')) && value.b.b.a.b) && value.b.b.a.a.b) && (value.b.b.a.a.a === 'morphir')) && (!value.b.b.a.a.b.b)) && value.b.b.a.b.b) && value.b.b.a.b.a.b) && (value.b.b.a.b.a.a === 's')) && value.b.b.a.b.a.b.b) && (value.b.b.a.b.a.b.a === 'd')) && value.b.b.a.b.a.b.b.b) && (value.b.b.a.b.a.b.b.a === 'k')) && (!value.b.b.a.b.a.b.b.b.b)) && (!value.b.b.a.b.b.b)) && value.b.b.b.b) && value.b.b.b.a.b) && (value.b.b.b.a.a === 'local')) && value.b.b.b.a.b.b) && (value.b.b.b.a.b.a === 'date')) && (!value.b.b.b.a.b.b.b)) && (!value.b.b.b.b.b)) && value.b.b.c.b) && (value.b.b.c.a === 'from')) && value.b.b.c.b.b) && (value.b.b.c.b.a === 'i')) && value.b.b.c.b.b.b) && (value.b.b.c.b.b.a === 's')) && value.b.b.c.b.b.b.b) && (value.b.b.c.b.b.b.a === 'o')) && (!value.b.b.c.b.b.b.b.b)) && (value.c.$ === 'Literal')) && (value.c.b.$ === 'StringLiteral')) {
			var _v2 = value.b;
			var _v3 = _v2.b;
			var _v4 = _v3.a;
			var _v5 = _v4.a;
			var _v6 = _v4.b;
			var _v7 = _v6.a;
			var _v8 = _v7.b;
			var _v9 = _v8.b;
			var _v10 = _v3.b;
			var _v11 = _v10.a;
			var _v12 = _v11.b;
			var _v13 = _v3.c;
			var _v14 = _v13.b;
			var _v15 = _v14.b;
			var _v16 = _v15.b;
			var _v17 = value.c;
			var str = _v17.b.a;
			var _v18 = $author$project$Morphir$SDK$LocalDate$fromISO(str);
			if (_v18.$ === 'Just') {
				var localDate = _v18.a;
				return $elm$core$Result$Ok(localDate);
			} else {
				return $elm$core$Result$Err(
					$author$project$Morphir$Value$Error$ErrorWhileEvaluatingDerivedType('Invalid ISO format: ' + str));
			}
		} else {
			return $elm$core$Result$Err(
				A2(
					$author$project$Morphir$Value$Error$ExpectedDerivedType,
					_Utils_Tuple3(
						_List_fromArray(
							[
								_List_fromArray(
								['morphir']),
								_List_fromArray(
								['s', 'd', 'k'])
							]),
						_List_fromArray(
							[
								_List_fromArray(
								['local', 'date'])
							]),
						_List_fromArray(
							['local', 'date'])),
					value));
		}
	});
var $justinmimbs$date$Date$monthToNumber = function (m) {
	switch (m.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $justinmimbs$date$Date$toCalendarDateHelp = F3(
	function (y, m, d) {
		toCalendarDateHelp:
		while (true) {
			var monthDays = A2($justinmimbs$date$Date$daysInMonth, y, m);
			var mn = $justinmimbs$date$Date$monthToNumber(m);
			if ((mn < 12) && (_Utils_cmp(d, monthDays) > 0)) {
				var $temp$y = y,
					$temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1),
					$temp$d = d - monthDays;
				y = $temp$y;
				m = $temp$m;
				d = $temp$d;
				continue toCalendarDateHelp;
			} else {
				return {day: d, month: m, year: y};
			}
		}
	});
var $justinmimbs$date$Date$divWithRemainder = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($justinmimbs$date$Date$floorDiv, a, b),
			A2($elm$core$Basics$modBy, b, a));
	});
var $justinmimbs$date$Date$year = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($justinmimbs$date$Date$divWithRemainder, rd, 146097);
	var n400 = _v1.a;
	var r400 = _v1.b;
	var _v2 = A2($justinmimbs$date$Date$divWithRemainder, r400, 36524);
	var n100 = _v2.a;
	var r100 = _v2.b;
	var _v3 = A2($justinmimbs$date$Date$divWithRemainder, r100, 1461);
	var n4 = _v3.a;
	var r4 = _v3.b;
	var _v4 = A2($justinmimbs$date$Date$divWithRemainder, r4, 365);
	var n1 = _v4.a;
	var r1 = _v4.b;
	var n = (!r1) ? 0 : 1;
	return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
};
var $justinmimbs$date$Date$toOrdinalDate = function (_v0) {
	var rd = _v0.a;
	var y = $justinmimbs$date$Date$year(
		$justinmimbs$date$Date$RD(rd));
	return {
		ordinalDay: rd - $justinmimbs$date$Date$daysBeforeYear(y),
		year: y
	};
};
var $justinmimbs$date$Date$toCalendarDate = function (_v0) {
	var rd = _v0.a;
	var date = $justinmimbs$date$Date$toOrdinalDate(
		$justinmimbs$date$Date$RD(rd));
	return A3($justinmimbs$date$Date$toCalendarDateHelp, date.year, $elm$time$Time$Jan, date.ordinalDay);
};
var $justinmimbs$date$Date$day = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.day;
	});
var $justinmimbs$date$Date$month = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.month;
	});
var $justinmimbs$date$Date$monthNumber = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToNumber);
var $justinmimbs$date$Date$ordinalDay = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toOrdinalDate,
	function ($) {
		return $.ordinalDay;
	});
var $justinmimbs$date$Date$padSignedInt = F2(
	function (length, _int) {
		return _Utils_ap(
			(_int < 0) ? '-' : '',
			A3(
				$elm$core$String$padLeft,
				length,
				_Utils_chr('0'),
				$elm$core$String$fromInt(
					$elm$core$Basics$abs(_int))));
	});
var $justinmimbs$date$Date$monthToQuarter = function (m) {
	return (($justinmimbs$date$Date$monthToNumber(m) + 2) / 3) | 0;
};
var $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToQuarter);
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Sun = {$: 'Sun'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $justinmimbs$date$Date$numberToWeekday = function (wdn) {
	var _v0 = A2($elm$core$Basics$max, 1, wdn);
	switch (_v0) {
		case 1:
			return $elm$time$Time$Mon;
		case 2:
			return $elm$time$Time$Tue;
		case 3:
			return $elm$time$Time$Wed;
		case 4:
			return $elm$time$Time$Thu;
		case 5:
			return $elm$time$Time$Fri;
		case 6:
			return $elm$time$Time$Sat;
		default:
			return $elm$time$Time$Sun;
	}
};
var $justinmimbs$date$Date$toWeekDate = function (_v0) {
	var rd = _v0.a;
	var wdn = $justinmimbs$date$Date$weekdayNumber(
		$justinmimbs$date$Date$RD(rd));
	var wy = $justinmimbs$date$Date$year(
		$justinmimbs$date$Date$RD(rd + (4 - wdn)));
	var week1Day1 = $justinmimbs$date$Date$daysBeforeWeekYear(wy) + 1;
	return {
		weekNumber: 1 + (((rd - week1Day1) / 7) | 0),
		weekYear: wy,
		weekday: $justinmimbs$date$Date$numberToWeekday(wdn)
	};
};
var $justinmimbs$date$Date$weekNumber = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toWeekDate,
	function ($) {
		return $.weekNumber;
	});
var $justinmimbs$date$Date$weekYear = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toWeekDate,
	function ($) {
		return $.weekYear;
	});
var $justinmimbs$date$Date$weekday = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$weekdayNumber, $justinmimbs$date$Date$numberToWeekday);
var $justinmimbs$date$Date$ordinalSuffix = function (n) {
	var nn = A2($elm$core$Basics$modBy, 100, n);
	var _v0 = A2(
		$elm$core$Basics$min,
		(nn < 20) ? nn : A2($elm$core$Basics$modBy, 10, nn),
		4);
	switch (_v0) {
		case 1:
			return 'st';
		case 2:
			return 'nd';
		case 3:
			return 'rd';
		default:
			return 'th';
	}
};
var $justinmimbs$date$Date$withOrdinalSuffix = function (n) {
	return _Utils_ap(
		$elm$core$String$fromInt(n),
		$justinmimbs$date$Date$ordinalSuffix(n));
};
var $justinmimbs$date$Date$formatField = F4(
	function (language, _char, length, date) {
		switch (_char.valueOf()) {
			case 'y':
				if (length === 2) {
					return A2(
						$elm$core$String$right,
						2,
						A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$year(date))));
				} else {
					return A2(
						$justinmimbs$date$Date$padSignedInt,
						length,
						$justinmimbs$date$Date$year(date));
				}
			case 'Y':
				if (length === 2) {
					return A2(
						$elm$core$String$right,
						2,
						A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$weekYear(date))));
				} else {
					return A2(
						$justinmimbs$date$Date$padSignedInt,
						length,
						$justinmimbs$date$Date$weekYear(date));
				}
			case 'Q':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$quarter(date));
					case 2:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$quarter(date));
					case 3:
						return 'Q' + $elm$core$String$fromInt(
							$justinmimbs$date$Date$quarter(date));
					case 4:
						return $justinmimbs$date$Date$withOrdinalSuffix(
							$justinmimbs$date$Date$quarter(date));
					case 5:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$quarter(date));
					default:
						return '';
				}
			case 'M':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$monthNumber(date));
					case 2:
						return A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$monthNumber(date)));
					case 3:
						return language.monthNameShort(
							$justinmimbs$date$Date$month(date));
					case 4:
						return language.monthName(
							$justinmimbs$date$Date$month(date));
					case 5:
						return A2(
							$elm$core$String$left,
							1,
							language.monthNameShort(
								$justinmimbs$date$Date$month(date)));
					default:
						return '';
				}
			case 'w':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$weekNumber(date));
					case 2:
						return A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$weekNumber(date)));
					default:
						return '';
				}
			case 'd':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$day(date));
					case 2:
						return A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$day(date)));
					case 3:
						return language.dayWithSuffix(
							$justinmimbs$date$Date$day(date));
					default:
						return '';
				}
			case 'D':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$ordinalDay(date));
					case 2:
						return A3(
							$elm$core$String$padLeft,
							2,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$ordinalDay(date)));
					case 3:
						return A3(
							$elm$core$String$padLeft,
							3,
							_Utils_chr('0'),
							$elm$core$String$fromInt(
								$justinmimbs$date$Date$ordinalDay(date)));
					default:
						return '';
				}
			case 'E':
				switch (length) {
					case 1:
						return language.weekdayNameShort(
							$justinmimbs$date$Date$weekday(date));
					case 2:
						return language.weekdayNameShort(
							$justinmimbs$date$Date$weekday(date));
					case 3:
						return language.weekdayNameShort(
							$justinmimbs$date$Date$weekday(date));
					case 4:
						return language.weekdayName(
							$justinmimbs$date$Date$weekday(date));
					case 5:
						return A2(
							$elm$core$String$left,
							1,
							language.weekdayNameShort(
								$justinmimbs$date$Date$weekday(date)));
					case 6:
						return A2(
							$elm$core$String$left,
							2,
							language.weekdayNameShort(
								$justinmimbs$date$Date$weekday(date)));
					default:
						return '';
				}
			case 'e':
				switch (length) {
					case 1:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$weekdayNumber(date));
					case 2:
						return $elm$core$String$fromInt(
							$justinmimbs$date$Date$weekdayNumber(date));
					default:
						return A4(
							$justinmimbs$date$Date$formatField,
							language,
							_Utils_chr('E'),
							length,
							date);
				}
			default:
				return '';
		}
	});
var $justinmimbs$date$Date$formatWithTokens = F3(
	function (language, tokens, date) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (token, formatted) {
					if (token.$ === 'Field') {
						var _char = token.a;
						var length = token.b;
						return _Utils_ap(
							A4($justinmimbs$date$Date$formatField, language, _char, length, date),
							formatted);
					} else {
						var str = token.a;
						return _Utils_ap(str, formatted);
					}
				}),
			'',
			tokens);
	});
var $justinmimbs$date$Pattern$Literal = function (a) {
	return {$: 'Literal', a: a};
};
var $justinmimbs$date$Pattern$escapedQuote = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$justinmimbs$date$Pattern$Literal('\'')),
	$elm$parser$Parser$token('\'\''));
var $justinmimbs$date$Pattern$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$Advanced$getOffset = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.offset, s);
	});
var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $justinmimbs$date$Pattern$fieldRepeats = function (str) {
	var _v0 = $elm$core$String$toList(str);
	if (_v0.b && (!_v0.b.b)) {
		var _char = _v0.a;
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					F2(
						function (x, y) {
							return A2($justinmimbs$date$Pattern$Field, _char, 1 + (y - x));
						})),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompWhile(
						$elm$core$Basics$eq(_char)))),
			$elm$parser$Parser$getOffset);
	} else {
		return $elm$parser$Parser$problem('expected exactly one char');
	}
};
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $justinmimbs$date$Pattern$field = A2(
	$elm$parser$Parser$andThen,
	$justinmimbs$date$Pattern$fieldRepeats,
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompIf($elm$core$Char$isAlpha)));
var $justinmimbs$date$Pattern$finalize = A2(
	$elm$core$List$foldl,
	F2(
		function (token, tokens) {
			var _v0 = _Utils_Tuple2(token, tokens);
			if (((_v0.a.$ === 'Literal') && _v0.b.b) && (_v0.b.a.$ === 'Literal')) {
				var x = _v0.a.a;
				var _v1 = _v0.b;
				var y = _v1.a.a;
				var rest = _v1.b;
				return A2(
					$elm$core$List$cons,
					$justinmimbs$date$Pattern$Literal(
						_Utils_ap(x, y)),
					rest);
			} else {
				return A2($elm$core$List$cons, token, tokens);
			}
		}),
	_List_Nil);
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = thunk(_Utils_Tuple0);
			var parse = _v0.a;
			return parse(s);
		});
};
var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
var $justinmimbs$date$Pattern$isLiteralChar = function (_char) {
	return (!_Utils_eq(
		_char,
		_Utils_chr('\''))) && (!$elm$core$Char$isAlpha(_char));
};
var $justinmimbs$date$Pattern$literal = A2(
	$elm$parser$Parser$map,
	$justinmimbs$date$Pattern$Literal,
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_Utils_Tuple0),
				$elm$parser$Parser$chompIf($justinmimbs$date$Pattern$isLiteralChar)),
			$elm$parser$Parser$chompWhile($justinmimbs$date$Pattern$isLiteralChar))));
var $justinmimbs$date$Pattern$quotedHelp = function (result) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$andThen,
				function (str) {
					return $justinmimbs$date$Pattern$quotedHelp(
						_Utils_ap(result, str));
				},
				$elm$parser$Parser$getChompedString(
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed(_Utils_Tuple0),
							$elm$parser$Parser$chompIf(
								$elm$core$Basics$neq(
									_Utils_chr('\'')))),
						$elm$parser$Parser$chompWhile(
							$elm$core$Basics$neq(
								_Utils_chr('\'')))))),
				A2(
				$elm$parser$Parser$andThen,
				function (_v0) {
					return $justinmimbs$date$Pattern$quotedHelp(result + '\'');
				},
				$elm$parser$Parser$token('\'\'')),
				$elm$parser$Parser$succeed(result)
			]));
};
var $justinmimbs$date$Pattern$quoted = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($justinmimbs$date$Pattern$Literal),
		$elm$parser$Parser$chompIf(
			$elm$core$Basics$eq(
				_Utils_chr('\'')))),
	A2(
		$elm$parser$Parser$ignorer,
		$justinmimbs$date$Pattern$quotedHelp(''),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$chompIf(
					$elm$core$Basics$eq(
						_Utils_chr('\''))),
					$elm$parser$Parser$end
				]))));
var $justinmimbs$date$Pattern$patternHelp = function (tokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$andThen,
				function (token) {
					return $justinmimbs$date$Pattern$patternHelp(
						A2($elm$core$List$cons, token, tokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$justinmimbs$date$Pattern$field, $justinmimbs$date$Pattern$literal, $justinmimbs$date$Pattern$escapedQuote, $justinmimbs$date$Pattern$quoted]))),
				$elm$parser$Parser$lazy(
				function (_v0) {
					return $elm$parser$Parser$succeed(
						$justinmimbs$date$Pattern$finalize(tokens));
				})
			]));
};
var $justinmimbs$date$Pattern$fromString = function (str) {
	return A2(
		$elm$core$Result$withDefault,
		_List_fromArray(
			[
				$justinmimbs$date$Pattern$Literal(str)
			]),
		A2(
			$elm$parser$Parser$run,
			$justinmimbs$date$Pattern$patternHelp(_List_Nil),
			str));
};
var $justinmimbs$date$Date$formatWithLanguage = F2(
	function (language, pattern) {
		var tokens = $elm$core$List$reverse(
			$justinmimbs$date$Pattern$fromString(pattern));
		return A2($justinmimbs$date$Date$formatWithTokens, language, tokens);
	});
var $justinmimbs$date$Date$weekdayToName = function (wd) {
	switch (wd.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $justinmimbs$date$Date$language_en = {
	dayWithSuffix: $justinmimbs$date$Date$withOrdinalSuffix,
	monthName: $justinmimbs$date$Date$monthToName,
	monthNameShort: A2(
		$elm$core$Basics$composeR,
		$justinmimbs$date$Date$monthToName,
		$elm$core$String$left(3)),
	weekdayName: $justinmimbs$date$Date$weekdayToName,
	weekdayNameShort: A2(
		$elm$core$Basics$composeR,
		$justinmimbs$date$Date$weekdayToName,
		$elm$core$String$left(3))
};
var $justinmimbs$date$Date$format = function (pattern) {
	return A2($justinmimbs$date$Date$formatWithLanguage, $justinmimbs$date$Date$language_en, pattern);
};
var $justinmimbs$date$Date$toIsoString = $justinmimbs$date$Date$format('yyyy-MM-dd');
var $author$project$Morphir$SDK$LocalDate$toISOString = function (localDate) {
	return $justinmimbs$date$Date$toIsoString(localDate);
};
var $author$project$Morphir$Value$Native$encodeLocalDate = function (localDate) {
	return $elm$core$Result$Ok(
		A3(
			$author$project$Morphir$IR$Value$Apply,
			_Utils_Tuple0,
			A2(
				$author$project$Morphir$IR$Value$Reference,
				_Utils_Tuple0,
				_Utils_Tuple3(
					_List_fromArray(
						[
							_List_fromArray(
							['morphir']),
							_List_fromArray(
							['s', 'd', 'k'])
						]),
					_List_fromArray(
						[
							_List_fromArray(
							['local', 'date'])
						]),
					_List_fromArray(
						['from', 'i', 's', 'o']))),
			A2(
				$author$project$Morphir$IR$Value$Literal,
				_Utils_Tuple0,
				$author$project$Morphir$IR$Literal$StringLiteral(
					$author$project$Morphir$SDK$LocalDate$toISOString(localDate)))));
};
var $author$project$Morphir$IR$SDK$LocalDate$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple2(
		'fromISO',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$LocalDate$fromISO,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeMaybe($author$project$Morphir$Value$Native$encodeLocalDate))),
		_Utils_Tuple2(
		'toISOString',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$author$project$Morphir$SDK$LocalDate$toISOString,
			$author$project$Morphir$Value$Native$decodeLocalDate,
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral)))
	]);
var $author$project$Morphir$Value$Error$ExpectedMaybe = function (a) {
	return {$: 'ExpectedMaybe', a: a};
};
var $author$project$Morphir$Value$Native$decodeMaybe = F3(
	function (decodeItem, _eval, value) {
		var _v0 = _eval(value);
		_v0$2:
		while (true) {
			if (_v0.$ === 'Ok') {
				switch (_v0.a.$) {
					case 'Constructor':
						if ((((((((((((((((((((_v0.a.b.a.b && _v0.a.b.a.a.b) && (_v0.a.b.a.a.a === 'morphir')) && (!_v0.a.b.a.a.b.b)) && _v0.a.b.a.b.b) && _v0.a.b.a.b.a.b) && (_v0.a.b.a.b.a.a === 's')) && _v0.a.b.a.b.a.b.b) && (_v0.a.b.a.b.a.b.a === 'd')) && _v0.a.b.a.b.a.b.b.b) && (_v0.a.b.a.b.a.b.b.a === 'k')) && (!_v0.a.b.a.b.a.b.b.b.b)) && (!_v0.a.b.a.b.b.b)) && _v0.a.b.b.b) && _v0.a.b.b.a.b) && (_v0.a.b.b.a.a === 'maybe')) && (!_v0.a.b.b.a.b.b)) && (!_v0.a.b.b.b.b)) && _v0.a.b.c.b) && (_v0.a.b.c.a === 'nothing')) && (!_v0.a.b.c.b.b)) {
							var _v1 = _v0.a;
							var _v2 = _v1.b;
							var _v3 = _v2.a;
							var _v4 = _v3.a;
							var _v5 = _v3.b;
							var _v6 = _v5.a;
							var _v7 = _v6.b;
							var _v8 = _v7.b;
							var _v9 = _v2.b;
							var _v10 = _v9.a;
							var _v11 = _v2.c;
							return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
						} else {
							break _v0$2;
						}
					case 'Apply':
						if ((((((((((((((((((((((_v0.a.b.$ === 'Constructor') && _v0.a.b.b.a.b) && _v0.a.b.b.a.a.b) && (_v0.a.b.b.a.a.a === 'morphir')) && (!_v0.a.b.b.a.a.b.b)) && _v0.a.b.b.a.b.b) && _v0.a.b.b.a.b.a.b) && (_v0.a.b.b.a.b.a.a === 's')) && _v0.a.b.b.a.b.a.b.b) && (_v0.a.b.b.a.b.a.b.a === 'd')) && _v0.a.b.b.a.b.a.b.b.b) && (_v0.a.b.b.a.b.a.b.b.a === 'k')) && (!_v0.a.b.b.a.b.a.b.b.b.b)) && (!_v0.a.b.b.a.b.b.b)) && _v0.a.b.b.b.b) && _v0.a.b.b.b.a.b) && (_v0.a.b.b.b.a.a === 'maybe')) && (!_v0.a.b.b.b.a.b.b)) && (!_v0.a.b.b.b.b.b)) && _v0.a.b.b.c.b) && (_v0.a.b.b.c.a === 'just')) && (!_v0.a.b.b.c.b.b)) {
							var _v12 = _v0.a;
							var _v13 = _v12.b;
							var _v14 = _v13.b;
							var _v15 = _v14.a;
							var _v16 = _v15.a;
							var _v17 = _v15.b;
							var _v18 = _v17.a;
							var _v19 = _v18.b;
							var _v20 = _v19.b;
							var _v21 = _v14.b;
							var _v22 = _v21.a;
							var _v23 = _v14.c;
							var val = _v12.c;
							return A2(
								$elm$core$Result$map,
								$elm$core$Maybe$Just,
								A2(decodeItem, _eval, val));
						} else {
							break _v0$2;
						}
					default:
						break _v0$2;
				}
			} else {
				var error = _v0.a;
				return $elm$core$Result$Err(error);
			}
		}
		return $elm$core$Result$Err(
			$author$project$Morphir$Value$Error$ExpectedMaybe(value));
	});
var $author$project$Morphir$Value$Native$encodeMaybeResult = function (maybeResult) {
	if (maybeResult.$ === 'Just') {
		if (maybeResult.a.$ === 'Ok') {
			var value = maybeResult.a.a;
			return $elm$core$Result$Ok(
				A3(
					$author$project$Morphir$IR$Value$Apply,
					_Utils_Tuple0,
					A2(
						$author$project$Morphir$IR$Value$Constructor,
						_Utils_Tuple0,
						_Utils_Tuple3(
							_List_fromArray(
								[
									_List_fromArray(
									['morphir']),
									_List_fromArray(
									['s', 'd', 'k'])
								]),
							_List_fromArray(
								[
									_List_fromArray(
									['maybe'])
								]),
							_List_fromArray(
								['just']))),
					value));
		} else {
			var error = maybeResult.a.a;
			return $elm$core$Result$Err(error);
		}
	} else {
		return $elm$core$Result$Ok(
			A2(
				$author$project$Morphir$IR$Value$Constructor,
				_Utils_Tuple0,
				_Utils_Tuple3(
					_List_fromArray(
						[
							_List_fromArray(
							['morphir']),
							_List_fromArray(
							['s', 'd', 'k'])
						]),
					_List_fromArray(
						[
							_List_fromArray(
							['maybe'])
						]),
					_List_fromArray(
						['nothing']))));
	}
};
var $author$project$Morphir$IR$SDK$Maybe$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple2(
		'andThen',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v1 = args.b;
					var arg1 = _v1.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							_v2$2:
							while (true) {
								switch (evaluatedArg1.$) {
									case 'Apply':
										if ((((((((((((((((((((((evaluatedArg1.b.$ === 'Constructor') && evaluatedArg1.b.b.a.b) && evaluatedArg1.b.b.a.a.b) && (evaluatedArg1.b.b.a.a.a === 'morphir')) && (!evaluatedArg1.b.b.a.a.b.b)) && evaluatedArg1.b.b.a.b.b) && evaluatedArg1.b.b.a.b.a.b) && (evaluatedArg1.b.b.a.b.a.a === 's')) && evaluatedArg1.b.b.a.b.a.b.b) && (evaluatedArg1.b.b.a.b.a.b.a === 'd')) && evaluatedArg1.b.b.a.b.a.b.b.b) && (evaluatedArg1.b.b.a.b.a.b.b.a === 'k')) && (!evaluatedArg1.b.b.a.b.a.b.b.b.b)) && (!evaluatedArg1.b.b.a.b.b.b)) && evaluatedArg1.b.b.b.b) && evaluatedArg1.b.b.b.a.b) && (evaluatedArg1.b.b.b.a.a === 'maybe')) && (!evaluatedArg1.b.b.b.a.b.b)) && (!evaluatedArg1.b.b.b.b.b)) && evaluatedArg1.b.b.c.b) && (evaluatedArg1.b.b.c.a === 'just')) && (!evaluatedArg1.b.b.c.b.b)) {
											var _v3 = evaluatedArg1.b;
											var _v4 = _v3.b;
											var _v5 = _v4.a;
											var _v6 = _v5.a;
											var _v7 = _v5.b;
											var _v8 = _v7.a;
											var _v9 = _v8.b;
											var _v10 = _v9.b;
											var _v11 = _v4.b;
											var _v12 = _v11.a;
											var _v13 = _v4.c;
											var value = evaluatedArg1.c;
											return _eval(
												A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value));
										} else {
											break _v2$2;
										}
									case 'Constructor':
										if ((((((((((((((((((((evaluatedArg1.b.a.b && evaluatedArg1.b.a.a.b) && (evaluatedArg1.b.a.a.a === 'morphir')) && (!evaluatedArg1.b.a.a.b.b)) && evaluatedArg1.b.a.b.b) && evaluatedArg1.b.a.b.a.b) && (evaluatedArg1.b.a.b.a.a === 's')) && evaluatedArg1.b.a.b.a.b.b) && (evaluatedArg1.b.a.b.a.b.a === 'd')) && evaluatedArg1.b.a.b.a.b.b.b) && (evaluatedArg1.b.a.b.a.b.b.a === 'k')) && (!evaluatedArg1.b.a.b.a.b.b.b.b)) && (!evaluatedArg1.b.a.b.b.b)) && evaluatedArg1.b.b.b) && evaluatedArg1.b.b.a.b) && (evaluatedArg1.b.b.a.a === 'maybe')) && (!evaluatedArg1.b.b.a.b.b)) && (!evaluatedArg1.b.b.b.b)) && evaluatedArg1.b.c.b) && (evaluatedArg1.b.c.a === 'nothing')) && (!evaluatedArg1.b.c.b.b)) {
											var _v14 = evaluatedArg1.b;
											var _v15 = _v14.a;
											var _v16 = _v15.a;
											var _v17 = _v15.b;
											var _v18 = _v17.a;
											var _v19 = _v18.b;
											var _v20 = _v19.b;
											var _v21 = _v14.b;
											var _v22 = _v21.a;
											var _v23 = _v14.c;
											return $elm$core$Result$Ok(
												$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
										} else {
											break _v2$2;
										}
									default:
										break _v2$2;
								}
							}
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$UnexpectedArguments(
									_List_fromArray(
										[evaluatedArg1])));
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'withDefault',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Maybe$withDefault,
			$author$project$Morphir$Value$Native$decodeRaw,
			$author$project$Morphir$Value$Native$decodeMaybe($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeRaw)),
		_Utils_Tuple2(
		'map',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Maybe$map,
			A2($author$project$Morphir$Value$Native$decodeFun1, $author$project$Morphir$Value$Native$encodeRaw, $author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$decodeMaybe($author$project$Morphir$Value$Native$decodeRaw),
			$author$project$Morphir$Value$Native$encodeMaybeResult)),
		_Utils_Tuple2(
		'map2',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun = args.a;
					var _v25 = args.b;
					var arg1 = _v25.a;
					var _v26 = _v25.b;
					var arg2 = _v26.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							return A2(
								$elm$core$Result$andThen,
								function (evaluatedArg2) {
									var _v27 = _Utils_Tuple2(evaluatedArg1, evaluatedArg2);
									_v27$1:
									while (true) {
										_v27$3:
										while (true) {
											switch (_v27.a.$) {
												case 'Apply':
													switch (_v27.b.$) {
														case 'Apply':
															if ((((((((((((((((((((((((((((((((((((((((((((_v27.a.b.$ === 'Constructor') && _v27.a.b.b.a.b) && _v27.a.b.b.a.a.b) && (_v27.a.b.b.a.a.a === 'morphir')) && (!_v27.a.b.b.a.a.b.b)) && _v27.a.b.b.a.b.b) && _v27.a.b.b.a.b.a.b) && (_v27.a.b.b.a.b.a.a === 's')) && _v27.a.b.b.a.b.a.b.b) && (_v27.a.b.b.a.b.a.b.a === 'd')) && _v27.a.b.b.a.b.a.b.b.b) && (_v27.a.b.b.a.b.a.b.b.a === 'k')) && (!_v27.a.b.b.a.b.a.b.b.b.b)) && (!_v27.a.b.b.a.b.b.b)) && _v27.a.b.b.b.b) && _v27.a.b.b.b.a.b) && (_v27.a.b.b.b.a.a === 'maybe')) && (!_v27.a.b.b.b.a.b.b)) && (!_v27.a.b.b.b.b.b)) && _v27.a.b.b.c.b) && (_v27.a.b.b.c.a === 'just')) && (!_v27.a.b.b.c.b.b)) && (_v27.b.b.$ === 'Constructor')) && _v27.b.b.b.a.b) && _v27.b.b.b.a.a.b) && (_v27.b.b.b.a.a.a === 'morphir')) && (!_v27.b.b.b.a.a.b.b)) && _v27.b.b.b.a.b.b) && _v27.b.b.b.a.b.a.b) && (_v27.b.b.b.a.b.a.a === 's')) && _v27.b.b.b.a.b.a.b.b) && (_v27.b.b.b.a.b.a.b.a === 'd')) && _v27.b.b.b.a.b.a.b.b.b) && (_v27.b.b.b.a.b.a.b.b.a === 'k')) && (!_v27.b.b.b.a.b.a.b.b.b.b)) && (!_v27.b.b.b.a.b.b.b)) && _v27.b.b.b.b.b) && _v27.b.b.b.b.a.b) && (_v27.b.b.b.b.a.a === 'maybe')) && (!_v27.b.b.b.b.a.b.b)) && (!_v27.b.b.b.b.b.b)) && _v27.b.b.b.c.b) && (_v27.b.b.b.c.a === 'just')) && (!_v27.b.b.b.c.b.b)) {
																var _v28 = _v27.a;
																var _v29 = _v28.b;
																var _v30 = _v29.b;
																var _v31 = _v30.a;
																var _v32 = _v31.a;
																var _v33 = _v31.b;
																var _v34 = _v33.a;
																var _v35 = _v34.b;
																var _v36 = _v35.b;
																var _v37 = _v30.b;
																var _v38 = _v37.a;
																var _v39 = _v30.c;
																var value1 = _v28.c;
																var _v40 = _v27.b;
																var _v41 = _v40.b;
																var _v42 = _v41.b;
																var _v43 = _v42.a;
																var _v44 = _v43.a;
																var _v45 = _v43.b;
																var _v46 = _v45.a;
																var _v47 = _v46.b;
																var _v48 = _v47.b;
																var _v49 = _v42.b;
																var _v50 = _v49.a;
																var _v51 = _v42.c;
																var value2 = _v40.c;
																return _eval(
																	A3(
																		$author$project$Morphir$IR$Value$Apply,
																		_Utils_Tuple0,
																		A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1),
																		value2));
															} else {
																break _v27$3;
															}
														case 'Constructor':
															if ((((((((((((((((((((_v27.b.b.a.b && _v27.b.b.a.a.b) && (_v27.b.b.a.a.a === 'morphir')) && (!_v27.b.b.a.a.b.b)) && _v27.b.b.a.b.b) && _v27.b.b.a.b.a.b) && (_v27.b.b.a.b.a.a === 's')) && _v27.b.b.a.b.a.b.b) && (_v27.b.b.a.b.a.b.a === 'd')) && _v27.b.b.a.b.a.b.b.b) && (_v27.b.b.a.b.a.b.b.a === 'k')) && (!_v27.b.b.a.b.a.b.b.b.b)) && (!_v27.b.b.a.b.b.b)) && _v27.b.b.b.b) && _v27.b.b.b.a.b) && (_v27.b.b.b.a.a === 'maybe')) && (!_v27.b.b.b.a.b.b)) && (!_v27.b.b.b.b.b)) && _v27.b.b.c.b) && (_v27.b.b.c.a === 'nothing')) && (!_v27.b.b.c.b.b)) {
																break _v27$1;
															} else {
																break _v27$3;
															}
														default:
															break _v27$3;
													}
												case 'Constructor':
													if ((((((((((((((((((((((_v27.b.$ === 'Constructor') && _v27.b.b.a.b) && _v27.b.b.a.a.b) && (_v27.b.b.a.a.a === 'morphir')) && (!_v27.b.b.a.a.b.b)) && _v27.b.b.a.b.b) && _v27.b.b.a.b.a.b) && (_v27.b.b.a.b.a.a === 's')) && _v27.b.b.a.b.a.b.b) && (_v27.b.b.a.b.a.b.a === 'd')) && _v27.b.b.a.b.a.b.b.b) && (_v27.b.b.a.b.a.b.b.a === 'k')) && (!_v27.b.b.a.b.a.b.b.b.b)) && (!_v27.b.b.a.b.b.b)) && _v27.b.b.b.b) && _v27.b.b.b.a.b) && (_v27.b.b.b.a.a === 'maybe')) && (!_v27.b.b.b.a.b.b)) && (!_v27.b.b.b.b.b)) && _v27.b.b.c.b) && (_v27.b.b.c.a === 'nothing')) && (!_v27.b.b.c.b.b)) {
														break _v27$1;
													} else {
														if ((((((((((((((((((((_v27.a.b.a.b && _v27.a.b.a.a.b) && (_v27.a.b.a.a.a === 'morphir')) && (!_v27.a.b.a.a.b.b)) && _v27.a.b.a.b.b) && _v27.a.b.a.b.a.b) && (_v27.a.b.a.b.a.a === 's')) && _v27.a.b.a.b.a.b.b) && (_v27.a.b.a.b.a.b.a === 'd')) && _v27.a.b.a.b.a.b.b.b) && (_v27.a.b.a.b.a.b.b.a === 'k')) && (!_v27.a.b.a.b.a.b.b.b.b)) && (!_v27.a.b.a.b.b.b)) && _v27.a.b.b.b) && _v27.a.b.b.a.b) && (_v27.a.b.b.a.a === 'maybe')) && (!_v27.a.b.b.a.b.b)) && (!_v27.a.b.b.b.b)) && _v27.a.b.c.b) && (_v27.a.b.c.a === 'nothing')) && (!_v27.a.b.c.b.b)) {
															var _v63 = _v27.a;
															var _v64 = _v63.b;
															var _v65 = _v64.a;
															var _v66 = _v65.a;
															var _v67 = _v65.b;
															var _v68 = _v67.a;
															var _v69 = _v68.b;
															var _v70 = _v69.b;
															var _v71 = _v64.b;
															var _v72 = _v71.a;
															var _v73 = _v64.c;
															return $elm$core$Result$Ok(
																$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
														} else {
															break _v27$3;
														}
													}
												default:
													if ((((((((((((((((((((((_v27.b.$ === 'Constructor') && _v27.b.b.a.b) && _v27.b.b.a.a.b) && (_v27.b.b.a.a.a === 'morphir')) && (!_v27.b.b.a.a.b.b)) && _v27.b.b.a.b.b) && _v27.b.b.a.b.a.b) && (_v27.b.b.a.b.a.a === 's')) && _v27.b.b.a.b.a.b.b) && (_v27.b.b.a.b.a.b.a === 'd')) && _v27.b.b.a.b.a.b.b.b) && (_v27.b.b.a.b.a.b.b.a === 'k')) && (!_v27.b.b.a.b.a.b.b.b.b)) && (!_v27.b.b.a.b.b.b)) && _v27.b.b.b.b) && _v27.b.b.b.a.b) && (_v27.b.b.b.a.a === 'maybe')) && (!_v27.b.b.b.a.b.b)) && (!_v27.b.b.b.b.b)) && _v27.b.b.c.b) && (_v27.b.b.c.a === 'nothing')) && (!_v27.b.b.c.b.b)) {
														break _v27$1;
													} else {
														break _v27$3;
													}
											}
										}
										return $elm$core$Result$Err(
											$author$project$Morphir$Value$Error$UnexpectedArguments(
												_List_fromArray(
													[evaluatedArg1, evaluatedArg2])));
									}
									var _v52 = _v27.b;
									var _v53 = _v52.b;
									var _v54 = _v53.a;
									var _v55 = _v54.a;
									var _v56 = _v54.b;
									var _v57 = _v56.a;
									var _v58 = _v57.b;
									var _v59 = _v58.b;
									var _v60 = _v53.b;
									var _v61 = _v60.a;
									var _v62 = _v53.c;
									return $elm$core$Result$Ok(
										$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
								},
								_eval(arg2));
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map3',
		F2(
			function (_eval, args) {
				if ((((args.b && args.b.b) && args.b.b.b) && args.b.b.b.b) && (!args.b.b.b.b.b)) {
					var fun = args.a;
					var _v75 = args.b;
					var arg1 = _v75.a;
					var _v76 = _v75.b;
					var arg2 = _v76.a;
					var _v77 = _v76.b;
					var arg3 = _v77.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							return A2(
								$elm$core$Result$andThen,
								function (evaluatedArg2) {
									return A2(
										$elm$core$Result$andThen,
										function (evaluatedArg3) {
											var _v78 = _Utils_Tuple3(evaluatedArg1, evaluatedArg2, evaluatedArg3);
											_v78$1:
											while (true) {
												_v78$2:
												while (true) {
													_v78$4:
													while (true) {
														switch (_v78.a.$) {
															case 'Apply':
																switch (_v78.b.$) {
																	case 'Apply':
																		switch (_v78.c.$) {
																			case 'Apply':
																				if ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((_v78.a.b.$ === 'Constructor') && _v78.a.b.b.a.b) && _v78.a.b.b.a.a.b) && (_v78.a.b.b.a.a.a === 'morphir')) && (!_v78.a.b.b.a.a.b.b)) && _v78.a.b.b.a.b.b) && _v78.a.b.b.a.b.a.b) && (_v78.a.b.b.a.b.a.a === 's')) && _v78.a.b.b.a.b.a.b.b) && (_v78.a.b.b.a.b.a.b.a === 'd')) && _v78.a.b.b.a.b.a.b.b.b) && (_v78.a.b.b.a.b.a.b.b.a === 'k')) && (!_v78.a.b.b.a.b.a.b.b.b.b)) && (!_v78.a.b.b.a.b.b.b)) && _v78.a.b.b.b.b) && _v78.a.b.b.b.a.b) && (_v78.a.b.b.b.a.a === 'maybe')) && (!_v78.a.b.b.b.a.b.b)) && (!_v78.a.b.b.b.b.b)) && _v78.a.b.b.c.b) && (_v78.a.b.b.c.a === 'just')) && (!_v78.a.b.b.c.b.b)) && (_v78.b.b.$ === 'Constructor')) && _v78.b.b.b.a.b) && _v78.b.b.b.a.a.b) && (_v78.b.b.b.a.a.a === 'morphir')) && (!_v78.b.b.b.a.a.b.b)) && _v78.b.b.b.a.b.b) && _v78.b.b.b.a.b.a.b) && (_v78.b.b.b.a.b.a.a === 's')) && _v78.b.b.b.a.b.a.b.b) && (_v78.b.b.b.a.b.a.b.a === 'd')) && _v78.b.b.b.a.b.a.b.b.b) && (_v78.b.b.b.a.b.a.b.b.a === 'k')) && (!_v78.b.b.b.a.b.a.b.b.b.b)) && (!_v78.b.b.b.a.b.b.b)) && _v78.b.b.b.b.b) && _v78.b.b.b.b.a.b) && (_v78.b.b.b.b.a.a === 'maybe')) && (!_v78.b.b.b.b.a.b.b)) && (!_v78.b.b.b.b.b.b)) && _v78.b.b.b.c.b) && (_v78.b.b.b.c.a === 'just')) && (!_v78.b.b.b.c.b.b)) && (_v78.c.b.$ === 'Constructor')) && _v78.c.b.b.a.b) && _v78.c.b.b.a.a.b) && (_v78.c.b.b.a.a.a === 'morphir')) && (!_v78.c.b.b.a.a.b.b)) && _v78.c.b.b.a.b.b) && _v78.c.b.b.a.b.a.b) && (_v78.c.b.b.a.b.a.a === 's')) && _v78.c.b.b.a.b.a.b.b) && (_v78.c.b.b.a.b.a.b.a === 'd')) && _v78.c.b.b.a.b.a.b.b.b) && (_v78.c.b.b.a.b.a.b.b.a === 'k')) && (!_v78.c.b.b.a.b.a.b.b.b.b)) && (!_v78.c.b.b.a.b.b.b)) && _v78.c.b.b.b.b) && _v78.c.b.b.b.a.b) && (_v78.c.b.b.b.a.a === 'maybe')) && (!_v78.c.b.b.b.a.b.b)) && (!_v78.c.b.b.b.b.b)) && _v78.c.b.b.c.b) && (_v78.c.b.b.c.a === 'just')) && (!_v78.c.b.b.c.b.b)) {
																					var _v79 = _v78.a;
																					var _v80 = _v79.b;
																					var _v81 = _v80.b;
																					var _v82 = _v81.a;
																					var _v83 = _v82.a;
																					var _v84 = _v82.b;
																					var _v85 = _v84.a;
																					var _v86 = _v85.b;
																					var _v87 = _v86.b;
																					var _v88 = _v81.b;
																					var _v89 = _v88.a;
																					var _v90 = _v81.c;
																					var value1 = _v79.c;
																					var _v91 = _v78.b;
																					var _v92 = _v91.b;
																					var _v93 = _v92.b;
																					var _v94 = _v93.a;
																					var _v95 = _v94.a;
																					var _v96 = _v94.b;
																					var _v97 = _v96.a;
																					var _v98 = _v97.b;
																					var _v99 = _v98.b;
																					var _v100 = _v93.b;
																					var _v101 = _v100.a;
																					var _v102 = _v93.c;
																					var value2 = _v91.c;
																					var _v103 = _v78.c;
																					var _v104 = _v103.b;
																					var _v105 = _v104.b;
																					var _v106 = _v105.a;
																					var _v107 = _v106.a;
																					var _v108 = _v106.b;
																					var _v109 = _v108.a;
																					var _v110 = _v109.b;
																					var _v111 = _v110.b;
																					var _v112 = _v105.b;
																					var _v113 = _v112.a;
																					var _v114 = _v105.c;
																					var value3 = _v103.c;
																					return _eval(
																						A3(
																							$author$project$Morphir$IR$Value$Apply,
																							_Utils_Tuple0,
																							A3(
																								$author$project$Morphir$IR$Value$Apply,
																								_Utils_Tuple0,
																								A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1),
																								value2),
																							value3));
																				} else {
																					break _v78$4;
																				}
																			case 'Constructor':
																				if ((((((((((((((((((((_v78.c.b.a.b && _v78.c.b.a.a.b) && (_v78.c.b.a.a.a === 'morphir')) && (!_v78.c.b.a.a.b.b)) && _v78.c.b.a.b.b) && _v78.c.b.a.b.a.b) && (_v78.c.b.a.b.a.a === 's')) && _v78.c.b.a.b.a.b.b) && (_v78.c.b.a.b.a.b.a === 'd')) && _v78.c.b.a.b.a.b.b.b) && (_v78.c.b.a.b.a.b.b.a === 'k')) && (!_v78.c.b.a.b.a.b.b.b.b)) && (!_v78.c.b.a.b.b.b)) && _v78.c.b.b.b) && _v78.c.b.b.a.b) && (_v78.c.b.b.a.a === 'maybe')) && (!_v78.c.b.b.a.b.b)) && (!_v78.c.b.b.b.b)) && _v78.c.b.c.b) && (_v78.c.b.c.a === 'nothing')) && (!_v78.c.b.c.b.b)) {
																					break _v78$1;
																				} else {
																					break _v78$4;
																				}
																			default:
																				break _v78$4;
																		}
																	case 'Constructor':
																		if ((((((((((((((((((((((_v78.c.$ === 'Constructor') && _v78.c.b.a.b) && _v78.c.b.a.a.b) && (_v78.c.b.a.a.a === 'morphir')) && (!_v78.c.b.a.a.b.b)) && _v78.c.b.a.b.b) && _v78.c.b.a.b.a.b) && (_v78.c.b.a.b.a.a === 's')) && _v78.c.b.a.b.a.b.b) && (_v78.c.b.a.b.a.b.a === 'd')) && _v78.c.b.a.b.a.b.b.b) && (_v78.c.b.a.b.a.b.b.a === 'k')) && (!_v78.c.b.a.b.a.b.b.b.b)) && (!_v78.c.b.a.b.b.b)) && _v78.c.b.b.b) && _v78.c.b.b.a.b) && (_v78.c.b.b.a.a === 'maybe')) && (!_v78.c.b.b.a.b.b)) && (!_v78.c.b.b.b.b)) && _v78.c.b.c.b) && (_v78.c.b.c.a === 'nothing')) && (!_v78.c.b.c.b.b)) {
																			break _v78$1;
																		} else {
																			if ((((((((((((((((((((_v78.b.b.a.b && _v78.b.b.a.a.b) && (_v78.b.b.a.a.a === 'morphir')) && (!_v78.b.b.a.a.b.b)) && _v78.b.b.a.b.b) && _v78.b.b.a.b.a.b) && (_v78.b.b.a.b.a.a === 's')) && _v78.b.b.a.b.a.b.b) && (_v78.b.b.a.b.a.b.a === 'd')) && _v78.b.b.a.b.a.b.b.b) && (_v78.b.b.a.b.a.b.b.a === 'k')) && (!_v78.b.b.a.b.a.b.b.b.b)) && (!_v78.b.b.a.b.b.b)) && _v78.b.b.b.b) && _v78.b.b.b.a.b) && (_v78.b.b.b.a.a === 'maybe')) && (!_v78.b.b.b.a.b.b)) && (!_v78.b.b.b.b.b)) && _v78.b.b.c.b) && (_v78.b.b.c.a === 'nothing')) && (!_v78.b.b.c.b.b)) {
																				break _v78$2;
																			} else {
																				break _v78$4;
																			}
																		}
																	default:
																		if ((((((((((((((((((((((_v78.c.$ === 'Constructor') && _v78.c.b.a.b) && _v78.c.b.a.a.b) && (_v78.c.b.a.a.a === 'morphir')) && (!_v78.c.b.a.a.b.b)) && _v78.c.b.a.b.b) && _v78.c.b.a.b.a.b) && (_v78.c.b.a.b.a.a === 's')) && _v78.c.b.a.b.a.b.b) && (_v78.c.b.a.b.a.b.a === 'd')) && _v78.c.b.a.b.a.b.b.b) && (_v78.c.b.a.b.a.b.b.a === 'k')) && (!_v78.c.b.a.b.a.b.b.b.b)) && (!_v78.c.b.a.b.b.b)) && _v78.c.b.b.b) && _v78.c.b.b.a.b) && (_v78.c.b.b.a.a === 'maybe')) && (!_v78.c.b.b.a.b.b)) && (!_v78.c.b.b.b.b)) && _v78.c.b.c.b) && (_v78.c.b.c.a === 'nothing')) && (!_v78.c.b.c.b.b)) {
																			break _v78$1;
																		} else {
																			break _v78$4;
																		}
																}
															case 'Constructor':
																if ((((((((((((((((((((((_v78.c.$ === 'Constructor') && _v78.c.b.a.b) && _v78.c.b.a.a.b) && (_v78.c.b.a.a.a === 'morphir')) && (!_v78.c.b.a.a.b.b)) && _v78.c.b.a.b.b) && _v78.c.b.a.b.a.b) && (_v78.c.b.a.b.a.a === 's')) && _v78.c.b.a.b.a.b.b) && (_v78.c.b.a.b.a.b.a === 'd')) && _v78.c.b.a.b.a.b.b.b) && (_v78.c.b.a.b.a.b.b.a === 'k')) && (!_v78.c.b.a.b.a.b.b.b.b)) && (!_v78.c.b.a.b.b.b)) && _v78.c.b.b.b) && _v78.c.b.b.a.b) && (_v78.c.b.b.a.a === 'maybe')) && (!_v78.c.b.b.a.b.b)) && (!_v78.c.b.b.b.b)) && _v78.c.b.c.b) && (_v78.c.b.c.a === 'nothing')) && (!_v78.c.b.c.b.b)) {
																	break _v78$1;
																} else {
																	if ((((((((((((((((((((((_v78.b.$ === 'Constructor') && _v78.b.b.a.b) && _v78.b.b.a.a.b) && (_v78.b.b.a.a.a === 'morphir')) && (!_v78.b.b.a.a.b.b)) && _v78.b.b.a.b.b) && _v78.b.b.a.b.a.b) && (_v78.b.b.a.b.a.a === 's')) && _v78.b.b.a.b.a.b.b) && (_v78.b.b.a.b.a.b.a === 'd')) && _v78.b.b.a.b.a.b.b.b) && (_v78.b.b.a.b.a.b.b.a === 'k')) && (!_v78.b.b.a.b.a.b.b.b.b)) && (!_v78.b.b.a.b.b.b)) && _v78.b.b.b.b) && _v78.b.b.b.a.b) && (_v78.b.b.b.a.a === 'maybe')) && (!_v78.b.b.b.a.b.b)) && (!_v78.b.b.b.b.b)) && _v78.b.b.c.b) && (_v78.b.b.c.a === 'nothing')) && (!_v78.b.b.c.b.b)) {
																		break _v78$2;
																	} else {
																		if ((((((((((((((((((((_v78.a.b.a.b && _v78.a.b.a.a.b) && (_v78.a.b.a.a.a === 'morphir')) && (!_v78.a.b.a.a.b.b)) && _v78.a.b.a.b.b) && _v78.a.b.a.b.a.b) && (_v78.a.b.a.b.a.a === 's')) && _v78.a.b.a.b.a.b.b) && (_v78.a.b.a.b.a.b.a === 'd')) && _v78.a.b.a.b.a.b.b.b) && (_v78.a.b.a.b.a.b.b.a === 'k')) && (!_v78.a.b.a.b.a.b.b.b.b)) && (!_v78.a.b.a.b.b.b)) && _v78.a.b.b.b) && _v78.a.b.b.a.b) && (_v78.a.b.b.a.a === 'maybe')) && (!_v78.a.b.b.a.b.b)) && (!_v78.a.b.b.b.b)) && _v78.a.b.c.b) && (_v78.a.b.c.a === 'nothing')) && (!_v78.a.b.c.b.b)) {
																			var _v137 = _v78.a;
																			var _v138 = _v137.b;
																			var _v139 = _v138.a;
																			var _v140 = _v139.a;
																			var _v141 = _v139.b;
																			var _v142 = _v141.a;
																			var _v143 = _v142.b;
																			var _v144 = _v143.b;
																			var _v145 = _v138.b;
																			var _v146 = _v145.a;
																			var _v147 = _v138.c;
																			return $elm$core$Result$Ok(
																				$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
																		} else {
																			break _v78$4;
																		}
																	}
																}
															default:
																if ((((((((((((((((((((((_v78.c.$ === 'Constructor') && _v78.c.b.a.b) && _v78.c.b.a.a.b) && (_v78.c.b.a.a.a === 'morphir')) && (!_v78.c.b.a.a.b.b)) && _v78.c.b.a.b.b) && _v78.c.b.a.b.a.b) && (_v78.c.b.a.b.a.a === 's')) && _v78.c.b.a.b.a.b.b) && (_v78.c.b.a.b.a.b.a === 'd')) && _v78.c.b.a.b.a.b.b.b) && (_v78.c.b.a.b.a.b.b.a === 'k')) && (!_v78.c.b.a.b.a.b.b.b.b)) && (!_v78.c.b.a.b.b.b)) && _v78.c.b.b.b) && _v78.c.b.b.a.b) && (_v78.c.b.b.a.a === 'maybe')) && (!_v78.c.b.b.a.b.b)) && (!_v78.c.b.b.b.b)) && _v78.c.b.c.b) && (_v78.c.b.c.a === 'nothing')) && (!_v78.c.b.c.b.b)) {
																	break _v78$1;
																} else {
																	if ((((((((((((((((((((((_v78.b.$ === 'Constructor') && _v78.b.b.a.b) && _v78.b.b.a.a.b) && (_v78.b.b.a.a.a === 'morphir')) && (!_v78.b.b.a.a.b.b)) && _v78.b.b.a.b.b) && _v78.b.b.a.b.a.b) && (_v78.b.b.a.b.a.a === 's')) && _v78.b.b.a.b.a.b.b) && (_v78.b.b.a.b.a.b.a === 'd')) && _v78.b.b.a.b.a.b.b.b) && (_v78.b.b.a.b.a.b.b.a === 'k')) && (!_v78.b.b.a.b.a.b.b.b.b)) && (!_v78.b.b.a.b.b.b)) && _v78.b.b.b.b) && _v78.b.b.b.a.b) && (_v78.b.b.b.a.a === 'maybe')) && (!_v78.b.b.b.a.b.b)) && (!_v78.b.b.b.b.b)) && _v78.b.b.c.b) && (_v78.b.b.c.a === 'nothing')) && (!_v78.b.b.c.b.b)) {
																		break _v78$2;
																	} else {
																		break _v78$4;
																	}
																}
														}
													}
													return $elm$core$Result$Err(
														$author$project$Morphir$Value$Error$UnexpectedArguments(
															_List_fromArray(
																[evaluatedArg1, evaluatedArg2, evaluatedArg3])));
												}
												var _v126 = _v78.b;
												var _v127 = _v126.b;
												var _v128 = _v127.a;
												var _v129 = _v128.a;
												var _v130 = _v128.b;
												var _v131 = _v130.a;
												var _v132 = _v131.b;
												var _v133 = _v132.b;
												var _v134 = _v127.b;
												var _v135 = _v134.a;
												var _v136 = _v127.c;
												return $elm$core$Result$Ok(
													$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
											}
											var _v115 = _v78.c;
											var _v116 = _v115.b;
											var _v117 = _v116.a;
											var _v118 = _v117.a;
											var _v119 = _v117.b;
											var _v120 = _v119.a;
											var _v121 = _v120.b;
											var _v122 = _v121.b;
											var _v123 = _v116.b;
											var _v124 = _v123.a;
											var _v125 = _v116.c;
											return $elm$core$Result$Ok(
												$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
										},
										_eval(arg3));
								},
								_eval(arg2));
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map4',
		F2(
			function (_eval, args) {
				if (((((args.b && args.b.b) && args.b.b.b) && args.b.b.b.b) && args.b.b.b.b.b) && (!args.b.b.b.b.b.b)) {
					var fun = args.a;
					var _v149 = args.b;
					var arg1 = _v149.a;
					var _v150 = _v149.b;
					var arg2 = _v150.a;
					var _v151 = _v150.b;
					var arg3 = _v151.a;
					var _v152 = _v151.b;
					var arg4 = _v152.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							return A2(
								$elm$core$Result$andThen,
								function (evaluatedArg2) {
									return A2(
										$elm$core$Result$andThen,
										function (evaluatedArg3) {
											return A2(
												$elm$core$Result$andThen,
												function (evaluatedArg4) {
													var _v153 = _List_fromArray(
														[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4]);
													_v153$1:
													while (true) {
														_v153$2:
														while (true) {
															_v153$3:
															while (true) {
																_v153$5:
																while (true) {
																	if ((((_v153.b && _v153.b.b) && _v153.b.b.b) && _v153.b.b.b.b) && (!_v153.b.b.b.b.b)) {
																		switch (_v153.a.$) {
																			case 'Apply':
																				switch (_v153.b.a.$) {
																					case 'Apply':
																						switch (_v153.b.b.a.$) {
																							case 'Apply':
																								switch (_v153.b.b.b.a.$) {
																									case 'Apply':
																										if ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((_v153.a.b.$ === 'Constructor') && _v153.a.b.b.a.b) && _v153.a.b.b.a.a.b) && (_v153.a.b.b.a.a.a === 'morphir')) && (!_v153.a.b.b.a.a.b.b)) && _v153.a.b.b.a.b.b) && _v153.a.b.b.a.b.a.b) && (_v153.a.b.b.a.b.a.a === 's')) && _v153.a.b.b.a.b.a.b.b) && (_v153.a.b.b.a.b.a.b.a === 'd')) && _v153.a.b.b.a.b.a.b.b.b) && (_v153.a.b.b.a.b.a.b.b.a === 'k')) && (!_v153.a.b.b.a.b.a.b.b.b.b)) && (!_v153.a.b.b.a.b.b.b)) && _v153.a.b.b.b.b) && _v153.a.b.b.b.a.b) && (_v153.a.b.b.b.a.a === 'maybe')) && (!_v153.a.b.b.b.a.b.b)) && (!_v153.a.b.b.b.b.b)) && _v153.a.b.b.c.b) && (_v153.a.b.b.c.a === 'just')) && (!_v153.a.b.b.c.b.b)) && (_v153.b.a.b.$ === 'Constructor')) && _v153.b.a.b.b.a.b) && _v153.b.a.b.b.a.a.b) && (_v153.b.a.b.b.a.a.a === 'morphir')) && (!_v153.b.a.b.b.a.a.b.b)) && _v153.b.a.b.b.a.b.b) && _v153.b.a.b.b.a.b.a.b) && (_v153.b.a.b.b.a.b.a.a === 's')) && _v153.b.a.b.b.a.b.a.b.b) && (_v153.b.a.b.b.a.b.a.b.a === 'd')) && _v153.b.a.b.b.a.b.a.b.b.b) && (_v153.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v153.b.a.b.b.a.b.a.b.b.b.b)) && (!_v153.b.a.b.b.a.b.b.b)) && _v153.b.a.b.b.b.b) && _v153.b.a.b.b.b.a.b) && (_v153.b.a.b.b.b.a.a === 'maybe')) && (!_v153.b.a.b.b.b.a.b.b)) && (!_v153.b.a.b.b.b.b.b)) && _v153.b.a.b.b.c.b) && (_v153.b.a.b.b.c.a === 'just')) && (!_v153.b.a.b.b.c.b.b)) && (_v153.b.b.a.b.$ === 'Constructor')) && _v153.b.b.a.b.b.a.b) && _v153.b.b.a.b.b.a.a.b) && (_v153.b.b.a.b.b.a.a.a === 'morphir')) && (!_v153.b.b.a.b.b.a.a.b.b)) && _v153.b.b.a.b.b.a.b.b) && _v153.b.b.a.b.b.a.b.a.b) && (_v153.b.b.a.b.b.a.b.a.a === 's')) && _v153.b.b.a.b.b.a.b.a.b.b) && (_v153.b.b.a.b.b.a.b.a.b.a === 'd')) && _v153.b.b.a.b.b.a.b.a.b.b.b) && (_v153.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v153.b.b.a.b.b.a.b.b.b)) && _v153.b.b.a.b.b.b.b) && _v153.b.b.a.b.b.b.a.b) && (_v153.b.b.a.b.b.b.a.a === 'maybe')) && (!_v153.b.b.a.b.b.b.a.b.b)) && (!_v153.b.b.a.b.b.b.b.b)) && _v153.b.b.a.b.b.c.b) && (_v153.b.b.a.b.b.c.a === 'just')) && (!_v153.b.b.a.b.b.c.b.b)) && (_v153.b.b.b.a.b.$ === 'Constructor')) && _v153.b.b.b.a.b.b.a.b) && _v153.b.b.b.a.b.b.a.a.b) && (_v153.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v153.b.b.b.a.b.b.a.a.b.b)) && _v153.b.b.b.a.b.b.a.b.b) && _v153.b.b.b.a.b.b.a.b.a.b) && (_v153.b.b.b.a.b.b.a.b.a.a === 's')) && _v153.b.b.b.a.b.b.a.b.a.b.b) && (_v153.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v153.b.b.b.a.b.b.a.b.a.b.b.b) && (_v153.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v153.b.b.b.a.b.b.a.b.b.b)) && _v153.b.b.b.a.b.b.b.b) && _v153.b.b.b.a.b.b.b.a.b) && (_v153.b.b.b.a.b.b.b.a.a === 'maybe')) && (!_v153.b.b.b.a.b.b.b.a.b.b)) && (!_v153.b.b.b.a.b.b.b.b.b)) && _v153.b.b.b.a.b.b.c.b) && (_v153.b.b.b.a.b.b.c.a === 'just')) && (!_v153.b.b.b.a.b.b.c.b.b)) {
																											var _v154 = _v153.a;
																											var _v155 = _v154.b;
																											var _v156 = _v155.b;
																											var _v157 = _v156.a;
																											var _v158 = _v157.a;
																											var _v159 = _v157.b;
																											var _v160 = _v159.a;
																											var _v161 = _v160.b;
																											var _v162 = _v161.b;
																											var _v163 = _v156.b;
																											var _v164 = _v163.a;
																											var _v165 = _v156.c;
																											var value1 = _v154.c;
																											var _v166 = _v153.b;
																											var _v167 = _v166.a;
																											var _v168 = _v167.b;
																											var _v169 = _v168.b;
																											var _v170 = _v169.a;
																											var _v171 = _v170.a;
																											var _v172 = _v170.b;
																											var _v173 = _v172.a;
																											var _v174 = _v173.b;
																											var _v175 = _v174.b;
																											var _v176 = _v169.b;
																											var _v177 = _v176.a;
																											var _v178 = _v169.c;
																											var value2 = _v167.c;
																											var _v179 = _v166.b;
																											var _v180 = _v179.a;
																											var _v181 = _v180.b;
																											var _v182 = _v181.b;
																											var _v183 = _v182.a;
																											var _v184 = _v183.a;
																											var _v185 = _v183.b;
																											var _v186 = _v185.a;
																											var _v187 = _v186.b;
																											var _v188 = _v187.b;
																											var _v189 = _v182.b;
																											var _v190 = _v189.a;
																											var _v191 = _v182.c;
																											var value3 = _v180.c;
																											var _v192 = _v179.b;
																											var _v193 = _v192.a;
																											var _v194 = _v193.b;
																											var _v195 = _v194.b;
																											var _v196 = _v195.a;
																											var _v197 = _v196.a;
																											var _v198 = _v196.b;
																											var _v199 = _v198.a;
																											var _v200 = _v199.b;
																											var _v201 = _v200.b;
																											var _v202 = _v195.b;
																											var _v203 = _v202.a;
																											var _v204 = _v195.c;
																											var value4 = _v193.c;
																											return _eval(
																												A3(
																													$author$project$Morphir$IR$Value$Apply,
																													_Utils_Tuple0,
																													A3(
																														$author$project$Morphir$IR$Value$Apply,
																														_Utils_Tuple0,
																														A3(
																															$author$project$Morphir$IR$Value$Apply,
																															_Utils_Tuple0,
																															A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1),
																															value2),
																														value3),
																													value4));
																										} else {
																											break _v153$5;
																										}
																									case 'Constructor':
																										if ((((((((((((((((((((_v153.b.b.b.a.b.a.b && _v153.b.b.b.a.b.a.a.b) && (_v153.b.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.b.a.b.a.a.b.b)) && _v153.b.b.b.a.b.a.b.b) && _v153.b.b.b.a.b.a.b.a.b) && (_v153.b.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.b.a.b.a.b.a.b.b) && (_v153.b.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.b.a.b.a.b.b.b)) && _v153.b.b.b.a.b.b.b) && _v153.b.b.b.a.b.b.a.b) && (_v153.b.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.b.a.b.b.a.b.b)) && (!_v153.b.b.b.a.b.b.b.b)) && _v153.b.b.b.a.b.c.b) && (_v153.b.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.b.a.b.c.b.b)) {
																											break _v153$1;
																										} else {
																											break _v153$5;
																										}
																									default:
																										break _v153$5;
																								}
																							case 'Constructor':
																								if ((((((((((((((((((((((_v153.b.b.b.a.$ === 'Constructor') && _v153.b.b.b.a.b.a.b) && _v153.b.b.b.a.b.a.a.b) && (_v153.b.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.b.a.b.a.a.b.b)) && _v153.b.b.b.a.b.a.b.b) && _v153.b.b.b.a.b.a.b.a.b) && (_v153.b.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.b.a.b.a.b.a.b.b) && (_v153.b.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.b.a.b.a.b.b.b)) && _v153.b.b.b.a.b.b.b) && _v153.b.b.b.a.b.b.a.b) && (_v153.b.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.b.a.b.b.a.b.b)) && (!_v153.b.b.b.a.b.b.b.b)) && _v153.b.b.b.a.b.c.b) && (_v153.b.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.b.a.b.c.b.b)) {
																									break _v153$1;
																								} else {
																									if ((((((((((((((((((((_v153.b.b.a.b.a.b && _v153.b.b.a.b.a.a.b) && (_v153.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.a.b.a.a.b.b)) && _v153.b.b.a.b.a.b.b) && _v153.b.b.a.b.a.b.a.b) && (_v153.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.a.b.a.b.a.b.b) && (_v153.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.a.b.a.b.b.b)) && _v153.b.b.a.b.b.b) && _v153.b.b.a.b.b.a.b) && (_v153.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.a.b.b.a.b.b)) && (!_v153.b.b.a.b.b.b.b)) && _v153.b.b.a.b.c.b) && (_v153.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.a.b.c.b.b)) {
																										break _v153$2;
																									} else {
																										break _v153$5;
																									}
																								}
																							default:
																								if ((((((((((((((((((((((_v153.b.b.b.a.$ === 'Constructor') && _v153.b.b.b.a.b.a.b) && _v153.b.b.b.a.b.a.a.b) && (_v153.b.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.b.a.b.a.a.b.b)) && _v153.b.b.b.a.b.a.b.b) && _v153.b.b.b.a.b.a.b.a.b) && (_v153.b.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.b.a.b.a.b.a.b.b) && (_v153.b.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.b.a.b.a.b.b.b)) && _v153.b.b.b.a.b.b.b) && _v153.b.b.b.a.b.b.a.b) && (_v153.b.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.b.a.b.b.a.b.b)) && (!_v153.b.b.b.a.b.b.b.b)) && _v153.b.b.b.a.b.c.b) && (_v153.b.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.b.a.b.c.b.b)) {
																									break _v153$1;
																								} else {
																									break _v153$5;
																								}
																						}
																					case 'Constructor':
																						if ((((((((((((((((((((((_v153.b.b.b.a.$ === 'Constructor') && _v153.b.b.b.a.b.a.b) && _v153.b.b.b.a.b.a.a.b) && (_v153.b.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.b.a.b.a.a.b.b)) && _v153.b.b.b.a.b.a.b.b) && _v153.b.b.b.a.b.a.b.a.b) && (_v153.b.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.b.a.b.a.b.a.b.b) && (_v153.b.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.b.a.b.a.b.b.b)) && _v153.b.b.b.a.b.b.b) && _v153.b.b.b.a.b.b.a.b) && (_v153.b.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.b.a.b.b.a.b.b)) && (!_v153.b.b.b.a.b.b.b.b)) && _v153.b.b.b.a.b.c.b) && (_v153.b.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.b.a.b.c.b.b)) {
																							break _v153$1;
																						} else {
																							if ((((((((((((((((((((((_v153.b.b.a.$ === 'Constructor') && _v153.b.b.a.b.a.b) && _v153.b.b.a.b.a.a.b) && (_v153.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.a.b.a.a.b.b)) && _v153.b.b.a.b.a.b.b) && _v153.b.b.a.b.a.b.a.b) && (_v153.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.a.b.a.b.a.b.b) && (_v153.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.a.b.a.b.b.b)) && _v153.b.b.a.b.b.b) && _v153.b.b.a.b.b.a.b) && (_v153.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.a.b.b.a.b.b)) && (!_v153.b.b.a.b.b.b.b)) && _v153.b.b.a.b.c.b) && (_v153.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.a.b.c.b.b)) {
																								break _v153$2;
																							} else {
																								if ((((((((((((((((((((_v153.b.a.b.a.b && _v153.b.a.b.a.a.b) && (_v153.b.a.b.a.a.a === 'morphir')) && (!_v153.b.a.b.a.a.b.b)) && _v153.b.a.b.a.b.b) && _v153.b.a.b.a.b.a.b) && (_v153.b.a.b.a.b.a.a === 's')) && _v153.b.a.b.a.b.a.b.b) && (_v153.b.a.b.a.b.a.b.a === 'd')) && _v153.b.a.b.a.b.a.b.b.b) && (_v153.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.a.b.a.b.b.b)) && _v153.b.a.b.b.b) && _v153.b.a.b.b.a.b) && (_v153.b.a.b.b.a.a === 'maybe')) && (!_v153.b.a.b.b.a.b.b)) && (!_v153.b.a.b.b.b.b)) && _v153.b.a.b.c.b) && (_v153.b.a.b.c.a === 'nothing')) && (!_v153.b.a.b.c.b.b)) {
																									break _v153$3;
																								} else {
																									break _v153$5;
																								}
																							}
																						}
																					default:
																						if ((((((((((((((((((((((_v153.b.b.b.a.$ === 'Constructor') && _v153.b.b.b.a.b.a.b) && _v153.b.b.b.a.b.a.a.b) && (_v153.b.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.b.a.b.a.a.b.b)) && _v153.b.b.b.a.b.a.b.b) && _v153.b.b.b.a.b.a.b.a.b) && (_v153.b.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.b.a.b.a.b.a.b.b) && (_v153.b.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.b.a.b.a.b.b.b)) && _v153.b.b.b.a.b.b.b) && _v153.b.b.b.a.b.b.a.b) && (_v153.b.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.b.a.b.b.a.b.b)) && (!_v153.b.b.b.a.b.b.b.b)) && _v153.b.b.b.a.b.c.b) && (_v153.b.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.b.a.b.c.b.b)) {
																							break _v153$1;
																						} else {
																							if ((((((((((((((((((((((_v153.b.b.a.$ === 'Constructor') && _v153.b.b.a.b.a.b) && _v153.b.b.a.b.a.a.b) && (_v153.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.a.b.a.a.b.b)) && _v153.b.b.a.b.a.b.b) && _v153.b.b.a.b.a.b.a.b) && (_v153.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.a.b.a.b.a.b.b) && (_v153.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.a.b.a.b.b.b)) && _v153.b.b.a.b.b.b) && _v153.b.b.a.b.b.a.b) && (_v153.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.a.b.b.a.b.b)) && (!_v153.b.b.a.b.b.b.b)) && _v153.b.b.a.b.c.b) && (_v153.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.a.b.c.b.b)) {
																								break _v153$2;
																							} else {
																								break _v153$5;
																							}
																						}
																				}
																			case 'Constructor':
																				if ((((((((((((((((((((((_v153.b.b.b.a.$ === 'Constructor') && _v153.b.b.b.a.b.a.b) && _v153.b.b.b.a.b.a.a.b) && (_v153.b.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.b.a.b.a.a.b.b)) && _v153.b.b.b.a.b.a.b.b) && _v153.b.b.b.a.b.a.b.a.b) && (_v153.b.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.b.a.b.a.b.a.b.b) && (_v153.b.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.b.a.b.a.b.b.b)) && _v153.b.b.b.a.b.b.b) && _v153.b.b.b.a.b.b.a.b) && (_v153.b.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.b.a.b.b.a.b.b)) && (!_v153.b.b.b.a.b.b.b.b)) && _v153.b.b.b.a.b.c.b) && (_v153.b.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.b.a.b.c.b.b)) {
																					break _v153$1;
																				} else {
																					if ((((((((((((((((((((((_v153.b.b.a.$ === 'Constructor') && _v153.b.b.a.b.a.b) && _v153.b.b.a.b.a.a.b) && (_v153.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.a.b.a.a.b.b)) && _v153.b.b.a.b.a.b.b) && _v153.b.b.a.b.a.b.a.b) && (_v153.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.a.b.a.b.a.b.b) && (_v153.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.a.b.a.b.b.b)) && _v153.b.b.a.b.b.b) && _v153.b.b.a.b.b.a.b) && (_v153.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.a.b.b.a.b.b)) && (!_v153.b.b.a.b.b.b.b)) && _v153.b.b.a.b.c.b) && (_v153.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.a.b.c.b.b)) {
																						break _v153$2;
																					} else {
																						if ((((((((((((((((((((((_v153.b.a.$ === 'Constructor') && _v153.b.a.b.a.b) && _v153.b.a.b.a.a.b) && (_v153.b.a.b.a.a.a === 'morphir')) && (!_v153.b.a.b.a.a.b.b)) && _v153.b.a.b.a.b.b) && _v153.b.a.b.a.b.a.b) && (_v153.b.a.b.a.b.a.a === 's')) && _v153.b.a.b.a.b.a.b.b) && (_v153.b.a.b.a.b.a.b.a === 'd')) && _v153.b.a.b.a.b.a.b.b.b) && (_v153.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.a.b.a.b.b.b)) && _v153.b.a.b.b.b) && _v153.b.a.b.b.a.b) && (_v153.b.a.b.b.a.a === 'maybe')) && (!_v153.b.a.b.b.a.b.b)) && (!_v153.b.a.b.b.b.b)) && _v153.b.a.b.c.b) && (_v153.b.a.b.c.a === 'nothing')) && (!_v153.b.a.b.c.b.b)) {
																							break _v153$3;
																						} else {
																							if ((((((((((((((((((((_v153.a.b.a.b && _v153.a.b.a.a.b) && (_v153.a.b.a.a.a === 'morphir')) && (!_v153.a.b.a.a.b.b)) && _v153.a.b.a.b.b) && _v153.a.b.a.b.a.b) && (_v153.a.b.a.b.a.a === 's')) && _v153.a.b.a.b.a.b.b) && (_v153.a.b.a.b.a.b.a === 'd')) && _v153.a.b.a.b.a.b.b.b) && (_v153.a.b.a.b.a.b.b.a === 'k')) && (!_v153.a.b.a.b.a.b.b.b.b)) && (!_v153.a.b.a.b.b.b)) && _v153.a.b.b.b) && _v153.a.b.b.a.b) && (_v153.a.b.b.a.a === 'maybe')) && (!_v153.a.b.b.a.b.b)) && (!_v153.a.b.b.b.b)) && _v153.a.b.c.b) && (_v153.a.b.c.a === 'nothing')) && (!_v153.a.b.c.b.b)) {
																								var _v247 = _v153.a;
																								var _v248 = _v247.b;
																								var _v249 = _v248.a;
																								var _v250 = _v249.a;
																								var _v251 = _v249.b;
																								var _v252 = _v251.a;
																								var _v253 = _v252.b;
																								var _v254 = _v253.b;
																								var _v255 = _v248.b;
																								var _v256 = _v255.a;
																								var _v257 = _v248.c;
																								var _v258 = _v153.b;
																								var _v259 = _v258.b;
																								var _v260 = _v259.b;
																								return $elm$core$Result$Ok(
																									$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
																							} else {
																								break _v153$5;
																							}
																						}
																					}
																				}
																			default:
																				if ((((((((((((((((((((((_v153.b.b.b.a.$ === 'Constructor') && _v153.b.b.b.a.b.a.b) && _v153.b.b.b.a.b.a.a.b) && (_v153.b.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.b.a.b.a.a.b.b)) && _v153.b.b.b.a.b.a.b.b) && _v153.b.b.b.a.b.a.b.a.b) && (_v153.b.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.b.a.b.a.b.a.b.b) && (_v153.b.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.b.a.b.a.b.b.b)) && _v153.b.b.b.a.b.b.b) && _v153.b.b.b.a.b.b.a.b) && (_v153.b.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.b.a.b.b.a.b.b)) && (!_v153.b.b.b.a.b.b.b.b)) && _v153.b.b.b.a.b.c.b) && (_v153.b.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.b.a.b.c.b.b)) {
																					break _v153$1;
																				} else {
																					if ((((((((((((((((((((((_v153.b.b.a.$ === 'Constructor') && _v153.b.b.a.b.a.b) && _v153.b.b.a.b.a.a.b) && (_v153.b.b.a.b.a.a.a === 'morphir')) && (!_v153.b.b.a.b.a.a.b.b)) && _v153.b.b.a.b.a.b.b) && _v153.b.b.a.b.a.b.a.b) && (_v153.b.b.a.b.a.b.a.a === 's')) && _v153.b.b.a.b.a.b.a.b.b) && (_v153.b.b.a.b.a.b.a.b.a === 'd')) && _v153.b.b.a.b.a.b.a.b.b.b) && (_v153.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.b.a.b.a.b.b.b)) && _v153.b.b.a.b.b.b) && _v153.b.b.a.b.b.a.b) && (_v153.b.b.a.b.b.a.a === 'maybe')) && (!_v153.b.b.a.b.b.a.b.b)) && (!_v153.b.b.a.b.b.b.b)) && _v153.b.b.a.b.c.b) && (_v153.b.b.a.b.c.a === 'nothing')) && (!_v153.b.b.a.b.c.b.b)) {
																						break _v153$2;
																					} else {
																						if ((((((((((((((((((((((_v153.b.a.$ === 'Constructor') && _v153.b.a.b.a.b) && _v153.b.a.b.a.a.b) && (_v153.b.a.b.a.a.a === 'morphir')) && (!_v153.b.a.b.a.a.b.b)) && _v153.b.a.b.a.b.b) && _v153.b.a.b.a.b.a.b) && (_v153.b.a.b.a.b.a.a === 's')) && _v153.b.a.b.a.b.a.b.b) && (_v153.b.a.b.a.b.a.b.a === 'd')) && _v153.b.a.b.a.b.a.b.b.b) && (_v153.b.a.b.a.b.a.b.b.a === 'k')) && (!_v153.b.a.b.a.b.a.b.b.b.b)) && (!_v153.b.a.b.a.b.b.b)) && _v153.b.a.b.b.b) && _v153.b.a.b.b.a.b) && (_v153.b.a.b.b.a.a === 'maybe')) && (!_v153.b.a.b.b.a.b.b)) && (!_v153.b.a.b.b.b.b)) && _v153.b.a.b.c.b) && (_v153.b.a.b.c.a === 'nothing')) && (!_v153.b.a.b.c.b.b)) {
																							break _v153$3;
																						} else {
																							break _v153$5;
																						}
																					}
																				}
																		}
																	} else {
																		break _v153$5;
																	}
																}
																return $elm$core$Result$Err(
																	$author$project$Morphir$Value$Error$UnexpectedArguments(
																		_List_fromArray(
																			[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4])));
															}
															var _v233 = _v153.b;
															var _v234 = _v233.a;
															var _v235 = _v234.b;
															var _v236 = _v235.a;
															var _v237 = _v236.a;
															var _v238 = _v236.b;
															var _v239 = _v238.a;
															var _v240 = _v239.b;
															var _v241 = _v240.b;
															var _v242 = _v235.b;
															var _v243 = _v242.a;
															var _v244 = _v235.c;
															var _v245 = _v233.b;
															var _v246 = _v245.b;
															return $elm$core$Result$Ok(
																$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
														}
														var _v219 = _v153.b;
														var _v220 = _v219.b;
														var _v221 = _v220.a;
														var _v222 = _v221.b;
														var _v223 = _v222.a;
														var _v224 = _v223.a;
														var _v225 = _v223.b;
														var _v226 = _v225.a;
														var _v227 = _v226.b;
														var _v228 = _v227.b;
														var _v229 = _v222.b;
														var _v230 = _v229.a;
														var _v231 = _v222.c;
														var _v232 = _v220.b;
														return $elm$core$Result$Ok(
															$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
													}
													var _v205 = _v153.b;
													var _v206 = _v205.b;
													var _v207 = _v206.b;
													var _v208 = _v207.a;
													var _v209 = _v208.b;
													var _v210 = _v209.a;
													var _v211 = _v210.a;
													var _v212 = _v210.b;
													var _v213 = _v212.a;
													var _v214 = _v213.b;
													var _v215 = _v214.b;
													var _v216 = _v209.b;
													var _v217 = _v216.a;
													var _v218 = _v209.c;
													return $elm$core$Result$Ok(
														$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
												},
												_eval(arg4));
										},
										_eval(arg3));
								},
								_eval(arg2));
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map5',
		F2(
			function (_eval, args) {
				if ((((((args.b && args.b.b) && args.b.b.b) && args.b.b.b.b) && args.b.b.b.b.b) && args.b.b.b.b.b.b) && (!args.b.b.b.b.b.b.b)) {
					var fun = args.a;
					var _v262 = args.b;
					var arg1 = _v262.a;
					var _v263 = _v262.b;
					var arg2 = _v263.a;
					var _v264 = _v263.b;
					var arg3 = _v264.a;
					var _v265 = _v264.b;
					var arg4 = _v265.a;
					var _v266 = _v265.b;
					var arg5 = _v266.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							return A2(
								$elm$core$Result$andThen,
								function (evaluatedArg2) {
									return A2(
										$elm$core$Result$andThen,
										function (evaluatedArg3) {
											return A2(
												$elm$core$Result$andThen,
												function (evaluatedArg4) {
													return A2(
														$elm$core$Result$andThen,
														function (evaluatedArg5) {
															var _v267 = _List_fromArray(
																[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4, evaluatedArg5]);
															_v267$1:
															while (true) {
																_v267$2:
																while (true) {
																	_v267$3:
																	while (true) {
																		_v267$4:
																		while (true) {
																			_v267$6:
																			while (true) {
																				if (((((_v267.b && _v267.b.b) && _v267.b.b.b) && _v267.b.b.b.b) && _v267.b.b.b.b.b) && (!_v267.b.b.b.b.b.b)) {
																					switch (_v267.a.$) {
																						case 'Apply':
																							switch (_v267.b.a.$) {
																								case 'Apply':
																									switch (_v267.b.b.a.$) {
																										case 'Apply':
																											switch (_v267.b.b.b.a.$) {
																												case 'Apply':
																													switch (_v267.b.b.b.b.a.$) {
																														case 'Apply':
																															if ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((_v267.a.b.$ === 'Constructor') && _v267.a.b.b.a.b) && _v267.a.b.b.a.a.b) && (_v267.a.b.b.a.a.a === 'morphir')) && (!_v267.a.b.b.a.a.b.b)) && _v267.a.b.b.a.b.b) && _v267.a.b.b.a.b.a.b) && (_v267.a.b.b.a.b.a.a === 's')) && _v267.a.b.b.a.b.a.b.b) && (_v267.a.b.b.a.b.a.b.a === 'd')) && _v267.a.b.b.a.b.a.b.b.b) && (_v267.a.b.b.a.b.a.b.b.a === 'k')) && (!_v267.a.b.b.a.b.a.b.b.b.b)) && (!_v267.a.b.b.a.b.b.b)) && _v267.a.b.b.b.b) && _v267.a.b.b.b.a.b) && (_v267.a.b.b.b.a.a === 'maybe')) && (!_v267.a.b.b.b.a.b.b)) && (!_v267.a.b.b.b.b.b)) && _v267.a.b.b.c.b) && (_v267.a.b.b.c.a === 'just')) && (!_v267.a.b.b.c.b.b)) && (_v267.b.a.b.$ === 'Constructor')) && _v267.b.a.b.b.a.b) && _v267.b.a.b.b.a.a.b) && (_v267.b.a.b.b.a.a.a === 'morphir')) && (!_v267.b.a.b.b.a.a.b.b)) && _v267.b.a.b.b.a.b.b) && _v267.b.a.b.b.a.b.a.b) && (_v267.b.a.b.b.a.b.a.a === 's')) && _v267.b.a.b.b.a.b.a.b.b) && (_v267.b.a.b.b.a.b.a.b.a === 'd')) && _v267.b.a.b.b.a.b.a.b.b.b) && (_v267.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v267.b.a.b.b.a.b.a.b.b.b.b)) && (!_v267.b.a.b.b.a.b.b.b)) && _v267.b.a.b.b.b.b) && _v267.b.a.b.b.b.a.b) && (_v267.b.a.b.b.b.a.a === 'maybe')) && (!_v267.b.a.b.b.b.a.b.b)) && (!_v267.b.a.b.b.b.b.b)) && _v267.b.a.b.b.c.b) && (_v267.b.a.b.b.c.a === 'just')) && (!_v267.b.a.b.b.c.b.b)) && (_v267.b.b.a.b.$ === 'Constructor')) && _v267.b.b.a.b.b.a.b) && _v267.b.b.a.b.b.a.a.b) && (_v267.b.b.a.b.b.a.a.a === 'morphir')) && (!_v267.b.b.a.b.b.a.a.b.b)) && _v267.b.b.a.b.b.a.b.b) && _v267.b.b.a.b.b.a.b.a.b) && (_v267.b.b.a.b.b.a.b.a.a === 's')) && _v267.b.b.a.b.b.a.b.a.b.b) && (_v267.b.b.a.b.b.a.b.a.b.a === 'd')) && _v267.b.b.a.b.b.a.b.a.b.b.b) && (_v267.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v267.b.b.a.b.b.a.b.b.b)) && _v267.b.b.a.b.b.b.b) && _v267.b.b.a.b.b.b.a.b) && (_v267.b.b.a.b.b.b.a.a === 'maybe')) && (!_v267.b.b.a.b.b.b.a.b.b)) && (!_v267.b.b.a.b.b.b.b.b)) && _v267.b.b.a.b.b.c.b) && (_v267.b.b.a.b.b.c.a === 'just')) && (!_v267.b.b.a.b.b.c.b.b)) && (_v267.b.b.b.a.b.$ === 'Constructor')) && _v267.b.b.b.a.b.b.a.b) && _v267.b.b.b.a.b.b.a.a.b) && (_v267.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v267.b.b.b.a.b.b.a.a.b.b)) && _v267.b.b.b.a.b.b.a.b.b) && _v267.b.b.b.a.b.b.a.b.a.b) && (_v267.b.b.b.a.b.b.a.b.a.a === 's')) && _v267.b.b.b.a.b.b.a.b.a.b.b) && (_v267.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v267.b.b.b.a.b.b.a.b.a.b.b.b) && (_v267.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.a.b.b.a.b.b.b)) && _v267.b.b.b.a.b.b.b.b) && _v267.b.b.b.a.b.b.b.a.b) && (_v267.b.b.b.a.b.b.b.a.a === 'maybe')) && (!_v267.b.b.b.a.b.b.b.a.b.b)) && (!_v267.b.b.b.a.b.b.b.b.b)) && _v267.b.b.b.a.b.b.c.b) && (_v267.b.b.b.a.b.b.c.a === 'just')) && (!_v267.b.b.b.a.b.b.c.b.b)) && (_v267.b.b.b.b.a.b.$ === 'Constructor')) && _v267.b.b.b.b.a.b.b.a.b) && _v267.b.b.b.b.a.b.b.a.a.b) && (_v267.b.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.b.a.a.b.b)) && _v267.b.b.b.b.a.b.b.a.b.b) && _v267.b.b.b.b.a.b.b.a.b.a.b) && (_v267.b.b.b.b.a.b.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b.b) && _v267.b.b.b.b.a.b.b.b.a.b) && (_v267.b.b.b.b.a.b.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b.b)) && _v267.b.b.b.b.a.b.b.c.b) && (_v267.b.b.b.b.a.b.b.c.a === 'just')) && (!_v267.b.b.b.b.a.b.b.c.b.b)) {
																																var _v268 = _v267.a;
																																var _v269 = _v268.b;
																																var _v270 = _v269.b;
																																var _v271 = _v270.a;
																																var _v272 = _v271.a;
																																var _v273 = _v271.b;
																																var _v274 = _v273.a;
																																var _v275 = _v274.b;
																																var _v276 = _v275.b;
																																var _v277 = _v270.b;
																																var _v278 = _v277.a;
																																var _v279 = _v270.c;
																																var value1 = _v268.c;
																																var _v280 = _v267.b;
																																var _v281 = _v280.a;
																																var _v282 = _v281.b;
																																var _v283 = _v282.b;
																																var _v284 = _v283.a;
																																var _v285 = _v284.a;
																																var _v286 = _v284.b;
																																var _v287 = _v286.a;
																																var _v288 = _v287.b;
																																var _v289 = _v288.b;
																																var _v290 = _v283.b;
																																var _v291 = _v290.a;
																																var _v292 = _v283.c;
																																var value2 = _v281.c;
																																var _v293 = _v280.b;
																																var _v294 = _v293.a;
																																var _v295 = _v294.b;
																																var _v296 = _v295.b;
																																var _v297 = _v296.a;
																																var _v298 = _v297.a;
																																var _v299 = _v297.b;
																																var _v300 = _v299.a;
																																var _v301 = _v300.b;
																																var _v302 = _v301.b;
																																var _v303 = _v296.b;
																																var _v304 = _v303.a;
																																var _v305 = _v296.c;
																																var value3 = _v294.c;
																																var _v306 = _v293.b;
																																var _v307 = _v306.a;
																																var _v308 = _v307.b;
																																var _v309 = _v308.b;
																																var _v310 = _v309.a;
																																var _v311 = _v310.a;
																																var _v312 = _v310.b;
																																var _v313 = _v312.a;
																																var _v314 = _v313.b;
																																var _v315 = _v314.b;
																																var _v316 = _v309.b;
																																var _v317 = _v316.a;
																																var _v318 = _v309.c;
																																var value4 = _v307.c;
																																var _v319 = _v306.b;
																																var _v320 = _v319.a;
																																var _v321 = _v320.b;
																																var _v322 = _v321.b;
																																var _v323 = _v322.a;
																																var _v324 = _v323.a;
																																var _v325 = _v323.b;
																																var _v326 = _v325.a;
																																var _v327 = _v326.b;
																																var _v328 = _v327.b;
																																var _v329 = _v322.b;
																																var _v330 = _v329.a;
																																var _v331 = _v322.c;
																																var value5 = _v320.c;
																																return _eval(
																																	A3(
																																		$author$project$Morphir$IR$Value$Apply,
																																		_Utils_Tuple0,
																																		A3(
																																			$author$project$Morphir$IR$Value$Apply,
																																			_Utils_Tuple0,
																																			A3(
																																				$author$project$Morphir$IR$Value$Apply,
																																				_Utils_Tuple0,
																																				A3(
																																					$author$project$Morphir$IR$Value$Apply,
																																					_Utils_Tuple0,
																																					A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1),
																																					value2),
																																				value3),
																																			value4),
																																		value5));
																															} else {
																																break _v267$6;
																															}
																														case 'Constructor':
																															if ((((((((((((((((((((_v267.b.b.b.b.a.b.a.b && _v267.b.b.b.b.a.b.a.a.b) && (_v267.b.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.b.a.b.a.b.b) && _v267.b.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b) && _v267.b.b.b.b.a.b.b.a.b) && (_v267.b.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b)) && _v267.b.b.b.b.a.b.c.b) && (_v267.b.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.b.a.b.c.b.b)) {
																																break _v267$1;
																															} else {
																																break _v267$6;
																															}
																														default:
																															break _v267$6;
																													}
																												case 'Constructor':
																													if ((((((((((((((((((((((_v267.b.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.b.a.b.a.b) && _v267.b.b.b.b.a.b.a.a.b) && (_v267.b.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.b.a.b.a.b.b) && _v267.b.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b) && _v267.b.b.b.b.a.b.b.a.b) && (_v267.b.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b)) && _v267.b.b.b.b.a.b.c.b) && (_v267.b.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.b.a.b.c.b.b)) {
																														break _v267$1;
																													} else {
																														if ((((((((((((((((((((_v267.b.b.b.a.b.a.b && _v267.b.b.b.a.b.a.a.b) && (_v267.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.a.b.a.b.b) && _v267.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.a.b.b.b) && _v267.b.b.b.a.b.b.a.b) && (_v267.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.a.b.b.b.b)) && _v267.b.b.b.a.b.c.b) && (_v267.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.a.b.c.b.b)) {
																															break _v267$2;
																														} else {
																															break _v267$6;
																														}
																													}
																												default:
																													if ((((((((((((((((((((((_v267.b.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.b.a.b.a.b) && _v267.b.b.b.b.a.b.a.a.b) && (_v267.b.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.b.a.b.a.b.b) && _v267.b.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b) && _v267.b.b.b.b.a.b.b.a.b) && (_v267.b.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b)) && _v267.b.b.b.b.a.b.c.b) && (_v267.b.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.b.a.b.c.b.b)) {
																														break _v267$1;
																													} else {
																														break _v267$6;
																													}
																											}
																										case 'Constructor':
																											if ((((((((((((((((((((((_v267.b.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.b.a.b.a.b) && _v267.b.b.b.b.a.b.a.a.b) && (_v267.b.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.b.a.b.a.b.b) && _v267.b.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b) && _v267.b.b.b.b.a.b.b.a.b) && (_v267.b.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b)) && _v267.b.b.b.b.a.b.c.b) && (_v267.b.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.b.a.b.c.b.b)) {
																												break _v267$1;
																											} else {
																												if ((((((((((((((((((((((_v267.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.a.b.a.b) && _v267.b.b.b.a.b.a.a.b) && (_v267.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.a.b.a.b.b) && _v267.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.a.b.b.b) && _v267.b.b.b.a.b.b.a.b) && (_v267.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.a.b.b.b.b)) && _v267.b.b.b.a.b.c.b) && (_v267.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.a.b.c.b.b)) {
																													break _v267$2;
																												} else {
																													if ((((((((((((((((((((_v267.b.b.a.b.a.b && _v267.b.b.a.b.a.a.b) && (_v267.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.a.b.a.a.b.b)) && _v267.b.b.a.b.a.b.b) && _v267.b.b.a.b.a.b.a.b) && (_v267.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.a.b.a.b.a.b.b) && (_v267.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.a.b.a.b.b.b)) && _v267.b.b.a.b.b.b) && _v267.b.b.a.b.b.a.b) && (_v267.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.a.b.b.a.b.b)) && (!_v267.b.b.a.b.b.b.b)) && _v267.b.b.a.b.c.b) && (_v267.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.a.b.c.b.b)) {
																														break _v267$3;
																													} else {
																														break _v267$6;
																													}
																												}
																											}
																										default:
																											if ((((((((((((((((((((((_v267.b.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.b.a.b.a.b) && _v267.b.b.b.b.a.b.a.a.b) && (_v267.b.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.b.a.b.a.b.b) && _v267.b.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b) && _v267.b.b.b.b.a.b.b.a.b) && (_v267.b.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b)) && _v267.b.b.b.b.a.b.c.b) && (_v267.b.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.b.a.b.c.b.b)) {
																												break _v267$1;
																											} else {
																												if ((((((((((((((((((((((_v267.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.a.b.a.b) && _v267.b.b.b.a.b.a.a.b) && (_v267.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.a.b.a.b.b) && _v267.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.a.b.b.b) && _v267.b.b.b.a.b.b.a.b) && (_v267.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.a.b.b.b.b)) && _v267.b.b.b.a.b.c.b) && (_v267.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.a.b.c.b.b)) {
																													break _v267$2;
																												} else {
																													break _v267$6;
																												}
																											}
																									}
																								case 'Constructor':
																									if ((((((((((((((((((((((_v267.b.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.b.a.b.a.b) && _v267.b.b.b.b.a.b.a.a.b) && (_v267.b.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.b.a.b.a.b.b) && _v267.b.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b) && _v267.b.b.b.b.a.b.b.a.b) && (_v267.b.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b)) && _v267.b.b.b.b.a.b.c.b) && (_v267.b.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.b.a.b.c.b.b)) {
																										break _v267$1;
																									} else {
																										if ((((((((((((((((((((((_v267.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.a.b.a.b) && _v267.b.b.b.a.b.a.a.b) && (_v267.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.a.b.a.b.b) && _v267.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.a.b.b.b) && _v267.b.b.b.a.b.b.a.b) && (_v267.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.a.b.b.b.b)) && _v267.b.b.b.a.b.c.b) && (_v267.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.a.b.c.b.b)) {
																											break _v267$2;
																										} else {
																											if ((((((((((((((((((((((_v267.b.b.a.$ === 'Constructor') && _v267.b.b.a.b.a.b) && _v267.b.b.a.b.a.a.b) && (_v267.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.a.b.a.a.b.b)) && _v267.b.b.a.b.a.b.b) && _v267.b.b.a.b.a.b.a.b) && (_v267.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.a.b.a.b.a.b.b) && (_v267.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.a.b.a.b.b.b)) && _v267.b.b.a.b.b.b) && _v267.b.b.a.b.b.a.b) && (_v267.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.a.b.b.a.b.b)) && (!_v267.b.b.a.b.b.b.b)) && _v267.b.b.a.b.c.b) && (_v267.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.a.b.c.b.b)) {
																												break _v267$3;
																											} else {
																												if ((((((((((((((((((((_v267.b.a.b.a.b && _v267.b.a.b.a.a.b) && (_v267.b.a.b.a.a.a === 'morphir')) && (!_v267.b.a.b.a.a.b.b)) && _v267.b.a.b.a.b.b) && _v267.b.a.b.a.b.a.b) && (_v267.b.a.b.a.b.a.a === 's')) && _v267.b.a.b.a.b.a.b.b) && (_v267.b.a.b.a.b.a.b.a === 'd')) && _v267.b.a.b.a.b.a.b.b.b) && (_v267.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.a.b.a.b.b.b)) && _v267.b.a.b.b.b) && _v267.b.a.b.b.a.b) && (_v267.b.a.b.b.a.a === 'maybe')) && (!_v267.b.a.b.b.a.b.b)) && (!_v267.b.a.b.b.b.b)) && _v267.b.a.b.c.b) && (_v267.b.a.b.c.a === 'nothing')) && (!_v267.b.a.b.c.b.b)) {
																													break _v267$4;
																												} else {
																													break _v267$6;
																												}
																											}
																										}
																									}
																								default:
																									if ((((((((((((((((((((((_v267.b.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.b.a.b.a.b) && _v267.b.b.b.b.a.b.a.a.b) && (_v267.b.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.b.a.b.a.b.b) && _v267.b.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b) && _v267.b.b.b.b.a.b.b.a.b) && (_v267.b.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b)) && _v267.b.b.b.b.a.b.c.b) && (_v267.b.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.b.a.b.c.b.b)) {
																										break _v267$1;
																									} else {
																										if ((((((((((((((((((((((_v267.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.a.b.a.b) && _v267.b.b.b.a.b.a.a.b) && (_v267.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.a.b.a.b.b) && _v267.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.a.b.b.b) && _v267.b.b.b.a.b.b.a.b) && (_v267.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.a.b.b.b.b)) && _v267.b.b.b.a.b.c.b) && (_v267.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.a.b.c.b.b)) {
																											break _v267$2;
																										} else {
																											if ((((((((((((((((((((((_v267.b.b.a.$ === 'Constructor') && _v267.b.b.a.b.a.b) && _v267.b.b.a.b.a.a.b) && (_v267.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.a.b.a.a.b.b)) && _v267.b.b.a.b.a.b.b) && _v267.b.b.a.b.a.b.a.b) && (_v267.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.a.b.a.b.a.b.b) && (_v267.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.a.b.a.b.b.b)) && _v267.b.b.a.b.b.b) && _v267.b.b.a.b.b.a.b) && (_v267.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.a.b.b.a.b.b)) && (!_v267.b.b.a.b.b.b.b)) && _v267.b.b.a.b.c.b) && (_v267.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.a.b.c.b.b)) {
																												break _v267$3;
																											} else {
																												break _v267$6;
																											}
																										}
																									}
																							}
																						case 'Constructor':
																							if ((((((((((((((((((((((_v267.b.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.b.a.b.a.b) && _v267.b.b.b.b.a.b.a.a.b) && (_v267.b.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.b.a.b.a.b.b) && _v267.b.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b) && _v267.b.b.b.b.a.b.b.a.b) && (_v267.b.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b)) && _v267.b.b.b.b.a.b.c.b) && (_v267.b.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.b.a.b.c.b.b)) {
																								break _v267$1;
																							} else {
																								if ((((((((((((((((((((((_v267.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.a.b.a.b) && _v267.b.b.b.a.b.a.a.b) && (_v267.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.a.b.a.b.b) && _v267.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.a.b.b.b) && _v267.b.b.b.a.b.b.a.b) && (_v267.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.a.b.b.b.b)) && _v267.b.b.b.a.b.c.b) && (_v267.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.a.b.c.b.b)) {
																									break _v267$2;
																								} else {
																									if ((((((((((((((((((((((_v267.b.b.a.$ === 'Constructor') && _v267.b.b.a.b.a.b) && _v267.b.b.a.b.a.a.b) && (_v267.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.a.b.a.a.b.b)) && _v267.b.b.a.b.a.b.b) && _v267.b.b.a.b.a.b.a.b) && (_v267.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.a.b.a.b.a.b.b) && (_v267.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.a.b.a.b.b.b)) && _v267.b.b.a.b.b.b) && _v267.b.b.a.b.b.a.b) && (_v267.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.a.b.b.a.b.b)) && (!_v267.b.b.a.b.b.b.b)) && _v267.b.b.a.b.c.b) && (_v267.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.a.b.c.b.b)) {
																										break _v267$3;
																									} else {
																										if ((((((((((((((((((((((_v267.b.a.$ === 'Constructor') && _v267.b.a.b.a.b) && _v267.b.a.b.a.a.b) && (_v267.b.a.b.a.a.a === 'morphir')) && (!_v267.b.a.b.a.a.b.b)) && _v267.b.a.b.a.b.b) && _v267.b.a.b.a.b.a.b) && (_v267.b.a.b.a.b.a.a === 's')) && _v267.b.a.b.a.b.a.b.b) && (_v267.b.a.b.a.b.a.b.a === 'd')) && _v267.b.a.b.a.b.a.b.b.b) && (_v267.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.a.b.a.b.b.b)) && _v267.b.a.b.b.b) && _v267.b.a.b.b.a.b) && (_v267.b.a.b.b.a.a === 'maybe')) && (!_v267.b.a.b.b.a.b.b)) && (!_v267.b.a.b.b.b.b)) && _v267.b.a.b.c.b) && (_v267.b.a.b.c.a === 'nothing')) && (!_v267.b.a.b.c.b.b)) {
																											break _v267$4;
																										} else {
																											if ((((((((((((((((((((_v267.a.b.a.b && _v267.a.b.a.a.b) && (_v267.a.b.a.a.a === 'morphir')) && (!_v267.a.b.a.a.b.b)) && _v267.a.b.a.b.b) && _v267.a.b.a.b.a.b) && (_v267.a.b.a.b.a.a === 's')) && _v267.a.b.a.b.a.b.b) && (_v267.a.b.a.b.a.b.a === 'd')) && _v267.a.b.a.b.a.b.b.b) && (_v267.a.b.a.b.a.b.b.a === 'k')) && (!_v267.a.b.a.b.a.b.b.b.b)) && (!_v267.a.b.a.b.b.b)) && _v267.a.b.b.b) && _v267.a.b.b.a.b) && (_v267.a.b.b.a.a === 'maybe')) && (!_v267.a.b.b.a.b.b)) && (!_v267.a.b.b.b.b)) && _v267.a.b.c.b) && (_v267.a.b.c.a === 'nothing')) && (!_v267.a.b.c.b.b)) {
																												var _v392 = _v267.a;
																												var _v393 = _v392.b;
																												var _v394 = _v393.a;
																												var _v395 = _v394.a;
																												var _v396 = _v394.b;
																												var _v397 = _v396.a;
																												var _v398 = _v397.b;
																												var _v399 = _v398.b;
																												var _v400 = _v393.b;
																												var _v401 = _v400.a;
																												var _v402 = _v393.c;
																												var _v403 = _v267.b;
																												var _v404 = _v403.b;
																												var _v405 = _v404.b;
																												var _v406 = _v405.b;
																												return $elm$core$Result$Ok(
																													$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
																											} else {
																												break _v267$6;
																											}
																										}
																									}
																								}
																							}
																						default:
																							if ((((((((((((((((((((((_v267.b.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.b.a.b.a.b) && _v267.b.b.b.b.a.b.a.a.b) && (_v267.b.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.b.a.b.a.b.b) && _v267.b.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.b.a.b.b.b) && _v267.b.b.b.b.a.b.b.a.b) && (_v267.b.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.b.a.b.b.b.b)) && _v267.b.b.b.b.a.b.c.b) && (_v267.b.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.b.a.b.c.b.b)) {
																								break _v267$1;
																							} else {
																								if ((((((((((((((((((((((_v267.b.b.b.a.$ === 'Constructor') && _v267.b.b.b.a.b.a.b) && _v267.b.b.b.a.b.a.a.b) && (_v267.b.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.b.a.b.a.a.b.b)) && _v267.b.b.b.a.b.a.b.b) && _v267.b.b.b.a.b.a.b.a.b) && (_v267.b.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.b.a.b.a.b.a.b.b) && (_v267.b.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.b.a.b.a.b.b.b)) && _v267.b.b.b.a.b.b.b) && _v267.b.b.b.a.b.b.a.b) && (_v267.b.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.b.a.b.b.a.b.b)) && (!_v267.b.b.b.a.b.b.b.b)) && _v267.b.b.b.a.b.c.b) && (_v267.b.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.b.a.b.c.b.b)) {
																									break _v267$2;
																								} else {
																									if ((((((((((((((((((((((_v267.b.b.a.$ === 'Constructor') && _v267.b.b.a.b.a.b) && _v267.b.b.a.b.a.a.b) && (_v267.b.b.a.b.a.a.a === 'morphir')) && (!_v267.b.b.a.b.a.a.b.b)) && _v267.b.b.a.b.a.b.b) && _v267.b.b.a.b.a.b.a.b) && (_v267.b.b.a.b.a.b.a.a === 's')) && _v267.b.b.a.b.a.b.a.b.b) && (_v267.b.b.a.b.a.b.a.b.a === 'd')) && _v267.b.b.a.b.a.b.a.b.b.b) && (_v267.b.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.b.a.b.a.b.b.b)) && _v267.b.b.a.b.b.b) && _v267.b.b.a.b.b.a.b) && (_v267.b.b.a.b.b.a.a === 'maybe')) && (!_v267.b.b.a.b.b.a.b.b)) && (!_v267.b.b.a.b.b.b.b)) && _v267.b.b.a.b.c.b) && (_v267.b.b.a.b.c.a === 'nothing')) && (!_v267.b.b.a.b.c.b.b)) {
																										break _v267$3;
																									} else {
																										if ((((((((((((((((((((((_v267.b.a.$ === 'Constructor') && _v267.b.a.b.a.b) && _v267.b.a.b.a.a.b) && (_v267.b.a.b.a.a.a === 'morphir')) && (!_v267.b.a.b.a.a.b.b)) && _v267.b.a.b.a.b.b) && _v267.b.a.b.a.b.a.b) && (_v267.b.a.b.a.b.a.a === 's')) && _v267.b.a.b.a.b.a.b.b) && (_v267.b.a.b.a.b.a.b.a === 'd')) && _v267.b.a.b.a.b.a.b.b.b) && (_v267.b.a.b.a.b.a.b.b.a === 'k')) && (!_v267.b.a.b.a.b.a.b.b.b.b)) && (!_v267.b.a.b.a.b.b.b)) && _v267.b.a.b.b.b) && _v267.b.a.b.b.a.b) && (_v267.b.a.b.b.a.a === 'maybe')) && (!_v267.b.a.b.b.a.b.b)) && (!_v267.b.a.b.b.b.b)) && _v267.b.a.b.c.b) && (_v267.b.a.b.c.a === 'nothing')) && (!_v267.b.a.b.c.b.b)) {
																											break _v267$4;
																										} else {
																											break _v267$6;
																										}
																									}
																								}
																							}
																					}
																				} else {
																					break _v267$6;
																				}
																			}
																			return $elm$core$Result$Err(
																				$author$project$Morphir$Value$Error$UnexpectedArguments(
																					_List_fromArray(
																						[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4, evaluatedArg5])));
																		}
																		var _v377 = _v267.b;
																		var _v378 = _v377.a;
																		var _v379 = _v378.b;
																		var _v380 = _v379.a;
																		var _v381 = _v380.a;
																		var _v382 = _v380.b;
																		var _v383 = _v382.a;
																		var _v384 = _v383.b;
																		var _v385 = _v384.b;
																		var _v386 = _v379.b;
																		var _v387 = _v386.a;
																		var _v388 = _v379.c;
																		var _v389 = _v377.b;
																		var _v390 = _v389.b;
																		var _v391 = _v390.b;
																		return $elm$core$Result$Ok(
																			$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
																	}
																	var _v362 = _v267.b;
																	var _v363 = _v362.b;
																	var _v364 = _v363.a;
																	var _v365 = _v364.b;
																	var _v366 = _v365.a;
																	var _v367 = _v366.a;
																	var _v368 = _v366.b;
																	var _v369 = _v368.a;
																	var _v370 = _v369.b;
																	var _v371 = _v370.b;
																	var _v372 = _v365.b;
																	var _v373 = _v372.a;
																	var _v374 = _v365.c;
																	var _v375 = _v363.b;
																	var _v376 = _v375.b;
																	return $elm$core$Result$Ok(
																		$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
																}
																var _v347 = _v267.b;
																var _v348 = _v347.b;
																var _v349 = _v348.b;
																var _v350 = _v349.a;
																var _v351 = _v350.b;
																var _v352 = _v351.a;
																var _v353 = _v352.a;
																var _v354 = _v352.b;
																var _v355 = _v354.a;
																var _v356 = _v355.b;
																var _v357 = _v356.b;
																var _v358 = _v351.b;
																var _v359 = _v358.a;
																var _v360 = _v351.c;
																var _v361 = _v349.b;
																return $elm$core$Result$Ok(
																	$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
															}
															var _v332 = _v267.b;
															var _v333 = _v332.b;
															var _v334 = _v333.b;
															var _v335 = _v334.b;
															var _v336 = _v335.a;
															var _v337 = _v336.b;
															var _v338 = _v337.a;
															var _v339 = _v338.a;
															var _v340 = _v338.b;
															var _v341 = _v340.a;
															var _v342 = _v341.b;
															var _v343 = _v342.b;
															var _v344 = _v337.b;
															var _v345 = _v344.a;
															var _v346 = _v337.c;
															return $elm$core$Result$Ok(
																$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
														},
														_eval(arg5));
												},
												_eval(arg4));
										},
										_eval(arg3));
								},
								_eval(arg2));
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			}))
	]);
var $author$project$Morphir$Value$Error$ExpectedResult = function (a) {
	return {$: 'ExpectedResult', a: a};
};
var $author$project$Morphir$IR$SDK$Result$moduleName = $author$project$Morphir$IR$Path$fromString('Result');
var $author$project$Morphir$IR$SDK$Result$err = F2(
	function (va, error) {
		return A3(
			$author$project$Morphir$IR$Value$Apply,
			va,
			A2(
				$author$project$Morphir$IR$Value$Constructor,
				va,
				A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Result$moduleName, 'Err')),
			error);
	});
var $author$project$Morphir$IR$SDK$Result$ok = F2(
	function (va, value) {
		return A3(
			$author$project$Morphir$IR$Value$Apply,
			va,
			A2(
				$author$project$Morphir$IR$Value$Constructor,
				va,
				A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Result$moduleName, 'Ok')),
			value);
	});
var $author$project$Morphir$IR$SDK$Result$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple2(
		'andThen',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v1 = args.b;
					var arg1 = _v1.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							_v2$2:
							while (true) {
								if ((((((((((((((((((((((evaluatedArg1.$ === 'Apply') && (evaluatedArg1.b.$ === 'Constructor')) && evaluatedArg1.b.b.a.b) && evaluatedArg1.b.b.a.a.b) && (evaluatedArg1.b.b.a.a.a === 'morphir')) && (!evaluatedArg1.b.b.a.a.b.b)) && evaluatedArg1.b.b.a.b.b) && evaluatedArg1.b.b.a.b.a.b) && (evaluatedArg1.b.b.a.b.a.a === 's')) && evaluatedArg1.b.b.a.b.a.b.b) && (evaluatedArg1.b.b.a.b.a.b.a === 'd')) && evaluatedArg1.b.b.a.b.a.b.b.b) && (evaluatedArg1.b.b.a.b.a.b.b.a === 'k')) && (!evaluatedArg1.b.b.a.b.a.b.b.b.b)) && (!evaluatedArg1.b.b.a.b.b.b)) && evaluatedArg1.b.b.b.b) && evaluatedArg1.b.b.b.a.b) && (evaluatedArg1.b.b.b.a.a === 'result')) && (!evaluatedArg1.b.b.b.a.b.b)) && (!evaluatedArg1.b.b.b.b.b)) && evaluatedArg1.b.b.c.b) && (!evaluatedArg1.b.b.c.b.b)) {
									switch (evaluatedArg1.b.b.c.a) {
										case 'ok':
											var _v3 = evaluatedArg1.b;
											var _v4 = _v3.b;
											var _v5 = _v4.a;
											var _v6 = _v5.a;
											var _v7 = _v5.b;
											var _v8 = _v7.a;
											var _v9 = _v8.b;
											var _v10 = _v9.b;
											var _v11 = _v4.b;
											var _v12 = _v11.a;
											var _v13 = _v4.c;
											var value1 = evaluatedArg1.c;
											return _eval(
												A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1));
										case 'err':
											var _v14 = evaluatedArg1.b;
											var _v15 = _v14.b;
											var _v16 = _v15.a;
											var _v17 = _v16.a;
											var _v18 = _v16.b;
											var _v19 = _v18.a;
											var _v20 = _v19.b;
											var _v21 = _v20.b;
											var _v22 = _v15.b;
											var _v23 = _v22.a;
											var _v24 = _v15.c;
											var error = evaluatedArg1.c;
											return $elm$core$Result$Ok(
												A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
										default:
											break _v2$2;
									}
								} else {
									break _v2$2;
								}
							}
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedResult(evaluatedArg1));
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v26 = args.b;
					var arg1 = _v26.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							_v27$2:
							while (true) {
								if ((((((((((((((((((((((evaluatedArg1.$ === 'Apply') && (evaluatedArg1.b.$ === 'Constructor')) && evaluatedArg1.b.b.a.b) && evaluatedArg1.b.b.a.a.b) && (evaluatedArg1.b.b.a.a.a === 'morphir')) && (!evaluatedArg1.b.b.a.a.b.b)) && evaluatedArg1.b.b.a.b.b) && evaluatedArg1.b.b.a.b.a.b) && (evaluatedArg1.b.b.a.b.a.a === 's')) && evaluatedArg1.b.b.a.b.a.b.b) && (evaluatedArg1.b.b.a.b.a.b.a === 'd')) && evaluatedArg1.b.b.a.b.a.b.b.b) && (evaluatedArg1.b.b.a.b.a.b.b.a === 'k')) && (!evaluatedArg1.b.b.a.b.a.b.b.b.b)) && (!evaluatedArg1.b.b.a.b.b.b)) && evaluatedArg1.b.b.b.b) && evaluatedArg1.b.b.b.a.b) && (evaluatedArg1.b.b.b.a.a === 'result')) && (!evaluatedArg1.b.b.b.a.b.b)) && (!evaluatedArg1.b.b.b.b.b)) && evaluatedArg1.b.b.c.b) && (!evaluatedArg1.b.b.c.b.b)) {
									switch (evaluatedArg1.b.b.c.a) {
										case 'ok':
											var _v28 = evaluatedArg1.b;
											var _v29 = _v28.b;
											var _v30 = _v29.a;
											var _v31 = _v30.a;
											var _v32 = _v30.b;
											var _v33 = _v32.a;
											var _v34 = _v33.b;
											var _v35 = _v34.b;
											var _v36 = _v29.b;
											var _v37 = _v36.a;
											var _v38 = _v29.c;
											var value1 = evaluatedArg1.c;
											return A2(
												$elm$core$Result$map,
												function (value) {
													return A2($author$project$Morphir$IR$SDK$Result$ok, _Utils_Tuple0, value);
												},
												_eval(
													A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1)));
										case 'err':
											var _v39 = evaluatedArg1.b;
											var _v40 = _v39.b;
											var _v41 = _v40.a;
											var _v42 = _v41.a;
											var _v43 = _v41.b;
											var _v44 = _v43.a;
											var _v45 = _v44.b;
											var _v46 = _v45.b;
											var _v47 = _v40.b;
											var _v48 = _v47.a;
											var _v49 = _v40.c;
											var error = evaluatedArg1.c;
											return $elm$core$Result$Ok(
												A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
										default:
											break _v27$2;
									}
								} else {
									break _v27$2;
								}
							}
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedResult(evaluatedArg1));
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map2',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun = args.a;
					var _v51 = args.b;
					var arg1 = _v51.a;
					var _v52 = _v51.b;
					var arg2 = _v52.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A3(
							$elm$core$Result$map2,
							F2(
								function (evaluatedArg1, evaluatedArg2) {
									var _v53 = _Utils_Tuple2(evaluatedArg1, evaluatedArg2);
									_v53$1:
									while (true) {
										_v53$2:
										while (true) {
											_v53$3:
											while (true) {
												if ((((((((((((((((((((((_v53.a.$ === 'Apply') && (_v53.a.b.$ === 'Constructor')) && _v53.a.b.b.a.b) && _v53.a.b.b.a.a.b) && (_v53.a.b.b.a.a.a === 'morphir')) && (!_v53.a.b.b.a.a.b.b)) && _v53.a.b.b.a.b.b) && _v53.a.b.b.a.b.a.b) && (_v53.a.b.b.a.b.a.a === 's')) && _v53.a.b.b.a.b.a.b.b) && (_v53.a.b.b.a.b.a.b.a === 'd')) && _v53.a.b.b.a.b.a.b.b.b) && (_v53.a.b.b.a.b.a.b.b.a === 'k')) && (!_v53.a.b.b.a.b.a.b.b.b.b)) && (!_v53.a.b.b.a.b.b.b)) && _v53.a.b.b.b.b) && _v53.a.b.b.b.a.b) && (_v53.a.b.b.b.a.a === 'result')) && (!_v53.a.b.b.b.a.b.b)) && (!_v53.a.b.b.b.b.b)) && _v53.a.b.b.c.b) && (!_v53.a.b.b.c.b.b)) {
													if ((((((((((((((((((((((_v53.b.$ === 'Apply') && (_v53.b.b.$ === 'Constructor')) && _v53.b.b.b.a.b) && _v53.b.b.b.a.a.b) && (_v53.b.b.b.a.a.a === 'morphir')) && (!_v53.b.b.b.a.a.b.b)) && _v53.b.b.b.a.b.b) && _v53.b.b.b.a.b.a.b) && (_v53.b.b.b.a.b.a.a === 's')) && _v53.b.b.b.a.b.a.b.b) && (_v53.b.b.b.a.b.a.b.a === 'd')) && _v53.b.b.b.a.b.a.b.b.b) && (_v53.b.b.b.a.b.a.b.b.a === 'k')) && (!_v53.b.b.b.a.b.a.b.b.b.b)) && (!_v53.b.b.b.a.b.b.b)) && _v53.b.b.b.b.b) && _v53.b.b.b.b.a.b) && (_v53.b.b.b.b.a.a === 'result')) && (!_v53.b.b.b.b.a.b.b)) && (!_v53.b.b.b.b.b.b)) && _v53.b.b.b.c.b) && (!_v53.b.b.b.c.b.b)) {
														switch (_v53.a.b.b.c.a) {
															case 'ok':
																switch (_v53.b.b.b.c.a) {
																	case 'ok':
																		var _v54 = _v53.a;
																		var _v55 = _v54.b;
																		var _v56 = _v55.b;
																		var _v57 = _v56.a;
																		var _v58 = _v57.a;
																		var _v59 = _v57.b;
																		var _v60 = _v59.a;
																		var _v61 = _v60.b;
																		var _v62 = _v61.b;
																		var _v63 = _v56.b;
																		var _v64 = _v63.a;
																		var _v65 = _v56.c;
																		var value1 = _v54.c;
																		var _v66 = _v53.b;
																		var _v67 = _v66.b;
																		var _v68 = _v67.b;
																		var _v69 = _v68.a;
																		var _v70 = _v69.a;
																		var _v71 = _v69.b;
																		var _v72 = _v71.a;
																		var _v73 = _v72.b;
																		var _v74 = _v73.b;
																		var _v75 = _v68.b;
																		var _v76 = _v75.a;
																		var _v77 = _v68.c;
																		var value2 = _v66.c;
																		return A2(
																			$elm$core$Result$map,
																			function (value) {
																				return A2($author$project$Morphir$IR$SDK$Result$ok, _Utils_Tuple0, value);
																			},
																			_eval(
																				A3(
																					$author$project$Morphir$IR$Value$Apply,
																					_Utils_Tuple0,
																					A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1),
																					value2)));
																	case 'err':
																		break _v53$2;
																	default:
																		break _v53$3;
																}
															case 'err':
																break _v53$1;
															default:
																if (_v53.b.b.b.c.a === 'err') {
																	break _v53$2;
																} else {
																	break _v53$3;
																}
														}
													} else {
														if (_v53.a.b.b.c.a === 'err') {
															break _v53$1;
														} else {
															break _v53$3;
														}
													}
												} else {
													if (((((((((((((((((((((((_v53.b.$ === 'Apply') && (_v53.b.b.$ === 'Constructor')) && _v53.b.b.b.a.b) && _v53.b.b.b.a.a.b) && (_v53.b.b.b.a.a.a === 'morphir')) && (!_v53.b.b.b.a.a.b.b)) && _v53.b.b.b.a.b.b) && _v53.b.b.b.a.b.a.b) && (_v53.b.b.b.a.b.a.a === 's')) && _v53.b.b.b.a.b.a.b.b) && (_v53.b.b.b.a.b.a.b.a === 'd')) && _v53.b.b.b.a.b.a.b.b.b) && (_v53.b.b.b.a.b.a.b.b.a === 'k')) && (!_v53.b.b.b.a.b.a.b.b.b.b)) && (!_v53.b.b.b.a.b.b.b)) && _v53.b.b.b.b.b) && _v53.b.b.b.b.a.b) && (_v53.b.b.b.b.a.a === 'result')) && (!_v53.b.b.b.b.a.b.b)) && (!_v53.b.b.b.b.b.b)) && _v53.b.b.b.c.b) && (_v53.b.b.b.c.a === 'err')) && (!_v53.b.b.b.c.b.b)) {
														break _v53$2;
													} else {
														break _v53$3;
													}
												}
											}
											return $elm$core$Result$Err(
												$author$project$Morphir$Value$Error$UnexpectedArguments(
													_List_fromArray(
														[evaluatedArg1, evaluatedArg2])));
										}
										var _v90 = _v53.b;
										var _v91 = _v90.b;
										var _v92 = _v91.b;
										var _v93 = _v92.a;
										var _v94 = _v93.a;
										var _v95 = _v93.b;
										var _v96 = _v95.a;
										var _v97 = _v96.b;
										var _v98 = _v97.b;
										var _v99 = _v92.b;
										var _v100 = _v99.a;
										var _v101 = _v92.c;
										var error = _v90.c;
										return $elm$core$Result$Ok(
											A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
									}
									var _v78 = _v53.a;
									var _v79 = _v78.b;
									var _v80 = _v79.b;
									var _v81 = _v80.a;
									var _v82 = _v81.a;
									var _v83 = _v81.b;
									var _v84 = _v83.a;
									var _v85 = _v84.b;
									var _v86 = _v85.b;
									var _v87 = _v80.b;
									var _v88 = _v87.a;
									var _v89 = _v80.c;
									var error = _v78.c;
									return $elm$core$Result$Ok(
										A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
								}),
							_eval(arg1),
							_eval(arg2)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map3',
		F2(
			function (_eval, args) {
				if ((((args.b && args.b.b) && args.b.b.b) && args.b.b.b.b) && (!args.b.b.b.b.b)) {
					var fun = args.a;
					var _v103 = args.b;
					var arg1 = _v103.a;
					var _v104 = _v103.b;
					var arg2 = _v104.a;
					var _v105 = _v104.b;
					var arg3 = _v105.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A4(
							$elm$core$Result$map3,
							F3(
								function (evaluatedArg1, evaluatedArg2, evaluatedArg3) {
									var _v106 = _Utils_Tuple3(evaluatedArg1, evaluatedArg2, evaluatedArg3);
									_v106$1:
									while (true) {
										_v106$2:
										while (true) {
											_v106$3:
											while (true) {
												_v106$4:
												while (true) {
													if ((((((((((((((((((((((_v106.a.$ === 'Apply') && (_v106.a.b.$ === 'Constructor')) && _v106.a.b.b.a.b) && _v106.a.b.b.a.a.b) && (_v106.a.b.b.a.a.a === 'morphir')) && (!_v106.a.b.b.a.a.b.b)) && _v106.a.b.b.a.b.b) && _v106.a.b.b.a.b.a.b) && (_v106.a.b.b.a.b.a.a === 's')) && _v106.a.b.b.a.b.a.b.b) && (_v106.a.b.b.a.b.a.b.a === 'd')) && _v106.a.b.b.a.b.a.b.b.b) && (_v106.a.b.b.a.b.a.b.b.a === 'k')) && (!_v106.a.b.b.a.b.a.b.b.b.b)) && (!_v106.a.b.b.a.b.b.b)) && _v106.a.b.b.b.b) && _v106.a.b.b.b.a.b) && (_v106.a.b.b.b.a.a === 'result')) && (!_v106.a.b.b.b.a.b.b)) && (!_v106.a.b.b.b.b.b)) && _v106.a.b.b.c.b) && (!_v106.a.b.b.c.b.b)) {
														if ((((((((((((((((((((((_v106.b.$ === 'Apply') && (_v106.b.b.$ === 'Constructor')) && _v106.b.b.b.a.b) && _v106.b.b.b.a.a.b) && (_v106.b.b.b.a.a.a === 'morphir')) && (!_v106.b.b.b.a.a.b.b)) && _v106.b.b.b.a.b.b) && _v106.b.b.b.a.b.a.b) && (_v106.b.b.b.a.b.a.a === 's')) && _v106.b.b.b.a.b.a.b.b) && (_v106.b.b.b.a.b.a.b.a === 'd')) && _v106.b.b.b.a.b.a.b.b.b) && (_v106.b.b.b.a.b.a.b.b.a === 'k')) && (!_v106.b.b.b.a.b.a.b.b.b.b)) && (!_v106.b.b.b.a.b.b.b)) && _v106.b.b.b.b.b) && _v106.b.b.b.b.a.b) && (_v106.b.b.b.b.a.a === 'result')) && (!_v106.b.b.b.b.a.b.b)) && (!_v106.b.b.b.b.b.b)) && _v106.b.b.b.c.b) && (!_v106.b.b.b.c.b.b)) {
															if ((((((((((((((((((((((_v106.c.$ === 'Apply') && (_v106.c.b.$ === 'Constructor')) && _v106.c.b.b.a.b) && _v106.c.b.b.a.a.b) && (_v106.c.b.b.a.a.a === 'morphir')) && (!_v106.c.b.b.a.a.b.b)) && _v106.c.b.b.a.b.b) && _v106.c.b.b.a.b.a.b) && (_v106.c.b.b.a.b.a.a === 's')) && _v106.c.b.b.a.b.a.b.b) && (_v106.c.b.b.a.b.a.b.a === 'd')) && _v106.c.b.b.a.b.a.b.b.b) && (_v106.c.b.b.a.b.a.b.b.a === 'k')) && (!_v106.c.b.b.a.b.a.b.b.b.b)) && (!_v106.c.b.b.a.b.b.b)) && _v106.c.b.b.b.b) && _v106.c.b.b.b.a.b) && (_v106.c.b.b.b.a.a === 'result')) && (!_v106.c.b.b.b.a.b.b)) && (!_v106.c.b.b.b.b.b)) && _v106.c.b.b.c.b) && (!_v106.c.b.b.c.b.b)) {
																switch (_v106.a.b.b.c.a) {
																	case 'ok':
																		switch (_v106.b.b.b.c.a) {
																			case 'ok':
																				switch (_v106.c.b.b.c.a) {
																					case 'ok':
																						var _v107 = _v106.a;
																						var _v108 = _v107.b;
																						var _v109 = _v108.b;
																						var _v110 = _v109.a;
																						var _v111 = _v110.a;
																						var _v112 = _v110.b;
																						var _v113 = _v112.a;
																						var _v114 = _v113.b;
																						var _v115 = _v114.b;
																						var _v116 = _v109.b;
																						var _v117 = _v116.a;
																						var _v118 = _v109.c;
																						var value1 = _v107.c;
																						var _v119 = _v106.b;
																						var _v120 = _v119.b;
																						var _v121 = _v120.b;
																						var _v122 = _v121.a;
																						var _v123 = _v122.a;
																						var _v124 = _v122.b;
																						var _v125 = _v124.a;
																						var _v126 = _v125.b;
																						var _v127 = _v126.b;
																						var _v128 = _v121.b;
																						var _v129 = _v128.a;
																						var _v130 = _v121.c;
																						var value2 = _v119.c;
																						var _v131 = _v106.c;
																						var _v132 = _v131.b;
																						var _v133 = _v132.b;
																						var _v134 = _v133.a;
																						var _v135 = _v134.a;
																						var _v136 = _v134.b;
																						var _v137 = _v136.a;
																						var _v138 = _v137.b;
																						var _v139 = _v138.b;
																						var _v140 = _v133.b;
																						var _v141 = _v140.a;
																						var _v142 = _v133.c;
																						var value3 = _v131.c;
																						return A2(
																							$elm$core$Result$map,
																							function (value) {
																								return A2($author$project$Morphir$IR$SDK$Result$ok, _Utils_Tuple0, value);
																							},
																							_eval(
																								A3(
																									$author$project$Morphir$IR$Value$Apply,
																									_Utils_Tuple0,
																									A3(
																										$author$project$Morphir$IR$Value$Apply,
																										_Utils_Tuple0,
																										A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1),
																										value2),
																									value3)));
																					case 'err':
																						break _v106$3;
																					default:
																						break _v106$4;
																				}
																			case 'err':
																				break _v106$2;
																			default:
																				if (_v106.c.b.b.c.a === 'err') {
																					break _v106$3;
																				} else {
																					break _v106$4;
																				}
																		}
																	case 'err':
																		break _v106$1;
																	default:
																		if (_v106.b.b.b.c.a === 'err') {
																			break _v106$2;
																		} else {
																			if (_v106.c.b.b.c.a === 'err') {
																				break _v106$3;
																			} else {
																				break _v106$4;
																			}
																		}
																}
															} else {
																if (_v106.a.b.b.c.a === 'err') {
																	break _v106$1;
																} else {
																	if (_v106.b.b.b.c.a === 'err') {
																		break _v106$2;
																	} else {
																		break _v106$4;
																	}
																}
															}
														} else {
															if (_v106.a.b.b.c.a === 'err') {
																break _v106$1;
															} else {
																if (((((((((((((((((((((((_v106.c.$ === 'Apply') && (_v106.c.b.$ === 'Constructor')) && _v106.c.b.b.a.b) && _v106.c.b.b.a.a.b) && (_v106.c.b.b.a.a.a === 'morphir')) && (!_v106.c.b.b.a.a.b.b)) && _v106.c.b.b.a.b.b) && _v106.c.b.b.a.b.a.b) && (_v106.c.b.b.a.b.a.a === 's')) && _v106.c.b.b.a.b.a.b.b) && (_v106.c.b.b.a.b.a.b.a === 'd')) && _v106.c.b.b.a.b.a.b.b.b) && (_v106.c.b.b.a.b.a.b.b.a === 'k')) && (!_v106.c.b.b.a.b.a.b.b.b.b)) && (!_v106.c.b.b.a.b.b.b)) && _v106.c.b.b.b.b) && _v106.c.b.b.b.a.b) && (_v106.c.b.b.b.a.a === 'result')) && (!_v106.c.b.b.b.a.b.b)) && (!_v106.c.b.b.b.b.b)) && _v106.c.b.b.c.b) && (_v106.c.b.b.c.a === 'err')) && (!_v106.c.b.b.c.b.b)) {
																	break _v106$3;
																} else {
																	break _v106$4;
																}
															}
														}
													} else {
														if (((((((((((((((((((((((_v106.b.$ === 'Apply') && (_v106.b.b.$ === 'Constructor')) && _v106.b.b.b.a.b) && _v106.b.b.b.a.a.b) && (_v106.b.b.b.a.a.a === 'morphir')) && (!_v106.b.b.b.a.a.b.b)) && _v106.b.b.b.a.b.b) && _v106.b.b.b.a.b.a.b) && (_v106.b.b.b.a.b.a.a === 's')) && _v106.b.b.b.a.b.a.b.b) && (_v106.b.b.b.a.b.a.b.a === 'd')) && _v106.b.b.b.a.b.a.b.b.b) && (_v106.b.b.b.a.b.a.b.b.a === 'k')) && (!_v106.b.b.b.a.b.a.b.b.b.b)) && (!_v106.b.b.b.a.b.b.b)) && _v106.b.b.b.b.b) && _v106.b.b.b.b.a.b) && (_v106.b.b.b.b.a.a === 'result')) && (!_v106.b.b.b.b.a.b.b)) && (!_v106.b.b.b.b.b.b)) && _v106.b.b.b.c.b) && (_v106.b.b.b.c.a === 'err')) && (!_v106.b.b.b.c.b.b)) {
															break _v106$2;
														} else {
															if (((((((((((((((((((((((_v106.c.$ === 'Apply') && (_v106.c.b.$ === 'Constructor')) && _v106.c.b.b.a.b) && _v106.c.b.b.a.a.b) && (_v106.c.b.b.a.a.a === 'morphir')) && (!_v106.c.b.b.a.a.b.b)) && _v106.c.b.b.a.b.b) && _v106.c.b.b.a.b.a.b) && (_v106.c.b.b.a.b.a.a === 's')) && _v106.c.b.b.a.b.a.b.b) && (_v106.c.b.b.a.b.a.b.a === 'd')) && _v106.c.b.b.a.b.a.b.b.b) && (_v106.c.b.b.a.b.a.b.b.a === 'k')) && (!_v106.c.b.b.a.b.a.b.b.b.b)) && (!_v106.c.b.b.a.b.b.b)) && _v106.c.b.b.b.b) && _v106.c.b.b.b.a.b) && (_v106.c.b.b.b.a.a === 'result')) && (!_v106.c.b.b.b.a.b.b)) && (!_v106.c.b.b.b.b.b)) && _v106.c.b.b.c.b) && (_v106.c.b.b.c.a === 'err')) && (!_v106.c.b.b.c.b.b)) {
																break _v106$3;
															} else {
																break _v106$4;
															}
														}
													}
												}
												return $elm$core$Result$Err(
													$author$project$Morphir$Value$Error$UnexpectedArguments(
														_List_fromArray(
															[evaluatedArg1, evaluatedArg2, evaluatedArg3])));
											}
											var _v167 = _v106.c;
											var _v168 = _v167.b;
											var _v169 = _v168.b;
											var _v170 = _v169.a;
											var _v171 = _v170.a;
											var _v172 = _v170.b;
											var _v173 = _v172.a;
											var _v174 = _v173.b;
											var _v175 = _v174.b;
											var _v176 = _v169.b;
											var _v177 = _v176.a;
											var _v178 = _v169.c;
											var error = _v167.c;
											return $elm$core$Result$Ok(
												A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
										}
										var _v155 = _v106.b;
										var _v156 = _v155.b;
										var _v157 = _v156.b;
										var _v158 = _v157.a;
										var _v159 = _v158.a;
										var _v160 = _v158.b;
										var _v161 = _v160.a;
										var _v162 = _v161.b;
										var _v163 = _v162.b;
										var _v164 = _v157.b;
										var _v165 = _v164.a;
										var _v166 = _v157.c;
										var error = _v155.c;
										return $elm$core$Result$Ok(
											A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
									}
									var _v143 = _v106.a;
									var _v144 = _v143.b;
									var _v145 = _v144.b;
									var _v146 = _v145.a;
									var _v147 = _v146.a;
									var _v148 = _v146.b;
									var _v149 = _v148.a;
									var _v150 = _v149.b;
									var _v151 = _v150.b;
									var _v152 = _v145.b;
									var _v153 = _v152.a;
									var _v154 = _v145.c;
									var error = _v143.c;
									return $elm$core$Result$Ok(
										A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
								}),
							_eval(arg1),
							_eval(arg2),
							_eval(arg3)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map4',
		F2(
			function (_eval, args) {
				if (((((args.b && args.b.b) && args.b.b.b) && args.b.b.b.b) && args.b.b.b.b.b) && (!args.b.b.b.b.b.b)) {
					var fun = args.a;
					var _v180 = args.b;
					var arg1 = _v180.a;
					var _v181 = _v180.b;
					var arg2 = _v181.a;
					var _v182 = _v181.b;
					var arg3 = _v182.a;
					var _v183 = _v182.b;
					var arg4 = _v183.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A5(
							$elm$core$Result$map4,
							F4(
								function (evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4) {
									var _v184 = _List_fromArray(
										[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4]);
									_v184$1:
									while (true) {
										_v184$2:
										while (true) {
											_v184$3:
											while (true) {
												_v184$4:
												while (true) {
													_v184$5:
													while (true) {
														if ((((_v184.b && _v184.b.b) && _v184.b.b.b) && _v184.b.b.b.b) && (!_v184.b.b.b.b.b)) {
															if ((((((((((((((((((((((_v184.a.$ === 'Apply') && (_v184.a.b.$ === 'Constructor')) && _v184.a.b.b.a.b) && _v184.a.b.b.a.a.b) && (_v184.a.b.b.a.a.a === 'morphir')) && (!_v184.a.b.b.a.a.b.b)) && _v184.a.b.b.a.b.b) && _v184.a.b.b.a.b.a.b) && (_v184.a.b.b.a.b.a.a === 's')) && _v184.a.b.b.a.b.a.b.b) && (_v184.a.b.b.a.b.a.b.a === 'd')) && _v184.a.b.b.a.b.a.b.b.b) && (_v184.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.a.b.b.a.b.a.b.b.b.b)) && (!_v184.a.b.b.a.b.b.b)) && _v184.a.b.b.b.b) && _v184.a.b.b.b.a.b) && (_v184.a.b.b.b.a.a === 'result')) && (!_v184.a.b.b.b.a.b.b)) && (!_v184.a.b.b.b.b.b)) && _v184.a.b.b.c.b) && (!_v184.a.b.b.c.b.b)) {
																if ((((((((((((((((((((((_v184.b.a.$ === 'Apply') && (_v184.b.a.b.$ === 'Constructor')) && _v184.b.a.b.b.a.b) && _v184.b.a.b.b.a.a.b) && (_v184.b.a.b.b.a.a.a === 'morphir')) && (!_v184.b.a.b.b.a.a.b.b)) && _v184.b.a.b.b.a.b.b) && _v184.b.a.b.b.a.b.a.b) && (_v184.b.a.b.b.a.b.a.a === 's')) && _v184.b.a.b.b.a.b.a.b.b) && (_v184.b.a.b.b.a.b.a.b.a === 'd')) && _v184.b.a.b.b.a.b.a.b.b.b) && (_v184.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.b.a.b.b.a.b.a.b.b.b.b)) && (!_v184.b.a.b.b.a.b.b.b)) && _v184.b.a.b.b.b.b) && _v184.b.a.b.b.b.a.b) && (_v184.b.a.b.b.b.a.a === 'result')) && (!_v184.b.a.b.b.b.a.b.b)) && (!_v184.b.a.b.b.b.b.b)) && _v184.b.a.b.b.c.b) && (!_v184.b.a.b.b.c.b.b)) {
																	if ((((((((((((((((((((((_v184.b.b.a.$ === 'Apply') && (_v184.b.b.a.b.$ === 'Constructor')) && _v184.b.b.a.b.b.a.b) && _v184.b.b.a.b.b.a.a.b) && (_v184.b.b.a.b.b.a.a.a === 'morphir')) && (!_v184.b.b.a.b.b.a.a.b.b)) && _v184.b.b.a.b.b.a.b.b) && _v184.b.b.a.b.b.a.b.a.b) && (_v184.b.b.a.b.b.a.b.a.a === 's')) && _v184.b.b.a.b.b.a.b.a.b.b) && (_v184.b.b.a.b.b.a.b.a.b.a === 'd')) && _v184.b.b.a.b.b.a.b.a.b.b.b) && (_v184.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v184.b.b.a.b.b.a.b.b.b)) && _v184.b.b.a.b.b.b.b) && _v184.b.b.a.b.b.b.a.b) && (_v184.b.b.a.b.b.b.a.a === 'result')) && (!_v184.b.b.a.b.b.b.a.b.b)) && (!_v184.b.b.a.b.b.b.b.b)) && _v184.b.b.a.b.b.c.b) && (!_v184.b.b.a.b.b.c.b.b)) {
																		if ((((((((((((((((((((((_v184.b.b.b.a.$ === 'Apply') && (_v184.b.b.b.a.b.$ === 'Constructor')) && _v184.b.b.b.a.b.b.a.b) && _v184.b.b.b.a.b.b.a.a.b) && (_v184.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v184.b.b.b.a.b.b.a.a.b.b)) && _v184.b.b.b.a.b.b.a.b.b) && _v184.b.b.b.a.b.b.a.b.a.b) && (_v184.b.b.b.a.b.b.a.b.a.a === 's')) && _v184.b.b.b.a.b.b.a.b.a.b.b) && (_v184.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v184.b.b.b.a.b.b.a.b.a.b.b.b) && (_v184.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v184.b.b.b.a.b.b.a.b.b.b)) && _v184.b.b.b.a.b.b.b.b) && _v184.b.b.b.a.b.b.b.a.b) && (_v184.b.b.b.a.b.b.b.a.a === 'result')) && (!_v184.b.b.b.a.b.b.b.a.b.b)) && (!_v184.b.b.b.a.b.b.b.b.b)) && _v184.b.b.b.a.b.b.c.b) && (!_v184.b.b.b.a.b.b.c.b.b)) {
																			switch (_v184.a.b.b.c.a) {
																				case 'ok':
																					switch (_v184.b.a.b.b.c.a) {
																						case 'ok':
																							switch (_v184.b.b.a.b.b.c.a) {
																								case 'ok':
																									switch (_v184.b.b.b.a.b.b.c.a) {
																										case 'ok':
																											var _v185 = _v184.a;
																											var _v186 = _v185.b;
																											var _v187 = _v186.b;
																											var _v188 = _v187.a;
																											var _v189 = _v188.a;
																											var _v190 = _v188.b;
																											var _v191 = _v190.a;
																											var _v192 = _v191.b;
																											var _v193 = _v192.b;
																											var _v194 = _v187.b;
																											var _v195 = _v194.a;
																											var _v196 = _v187.c;
																											var value1 = _v185.c;
																											var _v197 = _v184.b;
																											var _v198 = _v197.a;
																											var _v199 = _v198.b;
																											var _v200 = _v199.b;
																											var _v201 = _v200.a;
																											var _v202 = _v201.a;
																											var _v203 = _v201.b;
																											var _v204 = _v203.a;
																											var _v205 = _v204.b;
																											var _v206 = _v205.b;
																											var _v207 = _v200.b;
																											var _v208 = _v207.a;
																											var _v209 = _v200.c;
																											var value2 = _v198.c;
																											var _v210 = _v197.b;
																											var _v211 = _v210.a;
																											var _v212 = _v211.b;
																											var _v213 = _v212.b;
																											var _v214 = _v213.a;
																											var _v215 = _v214.a;
																											var _v216 = _v214.b;
																											var _v217 = _v216.a;
																											var _v218 = _v217.b;
																											var _v219 = _v218.b;
																											var _v220 = _v213.b;
																											var _v221 = _v220.a;
																											var _v222 = _v213.c;
																											var value3 = _v211.c;
																											var _v223 = _v210.b;
																											var _v224 = _v223.a;
																											var _v225 = _v224.b;
																											var _v226 = _v225.b;
																											var _v227 = _v226.a;
																											var _v228 = _v227.a;
																											var _v229 = _v227.b;
																											var _v230 = _v229.a;
																											var _v231 = _v230.b;
																											var _v232 = _v231.b;
																											var _v233 = _v226.b;
																											var _v234 = _v233.a;
																											var _v235 = _v226.c;
																											var value4 = _v224.c;
																											return A2(
																												$elm$core$Result$map,
																												function (value) {
																													return A2($author$project$Morphir$IR$SDK$Result$ok, _Utils_Tuple0, value);
																												},
																												_eval(
																													A3(
																														$author$project$Morphir$IR$Value$Apply,
																														_Utils_Tuple0,
																														A3(
																															$author$project$Morphir$IR$Value$Apply,
																															_Utils_Tuple0,
																															A3(
																																$author$project$Morphir$IR$Value$Apply,
																																_Utils_Tuple0,
																																A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1),
																																value2),
																															value3),
																														value4)));
																										case 'err':
																											break _v184$4;
																										default:
																											break _v184$5;
																									}
																								case 'err':
																									break _v184$3;
																								default:
																									if (_v184.b.b.b.a.b.b.c.a === 'err') {
																										break _v184$4;
																									} else {
																										break _v184$5;
																									}
																							}
																						case 'err':
																							break _v184$2;
																						default:
																							if (_v184.b.b.a.b.b.c.a === 'err') {
																								break _v184$3;
																							} else {
																								if (_v184.b.b.b.a.b.b.c.a === 'err') {
																									break _v184$4;
																								} else {
																									break _v184$5;
																								}
																							}
																					}
																				case 'err':
																					break _v184$1;
																				default:
																					if (_v184.b.a.b.b.c.a === 'err') {
																						break _v184$2;
																					} else {
																						if (_v184.b.b.a.b.b.c.a === 'err') {
																							break _v184$3;
																						} else {
																							if (_v184.b.b.b.a.b.b.c.a === 'err') {
																								break _v184$4;
																							} else {
																								break _v184$5;
																							}
																						}
																					}
																			}
																		} else {
																			if (_v184.a.b.b.c.a === 'err') {
																				break _v184$1;
																			} else {
																				if (_v184.b.a.b.b.c.a === 'err') {
																					break _v184$2;
																				} else {
																					if (_v184.b.b.a.b.b.c.a === 'err') {
																						break _v184$3;
																					} else {
																						break _v184$5;
																					}
																				}
																			}
																		}
																	} else {
																		if (_v184.a.b.b.c.a === 'err') {
																			break _v184$1;
																		} else {
																			if (_v184.b.a.b.b.c.a === 'err') {
																				break _v184$2;
																			} else {
																				if (((((((((((((((((((((((_v184.b.b.b.a.$ === 'Apply') && (_v184.b.b.b.a.b.$ === 'Constructor')) && _v184.b.b.b.a.b.b.a.b) && _v184.b.b.b.a.b.b.a.a.b) && (_v184.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v184.b.b.b.a.b.b.a.a.b.b)) && _v184.b.b.b.a.b.b.a.b.b) && _v184.b.b.b.a.b.b.a.b.a.b) && (_v184.b.b.b.a.b.b.a.b.a.a === 's')) && _v184.b.b.b.a.b.b.a.b.a.b.b) && (_v184.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v184.b.b.b.a.b.b.a.b.a.b.b.b) && (_v184.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v184.b.b.b.a.b.b.a.b.b.b)) && _v184.b.b.b.a.b.b.b.b) && _v184.b.b.b.a.b.b.b.a.b) && (_v184.b.b.b.a.b.b.b.a.a === 'result')) && (!_v184.b.b.b.a.b.b.b.a.b.b)) && (!_v184.b.b.b.a.b.b.b.b.b)) && _v184.b.b.b.a.b.b.c.b) && (_v184.b.b.b.a.b.b.c.a === 'err')) && (!_v184.b.b.b.a.b.b.c.b.b)) {
																					break _v184$4;
																				} else {
																					break _v184$5;
																				}
																			}
																		}
																	}
																} else {
																	if (_v184.a.b.b.c.a === 'err') {
																		break _v184$1;
																	} else {
																		if (((((((((((((((((((((((_v184.b.b.a.$ === 'Apply') && (_v184.b.b.a.b.$ === 'Constructor')) && _v184.b.b.a.b.b.a.b) && _v184.b.b.a.b.b.a.a.b) && (_v184.b.b.a.b.b.a.a.a === 'morphir')) && (!_v184.b.b.a.b.b.a.a.b.b)) && _v184.b.b.a.b.b.a.b.b) && _v184.b.b.a.b.b.a.b.a.b) && (_v184.b.b.a.b.b.a.b.a.a === 's')) && _v184.b.b.a.b.b.a.b.a.b.b) && (_v184.b.b.a.b.b.a.b.a.b.a === 'd')) && _v184.b.b.a.b.b.a.b.a.b.b.b) && (_v184.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v184.b.b.a.b.b.a.b.b.b)) && _v184.b.b.a.b.b.b.b) && _v184.b.b.a.b.b.b.a.b) && (_v184.b.b.a.b.b.b.a.a === 'result')) && (!_v184.b.b.a.b.b.b.a.b.b)) && (!_v184.b.b.a.b.b.b.b.b)) && _v184.b.b.a.b.b.c.b) && (_v184.b.b.a.b.b.c.a === 'err')) && (!_v184.b.b.a.b.b.c.b.b)) {
																			break _v184$3;
																		} else {
																			if (((((((((((((((((((((((_v184.b.b.b.a.$ === 'Apply') && (_v184.b.b.b.a.b.$ === 'Constructor')) && _v184.b.b.b.a.b.b.a.b) && _v184.b.b.b.a.b.b.a.a.b) && (_v184.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v184.b.b.b.a.b.b.a.a.b.b)) && _v184.b.b.b.a.b.b.a.b.b) && _v184.b.b.b.a.b.b.a.b.a.b) && (_v184.b.b.b.a.b.b.a.b.a.a === 's')) && _v184.b.b.b.a.b.b.a.b.a.b.b) && (_v184.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v184.b.b.b.a.b.b.a.b.a.b.b.b) && (_v184.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v184.b.b.b.a.b.b.a.b.b.b)) && _v184.b.b.b.a.b.b.b.b) && _v184.b.b.b.a.b.b.b.a.b) && (_v184.b.b.b.a.b.b.b.a.a === 'result')) && (!_v184.b.b.b.a.b.b.b.a.b.b)) && (!_v184.b.b.b.a.b.b.b.b.b)) && _v184.b.b.b.a.b.b.c.b) && (_v184.b.b.b.a.b.b.c.a === 'err')) && (!_v184.b.b.b.a.b.b.c.b.b)) {
																				break _v184$4;
																			} else {
																				break _v184$5;
																			}
																		}
																	}
																}
															} else {
																if (((((((((((((((((((((((_v184.b.a.$ === 'Apply') && (_v184.b.a.b.$ === 'Constructor')) && _v184.b.a.b.b.a.b) && _v184.b.a.b.b.a.a.b) && (_v184.b.a.b.b.a.a.a === 'morphir')) && (!_v184.b.a.b.b.a.a.b.b)) && _v184.b.a.b.b.a.b.b) && _v184.b.a.b.b.a.b.a.b) && (_v184.b.a.b.b.a.b.a.a === 's')) && _v184.b.a.b.b.a.b.a.b.b) && (_v184.b.a.b.b.a.b.a.b.a === 'd')) && _v184.b.a.b.b.a.b.a.b.b.b) && (_v184.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.b.a.b.b.a.b.a.b.b.b.b)) && (!_v184.b.a.b.b.a.b.b.b)) && _v184.b.a.b.b.b.b) && _v184.b.a.b.b.b.a.b) && (_v184.b.a.b.b.b.a.a === 'result')) && (!_v184.b.a.b.b.b.a.b.b)) && (!_v184.b.a.b.b.b.b.b)) && _v184.b.a.b.b.c.b) && (_v184.b.a.b.b.c.a === 'err')) && (!_v184.b.a.b.b.c.b.b)) {
																	break _v184$2;
																} else {
																	if (((((((((((((((((((((((_v184.b.b.a.$ === 'Apply') && (_v184.b.b.a.b.$ === 'Constructor')) && _v184.b.b.a.b.b.a.b) && _v184.b.b.a.b.b.a.a.b) && (_v184.b.b.a.b.b.a.a.a === 'morphir')) && (!_v184.b.b.a.b.b.a.a.b.b)) && _v184.b.b.a.b.b.a.b.b) && _v184.b.b.a.b.b.a.b.a.b) && (_v184.b.b.a.b.b.a.b.a.a === 's')) && _v184.b.b.a.b.b.a.b.a.b.b) && (_v184.b.b.a.b.b.a.b.a.b.a === 'd')) && _v184.b.b.a.b.b.a.b.a.b.b.b) && (_v184.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v184.b.b.a.b.b.a.b.b.b)) && _v184.b.b.a.b.b.b.b) && _v184.b.b.a.b.b.b.a.b) && (_v184.b.b.a.b.b.b.a.a === 'result')) && (!_v184.b.b.a.b.b.b.a.b.b)) && (!_v184.b.b.a.b.b.b.b.b)) && _v184.b.b.a.b.b.c.b) && (_v184.b.b.a.b.b.c.a === 'err')) && (!_v184.b.b.a.b.b.c.b.b)) {
																		break _v184$3;
																	} else {
																		if (((((((((((((((((((((((_v184.b.b.b.a.$ === 'Apply') && (_v184.b.b.b.a.b.$ === 'Constructor')) && _v184.b.b.b.a.b.b.a.b) && _v184.b.b.b.a.b.b.a.a.b) && (_v184.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v184.b.b.b.a.b.b.a.a.b.b)) && _v184.b.b.b.a.b.b.a.b.b) && _v184.b.b.b.a.b.b.a.b.a.b) && (_v184.b.b.b.a.b.b.a.b.a.a === 's')) && _v184.b.b.b.a.b.b.a.b.a.b.b) && (_v184.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v184.b.b.b.a.b.b.a.b.a.b.b.b) && (_v184.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v184.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v184.b.b.b.a.b.b.a.b.b.b)) && _v184.b.b.b.a.b.b.b.b) && _v184.b.b.b.a.b.b.b.a.b) && (_v184.b.b.b.a.b.b.b.a.a === 'result')) && (!_v184.b.b.b.a.b.b.b.a.b.b)) && (!_v184.b.b.b.a.b.b.b.b.b)) && _v184.b.b.b.a.b.b.c.b) && (_v184.b.b.b.a.b.b.c.a === 'err')) && (!_v184.b.b.b.a.b.b.c.b.b)) {
																			break _v184$4;
																		} else {
																			break _v184$5;
																		}
																	}
																}
															}
														} else {
															break _v184$5;
														}
													}
													return $elm$core$Result$Err(
														$author$project$Morphir$Value$Error$UnexpectedArguments(
															_List_fromArray(
																[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4])));
												}
												var _v281 = _v184.b;
												var _v282 = _v281.b;
												var _v283 = _v282.b;
												var _v284 = _v283.a;
												var _v285 = _v284.b;
												var _v286 = _v285.b;
												var _v287 = _v286.a;
												var _v288 = _v287.a;
												var _v289 = _v287.b;
												var _v290 = _v289.a;
												var _v291 = _v290.b;
												var _v292 = _v291.b;
												var _v293 = _v286.b;
												var _v294 = _v293.a;
												var _v295 = _v286.c;
												var error = _v284.c;
												return $elm$core$Result$Ok(
													A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
											}
											var _v266 = _v184.b;
											var _v267 = _v266.b;
											var _v268 = _v267.a;
											var _v269 = _v268.b;
											var _v270 = _v269.b;
											var _v271 = _v270.a;
											var _v272 = _v271.a;
											var _v273 = _v271.b;
											var _v274 = _v273.a;
											var _v275 = _v274.b;
											var _v276 = _v275.b;
											var _v277 = _v270.b;
											var _v278 = _v277.a;
											var _v279 = _v270.c;
											var error = _v268.c;
											var _v280 = _v267.b;
											return $elm$core$Result$Ok(
												A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
										}
										var _v251 = _v184.b;
										var _v252 = _v251.a;
										var _v253 = _v252.b;
										var _v254 = _v253.b;
										var _v255 = _v254.a;
										var _v256 = _v255.a;
										var _v257 = _v255.b;
										var _v258 = _v257.a;
										var _v259 = _v258.b;
										var _v260 = _v259.b;
										var _v261 = _v254.b;
										var _v262 = _v261.a;
										var _v263 = _v254.c;
										var error = _v252.c;
										var _v264 = _v251.b;
										var _v265 = _v264.b;
										return $elm$core$Result$Ok(
											A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
									}
									var _v236 = _v184.a;
									var _v237 = _v236.b;
									var _v238 = _v237.b;
									var _v239 = _v238.a;
									var _v240 = _v239.a;
									var _v241 = _v239.b;
									var _v242 = _v241.a;
									var _v243 = _v242.b;
									var _v244 = _v243.b;
									var _v245 = _v238.b;
									var _v246 = _v245.a;
									var _v247 = _v238.c;
									var error = _v236.c;
									var _v248 = _v184.b;
									var _v249 = _v248.b;
									var _v250 = _v249.b;
									return $elm$core$Result$Ok(
										A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
								}),
							_eval(arg1),
							_eval(arg2),
							_eval(arg3),
							_eval(arg4)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map5',
		F2(
			function (_eval, args) {
				if ((((((args.b && args.b.b) && args.b.b.b) && args.b.b.b.b) && args.b.b.b.b.b) && args.b.b.b.b.b.b) && (!args.b.b.b.b.b.b.b)) {
					var fun = args.a;
					var _v297 = args.b;
					var arg1 = _v297.a;
					var _v298 = _v297.b;
					var arg2 = _v298.a;
					var _v299 = _v298.b;
					var arg3 = _v299.a;
					var _v300 = _v299.b;
					var arg4 = _v300.a;
					var _v301 = _v300.b;
					var arg5 = _v301.a;
					return A2(
						$elm$core$Result$andThen,
						$elm$core$Basics$identity,
						A6(
							$elm$core$Result$map5,
							F5(
								function (evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4, evaluatedArg5) {
									var _v302 = _List_fromArray(
										[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4, evaluatedArg5]);
									_v302$1:
									while (true) {
										_v302$2:
										while (true) {
											_v302$3:
											while (true) {
												_v302$4:
												while (true) {
													_v302$5:
													while (true) {
														_v302$6:
														while (true) {
															if (((((_v302.b && _v302.b.b) && _v302.b.b.b) && _v302.b.b.b.b) && _v302.b.b.b.b.b) && (!_v302.b.b.b.b.b.b)) {
																if ((((((((((((((((((((((_v302.a.$ === 'Apply') && (_v302.a.b.$ === 'Constructor')) && _v302.a.b.b.a.b) && _v302.a.b.b.a.a.b) && (_v302.a.b.b.a.a.a === 'morphir')) && (!_v302.a.b.b.a.a.b.b)) && _v302.a.b.b.a.b.b) && _v302.a.b.b.a.b.a.b) && (_v302.a.b.b.a.b.a.a === 's')) && _v302.a.b.b.a.b.a.b.b) && (_v302.a.b.b.a.b.a.b.a === 'd')) && _v302.a.b.b.a.b.a.b.b.b) && (_v302.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.a.b.b.a.b.a.b.b.b.b)) && (!_v302.a.b.b.a.b.b.b)) && _v302.a.b.b.b.b) && _v302.a.b.b.b.a.b) && (_v302.a.b.b.b.a.a === 'result')) && (!_v302.a.b.b.b.a.b.b)) && (!_v302.a.b.b.b.b.b)) && _v302.a.b.b.c.b) && (!_v302.a.b.b.c.b.b)) {
																	if ((((((((((((((((((((((_v302.b.a.$ === 'Apply') && (_v302.b.a.b.$ === 'Constructor')) && _v302.b.a.b.b.a.b) && _v302.b.a.b.b.a.a.b) && (_v302.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.a.b.b.a.a.b.b)) && _v302.b.a.b.b.a.b.b) && _v302.b.a.b.b.a.b.a.b) && (_v302.b.a.b.b.a.b.a.a === 's')) && _v302.b.a.b.b.a.b.a.b.b) && (_v302.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.a.b.b.a.b.a.b.b.b) && (_v302.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.a.b.b.a.b.b.b)) && _v302.b.a.b.b.b.b) && _v302.b.a.b.b.b.a.b) && (_v302.b.a.b.b.b.a.a === 'result')) && (!_v302.b.a.b.b.b.a.b.b)) && (!_v302.b.a.b.b.b.b.b)) && _v302.b.a.b.b.c.b) && (!_v302.b.a.b.b.c.b.b)) {
																		if ((((((((((((((((((((((_v302.b.b.a.$ === 'Apply') && (_v302.b.b.a.b.$ === 'Constructor')) && _v302.b.b.a.b.b.a.b) && _v302.b.b.a.b.b.a.a.b) && (_v302.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.a.b.b.a.a.b.b)) && _v302.b.b.a.b.b.a.b.b) && _v302.b.b.a.b.b.a.b.a.b) && (_v302.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.a.b.b.a.b.b.b)) && _v302.b.b.a.b.b.b.b) && _v302.b.b.a.b.b.b.a.b) && (_v302.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.a.b.b.b.b.b)) && _v302.b.b.a.b.b.c.b) && (!_v302.b.b.a.b.b.c.b.b)) {
																			if ((((((((((((((((((((((_v302.b.b.b.a.$ === 'Apply') && (_v302.b.b.b.a.b.$ === 'Constructor')) && _v302.b.b.b.a.b.b.a.b) && _v302.b.b.b.a.b.b.a.a.b) && (_v302.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.b.a.b.b.a.a.b.b)) && _v302.b.b.b.a.b.b.a.b.b) && _v302.b.b.b.a.b.b.a.b.a.b) && (_v302.b.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.b.a.b.b.a.b.b.b)) && _v302.b.b.b.a.b.b.b.b) && _v302.b.b.b.a.b.b.b.a.b) && (_v302.b.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.b.a.b.b.b.b.b)) && _v302.b.b.b.a.b.b.c.b) && (!_v302.b.b.b.a.b.b.c.b.b)) {
																				if ((((((((((((((((((((((_v302.b.b.b.b.a.$ === 'Apply') && (_v302.b.b.b.b.a.b.$ === 'Constructor')) && _v302.b.b.b.b.a.b.b.a.b) && _v302.b.b.b.b.a.b.b.a.a.b) && (_v302.b.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.b.b.a.b.b.a.a.b.b)) && _v302.b.b.b.b.a.b.b.a.b.b) && _v302.b.b.b.b.a.b.b.a.b.a.b) && (_v302.b.b.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.b.b.a.b.b.a.b.b.b)) && _v302.b.b.b.b.a.b.b.b.b) && _v302.b.b.b.b.a.b.b.b.a.b) && (_v302.b.b.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.b.b.a.b.b.b.b.b)) && _v302.b.b.b.b.a.b.b.c.b) && (!_v302.b.b.b.b.a.b.b.c.b.b)) {
																					switch (_v302.a.b.b.c.a) {
																						case 'ok':
																							switch (_v302.b.a.b.b.c.a) {
																								case 'ok':
																									switch (_v302.b.b.a.b.b.c.a) {
																										case 'ok':
																											switch (_v302.b.b.b.a.b.b.c.a) {
																												case 'ok':
																													switch (_v302.b.b.b.b.a.b.b.c.a) {
																														case 'ok':
																															var _v303 = _v302.a;
																															var _v304 = _v303.b;
																															var _v305 = _v304.b;
																															var _v306 = _v305.a;
																															var _v307 = _v306.a;
																															var _v308 = _v306.b;
																															var _v309 = _v308.a;
																															var _v310 = _v309.b;
																															var _v311 = _v310.b;
																															var _v312 = _v305.b;
																															var _v313 = _v312.a;
																															var _v314 = _v305.c;
																															var value1 = _v303.c;
																															var _v315 = _v302.b;
																															var _v316 = _v315.a;
																															var _v317 = _v316.b;
																															var _v318 = _v317.b;
																															var _v319 = _v318.a;
																															var _v320 = _v319.a;
																															var _v321 = _v319.b;
																															var _v322 = _v321.a;
																															var _v323 = _v322.b;
																															var _v324 = _v323.b;
																															var _v325 = _v318.b;
																															var _v326 = _v325.a;
																															var _v327 = _v318.c;
																															var value2 = _v316.c;
																															var _v328 = _v315.b;
																															var _v329 = _v328.a;
																															var _v330 = _v329.b;
																															var _v331 = _v330.b;
																															var _v332 = _v331.a;
																															var _v333 = _v332.a;
																															var _v334 = _v332.b;
																															var _v335 = _v334.a;
																															var _v336 = _v335.b;
																															var _v337 = _v336.b;
																															var _v338 = _v331.b;
																															var _v339 = _v338.a;
																															var _v340 = _v331.c;
																															var value3 = _v329.c;
																															var _v341 = _v328.b;
																															var _v342 = _v341.a;
																															var _v343 = _v342.b;
																															var _v344 = _v343.b;
																															var _v345 = _v344.a;
																															var _v346 = _v345.a;
																															var _v347 = _v345.b;
																															var _v348 = _v347.a;
																															var _v349 = _v348.b;
																															var _v350 = _v349.b;
																															var _v351 = _v344.b;
																															var _v352 = _v351.a;
																															var _v353 = _v344.c;
																															var value4 = _v342.c;
																															var _v354 = _v341.b;
																															var _v355 = _v354.a;
																															var _v356 = _v355.b;
																															var _v357 = _v356.b;
																															var _v358 = _v357.a;
																															var _v359 = _v358.a;
																															var _v360 = _v358.b;
																															var _v361 = _v360.a;
																															var _v362 = _v361.b;
																															var _v363 = _v362.b;
																															var _v364 = _v357.b;
																															var _v365 = _v364.a;
																															var _v366 = _v357.c;
																															var value5 = _v355.c;
																															return A2(
																																$elm$core$Result$map,
																																function (value) {
																																	return A2($author$project$Morphir$IR$SDK$Result$ok, _Utils_Tuple0, value);
																																},
																																_eval(
																																	A3(
																																		$author$project$Morphir$IR$Value$Apply,
																																		_Utils_Tuple0,
																																		A3(
																																			$author$project$Morphir$IR$Value$Apply,
																																			_Utils_Tuple0,
																																			A3(
																																				$author$project$Morphir$IR$Value$Apply,
																																				_Utils_Tuple0,
																																				A3(
																																					$author$project$Morphir$IR$Value$Apply,
																																					_Utils_Tuple0,
																																					A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, value1),
																																					value2),
																																				value3),
																																			value4),
																																		value5)));
																														case 'err':
																															break _v302$5;
																														default:
																															break _v302$6;
																													}
																												case 'err':
																													break _v302$4;
																												default:
																													if (_v302.b.b.b.b.a.b.b.c.a === 'err') {
																														break _v302$5;
																													} else {
																														break _v302$6;
																													}
																											}
																										case 'err':
																											break _v302$3;
																										default:
																											if (_v302.b.b.b.a.b.b.c.a === 'err') {
																												break _v302$4;
																											} else {
																												if (_v302.b.b.b.b.a.b.b.c.a === 'err') {
																													break _v302$5;
																												} else {
																													break _v302$6;
																												}
																											}
																									}
																								case 'err':
																									break _v302$2;
																								default:
																									if (_v302.b.b.a.b.b.c.a === 'err') {
																										break _v302$3;
																									} else {
																										if (_v302.b.b.b.a.b.b.c.a === 'err') {
																											break _v302$4;
																										} else {
																											if (_v302.b.b.b.b.a.b.b.c.a === 'err') {
																												break _v302$5;
																											} else {
																												break _v302$6;
																											}
																										}
																									}
																							}
																						case 'err':
																							break _v302$1;
																						default:
																							if (_v302.b.a.b.b.c.a === 'err') {
																								break _v302$2;
																							} else {
																								if (_v302.b.b.a.b.b.c.a === 'err') {
																									break _v302$3;
																								} else {
																									if (_v302.b.b.b.a.b.b.c.a === 'err') {
																										break _v302$4;
																									} else {
																										if (_v302.b.b.b.b.a.b.b.c.a === 'err') {
																											break _v302$5;
																										} else {
																											break _v302$6;
																										}
																									}
																								}
																							}
																					}
																				} else {
																					if (_v302.a.b.b.c.a === 'err') {
																						break _v302$1;
																					} else {
																						if (_v302.b.a.b.b.c.a === 'err') {
																							break _v302$2;
																						} else {
																							if (_v302.b.b.a.b.b.c.a === 'err') {
																								break _v302$3;
																							} else {
																								if (_v302.b.b.b.a.b.b.c.a === 'err') {
																									break _v302$4;
																								} else {
																									break _v302$6;
																								}
																							}
																						}
																					}
																				}
																			} else {
																				if (_v302.a.b.b.c.a === 'err') {
																					break _v302$1;
																				} else {
																					if (_v302.b.a.b.b.c.a === 'err') {
																						break _v302$2;
																					} else {
																						if (_v302.b.b.a.b.b.c.a === 'err') {
																							break _v302$3;
																						} else {
																							if (((((((((((((((((((((((_v302.b.b.b.b.a.$ === 'Apply') && (_v302.b.b.b.b.a.b.$ === 'Constructor')) && _v302.b.b.b.b.a.b.b.a.b) && _v302.b.b.b.b.a.b.b.a.a.b) && (_v302.b.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.b.b.a.b.b.a.a.b.b)) && _v302.b.b.b.b.a.b.b.a.b.b) && _v302.b.b.b.b.a.b.b.a.b.a.b) && (_v302.b.b.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.b.b.a.b.b.a.b.b.b)) && _v302.b.b.b.b.a.b.b.b.b) && _v302.b.b.b.b.a.b.b.b.a.b) && (_v302.b.b.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.b.b.a.b.b.b.b.b)) && _v302.b.b.b.b.a.b.b.c.b) && (_v302.b.b.b.b.a.b.b.c.a === 'err')) && (!_v302.b.b.b.b.a.b.b.c.b.b)) {
																								break _v302$5;
																							} else {
																								break _v302$6;
																							}
																						}
																					}
																				}
																			}
																		} else {
																			if (_v302.a.b.b.c.a === 'err') {
																				break _v302$1;
																			} else {
																				if (_v302.b.a.b.b.c.a === 'err') {
																					break _v302$2;
																				} else {
																					if (((((((((((((((((((((((_v302.b.b.b.a.$ === 'Apply') && (_v302.b.b.b.a.b.$ === 'Constructor')) && _v302.b.b.b.a.b.b.a.b) && _v302.b.b.b.a.b.b.a.a.b) && (_v302.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.b.a.b.b.a.a.b.b)) && _v302.b.b.b.a.b.b.a.b.b) && _v302.b.b.b.a.b.b.a.b.a.b) && (_v302.b.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.b.a.b.b.a.b.b.b)) && _v302.b.b.b.a.b.b.b.b) && _v302.b.b.b.a.b.b.b.a.b) && (_v302.b.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.b.a.b.b.b.b.b)) && _v302.b.b.b.a.b.b.c.b) && (_v302.b.b.b.a.b.b.c.a === 'err')) && (!_v302.b.b.b.a.b.b.c.b.b)) {
																						break _v302$4;
																					} else {
																						if (((((((((((((((((((((((_v302.b.b.b.b.a.$ === 'Apply') && (_v302.b.b.b.b.a.b.$ === 'Constructor')) && _v302.b.b.b.b.a.b.b.a.b) && _v302.b.b.b.b.a.b.b.a.a.b) && (_v302.b.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.b.b.a.b.b.a.a.b.b)) && _v302.b.b.b.b.a.b.b.a.b.b) && _v302.b.b.b.b.a.b.b.a.b.a.b) && (_v302.b.b.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.b.b.a.b.b.a.b.b.b)) && _v302.b.b.b.b.a.b.b.b.b) && _v302.b.b.b.b.a.b.b.b.a.b) && (_v302.b.b.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.b.b.a.b.b.b.b.b)) && _v302.b.b.b.b.a.b.b.c.b) && (_v302.b.b.b.b.a.b.b.c.a === 'err')) && (!_v302.b.b.b.b.a.b.b.c.b.b)) {
																							break _v302$5;
																						} else {
																							break _v302$6;
																						}
																					}
																				}
																			}
																		}
																	} else {
																		if (_v302.a.b.b.c.a === 'err') {
																			break _v302$1;
																		} else {
																			if (((((((((((((((((((((((_v302.b.b.a.$ === 'Apply') && (_v302.b.b.a.b.$ === 'Constructor')) && _v302.b.b.a.b.b.a.b) && _v302.b.b.a.b.b.a.a.b) && (_v302.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.a.b.b.a.a.b.b)) && _v302.b.b.a.b.b.a.b.b) && _v302.b.b.a.b.b.a.b.a.b) && (_v302.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.a.b.b.a.b.b.b)) && _v302.b.b.a.b.b.b.b) && _v302.b.b.a.b.b.b.a.b) && (_v302.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.a.b.b.b.b.b)) && _v302.b.b.a.b.b.c.b) && (_v302.b.b.a.b.b.c.a === 'err')) && (!_v302.b.b.a.b.b.c.b.b)) {
																				break _v302$3;
																			} else {
																				if (((((((((((((((((((((((_v302.b.b.b.a.$ === 'Apply') && (_v302.b.b.b.a.b.$ === 'Constructor')) && _v302.b.b.b.a.b.b.a.b) && _v302.b.b.b.a.b.b.a.a.b) && (_v302.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.b.a.b.b.a.a.b.b)) && _v302.b.b.b.a.b.b.a.b.b) && _v302.b.b.b.a.b.b.a.b.a.b) && (_v302.b.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.b.a.b.b.a.b.b.b)) && _v302.b.b.b.a.b.b.b.b) && _v302.b.b.b.a.b.b.b.a.b) && (_v302.b.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.b.a.b.b.b.b.b)) && _v302.b.b.b.a.b.b.c.b) && (_v302.b.b.b.a.b.b.c.a === 'err')) && (!_v302.b.b.b.a.b.b.c.b.b)) {
																					break _v302$4;
																				} else {
																					if (((((((((((((((((((((((_v302.b.b.b.b.a.$ === 'Apply') && (_v302.b.b.b.b.a.b.$ === 'Constructor')) && _v302.b.b.b.b.a.b.b.a.b) && _v302.b.b.b.b.a.b.b.a.a.b) && (_v302.b.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.b.b.a.b.b.a.a.b.b)) && _v302.b.b.b.b.a.b.b.a.b.b) && _v302.b.b.b.b.a.b.b.a.b.a.b) && (_v302.b.b.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.b.b.a.b.b.a.b.b.b)) && _v302.b.b.b.b.a.b.b.b.b) && _v302.b.b.b.b.a.b.b.b.a.b) && (_v302.b.b.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.b.b.a.b.b.b.b.b)) && _v302.b.b.b.b.a.b.b.c.b) && (_v302.b.b.b.b.a.b.b.c.a === 'err')) && (!_v302.b.b.b.b.a.b.b.c.b.b)) {
																						break _v302$5;
																					} else {
																						break _v302$6;
																					}
																				}
																			}
																		}
																	}
																} else {
																	if (((((((((((((((((((((((_v302.b.a.$ === 'Apply') && (_v302.b.a.b.$ === 'Constructor')) && _v302.b.a.b.b.a.b) && _v302.b.a.b.b.a.a.b) && (_v302.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.a.b.b.a.a.b.b)) && _v302.b.a.b.b.a.b.b) && _v302.b.a.b.b.a.b.a.b) && (_v302.b.a.b.b.a.b.a.a === 's')) && _v302.b.a.b.b.a.b.a.b.b) && (_v302.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.a.b.b.a.b.a.b.b.b) && (_v302.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.a.b.b.a.b.b.b)) && _v302.b.a.b.b.b.b) && _v302.b.a.b.b.b.a.b) && (_v302.b.a.b.b.b.a.a === 'result')) && (!_v302.b.a.b.b.b.a.b.b)) && (!_v302.b.a.b.b.b.b.b)) && _v302.b.a.b.b.c.b) && (_v302.b.a.b.b.c.a === 'err')) && (!_v302.b.a.b.b.c.b.b)) {
																		break _v302$2;
																	} else {
																		if (((((((((((((((((((((((_v302.b.b.a.$ === 'Apply') && (_v302.b.b.a.b.$ === 'Constructor')) && _v302.b.b.a.b.b.a.b) && _v302.b.b.a.b.b.a.a.b) && (_v302.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.a.b.b.a.a.b.b)) && _v302.b.b.a.b.b.a.b.b) && _v302.b.b.a.b.b.a.b.a.b) && (_v302.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.a.b.b.a.b.b.b)) && _v302.b.b.a.b.b.b.b) && _v302.b.b.a.b.b.b.a.b) && (_v302.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.a.b.b.b.b.b)) && _v302.b.b.a.b.b.c.b) && (_v302.b.b.a.b.b.c.a === 'err')) && (!_v302.b.b.a.b.b.c.b.b)) {
																			break _v302$3;
																		} else {
																			if (((((((((((((((((((((((_v302.b.b.b.a.$ === 'Apply') && (_v302.b.b.b.a.b.$ === 'Constructor')) && _v302.b.b.b.a.b.b.a.b) && _v302.b.b.b.a.b.b.a.a.b) && (_v302.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.b.a.b.b.a.a.b.b)) && _v302.b.b.b.a.b.b.a.b.b) && _v302.b.b.b.a.b.b.a.b.a.b) && (_v302.b.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.b.a.b.b.a.b.b.b)) && _v302.b.b.b.a.b.b.b.b) && _v302.b.b.b.a.b.b.b.a.b) && (_v302.b.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.b.a.b.b.b.b.b)) && _v302.b.b.b.a.b.b.c.b) && (_v302.b.b.b.a.b.b.c.a === 'err')) && (!_v302.b.b.b.a.b.b.c.b.b)) {
																				break _v302$4;
																			} else {
																				if (((((((((((((((((((((((_v302.b.b.b.b.a.$ === 'Apply') && (_v302.b.b.b.b.a.b.$ === 'Constructor')) && _v302.b.b.b.b.a.b.b.a.b) && _v302.b.b.b.b.a.b.b.a.a.b) && (_v302.b.b.b.b.a.b.b.a.a.a === 'morphir')) && (!_v302.b.b.b.b.a.b.b.a.a.b.b)) && _v302.b.b.b.b.a.b.b.a.b.b) && _v302.b.b.b.b.a.b.b.a.b.a.b) && (_v302.b.b.b.b.a.b.b.a.b.a.a === 's')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.a === 'd')) && _v302.b.b.b.b.a.b.b.a.b.a.b.b.b) && (_v302.b.b.b.b.a.b.b.a.b.a.b.b.a === 'k')) && (!_v302.b.b.b.b.a.b.b.a.b.a.b.b.b.b)) && (!_v302.b.b.b.b.a.b.b.a.b.b.b)) && _v302.b.b.b.b.a.b.b.b.b) && _v302.b.b.b.b.a.b.b.b.a.b) && (_v302.b.b.b.b.a.b.b.b.a.a === 'result')) && (!_v302.b.b.b.b.a.b.b.b.a.b.b)) && (!_v302.b.b.b.b.a.b.b.b.b.b)) && _v302.b.b.b.b.a.b.b.c.b) && (_v302.b.b.b.b.a.b.b.c.a === 'err')) && (!_v302.b.b.b.b.a.b.b.c.b.b)) {
																					break _v302$5;
																				} else {
																					break _v302$6;
																				}
																			}
																		}
																	}
																}
															} else {
																break _v302$6;
															}
														}
														return $elm$core$Result$Err(
															$author$project$Morphir$Value$Error$UnexpectedArguments(
																_List_fromArray(
																	[evaluatedArg1, evaluatedArg2, evaluatedArg3, evaluatedArg4])));
													}
													var _v431 = _v302.b;
													var _v432 = _v431.b;
													var _v433 = _v432.b;
													var _v434 = _v433.b;
													var _v435 = _v434.a;
													var _v436 = _v435.b;
													var _v437 = _v436.b;
													var _v438 = _v437.a;
													var _v439 = _v438.a;
													var _v440 = _v438.b;
													var _v441 = _v440.a;
													var _v442 = _v441.b;
													var _v443 = _v442.b;
													var _v444 = _v437.b;
													var _v445 = _v444.a;
													var _v446 = _v437.c;
													var error = _v435.c;
													return $elm$core$Result$Ok(
														A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
												}
												var _v415 = _v302.b;
												var _v416 = _v415.b;
												var _v417 = _v416.b;
												var _v418 = _v417.a;
												var _v419 = _v418.b;
												var _v420 = _v419.b;
												var _v421 = _v420.a;
												var _v422 = _v421.a;
												var _v423 = _v421.b;
												var _v424 = _v423.a;
												var _v425 = _v424.b;
												var _v426 = _v425.b;
												var _v427 = _v420.b;
												var _v428 = _v427.a;
												var _v429 = _v420.c;
												var error = _v418.c;
												var _v430 = _v417.b;
												return $elm$core$Result$Ok(
													A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
											}
											var _v399 = _v302.b;
											var _v400 = _v399.b;
											var _v401 = _v400.a;
											var _v402 = _v401.b;
											var _v403 = _v402.b;
											var _v404 = _v403.a;
											var _v405 = _v404.a;
											var _v406 = _v404.b;
											var _v407 = _v406.a;
											var _v408 = _v407.b;
											var _v409 = _v408.b;
											var _v410 = _v403.b;
											var _v411 = _v410.a;
											var _v412 = _v403.c;
											var error = _v401.c;
											var _v413 = _v400.b;
											var _v414 = _v413.b;
											return $elm$core$Result$Ok(
												A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
										}
										var _v383 = _v302.b;
										var _v384 = _v383.a;
										var _v385 = _v384.b;
										var _v386 = _v385.b;
										var _v387 = _v386.a;
										var _v388 = _v387.a;
										var _v389 = _v387.b;
										var _v390 = _v389.a;
										var _v391 = _v390.b;
										var _v392 = _v391.b;
										var _v393 = _v386.b;
										var _v394 = _v393.a;
										var _v395 = _v386.c;
										var error = _v384.c;
										var _v396 = _v383.b;
										var _v397 = _v396.b;
										var _v398 = _v397.b;
										return $elm$core$Result$Ok(
											A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
									}
									var _v367 = _v302.a;
									var _v368 = _v367.b;
									var _v369 = _v368.b;
									var _v370 = _v369.a;
									var _v371 = _v370.a;
									var _v372 = _v370.b;
									var _v373 = _v372.a;
									var _v374 = _v373.b;
									var _v375 = _v374.b;
									var _v376 = _v369.b;
									var _v377 = _v376.a;
									var _v378 = _v369.c;
									var error = _v367.c;
									var _v379 = _v302.b;
									var _v380 = _v379.b;
									var _v381 = _v380.b;
									var _v382 = _v381.b;
									return $elm$core$Result$Ok(
										A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error));
								}),
							_eval(arg1),
							_eval(arg2),
							_eval(arg3),
							_eval(arg4),
							_eval(arg5)));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'withDefault',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var arg1 = args.a;
					var _v448 = args.b;
					var arg2 = _v448.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg2) {
							_v449$2:
							while (true) {
								if ((((((((((((((((((((((evaluatedArg2.$ === 'Apply') && (evaluatedArg2.b.$ === 'Constructor')) && evaluatedArg2.b.b.a.b) && evaluatedArg2.b.b.a.a.b) && (evaluatedArg2.b.b.a.a.a === 'morphir')) && (!evaluatedArg2.b.b.a.a.b.b)) && evaluatedArg2.b.b.a.b.b) && evaluatedArg2.b.b.a.b.a.b) && (evaluatedArg2.b.b.a.b.a.a === 's')) && evaluatedArg2.b.b.a.b.a.b.b) && (evaluatedArg2.b.b.a.b.a.b.a === 'd')) && evaluatedArg2.b.b.a.b.a.b.b.b) && (evaluatedArg2.b.b.a.b.a.b.b.a === 'k')) && (!evaluatedArg2.b.b.a.b.a.b.b.b.b)) && (!evaluatedArg2.b.b.a.b.b.b)) && evaluatedArg2.b.b.b.b) && evaluatedArg2.b.b.b.a.b) && (evaluatedArg2.b.b.b.a.a === 'result')) && (!evaluatedArg2.b.b.b.a.b.b)) && (!evaluatedArg2.b.b.b.b.b)) && evaluatedArg2.b.b.c.b) && (!evaluatedArg2.b.b.c.b.b)) {
									switch (evaluatedArg2.b.b.c.a) {
										case 'ok':
											var _v450 = evaluatedArg2.b;
											var _v451 = _v450.b;
											var _v452 = _v451.a;
											var _v453 = _v452.a;
											var _v454 = _v452.b;
											var _v455 = _v454.a;
											var _v456 = _v455.b;
											var _v457 = _v456.b;
											var _v458 = _v451.b;
											var _v459 = _v458.a;
											var _v460 = _v451.c;
											var value = evaluatedArg2.c;
											return $elm$core$Result$Ok(value);
										case 'err':
											var _v461 = evaluatedArg2.b;
											var _v462 = _v461.b;
											var _v463 = _v462.a;
											var _v464 = _v463.a;
											var _v465 = _v463.b;
											var _v466 = _v465.a;
											var _v467 = _v466.b;
											var _v468 = _v467.b;
											var _v469 = _v462.b;
											var _v470 = _v469.a;
											var _v471 = _v462.c;
											var error = evaluatedArg2.c;
											return _eval(arg1);
										default:
											break _v449$2;
									}
								} else {
									break _v449$2;
								}
							}
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedResult(evaluatedArg2));
						},
						_eval(arg2));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'toMaybe',
		F2(
			function (_eval, args) {
				if (args.b && (!args.b.b)) {
					var arg1 = args.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							_v473$2:
							while (true) {
								if ((((((((((((((((((((((evaluatedArg1.$ === 'Apply') && (evaluatedArg1.b.$ === 'Constructor')) && evaluatedArg1.b.b.a.b) && evaluatedArg1.b.b.a.a.b) && (evaluatedArg1.b.b.a.a.a === 'morphir')) && (!evaluatedArg1.b.b.a.a.b.b)) && evaluatedArg1.b.b.a.b.b) && evaluatedArg1.b.b.a.b.a.b) && (evaluatedArg1.b.b.a.b.a.a === 's')) && evaluatedArg1.b.b.a.b.a.b.b) && (evaluatedArg1.b.b.a.b.a.b.a === 'd')) && evaluatedArg1.b.b.a.b.a.b.b.b) && (evaluatedArg1.b.b.a.b.a.b.b.a === 'k')) && (!evaluatedArg1.b.b.a.b.a.b.b.b.b)) && (!evaluatedArg1.b.b.a.b.b.b)) && evaluatedArg1.b.b.b.b) && evaluatedArg1.b.b.b.a.b) && (evaluatedArg1.b.b.b.a.a === 'result')) && (!evaluatedArg1.b.b.b.a.b.b)) && (!evaluatedArg1.b.b.b.b.b)) && evaluatedArg1.b.b.c.b) && (!evaluatedArg1.b.b.c.b.b)) {
									switch (evaluatedArg1.b.b.c.a) {
										case 'ok':
											var _v474 = evaluatedArg1.b;
											var _v475 = _v474.b;
											var _v476 = _v475.a;
											var _v477 = _v476.a;
											var _v478 = _v476.b;
											var _v479 = _v478.a;
											var _v480 = _v479.b;
											var _v481 = _v480.b;
											var _v482 = _v475.b;
											var _v483 = _v482.a;
											var _v484 = _v475.c;
											var value = evaluatedArg1.c;
											return $elm$core$Result$Ok(
												A2($author$project$Morphir$IR$SDK$Maybe$just, _Utils_Tuple0, value));
										case 'err':
											var _v485 = evaluatedArg1.b;
											var _v486 = _v485.b;
											var _v487 = _v486.a;
											var _v488 = _v487.a;
											var _v489 = _v487.b;
											var _v490 = _v489.a;
											var _v491 = _v490.b;
											var _v492 = _v491.b;
											var _v493 = _v486.b;
											var _v494 = _v493.a;
											var _v495 = _v486.c;
											var error = evaluatedArg1.c;
											return $elm$core$Result$Ok(
												$author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0));
										default:
											break _v473$2;
									}
								} else {
									break _v473$2;
								}
							}
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedResult(evaluatedArg1));
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'fromMaybe',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var arg1 = args.a;
					var _v497 = args.b;
					var arg2 = _v497.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg2) {
							_v498$2:
							while (true) {
								switch (evaluatedArg2.$) {
									case 'Apply':
										if ((((((((((((((((((((((evaluatedArg2.b.$ === 'Constructor') && evaluatedArg2.b.b.a.b) && evaluatedArg2.b.b.a.a.b) && (evaluatedArg2.b.b.a.a.a === 'morphir')) && (!evaluatedArg2.b.b.a.a.b.b)) && evaluatedArg2.b.b.a.b.b) && evaluatedArg2.b.b.a.b.a.b) && (evaluatedArg2.b.b.a.b.a.a === 's')) && evaluatedArg2.b.b.a.b.a.b.b) && (evaluatedArg2.b.b.a.b.a.b.a === 'd')) && evaluatedArg2.b.b.a.b.a.b.b.b) && (evaluatedArg2.b.b.a.b.a.b.b.a === 'k')) && (!evaluatedArg2.b.b.a.b.a.b.b.b.b)) && (!evaluatedArg2.b.b.a.b.b.b)) && evaluatedArg2.b.b.b.b) && evaluatedArg2.b.b.b.a.b) && (evaluatedArg2.b.b.b.a.a === 'maybe')) && (!evaluatedArg2.b.b.b.a.b.b)) && (!evaluatedArg2.b.b.b.b.b)) && evaluatedArg2.b.b.c.b) && (evaluatedArg2.b.b.c.a === 'just')) && (!evaluatedArg2.b.b.c.b.b)) {
											var _v499 = evaluatedArg2.b;
											var _v500 = _v499.b;
											var _v501 = _v500.a;
											var _v502 = _v501.a;
											var _v503 = _v501.b;
											var _v504 = _v503.a;
											var _v505 = _v504.b;
											var _v506 = _v505.b;
											var _v507 = _v500.b;
											var _v508 = _v507.a;
											var _v509 = _v500.c;
											var value = evaluatedArg2.c;
											return $elm$core$Result$Ok(
												A2($author$project$Morphir$IR$SDK$Result$ok, _Utils_Tuple0, value));
										} else {
											break _v498$2;
										}
									case 'Constructor':
										if ((((((((((((((((((((evaluatedArg2.b.a.b && evaluatedArg2.b.a.a.b) && (evaluatedArg2.b.a.a.a === 'morphir')) && (!evaluatedArg2.b.a.a.b.b)) && evaluatedArg2.b.a.b.b) && evaluatedArg2.b.a.b.a.b) && (evaluatedArg2.b.a.b.a.a === 's')) && evaluatedArg2.b.a.b.a.b.b) && (evaluatedArg2.b.a.b.a.b.a === 'd')) && evaluatedArg2.b.a.b.a.b.b.b) && (evaluatedArg2.b.a.b.a.b.b.a === 'k')) && (!evaluatedArg2.b.a.b.a.b.b.b.b)) && (!evaluatedArg2.b.a.b.b.b)) && evaluatedArg2.b.b.b) && evaluatedArg2.b.b.a.b) && (evaluatedArg2.b.b.a.a === 'maybe')) && (!evaluatedArg2.b.b.a.b.b)) && (!evaluatedArg2.b.b.b.b)) && evaluatedArg2.b.c.b) && (evaluatedArg2.b.c.a === 'nothing')) && (!evaluatedArg2.b.c.b.b)) {
											var _v510 = evaluatedArg2.b;
											var _v511 = _v510.a;
											var _v512 = _v511.a;
											var _v513 = _v511.b;
											var _v514 = _v513.a;
											var _v515 = _v514.b;
											var _v516 = _v515.b;
											var _v517 = _v510.b;
											var _v518 = _v517.a;
											var _v519 = _v510.c;
											return A2(
												$elm$core$Result$map,
												function (error) {
													return A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, error);
												},
												_eval(arg1));
										} else {
											break _v498$2;
										}
									default:
										break _v498$2;
								}
							}
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedResult(evaluatedArg2));
						},
						_eval(arg2));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'mapError',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v521 = args.b;
					var arg1 = _v521.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							_v522$2:
							while (true) {
								if ((((((((((((((((((((((evaluatedArg1.$ === 'Apply') && (evaluatedArg1.b.$ === 'Constructor')) && evaluatedArg1.b.b.a.b) && evaluatedArg1.b.b.a.a.b) && (evaluatedArg1.b.b.a.a.a === 'morphir')) && (!evaluatedArg1.b.b.a.a.b.b)) && evaluatedArg1.b.b.a.b.b) && evaluatedArg1.b.b.a.b.a.b) && (evaluatedArg1.b.b.a.b.a.a === 's')) && evaluatedArg1.b.b.a.b.a.b.b) && (evaluatedArg1.b.b.a.b.a.b.a === 'd')) && evaluatedArg1.b.b.a.b.a.b.b.b) && (evaluatedArg1.b.b.a.b.a.b.b.a === 'k')) && (!evaluatedArg1.b.b.a.b.a.b.b.b.b)) && (!evaluatedArg1.b.b.a.b.b.b)) && evaluatedArg1.b.b.b.b) && evaluatedArg1.b.b.b.a.b) && (evaluatedArg1.b.b.b.a.a === 'result')) && (!evaluatedArg1.b.b.b.a.b.b)) && (!evaluatedArg1.b.b.b.b.b)) && evaluatedArg1.b.b.c.b) && (!evaluatedArg1.b.b.c.b.b)) {
									switch (evaluatedArg1.b.b.c.a) {
										case 'ok':
											var _v523 = evaluatedArg1.b;
											var _v524 = _v523.b;
											var _v525 = _v524.a;
											var _v526 = _v525.a;
											var _v527 = _v525.b;
											var _v528 = _v527.a;
											var _v529 = _v528.b;
											var _v530 = _v529.b;
											var _v531 = _v524.b;
											var _v532 = _v531.a;
											var _v533 = _v524.c;
											var value = evaluatedArg1.c;
											return $elm$core$Result$Ok(
												A2($author$project$Morphir$IR$SDK$Result$ok, _Utils_Tuple0, value));
										case 'err':
											var _v534 = evaluatedArg1.b;
											var _v535 = _v534.b;
											var _v536 = _v535.a;
											var _v537 = _v536.a;
											var _v538 = _v536.b;
											var _v539 = _v538.a;
											var _v540 = _v539.b;
											var _v541 = _v540.b;
											var _v542 = _v535.b;
											var _v543 = _v542.a;
											var _v544 = _v535.c;
											var error = evaluatedArg1.c;
											return A2(
												$elm$core$Result$map,
												function (errorValue) {
													return A2($author$project$Morphir$IR$SDK$Result$err, _Utils_Tuple0, errorValue);
												},
												_eval(
													A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, error)));
										default:
											break _v522$2;
									}
								} else {
									break _v522$2;
								}
							}
							return $elm$core$Result$Err(
								$author$project$Morphir$Value$Error$ExpectedResult(evaluatedArg1));
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			}))
	]);
var $elm$core$Basics$acos = _Basics_acos;
var $elm$core$String$append = _String_append;
var $elm$core$Basics$asin = _Basics_asin;
var $elm$core$Basics$atan = _Basics_atan;
var $elm$core$Basics$atan2 = _Basics_atan2;
var $author$project$Morphir$Value$Error$ExpectedCharLiteral = function (a) {
	return {$: 'ExpectedCharLiteral', a: a};
};
var $author$project$Morphir$Value$Native$charLiteral = function (lit) {
	if (lit.$ === 'CharLiteral') {
		var v = lit.a;
		return $elm$core$Result$Ok(v);
	} else {
		return $elm$core$Result$Err(
			$author$project$Morphir$Value$Error$ExpectedCharLiteral(
				A2($author$project$Morphir$IR$Value$Literal, _Utils_Tuple0, lit)));
	}
};
var $elm$core$String$contains = _String_contains;
var $elm$core$Basics$cos = _Basics_cos;
var $elm$core$Basics$pi = _Basics_pi;
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $elm$core$Basics$e = _Basics_e;
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$String$fromList = _String_fromList;
var $elm$core$Basics$sin = _Basics_sin;
var $elm$core$Basics$fromPolar = function (_v0) {
	var radius = _v0.a;
	var theta = _v0.b;
	return _Utils_Tuple2(
		radius * $elm$core$Basics$cos(theta),
		radius * $elm$core$Basics$sin(theta));
};
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$indices = _String_indexes;
var $elm$core$Char$isHexDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $elm$core$Char$isOctDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 55) && (48 <= code);
};
var $elm$core$String$lines = _String_lines;
var $elm$core$String$pad = F3(
	function (n, _char, string) {
		var half = (n - $elm$core$String$length(string)) / 2;
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				$elm$core$Basics$ceiling(half),
				$elm$core$String$fromChar(_char)),
			_Utils_ap(
				string,
				A2(
					$elm$core$String$repeat,
					$elm$core$Basics$floor(half),
					$elm$core$String$fromChar(_char))));
	});
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $elm$core$Basics$radians = function (angleInRadians) {
	return angleInRadians;
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $elm$core$String$reverse = _String_reverse;
var $elm$core$Basics$round = _Basics_round;
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $elm$core$Basics$tan = _Basics_tan;
var $elm$core$String$toFloat = _String_toFloat;
var $elm$core$Char$toLocaleLower = _Char_toLocaleLower;
var $elm$core$Char$toLocaleUpper = _Char_toLocaleUpper;
var $elm$core$Char$toLower = _Char_toLower;
var $elm$core$Basics$toPolar = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return _Utils_Tuple2(
		$elm$core$Basics$sqrt((x * x) + (y * y)),
		A2($elm$core$Basics$atan2, y, x));
};
var $elm$core$String$toUpper = _String_toUpper;
var $elm$core$String$trim = _String_trim;
var $elm$core$String$trimLeft = _String_trimLeft;
var $elm$core$String$trimRight = _String_trimRight;
var $elm$core$Basics$truncate = _Basics_truncate;
var $elm$core$Basics$turns = function (angleInTurns) {
	return (2 * $elm$core$Basics$pi) * angleInTurns;
};
var $elm$core$String$words = _String_words;
var $author$project$Morphir$IR$SDK$SDKNativeFunctions$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple3(
		'Basics',
		'acos',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$acos,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'and',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$and,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Basics',
		'asin',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$asin,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'atan',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$atan,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'atan2',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$atan2,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'ceiling',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$ceiling,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple3(
		'Basics',
		'cos',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$cos,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'degrees',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$degrees,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'divide',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$fdiv,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'e',
		A2(
			$author$project$Morphir$Value$Native$eval0,
			$elm$core$Basics$e,
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'floor',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$floor,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple3(
		'Basics',
		'fromPolar',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$fromPolar,
			$author$project$Morphir$Value$Native$decodeTuple2(
				_Utils_Tuple2(
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral))),
			$author$project$Morphir$Value$Native$encodeTuple2(
				_Utils_Tuple2(
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))))),
		_Utils_Tuple3(
		'Basics',
		'integerDivide',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$idiv,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple3(
		'Basics',
		'isInfinite',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$isInfinite,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Basics',
		'isNaN',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$isNaN,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Basics',
		'logBase',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$logBase,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'modBy',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$modBy,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple3(
		'Basics',
		'not',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$not,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Basics',
		'or',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$or,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Basics',
		'pi',
		A2(
			$author$project$Morphir$Value$Native$eval0,
			$elm$core$Basics$pi,
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'radians',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$radians,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'remainderBy',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$remainderBy,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple3(
		'Basics',
		'round',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$round,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple3(
		'Basics',
		'sin',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$sin,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'sqrt',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$sqrt,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'tan',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$tan,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'toFloat',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$toFloat,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'toPolar',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$toPolar,
			$author$project$Morphir$Value$Native$decodeTuple2(
				_Utils_Tuple2(
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
					$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral))),
			$author$project$Morphir$Value$Native$encodeTuple2(
				_Utils_Tuple2(
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral),
					$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))))),
		_Utils_Tuple3(
		'Basics',
		'truncate',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$truncate,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple3(
		'Basics',
		'turns',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Basics$turns,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral))),
		_Utils_Tuple3(
		'Basics',
		'xor',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Basics$xor,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$boolLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Char',
		'fromCode',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$fromCode,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$CharLiteral))),
		_Utils_Tuple3(
		'Char',
		'isAlpha',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$isAlpha,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Char',
		'isAlphaNum',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$isAlphaNum,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Char',
		'isDigit',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$isDigit,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Char',
		'isHexDigit',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$isHexDigit,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Char',
		'isLower',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$isLower,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Char',
		'isOctDigit',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$isOctDigit,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Char',
		'isUpper',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$isUpper,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'Char',
		'toCode',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$toCode,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple3(
		'Char',
		'toLocaleLower',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$toLocaleLower,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$CharLiteral))),
		_Utils_Tuple3(
		'Char',
		'toLocaleUpper',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$toLocaleUpper,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$CharLiteral))),
		_Utils_Tuple3(
		'Char',
		'toLower',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$toLower,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$CharLiteral))),
		_Utils_Tuple3(
		'Char',
		'toUpper',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Char$toUpper,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$CharLiteral))),
		_Utils_Tuple3(
		'List',
		'range',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$List$range,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeList(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)))),
		_Utils_Tuple3(
		'String',
		'append',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$append,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'concat',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$concat,
			$author$project$Morphir$Value$Native$decodeList(
				$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral)),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'cons',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$cons,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'contains',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$contains,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'String',
		'dropLeft',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$dropLeft,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'dropRight',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$dropRight,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'endsWith',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$endsWith,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'String',
		'fromChar',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$fromChar,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'fromFloat',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$fromFloat,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$floatLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'fromInt',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$fromInt,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'fromList',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$fromList,
			$author$project$Morphir$Value$Native$decodeList(
				$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral)),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'indexes',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$indexes,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeList(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)))),
		_Utils_Tuple3(
		'String',
		'indices',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$indices,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeList(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)))),
		_Utils_Tuple3(
		'String',
		'isEmpty',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$isEmpty,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'String',
		'join',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$join,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeList(
				$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral)),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'left',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$left,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'length',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$length,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral))),
		_Utils_Tuple3(
		'String',
		'lines',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$lines,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeList(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral)))),
		_Utils_Tuple3(
		'String',
		'pad',
		A5(
			$author$project$Morphir$Value$Native$eval3,
			$elm$core$String$pad,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'padLeft',
		A5(
			$author$project$Morphir$Value$Native$eval3,
			$elm$core$String$padLeft,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'padRight',
		A5(
			$author$project$Morphir$Value$Native$eval3,
			$elm$core$String$padRight,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$charLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'repeat',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$repeat,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'replace',
		A5(
			$author$project$Morphir$Value$Native$eval3,
			$elm$core$String$replace,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'reverse',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$reverse,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'right',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$right,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'slice',
		A5(
			$author$project$Morphir$Value$Native$eval3,
			$elm$core$String$slice,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$intLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'split',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$split,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeList(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral)))),
		_Utils_Tuple3(
		'String',
		'startsWith',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$String$startsWith,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$BoolLiteral))),
		_Utils_Tuple3(
		'String',
		'toFloat',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$toFloat,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeMaybe(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$FloatLiteral)))),
		_Utils_Tuple3(
		'String',
		'toInt',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$toInt,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeMaybe(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$WholeNumberLiteral)))),
		_Utils_Tuple3(
		'String',
		'toList',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$toList,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeList(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$CharLiteral)))),
		_Utils_Tuple3(
		'String',
		'toLower',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$toLower,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'toUpper',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$toUpper,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'trim',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$trim,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'trimLeft',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$trimLeft,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'trimRight',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$trimRight,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))),
		_Utils_Tuple3(
		'String',
		'uncons',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$uncons,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeMaybe(
				$author$project$Morphir$Value$Native$encodeTuple2(
					_Utils_Tuple2(
						$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$CharLiteral),
						$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral)))))),
		_Utils_Tuple3(
		'String',
		'words',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$String$words,
			$author$project$Morphir$Value$Native$decodeLiteral($author$project$Morphir$Value$Native$stringLiteral),
			$author$project$Morphir$Value$Native$encodeList(
				$author$project$Morphir$Value$Native$encodeLiteral($author$project$Morphir$IR$Literal$StringLiteral))))
	]);
var $elm$core$String$foldl = _String_foldl;
var $author$project$Morphir$IR$SDK$String$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple2(
		'all',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v1 = args.b;
					var arg1 = _v1.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if ((evaluatedArg1.$ === 'Literal') && (evaluatedArg1.b.$ === 'StringLiteral')) {
								var value = evaluatedArg1.b.a;
								var evaluate = function (str) {
									evaluate:
									while (true) {
										var _v3 = $elm$core$String$uncons(str);
										if (_v3.$ === 'Just') {
											var _v4 = _v3.a;
											var c = _v4.a;
											var tail = _v4.b;
											var _v5 = _eval(
												A3(
													$author$project$Morphir$IR$Value$Apply,
													_Utils_Tuple0,
													fun,
													A2(
														$author$project$Morphir$IR$Value$Literal,
														_Utils_Tuple0,
														$author$project$Morphir$IR$Literal$CharLiteral(c))));
											if (_v5.$ === 'Ok') {
												if ((_v5.a.$ === 'Literal') && (_v5.a.b.$ === 'BoolLiteral')) {
													if (!_v5.a.b.a) {
														var _v6 = _v5.a;
														return $elm$core$Result$Ok(false);
													} else {
														var _v7 = _v5.a;
														var $temp$str = tail;
														str = $temp$str;
														continue evaluate;
													}
												} else {
													var other = _v5.a;
													return $elm$core$Result$Err(
														$author$project$Morphir$Value$Error$ExpectedBoolLiteral(other));
												}
											} else {
												var other = _v5.a;
												return $elm$core$Result$Err(other);
											}
										} else {
											return $elm$core$Result$Ok(true);
										}
									}
								};
								return A2(
									$elm$core$Result$map,
									function (val) {
										return A2(
											$author$project$Morphir$IR$Value$Literal,
											_Utils_Tuple0,
											$author$project$Morphir$IR$Literal$BoolLiteral(val));
									},
									evaluate(value));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedStringLiteral(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'any',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v9 = args.b;
					var arg1 = _v9.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if ((evaluatedArg1.$ === 'Literal') && (evaluatedArg1.b.$ === 'StringLiteral')) {
								var value = evaluatedArg1.b.a;
								var evaluate = function (str) {
									evaluate:
									while (true) {
										var _v11 = $elm$core$String$uncons(str);
										if (_v11.$ === 'Just') {
											var _v12 = _v11.a;
											var c = _v12.a;
											var tail = _v12.b;
											var _v13 = _eval(
												A3(
													$author$project$Morphir$IR$Value$Apply,
													_Utils_Tuple0,
													fun,
													A2(
														$author$project$Morphir$IR$Value$Literal,
														_Utils_Tuple0,
														$author$project$Morphir$IR$Literal$CharLiteral(c))));
											if (_v13.$ === 'Ok') {
												if ((_v13.a.$ === 'Literal') && (_v13.a.b.$ === 'BoolLiteral')) {
													if (!_v13.a.b.a) {
														var _v14 = _v13.a;
														var $temp$str = tail;
														str = $temp$str;
														continue evaluate;
													} else {
														var _v15 = _v13.a;
														return $elm$core$Result$Ok(true);
													}
												} else {
													var other = _v13.a;
													return $elm$core$Result$Err(
														$author$project$Morphir$Value$Error$ExpectedBoolLiteral(other));
												}
											} else {
												var other = _v13.a;
												return $elm$core$Result$Err(other);
											}
										} else {
											return $elm$core$Result$Ok(false);
										}
									}
								};
								return A2(
									$elm$core$Result$map,
									function (val) {
										return A2(
											$author$project$Morphir$IR$Value$Literal,
											_Utils_Tuple0,
											$author$project$Morphir$IR$Literal$BoolLiteral(val));
									},
									evaluate(value));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedStringLiteral(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'filter',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v17 = args.b;
					var arg1 = _v17.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if ((evaluatedArg1.$ === 'Literal') && (evaluatedArg1.b.$ === 'StringLiteral')) {
								var value = evaluatedArg1.b.a;
								var evaluate = F2(
									function (resultStr, str) {
										evaluate:
										while (true) {
											var _v19 = $elm$core$String$uncons(str);
											if (_v19.$ === 'Just') {
												var _v20 = _v19.a;
												var c = _v20.a;
												var tail = _v20.b;
												var _v21 = _eval(
													A3(
														$author$project$Morphir$IR$Value$Apply,
														_Utils_Tuple0,
														fun,
														A2(
															$author$project$Morphir$IR$Value$Literal,
															_Utils_Tuple0,
															$author$project$Morphir$IR$Literal$CharLiteral(c))));
												if (_v21.$ === 'Ok') {
													if ((_v21.a.$ === 'Literal') && (_v21.a.b.$ === 'BoolLiteral')) {
														if (!_v21.a.b.a) {
															var _v22 = _v21.a;
															var $temp$resultStr = resultStr,
																$temp$str = tail;
															resultStr = $temp$resultStr;
															str = $temp$str;
															continue evaluate;
														} else {
															var _v23 = _v21.a;
															var $temp$resultStr = A2(
																$elm$core$String$append,
																resultStr,
																$elm$core$String$fromChar(c)),
																$temp$str = tail;
															resultStr = $temp$resultStr;
															str = $temp$str;
															continue evaluate;
														}
													} else {
														var other = _v21.a;
														return $elm$core$Result$Err(
															$author$project$Morphir$Value$Error$ExpectedBoolLiteral(other));
													}
												} else {
													var other = _v21.a;
													return $elm$core$Result$Err(other);
												}
											} else {
												return $elm$core$Result$Ok(resultStr);
											}
										}
									});
								return A2(
									$elm$core$Result$map,
									function (val) {
										return A2(
											$author$project$Morphir$IR$Value$Literal,
											_Utils_Tuple0,
											$author$project$Morphir$IR$Literal$StringLiteral(val));
									},
									A2(evaluate, '', value));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedStringLiteral(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'map',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v25 = args.b;
					var arg1 = _v25.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if ((evaluatedArg1.$ === 'Literal') && (evaluatedArg1.b.$ === 'StringLiteral')) {
								var value = evaluatedArg1.b.a;
								var evaluate = F2(
									function (resultStr, str) {
										evaluate:
										while (true) {
											var _v27 = $elm$core$String$uncons(str);
											if (_v27.$ === 'Just') {
												var _v28 = _v27.a;
												var c = _v28.a;
												var tail = _v28.b;
												var _v29 = _eval(
													A3(
														$author$project$Morphir$IR$Value$Apply,
														_Utils_Tuple0,
														fun,
														A2(
															$author$project$Morphir$IR$Value$Literal,
															_Utils_Tuple0,
															$author$project$Morphir$IR$Literal$CharLiteral(c))));
												if (_v29.$ === 'Ok') {
													if ((_v29.a.$ === 'Literal') && (_v29.a.b.$ === 'CharLiteral')) {
														var _v30 = _v29.a;
														var newChar = _v30.b.a;
														var $temp$resultStr = A2(
															$elm$core$String$append,
															resultStr,
															$elm$core$String$fromChar(newChar)),
															$temp$str = tail;
														resultStr = $temp$resultStr;
														str = $temp$str;
														continue evaluate;
													} else {
														var other = _v29.a;
														return $elm$core$Result$Err(
															$author$project$Morphir$Value$Error$ExpectedCharLiteral(other));
													}
												} else {
													var other = _v29.a;
													return $elm$core$Result$Err(other);
												}
											} else {
												return $elm$core$Result$Ok(resultStr);
											}
										}
									});
								return A2(
									$elm$core$Result$map,
									function (val) {
										return A2(
											$author$project$Morphir$IR$Value$Literal,
											_Utils_Tuple0,
											$author$project$Morphir$IR$Literal$StringLiteral(val));
									},
									A2(evaluate, '', value));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedStringLiteral(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'foldl',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun = args.a;
					var _v32 = args.b;
					var arg1 = _v32.a;
					var _v33 = _v32.b;
					var arg2 = _v33.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg2) {
							if ((evaluatedArg2.$ === 'Literal') && (evaluatedArg2.b.$ === 'StringLiteral')) {
								var value = evaluatedArg2.b.a;
								return A3(
									$elm$core$String$foldl,
									F2(
										function (nextChar, resultSoFar) {
											return A2(
												$elm$core$Result$andThen,
												function (soFar) {
													return _eval(
														A3(
															$author$project$Morphir$IR$Value$Apply,
															_Utils_Tuple0,
															A3(
																$author$project$Morphir$IR$Value$Apply,
																_Utils_Tuple0,
																fun,
																A2(
																	$author$project$Morphir$IR$Value$Literal,
																	_Utils_Tuple0,
																	$author$project$Morphir$IR$Literal$CharLiteral(nextChar))),
															soFar));
												},
												resultSoFar);
										}),
									_eval(arg1),
									value);
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedStringLiteral(evaluatedArg2));
							}
						},
						_eval(arg2));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'foldr',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun = args.a;
					var _v36 = args.b;
					var arg1 = _v36.a;
					var _v37 = _v36.b;
					var arg2 = _v37.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg2) {
							if ((evaluatedArg2.$ === 'Literal') && (evaluatedArg2.b.$ === 'StringLiteral')) {
								var value = evaluatedArg2.b.a;
								return A3(
									$elm$core$String$foldr,
									F2(
										function (nextChar, resultSoFar) {
											return A2(
												$elm$core$Result$andThen,
												function (soFar) {
													return _eval(
														A3(
															$author$project$Morphir$IR$Value$Apply,
															_Utils_Tuple0,
															A3(
																$author$project$Morphir$IR$Value$Apply,
																_Utils_Tuple0,
																fun,
																A2(
																	$author$project$Morphir$IR$Value$Literal,
																	_Utils_Tuple0,
																	$author$project$Morphir$IR$Literal$CharLiteral(nextChar))),
															soFar));
												},
												resultSoFar);
										}),
									_eval(arg1),
									value);
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedStringLiteral(evaluatedArg2));
							}
						},
						_eval(arg2));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			}))
	]);
var $author$project$Morphir$IR$SDK$Tuple$nativeFunctions = _List_fromArray(
	[
		_Utils_Tuple2(
		'pair',
		A4(
			$author$project$Morphir$Value$Native$eval2,
			$elm$core$Tuple$pair,
			$author$project$Morphir$Value$Native$decodeRaw,
			$author$project$Morphir$Value$Native$decodeRaw,
			$author$project$Morphir$Value$Native$encodeTuple2(
				_Utils_Tuple2($author$project$Morphir$Value$Native$encodeRaw, $author$project$Morphir$Value$Native$encodeRaw)))),
		_Utils_Tuple2(
		'first',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Tuple$first,
			$author$project$Morphir$Value$Native$decodeTuple2(
				_Utils_Tuple2($author$project$Morphir$Value$Native$decodeRaw, $author$project$Morphir$Value$Native$decodeRaw)),
			$author$project$Morphir$Value$Native$encodeRaw)),
		_Utils_Tuple2(
		'second',
		A3(
			$author$project$Morphir$Value$Native$eval1,
			$elm$core$Tuple$second,
			$author$project$Morphir$Value$Native$decodeTuple2(
				_Utils_Tuple2($author$project$Morphir$Value$Native$decodeRaw, $author$project$Morphir$Value$Native$decodeRaw)),
			$author$project$Morphir$Value$Native$encodeRaw)),
		_Utils_Tuple2(
		'mapFirst',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v1 = args.b;
					var arg1 = _v1.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if ((((evaluatedArg1.$ === 'Tuple') && evaluatedArg1.b.b) && evaluatedArg1.b.b.b) && (!evaluatedArg1.b.b.b.b)) {
								var _v3 = evaluatedArg1.b;
								var val1 = _v3.a;
								var _v4 = _v3.b;
								var val2 = _v4.a;
								return A2(
									$elm$core$Result$andThen,
									function (evaluatedValue1) {
										return $elm$core$Result$Ok(
											A2(
												$author$project$Morphir$IR$Value$Tuple,
												_Utils_Tuple0,
												_List_fromArray(
													[evaluatedValue1, val2])));
									},
									_eval(
										A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, val1)));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedTuple(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'mapSecond',
		F2(
			function (_eval, args) {
				if ((args.b && args.b.b) && (!args.b.b.b)) {
					var fun = args.a;
					var _v6 = args.b;
					var arg1 = _v6.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if ((((evaluatedArg1.$ === 'Tuple') && evaluatedArg1.b.b) && evaluatedArg1.b.b.b) && (!evaluatedArg1.b.b.b.b)) {
								var _v8 = evaluatedArg1.b;
								var val1 = _v8.a;
								var _v9 = _v8.b;
								var val2 = _v9.a;
								return A2(
									$elm$core$Result$andThen,
									function (evaluatedValue2) {
										return $elm$core$Result$Ok(
											A2(
												$author$project$Morphir$IR$Value$Tuple,
												_Utils_Tuple0,
												_List_fromArray(
													[val1, evaluatedValue2])));
									},
									_eval(
										A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun, val2)));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedTuple(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			})),
		_Utils_Tuple2(
		'mapBoth',
		F2(
			function (_eval, args) {
				if (((args.b && args.b.b) && args.b.b.b) && (!args.b.b.b.b)) {
					var fun1 = args.a;
					var _v11 = args.b;
					var fun2 = _v11.a;
					var _v12 = _v11.b;
					var arg1 = _v12.a;
					return A2(
						$elm$core$Result$andThen,
						function (evaluatedArg1) {
							if ((((evaluatedArg1.$ === 'Tuple') && evaluatedArg1.b.b) && evaluatedArg1.b.b.b) && (!evaluatedArg1.b.b.b.b)) {
								var _v14 = evaluatedArg1.b;
								var val1 = _v14.a;
								var _v15 = _v14.b;
								var val2 = _v15.a;
								return A2(
									$elm$core$Result$andThen,
									$elm$core$Basics$identity,
									A3(
										$elm$core$Result$map2,
										F2(
											function (evaluatedValue1, evaluatedValue2) {
												return $elm$core$Result$Ok(
													A2(
														$author$project$Morphir$IR$Value$Tuple,
														_Utils_Tuple0,
														_List_fromArray(
															[evaluatedValue1, evaluatedValue2])));
											}),
										_eval(
											A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun1, val1)),
										_eval(
											A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, fun2, val2))));
							} else {
								return $elm$core$Result$Err(
									$author$project$Morphir$Value$Error$ExpectedTuple(evaluatedArg1));
							}
						},
						_eval(arg1));
				} else {
					return $elm$core$Result$Err(
						$author$project$Morphir$Value$Error$UnexpectedArguments(args));
				}
			}))
	]);
var $author$project$Morphir$IR$SDK$packageName = $author$project$Morphir$IR$Path$fromString('Morphir.SDK');
var $author$project$Morphir$IR$SDK$nativeFunctions = function () {
	var moduleFunctions = F2(
		function (moduleName, functionsByName) {
			return $elm$core$Dict$fromList(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var localName = _v1.a;
						var fun = _v1.b;
						return _Utils_Tuple2(
							_Utils_Tuple3(
								$author$project$Morphir$IR$SDK$packageName,
								$author$project$Morphir$IR$Path$fromString(moduleName),
								$author$project$Morphir$IR$Name$fromString(localName)),
							fun);
					},
					functionsByName));
		});
	return A3(
		$elm$core$List$foldl,
		$elm$core$Dict$union,
		$elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var moduleName = _v0.a;
					var localName = _v0.b;
					var fun = _v0.c;
					return _Utils_Tuple2(
						_Utils_Tuple3(
							$author$project$Morphir$IR$SDK$packageName,
							$author$project$Morphir$IR$Path$fromString(moduleName),
							$author$project$Morphir$IR$Name$fromString(localName)),
						fun);
				},
				$author$project$Morphir$IR$SDK$SDKNativeFunctions$nativeFunctions)),
		_List_fromArray(
			[
				A2(moduleFunctions, 'Basics', $author$project$Morphir$IR$SDK$Basics$nativeFunctions),
				A2(moduleFunctions, 'List', $author$project$Morphir$IR$SDK$List$nativeFunctions),
				A2(moduleFunctions, 'Maybe', $author$project$Morphir$IR$SDK$Maybe$nativeFunctions),
				A2(moduleFunctions, 'String', $author$project$Morphir$IR$SDK$String$nativeFunctions),
				A2(moduleFunctions, 'Tuple', $author$project$Morphir$IR$SDK$Tuple$nativeFunctions),
				A2(moduleFunctions, 'Result', $author$project$Morphir$IR$SDK$Result$nativeFunctions),
				A2(moduleFunctions, 'Dict', $author$project$Morphir$IR$SDK$Dict$nativeFunctions),
				A2(moduleFunctions, 'Decimal', $author$project$Morphir$IR$SDK$Decimal$nativeFunctions),
				A2(moduleFunctions, 'Aggregate', $author$project$Morphir$IR$SDK$Aggregate$nativeFunctions),
				A2(moduleFunctions, 'LocalDate', $author$project$Morphir$IR$SDK$LocalDate$nativeFunctions)
			]));
}();
var $elm$core$Debug$toString = _Debug_toString;
var $author$project$Morphir$IR$Type$DataCodec$decodeData = F2(
	function (ir, tpe) {
		switch (tpe.$) {
			case 'Reference':
				if ((((((((((((tpe.b.a.b && tpe.b.a.a.b) && (tpe.b.a.a.a === 'morphir')) && (!tpe.b.a.a.b.b)) && tpe.b.a.b.b) && tpe.b.a.b.a.b) && (tpe.b.a.b.a.a === 's')) && tpe.b.a.b.a.b.b) && (tpe.b.a.b.a.b.a === 'd')) && tpe.b.a.b.a.b.b.b) && (tpe.b.a.b.a.b.b.a === 'k')) && (!tpe.b.a.b.a.b.b.b.b)) && (!tpe.b.a.b.b.b)) {
					var fQName = tpe.b;
					var _v50 = fQName.a;
					var _v51 = _v50.a;
					var _v52 = _v50.b;
					var _v53 = _v52.a;
					var _v54 = _v53.b;
					var _v55 = _v54.b;
					var typeModuleName = fQName.b;
					var localName = fQName.c;
					var typeArgs = tpe.c;
					var decodeToDecimal = function (value) {
						return A2(
							$elm$core$Maybe$withDefault,
							$author$project$Morphir$SDK$Decimal$fromInt(0),
							$author$project$Morphir$SDK$Decimal$fromString(value));
					};
					var _v56 = _Utils_Tuple3(typeModuleName, localName, typeArgs);
					_v56$8:
					while (true) {
						if (((((_v56.a.b && _v56.a.a.b) && (!_v56.a.a.b.b)) && (!_v56.a.b.b)) && _v56.b.b) && (!_v56.b.b.b)) {
							if (!_v56.c.b) {
								switch (_v56.a.a.a) {
									case 'basics':
										switch (_v56.b.a) {
											case 'bool':
												var _v57 = _v56.a;
												var _v58 = _v57.a;
												var _v59 = _v56.b;
												return $elm$core$Result$Ok(
													A2(
														$elm$json$Json$Decode$map,
														function (value) {
															return A2(
																$author$project$Morphir$IR$Value$Literal,
																_Utils_Tuple0,
																$author$project$Morphir$IR$Literal$BoolLiteral(value));
														},
														$elm$json$Json$Decode$bool));
											case 'int':
												var _v60 = _v56.a;
												var _v61 = _v60.a;
												var _v62 = _v56.b;
												return $elm$core$Result$Ok(
													A2(
														$elm$json$Json$Decode$map,
														function (value) {
															return A2(
																$author$project$Morphir$IR$Value$Literal,
																_Utils_Tuple0,
																$author$project$Morphir$IR$Literal$WholeNumberLiteral(value));
														},
														$elm$json$Json$Decode$int));
											case 'float':
												var _v63 = _v56.a;
												var _v64 = _v63.a;
												var _v65 = _v56.b;
												return $elm$core$Result$Ok(
													A2(
														$elm$json$Json$Decode$map,
														function (value) {
															return A2(
																$author$project$Morphir$IR$Value$Literal,
																_Utils_Tuple0,
																$author$project$Morphir$IR$Literal$FloatLiteral(value));
														},
														$elm$json$Json$Decode$float));
											default:
												break _v56$8;
										}
									case 'decimal':
										if (_v56.b.a === 'decimal') {
											var _v66 = _v56.a;
											var _v67 = _v66.a;
											var _v68 = _v56.b;
											return $elm$core$Result$Ok(
												A2(
													$elm$json$Json$Decode$map,
													function (value) {
														return A2(
															$author$project$Morphir$IR$Value$Literal,
															_Utils_Tuple0,
															$author$project$Morphir$IR$Literal$DecimalLiteral(value));
													},
													A2(
														$elm$json$Json$Decode$andThen,
														function (str) {
															return $elm$json$Json$Decode$succeed(
																decodeToDecimal(str));
														},
														$elm$json$Json$Decode$string)));
										} else {
											break _v56$8;
										}
									case 'char':
										if (_v56.b.a === 'char') {
											var _v69 = _v56.a;
											var _v70 = _v69.a;
											var _v71 = _v56.b;
											return $elm$core$Result$Ok(
												A2(
													$elm$json$Json$Decode$andThen,
													function (value) {
														var _v72 = $elm$core$String$uncons(value);
														if (_v72.$ === 'Just') {
															var _v73 = _v72.a;
															var firstChar = _v73.a;
															return $elm$json$Json$Decode$succeed(
																A2(
																	$author$project$Morphir$IR$Value$Literal,
																	_Utils_Tuple0,
																	$author$project$Morphir$IR$Literal$CharLiteral(firstChar)));
														} else {
															return $elm$json$Json$Decode$fail('Expected char but found empty string.');
														}
													},
													$elm$json$Json$Decode$string));
										} else {
											break _v56$8;
										}
									case 'string':
										if (_v56.b.a === 'string') {
											var _v74 = _v56.a;
											var _v75 = _v74.a;
											var _v76 = _v56.b;
											return $elm$core$Result$Ok(
												A2(
													$elm$json$Json$Decode$map,
													function (value) {
														return A2(
															$author$project$Morphir$IR$Value$Literal,
															_Utils_Tuple0,
															$author$project$Morphir$IR$Literal$StringLiteral(value));
													},
													$elm$json$Json$Decode$string));
										} else {
											break _v56$8;
										}
									default:
										break _v56$8;
								}
							} else {
								if (!_v56.c.b.b) {
									switch (_v56.a.a.a) {
										case 'list':
											if (_v56.b.a === 'list') {
												var _v77 = _v56.a;
												var _v78 = _v77.a;
												var _v79 = _v56.b;
												var _v80 = _v56.c;
												var itemType = _v80.a;
												return A2(
													$elm$core$Result$map,
													function (itemDecoder) {
														return A2(
															$elm$json$Json$Decode$map,
															$author$project$Morphir$IR$Value$List(_Utils_Tuple0),
															$elm$json$Json$Decode$list(itemDecoder));
													},
													A2($author$project$Morphir$IR$Type$DataCodec$decodeData, ir, itemType));
											} else {
												break _v56$8;
											}
										case 'maybe':
											if (_v56.b.a === 'maybe') {
												var _v81 = _v56.a;
												var _v82 = _v81.a;
												var _v83 = _v56.b;
												var _v84 = _v56.c;
												var itemType = _v84.a;
												return A2(
													$elm$core$Result$map,
													function (itemDecoder) {
														return A2(
															$elm$json$Json$Decode$map,
															function (item) {
																if (item.$ === 'Just') {
																	var v = item.a;
																	return A2($author$project$Morphir$IR$SDK$Maybe$just, _Utils_Tuple0, v);
																} else {
																	return $author$project$Morphir$IR$SDK$Maybe$nothing(_Utils_Tuple0);
																}
															},
															$elm$json$Json$Decode$maybe(itemDecoder));
													},
													A2($author$project$Morphir$IR$Type$DataCodec$decodeData, ir, itemType));
											} else {
												break _v56$8;
											}
										default:
											break _v56$8;
									}
								} else {
									break _v56$8;
								}
							}
						} else {
							break _v56$8;
						}
					}
					return A2(
						$elm$core$Result$andThen,
						A3($author$project$Morphir$IR$Type$DataCodec$decodeTypeSpecification, ir, fQName, typeArgs),
						A2(
							$elm$core$Result$fromMaybe,
							$elm$core$String$concat(
								_List_fromArray(
									[
										'Cannot find reference: ',
										$author$project$Morphir$IR$FQName$toString(fQName)
									])),
							A2($author$project$Morphir$IR$lookupTypeSpecification, fQName, ir)));
				} else {
					var fQName = tpe.b;
					var typeArgs = tpe.c;
					return A2(
						$elm$core$Result$andThen,
						A3($author$project$Morphir$IR$Type$DataCodec$decodeTypeSpecification, ir, fQName, typeArgs),
						A2(
							$elm$core$Result$fromMaybe,
							$elm$core$String$concat(
								_List_fromArray(
									[
										'Cannot find reference: ',
										$author$project$Morphir$IR$FQName$toString(fQName)
									])),
							A2($author$project$Morphir$IR$lookupTypeSpecification, fQName, ir)));
				}
			case 'Record':
				var fields = tpe.b;
				return A2(
					$elm$core$Result$map,
					function (decoder) {
						return A2(
							$elm$json$Json$Decode$map,
							$author$project$Morphir$IR$Value$Record(_Utils_Tuple0),
							A2($elm$json$Json$Decode$map, $elm$core$Dict$fromList, decoder));
					},
					A3(
						$elm$core$List$foldr,
						F2(
							function (field, resultSoFar) {
								return A2(
									$elm$core$Result$andThen,
									function (decoderSoFar) {
										return A2(
											$elm$core$Result$map,
											function (fieldDecoder) {
												return A2(
													$elm$json$Json$Decode$andThen,
													function (fieldValuesSoFar) {
														return A2(
															$elm$json$Json$Decode$map,
															function (fieldValue) {
																return A2(
																	$elm$core$List$cons,
																	_Utils_Tuple2(field.name, fieldValue),
																	fieldValuesSoFar);
															},
															A2(
																$elm$json$Json$Decode$field,
																$author$project$Morphir$IR$Name$toCamelCase(field.name),
																fieldDecoder));
													},
													decoderSoFar);
											},
											A2($author$project$Morphir$IR$Type$DataCodec$decodeData, ir, field.tpe));
									},
									resultSoFar);
							}),
						$elm$core$Result$Ok(
							$elm$json$Json$Decode$succeed(_List_Nil)),
						fields));
			case 'Tuple':
				var elemTypes = tpe.b;
				return A2(
					$elm$core$Result$map,
					$elm$json$Json$Decode$map(
						$author$project$Morphir$IR$Value$Tuple(_Utils_Tuple0)),
					A3(
						$elm$core$List$foldr,
						F2(
							function (elemType, _v86) {
								var index = _v86.a;
								var resultSoFar = _v86.b;
								return _Utils_Tuple2(
									index - 1,
									A2(
										$elm$core$Result$andThen,
										function (decoderSoFar) {
											return A2(
												$elm$core$Result$map,
												function (fieldDecoder) {
													return A2(
														$elm$json$Json$Decode$andThen,
														function (fieldValuesSoFar) {
															return A2(
																$elm$json$Json$Decode$map,
																function (fieldValue) {
																	return A2($elm$core$List$cons, fieldValue, fieldValuesSoFar);
																},
																A2($elm$json$Json$Decode$index, index, fieldDecoder));
														},
														decoderSoFar);
												},
												A2($author$project$Morphir$IR$Type$DataCodec$decodeData, ir, elemType));
										},
										resultSoFar));
							}),
						_Utils_Tuple2(
							$elm$core$List$length(elemTypes) - 1,
							$elm$core$Result$Ok(
								$elm$json$Json$Decode$succeed(_List_Nil))),
						elemTypes).b);
			default:
				return $elm$core$Result$Err('Cannot Decode this type');
		}
	});
var $author$project$Morphir$IR$Type$DataCodec$decodeTypeSpecification = F4(
	function (ir, fQName, typeArgs, typeSpec) {
		var typePackageName = fQName.a;
		var typeModuleName = fQName.b;
		switch (typeSpec.$) {
			case 'TypeAliasSpecification':
				var typeArgNames = typeSpec.a;
				var typeExp = typeSpec.b;
				var argVariables = $elm$core$Dict$fromList(
					A3($elm$core$List$map2, $elm$core$Tuple$pair, typeArgNames, typeArgs));
				return A2(
					$author$project$Morphir$IR$Type$DataCodec$decodeData,
					ir,
					A2($author$project$Morphir$IR$Type$substituteTypeVariables, argVariables, typeExp));
			case 'OpaqueTypeSpecification':
				return $elm$core$Result$Err(
					$elm$core$String$concat(
						_List_fromArray(
							[
								'Cannot serialize opaque type: ',
								$author$project$Morphir$IR$FQName$toString(fQName)
							])));
			case 'CustomTypeSpecification':
				var typeArgNames = typeSpec.a;
				var constructors = typeSpec.b;
				var argVariables = $elm$core$Dict$fromList(
					A3($elm$core$List$map2, $elm$core$Tuple$pair, typeArgNames, typeArgs));
				return $elm$core$Result$Ok(
					A2(
						$elm$json$Json$Decode$andThen,
						function (tag) {
							var constructorLocalName = $author$project$Morphir$IR$Name$fromString(tag);
							var decoderResult = A2(
								$elm$core$Result$andThen,
								function (constructorArgTypes) {
									return A3(
										$elm$core$List$foldl,
										F2(
											function (_v2, _v3) {
												var argType = _v2.b;
												var index = _v3.a;
												var resultSoFar = _v3.b;
												return _Utils_Tuple2(
													index + 1,
													A2(
														$elm$core$Result$andThen,
														function (decoderSoFar) {
															return A2(
																$elm$core$Result$map,
																function (argDecoder) {
																	return A2(
																		$elm$json$Json$Decode$andThen,
																		function (constructorSoFar) {
																			return A2(
																				$elm$json$Json$Decode$map,
																				function (argValue) {
																					return A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, constructorSoFar, argValue);
																				},
																				A2($elm$json$Json$Decode$index, index, argDecoder));
																		},
																		decoderSoFar);
																},
																A2(
																	$author$project$Morphir$IR$Type$DataCodec$decodeData,
																	ir,
																	A2($author$project$Morphir$IR$Type$substituteTypeVariables, argVariables, argType)));
														},
														resultSoFar));
											}),
										_Utils_Tuple2(
											1,
											$elm$core$Result$Ok(
												$elm$json$Json$Decode$succeed(
													A2(
														$author$project$Morphir$IR$Value$Constructor,
														_Utils_Tuple0,
														_Utils_Tuple3(typePackageName, typeModuleName, constructorLocalName))))),
										constructorArgTypes).b;
								},
								A2(
									$elm$core$Result$fromMaybe,
									$elm$core$String$concat(
										_List_fromArray(
											[
												'Constructor \'',
												$author$project$Morphir$IR$Name$toTitleCase(constructorLocalName),
												'\' in type \'',
												$author$project$Morphir$IR$FQName$toString(fQName),
												'\' not found.'
											])),
									A2($elm$core$Dict$get, constructorLocalName, constructors)));
							if (decoderResult.$ === 'Ok') {
								var d = decoderResult.a;
								return d;
							} else {
								var error = decoderResult.a;
								return $elm$json$Json$Decode$fail(error);
							}
						},
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string)));
			default:
				var typeArgsNames = typeSpec.a;
				var config = typeSpec.b;
				var fnName = $author$project$Morphir$IR$FQName$toString(config.fromBaseType);
				var argVariables = $elm$core$Dict$fromList(
					A3($elm$core$List$map2, $elm$core$Tuple$pair, typeArgsNames, typeArgs));
				var apply = A2(
					$author$project$Morphir$IR$Value$Apply,
					_Utils_Tuple0,
					A2($author$project$Morphir$IR$Value$Reference, _Utils_Tuple0, config.fromBaseType));
				var createType = function (v) {
					return function (evaluatedResult) {
						if (evaluatedResult.$ === 'Ok') {
							var val = evaluatedResult.a;
							_v5$4:
							while (true) {
								switch (val.$) {
									case 'Constructor':
										if ((((((((((((((((((((val.b.a.b && val.b.a.a.b) && (val.b.a.a.a === 'morphir')) && (!val.b.a.a.b.b)) && val.b.a.b.b) && val.b.a.b.a.b) && (val.b.a.b.a.a === 's')) && val.b.a.b.a.b.b) && (val.b.a.b.a.b.a === 'd')) && val.b.a.b.a.b.b.b) && (val.b.a.b.a.b.b.a === 'k')) && (!val.b.a.b.a.b.b.b.b)) && (!val.b.a.b.b.b)) && val.b.b.b) && val.b.b.a.b) && (val.b.b.a.a === 'maybe')) && (!val.b.b.a.b.b)) && (!val.b.b.b.b)) && val.b.c.b) && (val.b.c.a === 'nothing')) && (!val.b.c.b.b)) {
											var _v17 = val.b;
											var _v18 = _v17.a;
											var _v19 = _v18.a;
											var _v20 = _v18.b;
											var _v21 = _v20.a;
											var _v22 = _v21.b;
											var _v23 = _v22.b;
											var _v24 = _v17.b;
											var _v25 = _v24.a;
											var _v26 = _v17.c;
											return $elm$json$Json$Decode$fail(fnName + ' returned Nothing');
										} else {
											break _v5$4;
										}
									case 'Apply':
										if ((((((((((((((((((((val.b.$ === 'Constructor') && val.b.b.a.b) && val.b.b.a.a.b) && (val.b.b.a.a.a === 'morphir')) && (!val.b.b.a.a.b.b)) && val.b.b.a.b.b) && val.b.b.a.b.a.b) && (val.b.b.a.b.a.a === 's')) && val.b.b.a.b.a.b.b) && (val.b.b.a.b.a.b.a === 'd')) && val.b.b.a.b.a.b.b.b) && (val.b.b.a.b.a.b.b.a === 'k')) && (!val.b.b.a.b.a.b.b.b.b)) && (!val.b.b.a.b.b.b)) && val.b.b.b.b) && val.b.b.b.a.b) && (!val.b.b.b.a.b.b)) && (!val.b.b.b.b.b)) && val.b.b.c.b) && (!val.b.b.c.b.b)) {
											switch (val.b.b.b.a.a) {
												case 'maybe':
													if (val.b.b.c.a === 'just') {
														var _v6 = val.b;
														var _v7 = _v6.b;
														var _v8 = _v7.a;
														var _v9 = _v8.a;
														var _v10 = _v8.b;
														var _v11 = _v10.a;
														var _v12 = _v11.b;
														var _v13 = _v12.b;
														var _v14 = _v7.b;
														var _v15 = _v14.a;
														var _v16 = _v7.c;
														var value = val.c;
														return $elm$json$Json$Decode$succeed(value);
													} else {
														break _v5$4;
													}
												case 'result':
													switch (val.b.b.c.a) {
														case 'ok':
															var _v27 = val.b;
															var _v28 = _v27.b;
															var _v29 = _v28.a;
															var _v30 = _v29.a;
															var _v31 = _v29.b;
															var _v32 = _v31.a;
															var _v33 = _v32.b;
															var _v34 = _v33.b;
															var _v35 = _v28.b;
															var _v36 = _v35.a;
															var _v37 = _v28.c;
															var value = val.c;
															return $elm$json$Json$Decode$succeed(value);
														case 'err':
															var _v38 = val.b;
															var _v39 = _v38.b;
															var _v40 = _v39.a;
															var _v41 = _v40.a;
															var _v42 = _v40.b;
															var _v43 = _v42.a;
															var _v44 = _v43.b;
															var _v45 = _v44.b;
															var _v46 = _v39.b;
															var _v47 = _v46.a;
															var _v48 = _v39.c;
															var err = val.c;
															return $elm$json$Json$Decode$fail(
																fnName + (' returned Err: ' + $elm$core$Debug$toString(err)));
														default:
															break _v5$4;
													}
												default:
													break _v5$4;
											}
										} else {
											break _v5$4;
										}
									default:
										break _v5$4;
								}
							}
							return $elm$json$Json$Decode$fail('Invalid Return Type for ' + fnName);
						} else {
							var error = evaluatedResult.a;
							return $elm$json$Json$Decode$fail(
								'Interpreter Evaluation Error: ' + $elm$core$Debug$toString(error));
						}
					}(
						A3(
							$author$project$Morphir$Value$Interpreter$evaluate,
							$author$project$Morphir$IR$SDK$nativeFunctions,
							ir,
							apply(v)));
				};
				return A2(
					$elm$core$Result$map,
					$elm$json$Json$Decode$andThen(createType),
					A2(
						$author$project$Morphir$IR$Type$DataCodec$decodeData,
						ir,
						A2($author$project$Morphir$IR$Type$substituteTypeVariables, argVariables, config.baseType)));
		}
	});
var $author$project$Morphir$Correctness$Codec$decodeTestCase = F2(
	function (ir, valueSpec) {
		var resultToFailure = function (result) {
			if (result.$ === 'Ok') {
				var decoder = result.a;
				return decoder;
			} else {
				var error = result.a;
				return $elm$json$Json$Decode$fail(error);
			}
		};
		return A4(
			$elm$json$Json$Decode$map3,
			$author$project$Morphir$Correctness$Test$TestCase,
			A2(
				$elm$json$Json$Decode$field,
				'inputs',
				A3(
					$elm$core$List$foldl,
					F2(
						function (_v0, _v1) {
							var argName = _v0.a;
							var argType = _v0.b;
							var index = _v1.a;
							var decoderSoFar = _v1.b;
							return _Utils_Tuple2(
								index + 1,
								A2(
									$elm$json$Json$Decode$andThen,
									function (inputsSoFar) {
										return A2(
											$elm$json$Json$Decode$index,
											index,
											A2(
												$elm$json$Json$Decode$map,
												function (input) {
													return A2(
														$elm$core$List$append,
														inputsSoFar,
														_List_fromArray(
															[input]));
												},
												$elm$json$Json$Decode$maybe(
													resultToFailure(
														A2($author$project$Morphir$IR$Type$DataCodec$decodeData, ir, argType)))));
									},
									decoderSoFar));
						}),
					_Utils_Tuple2(
						0,
						$elm$json$Json$Decode$succeed(_List_Nil)),
					valueSpec.inputs).b),
			A2(
				$elm$json$Json$Decode$field,
				'expectedOutput',
				resultToFailure(
					A2($author$project$Morphir$IR$Type$DataCodec$decodeData, ir, valueSpec.output))),
			A2($elm$json$Json$Decode$field, 'description', $elm$json$Json$Decode$string));
	});
var $author$project$Morphir$Correctness$Codec$decodeTestSuite = function (ir) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$list(
			A2(
				$elm$json$Json$Decode$andThen,
				function (fQName) {
					var _v0 = A2($author$project$Morphir$IR$lookupValueSpecification, fQName, ir);
					if (_v0.$ === 'Just') {
						var valueSpec = _v0.a;
						return A2(
							$elm$json$Json$Decode$index,
							1,
							A2(
								$elm$json$Json$Decode$map,
								$elm$core$Tuple$pair(fQName),
								$elm$json$Json$Decode$list(
									A2($author$project$Morphir$Correctness$Codec$decodeTestCase, ir, valueSpec))));
					} else {
						return $elm$json$Json$Decode$fail(
							'Cannot find ' + $author$project$Morphir$IR$FQName$toString(fQName));
					}
				},
				A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$FQName$CodecV1$decodeFQName))));
};
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $author$project$Morphir$IR$Distribution$Codec$currentFormatVersion = 2;
var $author$project$Morphir$IR$Package$Definition = function (modules) {
	return {modules: modules};
};
var $author$project$Morphir$IR$AccessControlled$Codec$decodeAccess = $elm$json$Json$Decode$andThen(
	function (str) {
		switch (str) {
			case 'Public':
				return $elm$json$Json$Decode$succeed($author$project$Morphir$IR$AccessControlled$Public);
			case 'Private':
				return $elm$json$Json$Decode$succeed($author$project$Morphir$IR$AccessControlled$Private);
			default:
				var other = str;
				return $elm$json$Json$Decode$fail('Unknown access controlled type: ' + other);
		}
	});
var $author$project$Morphir$IR$AccessControlled$Codec$decodeAccessControlled = function (decodeValue) {
	return A3(
		$elm$json$Json$Decode$map2,
		$author$project$Morphir$IR$AccessControlled$AccessControlled,
		$author$project$Morphir$IR$AccessControlled$Codec$decodeAccess(
			A2($elm$json$Json$Decode$field, 'access', $elm$json$Json$Decode$string)),
		A2($elm$json$Json$Decode$field, 'value', decodeValue));
};
var $author$project$Morphir$IR$Module$Definition = F3(
	function (types, values, doc) {
		return {doc: doc, types: types, values: values};
	});
var $author$project$Morphir$IR$Name$Codec$decodeName = A2(
	$elm$json$Json$Decode$map,
	$author$project$Morphir$IR$Name$fromList,
	$elm$json$Json$Decode$list($elm$json$Json$Decode$string));
var $author$project$Morphir$IR$Path$Codec$decodePath = A2(
	$elm$json$Json$Decode$map,
	$author$project$Morphir$IR$Path$fromList,
	$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$Codec$decodeName));
var $author$project$Morphir$IR$FQName$Codec$decodeFQName = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Morphir$IR$FQName$fQName,
	A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Path$Codec$decodePath),
	A2($elm$json$Json$Decode$index, 1, $author$project$Morphir$IR$Path$Codec$decodePath),
	A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$Codec$decodeName));
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $author$project$Morphir$IR$Type$Codec$decodeField = function (decodeAttributes) {
	return A3(
		$elm$json$Json$Decode$map2,
		$author$project$Morphir$IR$Type$Field,
		A2($elm$json$Json$Decode$field, 'name', $author$project$Morphir$IR$Name$Codec$decodeName),
		A2(
			$elm$json$Json$Decode$field,
			'tpe',
			$author$project$Morphir$IR$Type$Codec$decodeType(decodeAttributes)));
};
var $author$project$Morphir$IR$Type$Codec$decodeType = function (decodeAttributes) {
	var lazyDecodeType = $elm$json$Json$Decode$lazy(
		function (_v3) {
			return $author$project$Morphir$IR$Type$Codec$decodeType(decodeAttributes);
		});
	var lazyDecodeField = $elm$json$Json$Decode$lazy(
		function (_v2) {
			return $author$project$Morphir$IR$Type$Codec$decodeField(decodeAttributes);
		});
	return A2(
		$elm$json$Json$Decode$andThen,
		function (kind) {
			switch (kind) {
				case 'Variable':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$Variable,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$Codec$decodeName));
				case 'Reference':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Type$Reference,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$FQName$Codec$decodeFQName),
						A2(
							$elm$json$Json$Decode$index,
							3,
							$elm$json$Json$Decode$list(
								$elm$json$Json$Decode$lazy(
									function (_v1) {
										return $author$project$Morphir$IR$Type$Codec$decodeType(decodeAttributes);
									}))));
				case 'Tuple':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$Tuple,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$elm$json$Json$Decode$list(lazyDecodeType)));
				case 'Record':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$Record,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$elm$json$Json$Decode$list(lazyDecodeField)));
				case 'ExtensibleRecord':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Type$ExtensibleRecord,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$Codec$decodeName),
						A2(
							$elm$json$Json$Decode$index,
							3,
							$elm$json$Json$Decode$list(lazyDecodeField)));
				case 'Function':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Type$Function,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, lazyDecodeType),
						A2($elm$json$Json$Decode$index, 3, lazyDecodeType));
				case 'Unit':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Type$Unit,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes));
				default:
					return $elm$json$Json$Decode$fail('Unknown kind: ' + kind);
			}
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
};
var $author$project$Morphir$IR$Type$Codec$decodeConstructors = function (decodeAttributes) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$list(
			A3(
				$elm$json$Json$Decode$map2,
				$elm$core$Tuple$pair,
				A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$elm$json$Json$Decode$list(
						A3(
							$elm$json$Json$Decode$map2,
							$elm$core$Tuple$pair,
							A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
							A2(
								$elm$json$Json$Decode$index,
								1,
								$author$project$Morphir$IR$Type$Codec$decodeType(decodeAttributes))))))));
};
var $author$project$Morphir$IR$Type$Codec$decodeDefinition = function (decodeAttributes) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (kind) {
			switch (kind) {
				case 'TypeAliasDefinition':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$TypeAliasDefinition,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$Codec$decodeName)),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$Type$Codec$decodeType(decodeAttributes)));
				case 'CustomTypeDefinition':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$CustomTypeDefinition,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$Codec$decodeName)),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$AccessControlled$Codec$decodeAccessControlled(
								$author$project$Morphir$IR$Type$Codec$decodeConstructors(decodeAttributes))));
				default:
					return $elm$json$Json$Decode$fail('Unknown kind: ' + kind);
			}
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
};
var $author$project$Morphir$IR$Literal$Codec$decodeLiteral = A2(
	$elm$json$Json$Decode$andThen,
	function (kind) {
		switch (kind) {
			case 'BoolLiteral':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$BoolLiteral,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$bool));
			case 'CharLiteral':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$CharLiteral,
					A2(
						$elm$json$Json$Decode$andThen,
						function (str) {
							var _v1 = $elm$core$String$uncons(str);
							if (_v1.$ === 'Just') {
								var _v2 = _v1.a;
								var ch = _v2.a;
								return $elm$json$Json$Decode$succeed(ch);
							} else {
								return $elm$json$Json$Decode$fail('Single char expected');
							}
						},
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$string)));
			case 'StringLiteral':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$StringLiteral,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$string));
			case 'WholeNumberLiteral':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$WholeNumberLiteral,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$int));
			case 'FloatLiteral':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$FloatLiteral,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$float));
			case 'DecimalLiteral':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$DecimalLiteral,
					A2(
						$elm$json$Json$Decode$andThen,
						function (str) {
							var _v3 = $author$project$Morphir$SDK$Decimal$fromString(str);
							if (_v3.$ === 'Just') {
								var decimal = _v3.a;
								return $elm$json$Json$Decode$succeed(decimal);
							} else {
								return $elm$json$Json$Decode$fail('Failed to create decimal value from string: ' + str);
							}
						},
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$string)));
			default:
				var other = kind;
				return $elm$json$Json$Decode$fail('Unknown literal type: ' + other);
		}
	},
	A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
var $author$project$Morphir$IR$Value$Codec$decodePattern = function (decodeAttributes) {
	var lazyDecodePattern = $elm$json$Json$Decode$lazy(
		function (_v1) {
			return $author$project$Morphir$IR$Value$Codec$decodePattern(decodeAttributes);
		});
	return A2(
		$elm$json$Json$Decode$andThen,
		function (kind) {
			switch (kind) {
				case 'wildcard_pattern':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Value$WildcardPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes));
				case 'as_pattern':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Value$AsPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, lazyDecodePattern),
						A2($elm$json$Json$Decode$index, 3, $author$project$Morphir$IR$Name$Codec$decodeName));
				case 'tuple_pattern':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Value$TuplePattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$elm$json$Json$Decode$list(lazyDecodePattern)));
				case 'constructor_pattern':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Value$ConstructorPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$FQName$Codec$decodeFQName),
						A2(
							$elm$json$Json$Decode$index,
							3,
							$elm$json$Json$Decode$list(lazyDecodePattern)));
				case 'empty_list_pattern':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Value$EmptyListPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes));
				case 'head_tail_pattern':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Value$HeadTailPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, lazyDecodePattern),
						A2($elm$json$Json$Decode$index, 3, lazyDecodePattern));
				case 'literal_pattern':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Value$LiteralPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Literal$Codec$decodeLiteral));
				case 'unit_pattern':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Value$UnitPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes));
				default:
					var other = kind;
					return $elm$json$Json$Decode$fail('Unknown pattern type: ' + other);
			}
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
};
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$Morphir$IR$Value$Codec$decodeDefinition = F2(
	function (decodeTypeAttributes, decodeValueAttributes) {
		return A4(
			$elm$json$Json$Decode$map3,
			$author$project$Morphir$IR$Value$Definition,
			A2(
				$elm$json$Json$Decode$field,
				'inputTypes',
				$elm$json$Json$Decode$list(
					A4(
						$elm$json$Json$Decode$map3,
						F3(
							function (n, a, t) {
								return _Utils_Tuple3(n, a, t);
							}),
						A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
						A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$Type$Codec$decodeType(decodeTypeAttributes))))),
			A2(
				$elm$json$Json$Decode$field,
				'outputType',
				$author$project$Morphir$IR$Type$Codec$decodeType(decodeTypeAttributes)),
			A2(
				$elm$json$Json$Decode$field,
				'body',
				$elm$json$Json$Decode$lazy(
					function (_v2) {
						return A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes);
					})));
	});
var $author$project$Morphir$IR$Value$Codec$decodeValue = F2(
	function (decodeTypeAttributes, decodeValueAttributes) {
		var lazyDecodeValue = $elm$json$Json$Decode$lazy(
			function (_v1) {
				return A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes);
			});
		return A2(
			$elm$json$Json$Decode$andThen,
			function (kind) {
				switch (kind) {
					case 'literal':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Literal,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Literal$Codec$decodeLiteral));
					case 'constructor':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Constructor,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$FQName$Codec$decodeFQName));
					case 'tuple':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Tuple,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								$elm$json$Json$Decode$list(lazyDecodeValue)));
					case 'list':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$List,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								$elm$json$Json$Decode$list(lazyDecodeValue)));
					case 'record':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Record,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2(
									$elm$json$Json$Decode$map,
									$elm$core$Dict$fromList,
									$elm$json$Json$Decode$list(
										A3(
											$elm$json$Json$Decode$map2,
											$elm$core$Tuple$pair,
											A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
											A2(
												$elm$json$Json$Decode$index,
												1,
												A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)))))));
					case 'variable':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Variable,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$Codec$decodeName));
					case 'reference':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Reference,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$FQName$Codec$decodeFQName));
					case 'field':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$Field,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2($elm$json$Json$Decode$index, 3, $author$project$Morphir$IR$Name$Codec$decodeName));
					case 'field_function':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$FieldFunction,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$Codec$decodeName));
					case 'apply':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$Apply,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'lambda':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$Lambda,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								$author$project$Morphir$IR$Value$Codec$decodePattern(decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'let_definition':
						return A5(
							$elm$json$Json$Decode$map4,
							$author$project$Morphir$IR$Value$LetDefinition,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$Codec$decodeName),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$Codec$decodeDefinition, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								4,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'let_recursion':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$LetRecursion,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2(
									$elm$json$Json$Decode$map,
									$elm$core$Dict$fromList,
									$elm$json$Json$Decode$list(
										A3(
											$elm$json$Json$Decode$map2,
											$elm$core$Tuple$pair,
											A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
											A2(
												$elm$json$Json$Decode$index,
												1,
												A2($author$project$Morphir$IR$Value$Codec$decodeDefinition, decodeTypeAttributes, decodeValueAttributes)))))),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'destructure':
						return A5(
							$elm$json$Json$Decode$map4,
							$author$project$Morphir$IR$Value$Destructure,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								$author$project$Morphir$IR$Value$Codec$decodePattern(decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								4,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'if_then_else':
						return A5(
							$elm$json$Json$Decode$map4,
							$author$project$Morphir$IR$Value$IfThenElse,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								4,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'pattern_match':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$PatternMatch,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								$elm$json$Json$Decode$list(
									A3(
										$elm$json$Json$Decode$map2,
										$elm$core$Tuple$pair,
										A2(
											$elm$json$Json$Decode$index,
											0,
											$author$project$Morphir$IR$Value$Codec$decodePattern(decodeValueAttributes)),
										A2(
											$elm$json$Json$Decode$index,
											1,
											A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes))))));
					case 'update_record':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$UpdateRecord,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2(
									$elm$json$Json$Decode$map,
									$elm$core$Dict$fromList,
									$elm$json$Json$Decode$list(
										A3(
											$elm$json$Json$Decode$map2,
											$elm$core$Tuple$pair,
											A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
											A2(
												$elm$json$Json$Decode$index,
												1,
												A2($author$project$Morphir$IR$Value$Codec$decodeValue, decodeTypeAttributes, decodeValueAttributes)))))));
					case 'unit':
						return A2(
							$elm$json$Json$Decode$map,
							$author$project$Morphir$IR$Value$Unit,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes));
					default:
						var other = kind;
						return $elm$json$Json$Decode$fail('Unknown value type: ' + other);
				}
			},
			A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
	});
var $author$project$Morphir$IR$Documented$Codec$decodeDocumented = function (decodeValue) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A3(
				$elm$json$Json$Decode$map2,
				$author$project$Morphir$IR$Documented$Documented,
				A2($elm$json$Json$Decode$field, 'doc', $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$field, 'value', decodeValue)),
				A2(
				$elm$json$Json$Decode$map,
				$author$project$Morphir$IR$Documented$Documented(''),
				decodeValue)
			]));
};
var $author$project$Morphir$IR$Module$Codec$decodeDefinition = F2(
	function (decodeTypeAttributes, decodeValueAttributes) {
		return A4(
			$elm$json$Json$Decode$map3,
			$author$project$Morphir$IR$Module$Definition,
			A2(
				$elm$json$Json$Decode$field,
				'types',
				A2(
					$elm$json$Json$Decode$map,
					$elm$core$Dict$fromList,
					$elm$json$Json$Decode$list(
						A3(
							$elm$json$Json$Decode$map2,
							$elm$core$Tuple$pair,
							A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
							A2(
								$elm$json$Json$Decode$index,
								1,
								$author$project$Morphir$IR$AccessControlled$Codec$decodeAccessControlled(
									$author$project$Morphir$IR$Documented$Codec$decodeDocumented(
										$author$project$Morphir$IR$Type$Codec$decodeDefinition(decodeTypeAttributes)))))))),
			A2(
				$elm$json$Json$Decode$field,
				'values',
				A2(
					$elm$json$Json$Decode$map,
					$elm$core$Dict$fromList,
					$elm$json$Json$Decode$list(
						A3(
							$elm$json$Json$Decode$map2,
							$elm$core$Tuple$pair,
							A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
							A2(
								$elm$json$Json$Decode$index,
								1,
								$author$project$Morphir$IR$AccessControlled$Codec$decodeAccessControlled(
									$author$project$Morphir$IR$Documented$Codec$decodeDocumented(
										A2($author$project$Morphir$IR$Value$Codec$decodeDefinition, decodeTypeAttributes, decodeValueAttributes)))))))),
			$elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$json$Json$Decode$field,
						'doc',
						$elm$json$Json$Decode$maybe($elm$json$Json$Decode$string)),
						$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
					])));
	});
var $author$project$Morphir$IR$Package$Codec$decodeDefinition = F2(
	function (decodeAttributes, decodeAttributes2) {
		return A2(
			$elm$json$Json$Decode$map,
			$author$project$Morphir$IR$Package$Definition,
			A2(
				$elm$json$Json$Decode$field,
				'modules',
				A2(
					$elm$json$Json$Decode$map,
					$elm$core$Dict$fromList,
					$elm$json$Json$Decode$list(
						A3(
							$elm$json$Json$Decode$map2,
							$elm$core$Tuple$pair,
							A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Path$CodecV1$decodePath),
							A2(
								$elm$json$Json$Decode$index,
								1,
								$author$project$Morphir$IR$AccessControlled$Codec$decodeAccessControlled(
									A2($author$project$Morphir$IR$Module$Codec$decodeDefinition, decodeAttributes, decodeAttributes2))))))));
	});
var $author$project$Morphir$IR$Package$Specification = function (modules) {
	return {modules: modules};
};
var $author$project$Morphir$IR$Module$Specification = F3(
	function (types, values, doc) {
		return {doc: doc, types: types, values: values};
	});
var $author$project$Morphir$IR$Type$DerivedTypeSpecification = F2(
	function (a, b) {
		return {$: 'DerivedTypeSpecification', a: a, b: b};
	});
var $author$project$Morphir$IR$Type$Codec$decodeSpecification = function (decodeAttributes) {
	var decodeDerivedTypeConfig = A4(
		$elm$json$Json$Decode$map3,
		F3(
			function (baseType, fromBaseType, toBaseType) {
				return {baseType: baseType, fromBaseType: fromBaseType, toBaseType: toBaseType};
			}),
		A2(
			$elm$json$Json$Decode$field,
			'baseType',
			$author$project$Morphir$IR$Type$Codec$decodeType(decodeAttributes)),
		A2($elm$json$Json$Decode$field, 'fromBaseType', $author$project$Morphir$IR$FQName$Codec$decodeFQName),
		A2($elm$json$Json$Decode$field, 'toBaseType', $author$project$Morphir$IR$FQName$Codec$decodeFQName));
	return A2(
		$elm$json$Json$Decode$andThen,
		function (kind) {
			switch (kind) {
				case 'TypeAliasSpecification':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$TypeAliasSpecification,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$Codec$decodeName)),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$Type$Codec$decodeType(decodeAttributes)));
				case 'OpaqueTypeSpecification':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Type$OpaqueTypeSpecification,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$Codec$decodeName)));
				case 'CustomTypeSpecification':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$CustomTypeSpecification,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$Codec$decodeName)),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$Type$Codec$decodeConstructors(decodeAttributes)));
				case 'DerivedTypeSpecification':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$DerivedTypeSpecification,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$Codec$decodeName)),
						A2($elm$json$Json$Decode$index, 2, decodeDerivedTypeConfig));
				default:
					return $elm$json$Json$Decode$fail('Unknown kind: ' + kind);
			}
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
};
var $author$project$Morphir$IR$Value$Specification = F2(
	function (inputs, output) {
		return {inputs: inputs, output: output};
	});
var $author$project$Morphir$IR$Value$Codec$decodeSpecification = function (decodeTypeAttributes) {
	return A3(
		$elm$json$Json$Decode$map2,
		$author$project$Morphir$IR$Value$Specification,
		A2(
			$elm$json$Json$Decode$field,
			'inputs',
			$elm$json$Json$Decode$list(
				A3(
					$elm$json$Json$Decode$map2,
					$elm$core$Tuple$pair,
					A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
					A2(
						$elm$json$Json$Decode$index,
						1,
						$author$project$Morphir$IR$Type$Codec$decodeType(decodeTypeAttributes))))),
		A2(
			$elm$json$Json$Decode$field,
			'output',
			$author$project$Morphir$IR$Type$Codec$decodeType(decodeTypeAttributes)));
};
var $author$project$Morphir$IR$Module$Codec$decodeSpecification = function (decodeTypeAttributes) {
	return A4(
		$elm$json$Json$Decode$map3,
		$author$project$Morphir$IR$Module$Specification,
		A2(
			$elm$json$Json$Decode$field,
			'types',
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Dict$fromList,
				$elm$json$Json$Decode$list(
					A3(
						$elm$json$Json$Decode$map2,
						$elm$core$Tuple$pair,
						A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
						A2(
							$elm$json$Json$Decode$index,
							1,
							$author$project$Morphir$IR$Documented$Codec$decodeDocumented(
								$author$project$Morphir$IR$Type$Codec$decodeSpecification(decodeTypeAttributes))))))),
		A2(
			$elm$json$Json$Decode$field,
			'values',
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Dict$fromList,
				$elm$json$Json$Decode$list(
					A3(
						$elm$json$Json$Decode$map2,
						$elm$core$Tuple$pair,
						A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$Codec$decodeName),
						A2(
							$elm$json$Json$Decode$index,
							1,
							$author$project$Morphir$IR$Documented$Codec$decodeDocumented(
								$author$project$Morphir$IR$Value$Codec$decodeSpecification(decodeTypeAttributes))))))),
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$field,
					'doc',
					$elm$json$Json$Decode$maybe($elm$json$Json$Decode$string)),
					$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
				])));
};
var $author$project$Morphir$IR$Package$Codec$decodeSpecification = function (decodeAttributes) {
	return A2(
		$elm$json$Json$Decode$map,
		$author$project$Morphir$IR$Package$Specification,
		A2(
			$elm$json$Json$Decode$field,
			'modules',
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Dict$fromList,
				$elm$json$Json$Decode$list(
					A3(
						$elm$json$Json$Decode$map2,
						$elm$core$Tuple$pair,
						A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Path$CodecV1$decodePath),
						A2(
							$elm$json$Json$Decode$index,
							1,
							$author$project$Morphir$IR$Module$Codec$decodeSpecification(decodeAttributes)))))));
};
var $author$project$Morphir$Codec$decodeUnit = $elm$json$Json$Decode$succeed(_Utils_Tuple0);
var $author$project$Morphir$IR$Distribution$Codec$decodeDistribution = A2(
	$elm$json$Json$Decode$andThen,
	function (kind) {
		if (kind === 'Library') {
			return A4(
				$elm$json$Json$Decode$map3,
				$author$project$Morphir$IR$Distribution$Library,
				A2($elm$json$Json$Decode$index, 1, $author$project$Morphir$IR$Path$Codec$decodePath),
				A2(
					$elm$json$Json$Decode$index,
					2,
					A2(
						$elm$json$Json$Decode$map,
						$elm$core$Dict$fromList,
						$elm$json$Json$Decode$list(
							A3(
								$elm$json$Json$Decode$map2,
								$elm$core$Tuple$pair,
								A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Path$Codec$decodePath),
								A2(
									$elm$json$Json$Decode$index,
									1,
									$author$project$Morphir$IR$Package$Codec$decodeSpecification($author$project$Morphir$Codec$decodeUnit)))))),
				A2(
					$elm$json$Json$Decode$index,
					3,
					A2(
						$author$project$Morphir$IR$Package$Codec$decodeDefinition,
						$author$project$Morphir$Codec$decodeUnit,
						$author$project$Morphir$IR$Type$Codec$decodeType($author$project$Morphir$Codec$decodeUnit))));
		} else {
			var other = kind;
			return $elm$json$Json$Decode$fail('Unknown value type: ' + other);
		}
	},
	A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
var $author$project$Morphir$IR$AccessControlled$CodecV1$decodeAccessControlled = function (decodeValue) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (tag) {
			switch (tag) {
				case 'public':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$AccessControlled$AccessControlled($author$project$Morphir$IR$AccessControlled$Public),
						A2($elm$json$Json$Decode$index, 1, decodeValue));
				case 'private':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$AccessControlled$AccessControlled($author$project$Morphir$IR$AccessControlled$Private),
						A2($elm$json$Json$Decode$index, 1, decodeValue));
				default:
					var other = tag;
					return $elm$json$Json$Decode$fail('Unknown access controlled type: ' + other);
			}
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
};
var $author$project$Morphir$IR$Type$CodecV1$decodeField = function (decodeAttributes) {
	return A3(
		$elm$json$Json$Decode$map2,
		$author$project$Morphir$IR$Type$Field,
		A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
		A2(
			$elm$json$Json$Decode$index,
			1,
			$author$project$Morphir$IR$Type$CodecV1$decodeType(decodeAttributes)));
};
var $author$project$Morphir$IR$Type$CodecV1$decodeType = function (decodeAttributes) {
	var lazyDecodeType = $elm$json$Json$Decode$lazy(
		function (_v3) {
			return $author$project$Morphir$IR$Type$CodecV1$decodeType(decodeAttributes);
		});
	var lazyDecodeField = $elm$json$Json$Decode$lazy(
		function (_v2) {
			return $author$project$Morphir$IR$Type$CodecV1$decodeField(decodeAttributes);
		});
	return A2(
		$elm$json$Json$Decode$andThen,
		function (kind) {
			switch (kind) {
				case 'variable':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$Variable,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$CodecV1$decodeName));
				case 'reference':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Type$Reference,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$FQName$CodecV1$decodeFQName),
						A2(
							$elm$json$Json$Decode$index,
							3,
							$elm$json$Json$Decode$list(
								$elm$json$Json$Decode$lazy(
									function (_v1) {
										return $author$project$Morphir$IR$Type$CodecV1$decodeType(decodeAttributes);
									}))));
				case 'tuple':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$Tuple,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$elm$json$Json$Decode$list(lazyDecodeType)));
				case 'record':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$Record,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$elm$json$Json$Decode$list(lazyDecodeField)));
				case 'extensible_record':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Type$ExtensibleRecord,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$CodecV1$decodeName),
						A2(
							$elm$json$Json$Decode$index,
							3,
							$elm$json$Json$Decode$list(lazyDecodeField)));
				case 'function':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Type$Function,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, lazyDecodeType),
						A2($elm$json$Json$Decode$index, 3, lazyDecodeType));
				case 'unit':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Type$Unit,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes));
				default:
					return $elm$json$Json$Decode$fail('Unknown kind: ' + kind);
			}
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
};
var $author$project$Morphir$IR$Type$CodecV1$decodeConstructors = function (decodeAttributes) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$list(
			A3(
				$elm$json$Json$Decode$map2,
				$elm$core$Tuple$pair,
				A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$elm$json$Json$Decode$list(
						A3(
							$elm$json$Json$Decode$map2,
							$elm$core$Tuple$pair,
							A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
							A2(
								$elm$json$Json$Decode$index,
								1,
								$author$project$Morphir$IR$Type$CodecV1$decodeType(decodeAttributes))))))));
};
var $author$project$Morphir$IR$Type$CodecV1$decodeDefinition = function (decodeAttributes) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (kind) {
			switch (kind) {
				case 'type_alias_definition':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$TypeAliasDefinition,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$CodecV1$decodeName)),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$Type$CodecV1$decodeType(decodeAttributes)));
				case 'custom_type_definition':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$CustomTypeDefinition,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$CodecV1$decodeName)),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$AccessControlled$CodecV1$decodeAccessControlled(
								$author$project$Morphir$IR$Type$CodecV1$decodeConstructors(decodeAttributes))));
				default:
					return $elm$json$Json$Decode$fail('Unknown kind: ' + kind);
			}
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
};
var $author$project$Morphir$IR$Literal$CodecV1$decodeLiteral = A2(
	$elm$json$Json$Decode$andThen,
	function (kind) {
		switch (kind) {
			case 'bool_literal':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$BoolLiteral,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$bool));
			case 'char_literal':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$CharLiteral,
					A2(
						$elm$json$Json$Decode$andThen,
						function (str) {
							var _v1 = $elm$core$String$uncons(str);
							if (_v1.$ === 'Just') {
								var _v2 = _v1.a;
								var ch = _v2.a;
								return $elm$json$Json$Decode$succeed(ch);
							} else {
								return $elm$json$Json$Decode$fail('Single char expected');
							}
						},
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$string)));
			case 'string_literal':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$StringLiteral,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$string));
			case 'int_literal':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$WholeNumberLiteral,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$int));
			case 'float_literal':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$FloatLiteral,
					A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$float));
			case 'decimal_literal':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Morphir$IR$Literal$DecimalLiteral,
					A2(
						$elm$json$Json$Decode$andThen,
						function (str) {
							var _v3 = $author$project$Morphir$SDK$Decimal$fromString(str);
							if (_v3.$ === 'Just') {
								var decimal = _v3.a;
								return $elm$json$Json$Decode$succeed(decimal);
							} else {
								return $elm$json$Json$Decode$fail('Failed to create decimal value from string: ' + str);
							}
						},
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$string)));
			default:
				var other = kind;
				return $elm$json$Json$Decode$fail('Unknown literal type: ' + other);
		}
	},
	A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
var $author$project$Morphir$IR$Value$CodecV1$decodePattern = function (decodeAttributes) {
	var lazyDecodePattern = $elm$json$Json$Decode$lazy(
		function (_v1) {
			return $author$project$Morphir$IR$Value$CodecV1$decodePattern(decodeAttributes);
		});
	return A2(
		$elm$json$Json$Decode$andThen,
		function (kind) {
			switch (kind) {
				case 'wildcard_pattern':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Value$WildcardPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes));
				case 'as_pattern':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Value$AsPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, lazyDecodePattern),
						A2($elm$json$Json$Decode$index, 3, $author$project$Morphir$IR$Name$CodecV1$decodeName));
				case 'tuple_pattern':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Value$TuplePattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$elm$json$Json$Decode$list(lazyDecodePattern)));
				case 'constructor_pattern':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Value$ConstructorPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$FQName$CodecV1$decodeFQName),
						A2(
							$elm$json$Json$Decode$index,
							3,
							$elm$json$Json$Decode$list(lazyDecodePattern)));
				case 'empty_list_pattern':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Value$EmptyListPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes));
				case 'head_tail_pattern':
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$Morphir$IR$Value$HeadTailPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, lazyDecodePattern),
						A2($elm$json$Json$Decode$index, 3, lazyDecodePattern));
				case 'literal_pattern':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Value$LiteralPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes),
						A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Literal$CodecV1$decodeLiteral));
				case 'unit_pattern':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Value$UnitPattern,
						A2($elm$json$Json$Decode$index, 1, decodeAttributes));
				default:
					var other = kind;
					return $elm$json$Json$Decode$fail('Unknown pattern type: ' + other);
			}
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
};
var $author$project$Morphir$IR$Value$CodecV1$decodeDefinition = F2(
	function (decodeTypeAttributes, decodeValueAttributes) {
		return A4(
			$elm$json$Json$Decode$map3,
			$author$project$Morphir$IR$Value$Definition,
			A2(
				$elm$json$Json$Decode$field,
				'inputTypes',
				$elm$json$Json$Decode$list(
					A4(
						$elm$json$Json$Decode$map3,
						F3(
							function (n, a, t) {
								return _Utils_Tuple3(n, a, t);
							}),
						A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
						A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$Type$CodecV1$decodeType(decodeTypeAttributes))))),
			A2(
				$elm$json$Json$Decode$field,
				'outputType',
				$author$project$Morphir$IR$Type$CodecV1$decodeType(decodeTypeAttributes)),
			A2(
				$elm$json$Json$Decode$field,
				'body',
				$elm$json$Json$Decode$lazy(
					function (_v2) {
						return A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes);
					})));
	});
var $author$project$Morphir$IR$Value$CodecV1$decodeValue = F2(
	function (decodeTypeAttributes, decodeValueAttributes) {
		var lazyDecodeValue = $elm$json$Json$Decode$lazy(
			function (_v1) {
				return A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes);
			});
		return A2(
			$elm$json$Json$Decode$andThen,
			function (kind) {
				switch (kind) {
					case 'literal':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Literal,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Literal$CodecV1$decodeLiteral));
					case 'constructor':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Constructor,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$FQName$CodecV1$decodeFQName));
					case 'tuple':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Tuple,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								$elm$json$Json$Decode$list(lazyDecodeValue)));
					case 'list':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$List,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								$elm$json$Json$Decode$list(lazyDecodeValue)));
					case 'record':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Record,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2(
									$elm$json$Json$Decode$map,
									$elm$core$Dict$fromList,
									$elm$json$Json$Decode$list(
										A3(
											$elm$json$Json$Decode$map2,
											$elm$core$Tuple$pair,
											A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
											A2(
												$elm$json$Json$Decode$index,
												1,
												A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)))))));
					case 'variable':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Variable,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$CodecV1$decodeName));
					case 'reference':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$Reference,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$FQName$CodecV1$decodeFQName));
					case 'field':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$Field,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2($elm$json$Json$Decode$index, 3, $author$project$Morphir$IR$Name$CodecV1$decodeName));
					case 'field_function':
						return A3(
							$elm$json$Json$Decode$map2,
							$author$project$Morphir$IR$Value$FieldFunction,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$CodecV1$decodeName));
					case 'apply':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$Apply,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'lambda':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$Lambda,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								$author$project$Morphir$IR$Value$CodecV1$decodePattern(decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'let_definition':
						return A5(
							$elm$json$Json$Decode$map4,
							$author$project$Morphir$IR$Value$LetDefinition,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2($elm$json$Json$Decode$index, 2, $author$project$Morphir$IR$Name$CodecV1$decodeName),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeDefinition, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								4,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'let_recursion':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$LetRecursion,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2(
									$elm$json$Json$Decode$map,
									$elm$core$Dict$fromList,
									$elm$json$Json$Decode$list(
										A3(
											$elm$json$Json$Decode$map2,
											$elm$core$Tuple$pair,
											A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
											A2(
												$elm$json$Json$Decode$index,
												1,
												A2($author$project$Morphir$IR$Value$CodecV1$decodeDefinition, decodeTypeAttributes, decodeValueAttributes)))))),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'destructure':
						return A5(
							$elm$json$Json$Decode$map4,
							$author$project$Morphir$IR$Value$Destructure,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								$author$project$Morphir$IR$Value$CodecV1$decodePattern(decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								4,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'if_then_else':
						return A5(
							$elm$json$Json$Decode$map4,
							$author$project$Morphir$IR$Value$IfThenElse,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								4,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)));
					case 'pattern_match':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$PatternMatch,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								$elm$json$Json$Decode$list(
									A3(
										$elm$json$Json$Decode$map2,
										$elm$core$Tuple$pair,
										A2(
											$elm$json$Json$Decode$index,
											0,
											$author$project$Morphir$IR$Value$CodecV1$decodePattern(decodeValueAttributes)),
										A2(
											$elm$json$Json$Decode$index,
											1,
											A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes))))));
					case 'update_record':
						return A4(
							$elm$json$Json$Decode$map3,
							$author$project$Morphir$IR$Value$UpdateRecord,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes),
							A2(
								$elm$json$Json$Decode$index,
								2,
								A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)),
							A2(
								$elm$json$Json$Decode$index,
								3,
								A2(
									$elm$json$Json$Decode$map,
									$elm$core$Dict$fromList,
									$elm$json$Json$Decode$list(
										A3(
											$elm$json$Json$Decode$map2,
											$elm$core$Tuple$pair,
											A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
											A2(
												$elm$json$Json$Decode$index,
												1,
												A2($author$project$Morphir$IR$Value$CodecV1$decodeValue, decodeTypeAttributes, decodeValueAttributes)))))));
					case 'unit':
						return A2(
							$elm$json$Json$Decode$map,
							$author$project$Morphir$IR$Value$Unit,
							A2($elm$json$Json$Decode$index, 1, decodeValueAttributes));
					default:
						var other = kind;
						return $elm$json$Json$Decode$fail('Unknown value type: ' + other);
				}
			},
			A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
	});
var $author$project$Morphir$IR$Documented$CodecV1$decodeDocumented = function (decodeValue) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A3(
				$elm$json$Json$Decode$map2,
				$author$project$Morphir$IR$Documented$Documented,
				A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$index, 1, decodeValue)),
				A2(
				$elm$json$Json$Decode$map,
				$author$project$Morphir$IR$Documented$Documented(''),
				decodeValue)
			]));
};
var $author$project$Morphir$IR$Module$CodecV1$decodeDefinition = F2(
	function (decodeTypeAttributes, decodeValueAttributes) {
		return A4(
			$elm$json$Json$Decode$map3,
			$author$project$Morphir$IR$Module$Definition,
			A2(
				$elm$json$Json$Decode$field,
				'types',
				A2(
					$elm$json$Json$Decode$map,
					$elm$core$Dict$fromList,
					$elm$json$Json$Decode$list(
						A3(
							$elm$json$Json$Decode$map2,
							$elm$core$Tuple$pair,
							A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
							A2(
								$elm$json$Json$Decode$index,
								1,
								$author$project$Morphir$IR$AccessControlled$CodecV1$decodeAccessControlled(
									$author$project$Morphir$IR$Documented$CodecV1$decodeDocumented(
										$author$project$Morphir$IR$Type$CodecV1$decodeDefinition(decodeTypeAttributes)))))))),
			A2(
				$elm$json$Json$Decode$field,
				'values',
				A2(
					$elm$json$Json$Decode$map,
					$elm$core$Dict$fromList,
					$elm$json$Json$Decode$list(
						A3(
							$elm$json$Json$Decode$map2,
							$elm$core$Tuple$pair,
							A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
							A2(
								$elm$json$Json$Decode$index,
								1,
								$author$project$Morphir$IR$AccessControlled$CodecV1$decodeAccessControlled(
									$author$project$Morphir$IR$Documented$CodecV1$decodeDocumented(
										A2($author$project$Morphir$IR$Value$CodecV1$decodeDefinition, decodeTypeAttributes, decodeValueAttributes)))))))),
			$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing));
	});
var $author$project$Morphir$IR$Package$CodecV1$decodeDefinition = F2(
	function (decodeAttributes, decodeAttributes2) {
		return A2(
			$elm$json$Json$Decode$map,
			$author$project$Morphir$IR$Package$Definition,
			A2(
				$elm$json$Json$Decode$field,
				'modules',
				A2(
					$elm$json$Json$Decode$map,
					$elm$core$Dict$fromList,
					$elm$json$Json$Decode$list(
						A3(
							$elm$json$Json$Decode$map2,
							$elm$core$Tuple$pair,
							A2($elm$json$Json$Decode$field, 'name', $author$project$Morphir$IR$Path$CodecV1$decodePath),
							A2(
								$elm$json$Json$Decode$field,
								'def',
								$author$project$Morphir$IR$AccessControlled$CodecV1$decodeAccessControlled(
									A2($author$project$Morphir$IR$Module$CodecV1$decodeDefinition, decodeAttributes, decodeAttributes2))))))));
	});
var $author$project$Morphir$IR$Type$CodecV1$decodeSpecification = function (decodeAttributes) {
	var decodeDerivedTypeConfig = A4(
		$elm$json$Json$Decode$map3,
		F3(
			function (baseType, fromBaseType, toBaseType) {
				return {baseType: baseType, fromBaseType: fromBaseType, toBaseType: toBaseType};
			}),
		A2(
			$elm$json$Json$Decode$field,
			'baseType',
			$author$project$Morphir$IR$Type$CodecV1$decodeType(decodeAttributes)),
		A2($elm$json$Json$Decode$field, 'fromBaseType', $author$project$Morphir$IR$FQName$CodecV1$decodeFQName),
		A2($elm$json$Json$Decode$field, 'toBaseType', $author$project$Morphir$IR$FQName$CodecV1$decodeFQName));
	return A2(
		$elm$json$Json$Decode$andThen,
		function (kind) {
			switch (kind) {
				case 'type_alias_specification':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$TypeAliasSpecification,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$CodecV1$decodeName)),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$Type$CodecV1$decodeType(decodeAttributes)));
				case 'opaque_type_specification':
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$Morphir$IR$Type$OpaqueTypeSpecification,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$CodecV1$decodeName)));
				case 'custom_type_specification':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$CustomTypeSpecification,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$CodecV1$decodeName)),
						A2(
							$elm$json$Json$Decode$index,
							2,
							$author$project$Morphir$IR$Type$CodecV1$decodeConstructors(decodeAttributes)));
				case 'derived_type_specification':
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$Morphir$IR$Type$DerivedTypeSpecification,
						A2(
							$elm$json$Json$Decode$index,
							1,
							$elm$json$Json$Decode$list($author$project$Morphir$IR$Name$CodecV1$decodeName)),
						A2($elm$json$Json$Decode$index, 2, decodeDerivedTypeConfig));
				default:
					return $elm$json$Json$Decode$fail('Unknown kind: ' + kind);
			}
		},
		A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
};
var $author$project$Morphir$IR$Value$CodecV1$decodeSpecification = function (decodeTypeAttributes) {
	return A3(
		$elm$json$Json$Decode$map2,
		$author$project$Morphir$IR$Value$Specification,
		A2(
			$elm$json$Json$Decode$field,
			'inputs',
			$elm$json$Json$Decode$list(
				A3(
					$elm$json$Json$Decode$map2,
					$elm$core$Tuple$pair,
					A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
					A2(
						$elm$json$Json$Decode$index,
						1,
						$author$project$Morphir$IR$Type$CodecV1$decodeType(decodeTypeAttributes))))),
		A2(
			$elm$json$Json$Decode$field,
			'output',
			$author$project$Morphir$IR$Type$CodecV1$decodeType(decodeTypeAttributes)));
};
var $author$project$Morphir$IR$Module$CodecV1$decodeSpecification = function (decodeTypeAttributes) {
	return A4(
		$elm$json$Json$Decode$map3,
		$author$project$Morphir$IR$Module$Specification,
		A2(
			$elm$json$Json$Decode$field,
			'types',
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Dict$fromList,
				$elm$json$Json$Decode$list(
					A3(
						$elm$json$Json$Decode$map2,
						$elm$core$Tuple$pair,
						A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
						A2(
							$elm$json$Json$Decode$index,
							1,
							$author$project$Morphir$IR$Documented$CodecV1$decodeDocumented(
								$author$project$Morphir$IR$Type$CodecV1$decodeSpecification(decodeTypeAttributes))))))),
		A2(
			$elm$json$Json$Decode$field,
			'values',
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Dict$fromList,
				$elm$json$Json$Decode$list(
					A3(
						$elm$json$Json$Decode$map2,
						$elm$core$Tuple$pair,
						A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Name$CodecV1$decodeName),
						A2(
							$elm$json$Json$Decode$index,
							1,
							$author$project$Morphir$IR$Documented$CodecV1$decodeDocumented(
								$author$project$Morphir$IR$Value$CodecV1$decodeSpecification(decodeTypeAttributes))))))),
		$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing));
};
var $author$project$Morphir$IR$Package$CodecV1$decodeSpecification = function (decodeAttributes) {
	return A2(
		$elm$json$Json$Decode$map,
		$author$project$Morphir$IR$Package$Specification,
		A2(
			$elm$json$Json$Decode$field,
			'modules',
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Dict$fromList,
				$elm$json$Json$Decode$list(
					A3(
						$elm$json$Json$Decode$map2,
						$elm$core$Tuple$pair,
						A2($elm$json$Json$Decode$field, 'name', $author$project$Morphir$IR$Path$CodecV1$decodePath),
						A2(
							$elm$json$Json$Decode$field,
							'spec',
							$author$project$Morphir$IR$Module$CodecV1$decodeSpecification(decodeAttributes)))))));
};
var $author$project$Morphir$IR$Distribution$CodecV1$decodeDistribution = A2(
	$elm$json$Json$Decode$andThen,
	function (kind) {
		if (kind === 'library') {
			return A4(
				$elm$json$Json$Decode$map3,
				$author$project$Morphir$IR$Distribution$Library,
				A2($elm$json$Json$Decode$index, 1, $author$project$Morphir$IR$Path$CodecV1$decodePath),
				A2(
					$elm$json$Json$Decode$index,
					2,
					A2(
						$elm$json$Json$Decode$map,
						$elm$core$Dict$fromList,
						$elm$json$Json$Decode$list(
							A3(
								$elm$json$Json$Decode$map2,
								$elm$core$Tuple$pair,
								A2($elm$json$Json$Decode$index, 0, $author$project$Morphir$IR$Path$CodecV1$decodePath),
								A2(
									$elm$json$Json$Decode$index,
									1,
									$author$project$Morphir$IR$Package$CodecV1$decodeSpecification($author$project$Morphir$Codec$decodeUnit)))))),
				A2(
					$elm$json$Json$Decode$index,
					3,
					A2(
						$author$project$Morphir$IR$Package$CodecV1$decodeDefinition,
						$author$project$Morphir$Codec$decodeUnit,
						$author$project$Morphir$IR$Type$CodecV1$decodeType($author$project$Morphir$Codec$decodeUnit))));
		} else {
			var other = kind;
			return $elm$json$Json$Decode$fail('Unknown value type: ' + other);
		}
	},
	A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
var $author$project$Morphir$IR$Distribution$Codec$decodeVersionedDistribution = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$andThen,
			function (formatVersion) {
				return _Utils_eq(formatVersion, $author$project$Morphir$IR$Distribution$Codec$currentFormatVersion) ? A2($elm$json$Json$Decode$field, 'distribution', $author$project$Morphir$IR$Distribution$Codec$decodeDistribution) : ((formatVersion === 1) ? A2($elm$json$Json$Decode$field, 'distribution', $author$project$Morphir$IR$Distribution$CodecV1$decodeDistribution) : $elm$json$Json$Decode$fail(
					$elm$core$String$concat(
						_List_fromArray(
							[
								'The IR is using format version ',
								$elm$core$String$fromInt(formatVersion),
								' but the latest format version is ',
								$elm$core$String$fromInt($author$project$Morphir$IR$Distribution$Codec$currentFormatVersion),
								'. Please regenerate it!'
							]))));
			},
			A2($elm$json$Json$Decode$field, 'formatVersion', $elm$json$Json$Decode$int)),
			$elm$json$Json$Decode$fail('The IR is in an old format that doesn\'t have a format version on it. Please regenerate it!')
		]));
var $author$project$Morphir$IR$SDK$Aggregate$moduleName = $author$project$Morphir$IR$Path$fromString('Aggregate');
var $author$project$Morphir$IR$SDK$Aggregate$aggregationType = F3(
	function (attributes, aType, keyType) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Aggregate$moduleName, 'Aggregation'),
			_List_fromArray(
				[aType, keyType]));
	});
var $author$project$Morphir$IR$SDK$Aggregate$aggregatorType = F3(
	function (attributes, aType, keyType) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Aggregate$moduleName, 'Aggregator'),
			_List_fromArray(
				[aType, keyType]));
	});
var $author$project$Morphir$IR$SDK$Basics$boolType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'Bool'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Dict$moduleName = $author$project$Morphir$IR$Path$fromString('Dict');
var $author$project$Morphir$IR$SDK$Dict$dictType = F3(
	function (attributes, keyType, valueType) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Dict$moduleName, 'dict'),
			_List_fromArray(
				[keyType, valueType]));
	});
var $author$project$Morphir$IR$SDK$Key$moduleName = $author$project$Morphir$IR$Path$fromString('Key');
var $author$project$Morphir$IR$SDK$Key$key0Type = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key0'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$List$listType = F2(
	function (attributes, itemType) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$List$moduleName, 'List'),
			_List_fromArray(
				[itemType]));
	});
var $author$project$Morphir$IR$SDK$Common$tFun = F2(
	function (argTypes, returnType) {
		var curry = function (args) {
			if (!args.b) {
				return returnType;
			} else {
				var firstArg = args.a;
				var restOfArgs = args.b;
				return A3(
					$author$project$Morphir$IR$Type$Function,
					_Utils_Tuple0,
					firstArg,
					curry(restOfArgs));
			}
		};
		return curry(argTypes);
	});
var $author$project$Morphir$IR$SDK$Common$tVar = function (varName) {
	return A2(
		$author$project$Morphir$IR$Type$Variable,
		_Utils_Tuple0,
		$author$project$Morphir$IR$Name$fromString(varName));
};
var $author$project$Morphir$IR$SDK$Common$vSpec = F3(
	function (name, args, returnType) {
		return _Utils_Tuple2(
			$author$project$Morphir$IR$Name$fromString(name),
			A2(
				$author$project$Morphir$IR$Documented$Documented,
				'documentation',
				A2(
					$author$project$Morphir$IR$Value$Specification,
					A2(
						$elm$core$List$map,
						function (_v0) {
							var argName = _v0.a;
							var argType = _v0.b;
							return _Utils_Tuple2(
								$author$project$Morphir$IR$Name$fromString(argName),
								argType);
						},
						args),
					returnType)));
	});
var $author$project$Morphir$IR$SDK$Aggregate$moduleSpec = {
	doc: $elm$core$Maybe$Just('Aggregation type and associated functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Aggregation'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(
						_List_fromArray(
							[
								_List_fromArray(
								['a']),
								_List_fromArray(
								['key'])
							])))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Aggregator'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					A2(
						$author$project$Morphir$IR$Type$TypeAliasSpecification,
						_List_fromArray(
							[
								_List_fromArray(
								['a']),
								_List_fromArray(
								['key'])
							]),
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									A3(
									$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
									_Utils_Tuple0,
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('key'))
								]),
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)))))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'count',
				_List_Nil,
				A3(
					$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'),
					$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'sumOf',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getValue',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'),
					$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'averageOf',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getValue',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'),
					$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'minimumOf',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getValue',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'),
					$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'maximumOf',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getValue',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'),
					$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'weightedAverageOf',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getWeight',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'getValue',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'),
					$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'byKey',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'key',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('key'))),
						_Utils_Tuple2(
						'agg',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0)))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'),
					$author$project$Morphir$IR$SDK$Common$tVar('key'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'withFilter',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'filter',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'agg',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'),
					$author$project$Morphir$IR$SDK$Common$tVar('key'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'aggregateMap',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'agg1',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key1'))),
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'aggregateMap2',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'agg1',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key1'))),
						_Utils_Tuple2(
						'agg2',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key2'))),
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'aggregateMap3',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'agg1',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key1'))),
						_Utils_Tuple2(
						'agg2',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key2'))),
						_Utils_Tuple2(
						'agg3',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key3'))),
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'aggregateMap4',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'agg1',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key1'))),
						_Utils_Tuple2(
						'agg2',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key2'))),
						_Utils_Tuple2(
						'agg3',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key3'))),
						_Utils_Tuple2(
						'agg4',
						A3(
							$author$project$Morphir$IR$SDK$Aggregate$aggregationType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('key4'))),
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'groupBy',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('key'))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('key'),
					A2(
						$author$project$Morphir$IR$SDK$List$listType,
						_Utils_Tuple0,
						$author$project$Morphir$IR$SDK$Common$tVar('a')))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'aggregate',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('key'),
									A3(
									$author$project$Morphir$IR$SDK$Aggregate$aggregatorType,
									_Utils_Tuple0,
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0))
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('key'),
							A2(
								$author$project$Morphir$IR$SDK$List$listType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('a'))))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b')))
			]))
};
var $author$project$Morphir$IR$SDK$Basics$intType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'Int'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Basics$neverType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'Never'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Basics$orderType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Basics$moduleName, 'Order'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Basics$moduleSpec = {
	doc: $elm$core$Maybe$Just('Types and functions representing basic mathematical concepts and operations'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Int'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents an integer value.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Float'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a floating-point number.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Order'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Represents the relative ordering of two things. The relations are less than, equal to, and greater than.',
					A2(
						$author$project$Morphir$IR$Type$CustomTypeSpecification,
						_List_Nil,
						$elm$core$Dict$fromList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('LT'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('EQ'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('GT'),
									_List_Nil)
								]))))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Bool'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a boolean value.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Never'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'A value that can never happen!',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil)))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'add',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('number')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('number'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('number')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'subtract',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('number')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('number'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('number')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'multiply',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('number')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('number'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('number')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'divide',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'integerDivide',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'power',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('number')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('number'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('number')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toFloat',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'round',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'floor',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'ceiling',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'truncate',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'modBy',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'remainderBy',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'negate',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('number'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('number')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'abs',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('number'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('number')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'clamp',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('number')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('number')),
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Common$tVar('number'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('number')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isNaN',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isInfinite',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'sqrt',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'logBase',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'e',
				_List_Nil,
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'pi',
				_List_Nil,
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'cos',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'sin',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'tan',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'acos',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'asin',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'atan',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'atan2',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'degrees',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'radians',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'turns',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toPolar',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						A2(
							$author$project$Morphir$IR$Type$Tuple,
							_Utils_Tuple0,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)
								])))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)
						]))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromPolar',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						A2(
							$author$project$Morphir$IR$Type$Tuple,
							_Utils_Tuple0,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)
								])))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0),
							$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)
						]))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'equal',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('eq')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('eq'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'notEqual',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('eq')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('eq'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'lessThan',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'greaterThan',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'lessThanOrEqual',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'greaterThanOrEqual',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'max',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'min',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'compare',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable'))
					]),
				$author$project$Morphir$IR$SDK$Basics$orderType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'not',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'and',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'or',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'xor',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'append',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('appendable')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('appendable'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('appendable')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'identity',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('a')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'always',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('b'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('a')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'composeLeft',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'g',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('c'))),
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Common$tFun,
					_List_fromArray(
						[
							$author$project$Morphir$IR$SDK$Common$tVar('a')
						]),
					$author$project$Morphir$IR$SDK$Common$tVar('c'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'composeRight',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'g',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('c')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Common$tFun,
					_List_fromArray(
						[
							$author$project$Morphir$IR$SDK$Common$tVar('a')
						]),
					$author$project$Morphir$IR$SDK$Common$tVar('c'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'never',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$neverType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('a'))
			]))
};
var $author$project$Morphir$IR$SDK$Char$moduleName = $author$project$Morphir$IR$Path$fromString('Char');
var $author$project$Morphir$IR$SDK$Char$charType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Char$moduleName, 'Char'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Char$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the Char type representing a single character, and it\'s associated functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Char'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a single character.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil)))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isUpper',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isLower',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isAlpha',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isAlphaNum',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isDigit',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isOctDigit',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isHexDigit',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toUpper',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toLower',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toLocaleUpper',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toLocaleLower',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toCode',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromCode',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'c',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
			]))
};
var $author$project$Morphir$IR$SDK$Decimal$moduleName = $author$project$Morphir$IR$Path$fromString('Decimal');
var $author$project$Morphir$IR$SDK$Decimal$decimalType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Decimal$moduleName, 'Decimal'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Maybe$maybeType = F2(
	function (attributes, itemType) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Maybe$moduleName, 'Maybe'),
			_List_fromArray(
				[itemType]));
	});
var $author$project$Morphir$IR$SDK$String$moduleName = $author$project$Morphir$IR$Path$fromString('String');
var $author$project$Morphir$IR$SDK$String$stringType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$String$moduleName, 'String'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Decimal$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the Decimal type representing a real number with some decimal precision, and it\'s associated functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Decimal'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a Decimal.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil)))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromInt',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromFloat',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromString',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'str',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'hundred',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'thousand',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'million',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'tenth',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'hundredth',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'thousandth',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'millionth',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'bps',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toString',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'decimalValue',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toFloat',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'd',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'add',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'sub',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'negate',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'mul',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'div',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'divWithDefault',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'default',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'truncate',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'd',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'round',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'd',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'gt',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'gte',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'eq',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'neq',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'lt',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'lte',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'compare',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$orderType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'abs',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'shiftDecimalLeft',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'shiftDecimalRight',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'zero',
				_List_Nil,
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'one',
				_List_Nil,
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'minusOne',
				_List_Nil,
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))
			]))
};
var $author$project$Morphir$IR$SDK$Dict$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains Dict (representing a collection of key-value pairs, where the key is a comparable value), and associated functions. '),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Dict'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a dictionary of key-value pairs.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(
						_List_fromArray(
							[
								_List_fromArray(
								['k', 'v'])
							]))))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'empty',
				_List_Nil,
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('k'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'singleton',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'key',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Common$tVar('v'))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'insert',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'key',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Common$tVar('v')),
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'update',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'key',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									A2(
									$author$project$Morphir$IR$SDK$Maybe$maybeType,
									_Utils_Tuple0,
									$author$project$Morphir$IR$SDK$Common$tVar('v'))
								]),
							A2(
								$author$project$Morphir$IR$SDK$Maybe$maybeType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('v')))),
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'remove',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'key',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isEmpty',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'member',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'key',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'get',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'key',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'size',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'keys',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('k'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('k'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'values',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('k'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toList',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('k'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					A2(
						$author$project$Morphir$IR$Type$Tuple,
						_Utils_Tuple0,
						_List_fromArray(
							[
								$author$project$Morphir$IR$SDK$Common$tVar('k'),
								$author$project$Morphir$IR$SDK$Common$tVar('v')
							])))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromList',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							A2(
								$author$project$Morphir$IR$Type$Tuple,
								_Utils_Tuple0,
								_List_fromArray(
									[
										$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
										$author$project$Morphir$IR$SDK$Common$tVar('v')
									]))))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('k'),
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('k'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('k'),
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'foldl',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('k'),
									$author$project$Morphir$IR$SDK$Common$tVar('v'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'z',
						$author$project$Morphir$IR$SDK$Common$tVar('b')),
						_Utils_Tuple2(
						'list',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('k'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('b')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'foldr',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('k'),
									$author$project$Morphir$IR$SDK$Common$tVar('v'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'z',
						$author$project$Morphir$IR$SDK$Common$tVar('b')),
						_Utils_Tuple2(
						'list',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('k'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('b')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'filter',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
									$author$project$Morphir$IR$SDK$Common$tVar('v')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'partition',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
									$author$project$Morphir$IR$SDK$Common$tVar('v')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'dict',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')),
							A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v'))
						]))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'union',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'dict1',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v'))),
						_Utils_Tuple2(
						'dict2',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'intersect',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'dict1',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v'))),
						_Utils_Tuple2(
						'dict2',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'diff',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'dict1',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v'))),
						_Utils_Tuple2(
						'dict2',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('v')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Dict$dictType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
					$author$project$Morphir$IR$SDK$Common$tVar('v'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'merge',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'leftOnly',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('result')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('result'))),
						_Utils_Tuple2(
						'both',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('result')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('result'))),
						_Utils_Tuple2(
						'rightOnly',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('result')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('result'))),
						_Utils_Tuple2(
						'dictLeft',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'dictRight',
						A3(
							$author$project$Morphir$IR$SDK$Dict$dictType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'input',
						$author$project$Morphir$IR$SDK$Common$tVar('result'))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('result'))
			]))
};
var $author$project$Morphir$IR$SDK$Int$moduleName = $author$project$Morphir$IR$Path$fromString('Int');
var $author$project$Morphir$IR$SDK$Int$int16Type = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Int$moduleName, 'Int16'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Int$int32Type = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Int$moduleName, 'Int32'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Int$int64Type = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Int$moduleName, 'Int64'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Int$int8Type = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Int$moduleName, 'Int8'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Int$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains types that represent 8, 16, 32, or 64 bit integers, and functions tha convert between these and the general Int type.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Int8'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a 8-bit integer.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Int16'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a 16-bit integer.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Int32'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a 32-bit integer.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Int64'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a 64-bit integer.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil)))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromInt8',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Int$int8Type(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toInt8',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Int$int8Type(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromInt16',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Int$int16Type(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toInt16',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Int$int16Type(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromInt32',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Int$int32Type(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toInt32',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Int$int32Type(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromInt64',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Int$int64Type(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toInt64',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Int$int64Type(_Utils_Tuple0)))
			]))
};
var $author$project$Morphir$IR$SDK$Key$key10Type = function (attributes) {
	return function (itemType1) {
		return function (itemType2) {
			return function (itemType3) {
				return function (itemType4) {
					return function (itemType5) {
						return function (itemType6) {
							return function (itemType7) {
								return function (itemType8) {
									return function (itemType9) {
										return function (itemType10) {
											return A3(
												$author$project$Morphir$IR$Type$Reference,
												attributes,
												A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key10'),
												_List_fromArray(
													[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8, itemType9, itemType10]));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Morphir$IR$SDK$Key$key11Type = function (attributes) {
	return function (itemType1) {
		return function (itemType2) {
			return function (itemType3) {
				return function (itemType4) {
					return function (itemType5) {
						return function (itemType6) {
							return function (itemType7) {
								return function (itemType8) {
									return function (itemType9) {
										return function (itemType10) {
											return function (itemType11) {
												return A3(
													$author$project$Morphir$IR$Type$Reference,
													attributes,
													A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key11'),
													_List_fromArray(
														[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8, itemType9, itemType10, itemType11]));
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Morphir$IR$SDK$Key$key12Type = function (attributes) {
	return function (itemType1) {
		return function (itemType2) {
			return function (itemType3) {
				return function (itemType4) {
					return function (itemType5) {
						return function (itemType6) {
							return function (itemType7) {
								return function (itemType8) {
									return function (itemType9) {
										return function (itemType10) {
											return function (itemType11) {
												return function (itemType12) {
													return A3(
														$author$project$Morphir$IR$Type$Reference,
														attributes,
														A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key12'),
														_List_fromArray(
															[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8, itemType9, itemType10, itemType11, itemType12]));
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Morphir$IR$SDK$Key$key13Type = function (attributes) {
	return function (itemType1) {
		return function (itemType2) {
			return function (itemType3) {
				return function (itemType4) {
					return function (itemType5) {
						return function (itemType6) {
							return function (itemType7) {
								return function (itemType8) {
									return function (itemType9) {
										return function (itemType10) {
											return function (itemType11) {
												return function (itemType12) {
													return function (itemType13) {
														return A3(
															$author$project$Morphir$IR$Type$Reference,
															attributes,
															A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key13'),
															_List_fromArray(
																[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8, itemType9, itemType10, itemType11, itemType12, itemType13]));
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Morphir$IR$SDK$Key$key14Type = function (attributes) {
	return function (itemType1) {
		return function (itemType2) {
			return function (itemType3) {
				return function (itemType4) {
					return function (itemType5) {
						return function (itemType6) {
							return function (itemType7) {
								return function (itemType8) {
									return function (itemType9) {
										return function (itemType10) {
											return function (itemType11) {
												return function (itemType12) {
													return function (itemType13) {
														return function (itemType14) {
															return A3(
																$author$project$Morphir$IR$Type$Reference,
																attributes,
																A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key14'),
																_List_fromArray(
																	[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8, itemType9, itemType10, itemType11, itemType12, itemType13, itemType14]));
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Morphir$IR$SDK$Key$key15Type = function (attributes) {
	return function (itemType1) {
		return function (itemType2) {
			return function (itemType3) {
				return function (itemType4) {
					return function (itemType5) {
						return function (itemType6) {
							return function (itemType7) {
								return function (itemType8) {
									return function (itemType9) {
										return function (itemType10) {
											return function (itemType11) {
												return function (itemType12) {
													return function (itemType13) {
														return function (itemType14) {
															return function (itemType15) {
																return A3(
																	$author$project$Morphir$IR$Type$Reference,
																	attributes,
																	A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key15'),
																	_List_fromArray(
																		[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8, itemType9, itemType10, itemType11, itemType12, itemType13, itemType14, itemType15]));
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Morphir$IR$SDK$Key$key16Type = function (attributes) {
	return function (itemType1) {
		return function (itemType2) {
			return function (itemType3) {
				return function (itemType4) {
					return function (itemType5) {
						return function (itemType6) {
							return function (itemType7) {
								return function (itemType8) {
									return function (itemType9) {
										return function (itemType10) {
											return function (itemType11) {
												return function (itemType12) {
													return function (itemType13) {
														return function (itemType14) {
															return function (itemType15) {
																return function (itemType16) {
																	return A3(
																		$author$project$Morphir$IR$Type$Reference,
																		attributes,
																		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key16'),
																		_List_fromArray(
																			[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8, itemType9, itemType10, itemType11, itemType12, itemType13, itemType14, itemType15, itemType16]));
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Morphir$IR$SDK$Key$key2Type = F3(
	function (attributes, itemType1, itemType2) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key2'),
			_List_fromArray(
				[itemType1, itemType2]));
	});
var $author$project$Morphir$IR$SDK$Key$key3Type = F4(
	function (attributes, itemType1, itemType2, itemType3) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key3'),
			_List_fromArray(
				[itemType1, itemType2, itemType3]));
	});
var $author$project$Morphir$IR$SDK$Key$key4Type = F5(
	function (attributes, itemType1, itemType2, itemType3, itemType4) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key4'),
			_List_fromArray(
				[itemType1, itemType2, itemType3, itemType4]));
	});
var $author$project$Morphir$IR$SDK$Key$key5Type = F6(
	function (attributes, itemType1, itemType2, itemType3, itemType4, itemType5) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key5'),
			_List_fromArray(
				[itemType1, itemType2, itemType3, itemType4, itemType5]));
	});
var $author$project$Morphir$IR$SDK$Key$key6Type = F7(
	function (attributes, itemType1, itemType2, itemType3, itemType4, itemType5, itemType6) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key6'),
			_List_fromArray(
				[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6]));
	});
var $author$project$Morphir$IR$SDK$Key$key7Type = F8(
	function (attributes, itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key7'),
			_List_fromArray(
				[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7]));
	});
var $author$project$Morphir$IR$SDK$Key$key8Type = F9(
	function (attributes, itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key8'),
			_List_fromArray(
				[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8]));
	});
var $author$project$Morphir$IR$SDK$Key$key9Type = function (attributes) {
	return function (itemType1) {
		return function (itemType2) {
			return function (itemType3) {
				return function (itemType4) {
					return function (itemType5) {
						return function (itemType6) {
							return function (itemType7) {
								return function (itemType8) {
									return function (itemType9) {
										return A3(
											$author$project$Morphir$IR$Type$Reference,
											attributes,
											A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Key$moduleName, 'Key9'),
											_List_fromArray(
												[itemType1, itemType2, itemType3, itemType4, itemType5, itemType6, itemType7, itemType8, itemType9]));
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Morphir$IR$SDK$Key$moduleSpec = {
	doc: $elm$core$Maybe$Nothing,
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key0'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					A2(
						$author$project$Morphir$IR$Type$TypeAliasSpecification,
						_List_Nil,
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key2'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key3'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key4'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key5'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key6'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key7'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key8'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key9'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key10'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key11'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key12'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key13'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key14'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key15'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil))),
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Key16'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil)))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'noKey',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key0',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key0Type(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key2',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Key$key2Type,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b1'),
					$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key3',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				A4(
					$author$project$Morphir$IR$SDK$Key$key3Type,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b1'),
					$author$project$Morphir$IR$SDK$Common$tVar('b2'),
					$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key4',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				A5(
					$author$project$Morphir$IR$SDK$Key$key4Type,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b1'),
					$author$project$Morphir$IR$SDK$Common$tVar('b2'),
					$author$project$Morphir$IR$SDK$Common$tVar('b3'),
					$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key5',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				A6(
					$author$project$Morphir$IR$SDK$Key$key5Type,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b1'),
					$author$project$Morphir$IR$SDK$Common$tVar('b2'),
					$author$project$Morphir$IR$SDK$Common$tVar('b3'),
					$author$project$Morphir$IR$SDK$Common$tVar('b4'),
					$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key6',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				A7(
					$author$project$Morphir$IR$SDK$Key$key6Type,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b1'),
					$author$project$Morphir$IR$SDK$Common$tVar('b2'),
					$author$project$Morphir$IR$SDK$Common$tVar('b3'),
					$author$project$Morphir$IR$SDK$Common$tVar('b4'),
					$author$project$Morphir$IR$SDK$Common$tVar('b5'),
					$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key7',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				A8(
					$author$project$Morphir$IR$SDK$Key$key7Type,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b1'),
					$author$project$Morphir$IR$SDK$Common$tVar('b2'),
					$author$project$Morphir$IR$SDK$Common$tVar('b3'),
					$author$project$Morphir$IR$SDK$Common$tVar('b4'),
					$author$project$Morphir$IR$SDK$Common$tVar('b5'),
					$author$project$Morphir$IR$SDK$Common$tVar('b6'),
					$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key8',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'getKey8',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				A9(
					$author$project$Morphir$IR$SDK$Key$key8Type,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b1'),
					$author$project$Morphir$IR$SDK$Common$tVar('b2'),
					$author$project$Morphir$IR$SDK$Common$tVar('b3'),
					$author$project$Morphir$IR$SDK$Common$tVar('b4'),
					$author$project$Morphir$IR$SDK$Common$tVar('b5'),
					$author$project$Morphir$IR$SDK$Common$tVar('b6'),
					$author$project$Morphir$IR$SDK$Common$tVar('b7'),
					$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key9',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'getKey8',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
						_Utils_Tuple2(
						'getKey9',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b9'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key9Type(_Utils_Tuple0)(
					$author$project$Morphir$IR$SDK$Common$tVar('b1'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b2'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b3'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b4'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b5'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b6'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b7'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b8'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b9'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key10',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'getKey8',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
						_Utils_Tuple2(
						'getKey9',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b9'))),
						_Utils_Tuple2(
						'getKey10',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b10'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key10Type(_Utils_Tuple0)(
					$author$project$Morphir$IR$SDK$Common$tVar('b1'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b2'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b3'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b4'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b5'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b6'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b7'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b8'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b9'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b10'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key11',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'getKey8',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
						_Utils_Tuple2(
						'getKey9',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b9'))),
						_Utils_Tuple2(
						'getKey10',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b10'))),
						_Utils_Tuple2(
						'getKey11',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b11'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key11Type(_Utils_Tuple0)(
					$author$project$Morphir$IR$SDK$Common$tVar('b1'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b2'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b3'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b4'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b5'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b6'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b7'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b8'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b9'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b10'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b11'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key12',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'getKey8',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
						_Utils_Tuple2(
						'getKey9',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b9'))),
						_Utils_Tuple2(
						'getKey10',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b10'))),
						_Utils_Tuple2(
						'getKey11',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b11'))),
						_Utils_Tuple2(
						'getKey12',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b12'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key12Type(_Utils_Tuple0)(
					$author$project$Morphir$IR$SDK$Common$tVar('b1'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b2'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b3'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b4'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b5'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b6'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b7'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b8'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b9'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b10'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b11'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b12'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key13',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'getKey8',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
						_Utils_Tuple2(
						'getKey9',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b9'))),
						_Utils_Tuple2(
						'getKey10',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b10'))),
						_Utils_Tuple2(
						'getKey11',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b11'))),
						_Utils_Tuple2(
						'getKey12',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b12'))),
						_Utils_Tuple2(
						'getKey13',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b13'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key13Type(_Utils_Tuple0)(
					$author$project$Morphir$IR$SDK$Common$tVar('b1'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b2'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b3'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b4'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b5'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b6'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b7'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b8'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b9'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b10'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b11'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b12'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b13'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key14',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'getKey8',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
						_Utils_Tuple2(
						'getKey9',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b9'))),
						_Utils_Tuple2(
						'getKey10',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b10'))),
						_Utils_Tuple2(
						'getKey11',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b11'))),
						_Utils_Tuple2(
						'getKey12',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b12'))),
						_Utils_Tuple2(
						'getKey13',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b13'))),
						_Utils_Tuple2(
						'getKey14',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b14'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key14Type(_Utils_Tuple0)(
					$author$project$Morphir$IR$SDK$Common$tVar('b1'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b2'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b3'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b4'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b5'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b6'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b7'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b8'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b9'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b10'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b11'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b12'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b13'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b14'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key15',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'getKey8',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
						_Utils_Tuple2(
						'getKey9',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b9'))),
						_Utils_Tuple2(
						'getKey10',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b10'))),
						_Utils_Tuple2(
						'getKey11',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b11'))),
						_Utils_Tuple2(
						'getKey12',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b12'))),
						_Utils_Tuple2(
						'getKey13',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b13'))),
						_Utils_Tuple2(
						'getKey14',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b14'))),
						_Utils_Tuple2(
						'getKey15',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b15'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key15Type(_Utils_Tuple0)(
					$author$project$Morphir$IR$SDK$Common$tVar('b1'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b2'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b3'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b4'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b5'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b6'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b7'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b8'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b9'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b10'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b11'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b12'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b13'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b14'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b15'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'key16',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'getKey1',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b1'))),
						_Utils_Tuple2(
						'getKey2',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b2'))),
						_Utils_Tuple2(
						'getKey3',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b3'))),
						_Utils_Tuple2(
						'getKey4',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b4'))),
						_Utils_Tuple2(
						'getKey5',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b5'))),
						_Utils_Tuple2(
						'getKey6',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b6'))),
						_Utils_Tuple2(
						'getKey7',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b7'))),
						_Utils_Tuple2(
						'getKey8',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b8'))),
						_Utils_Tuple2(
						'getKey9',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b9'))),
						_Utils_Tuple2(
						'getKey10',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b10'))),
						_Utils_Tuple2(
						'getKey11',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b11'))),
						_Utils_Tuple2(
						'getKey12',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b12'))),
						_Utils_Tuple2(
						'getKey13',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b13'))),
						_Utils_Tuple2(
						'getKey14',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b14'))),
						_Utils_Tuple2(
						'getKey15',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b15'))),
						_Utils_Tuple2(
						'getKey16',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b16'))),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Key$key16Type(_Utils_Tuple0)(
					$author$project$Morphir$IR$SDK$Common$tVar('b1'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b2'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b3'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b4'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b5'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b6'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b7'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b8'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b9'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b10'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b11'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b12'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b13'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b14'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b15'))(
					$author$project$Morphir$IR$SDK$Common$tVar('b16')))
			]))
};
var $author$project$Morphir$IR$SDK$List$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the List type (representing a list of values), and it\'s associated functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('List'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a list of values.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(
						_List_fromArray(
							[
								_List_fromArray(
								['a'])
							]))))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'singleton',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'repeat',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'range',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'from',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'to',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'cons',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'head',
						$author$project$Morphir$IR$SDK$Common$tVar('a')),
						_Utils_Tuple2(
						'tail',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'indexedMap',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'foldl',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'z',
						$author$project$Morphir$IR$SDK$Common$tVar('b')),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('b')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'foldr',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'z',
						$author$project$Morphir$IR$SDK$Common$tVar('b')),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('b')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'filter',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'filterMap',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							A2(
								$author$project$Morphir$IR$SDK$Maybe$maybeType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('b')))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'length',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'reverse',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'member',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ref',
						$author$project$Morphir$IR$SDK$Common$tVar('a')),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'all',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'any',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'maximum',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'minimum',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'sum',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('number')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('number')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'product',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('number')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('number')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'append',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'l1',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'l2',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'concat',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'lists',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							A2(
								$author$project$Morphir$IR$SDK$List$listType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('a'))))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'concatMap',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							A2(
								$author$project$Morphir$IR$SDK$List$listType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('b')))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'intersperse',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('a')),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map2',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'list1',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'list2',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map3',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('c')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'list1',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'list2',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list3',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('c')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map4',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('c'),
									$author$project$Morphir$IR$SDK$Common$tVar('d')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'list1',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'list2',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list3',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('c'))),
						_Utils_Tuple2(
						'list4',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('d')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map5',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('c'),
									$author$project$Morphir$IR$SDK$Common$tVar('d'),
									$author$project$Morphir$IR$SDK$Common$tVar('e')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'list1',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'list2',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list3',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('c'))),
						_Utils_Tuple2(
						'list4',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('d'))),
						_Utils_Tuple2(
						'list5',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'sort',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'sortBy',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'sortWith',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$orderType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isEmpty',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'head',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'tail',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					A2(
						$author$project$Morphir$IR$SDK$List$listType,
						_Utils_Tuple0,
						$author$project$Morphir$IR$SDK$Common$tVar('a')))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'take',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'drop',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'partition',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')),
							A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))
						]))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'unzip',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							A2(
								$author$project$Morphir$IR$Type$Tuple,
								_Utils_Tuple0,
								_List_fromArray(
									[
										$author$project$Morphir$IR$SDK$Common$tVar('a'),
										$author$project$Morphir$IR$SDK$Common$tVar('b')
									]))))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')),
							A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b'))
						]))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'innerJoin',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'listB',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'listA',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					A2(
						$author$project$Morphir$IR$Type$Tuple,
						_Utils_Tuple0,
						_List_fromArray(
							[
								$author$project$Morphir$IR$SDK$Common$tVar('a'),
								$author$project$Morphir$IR$SDK$Common$tVar('b')
							])))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'leftJoin',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'listB',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'listA',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					A2(
						$author$project$Morphir$IR$Type$Tuple,
						_Utils_Tuple0,
						_List_fromArray(
							[
								$author$project$Morphir$IR$SDK$Common$tVar('a'),
								A2(
								$author$project$Morphir$IR$SDK$Maybe$maybeType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('b'))
							]))))
			]))
};
var $author$project$Morphir$IR$SDK$LocalDate$moduleName = $author$project$Morphir$IR$Path$fromString('LocalDate');
var $author$project$Morphir$IR$SDK$LocalDate$config = {
	baseType: $author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0),
	fromBaseType: A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$LocalDate$moduleName, 'fromISO'),
	toBaseType: A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$LocalDate$moduleName, 'toISOString')
};
var $author$project$Morphir$IR$SDK$LocalDate$localDateType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$LocalDate$moduleName, 'LocalDate'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$LocalDate$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the LocalDate type (representing a date concept), and it\'s associated functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('LocalDate'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a date concept.',
					A2($author$project$Morphir$IR$Type$DerivedTypeSpecification, _List_Nil, $author$project$Morphir$IR$SDK$LocalDate$config)))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toISOString',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'date',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromISO',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'iso',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromParts',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'year',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'month',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'day',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'diffInDays',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'date1',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'date2',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'diffInWeeks',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'date1',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'date2',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'diffInMonths',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'date1',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'date2',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'diffInYears',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'date1',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'date2',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'addDays',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'offset',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'startDate',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'addWeeks',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'offset',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'startDate',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'addMonths',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'offset',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'startDate',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'addYears',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'offset',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'startDate',
						$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$LocalDate$localDateType(_Utils_Tuple0))
			]))
};
var $author$project$Morphir$IR$SDK$LocalTime$moduleName = $author$project$Morphir$IR$Path$fromString('LocalTime');
var $author$project$Morphir$IR$SDK$LocalTime$localTimeType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$LocalTime$moduleName, 'LocalTime'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$LocalTime$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the LocalTime type (representing a time concept), and it\'s associated functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('LocalTime'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a time concept.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil)))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromISO',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'iso',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromMilliseconds',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'millis',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'diffInSeconds',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'timeA',
						$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'timeB',
						$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'diffInMinutes',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'timeA',
						$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'timeB',
						$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'diffInHours',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'timeA',
						$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'timeB',
						$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'addSeconds',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'seconds',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'time',
						$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'addMinutes',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'minutes',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'time',
						$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'addHours',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'hours',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'time',
						$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$LocalTime$localTimeType(_Utils_Tuple0))
			]))
};
var $author$project$Morphir$IR$SDK$Maybe$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the Maybe type (representing optional values), and related functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Maybe'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents an optional value.',
					A2(
						$author$project$Morphir$IR$Type$CustomTypeSpecification,
						_List_fromArray(
							[
								$author$project$Morphir$IR$Name$fromString('a')
							]),
						$elm$core$Dict$fromList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('Just'),
									_List_fromArray(
										[
											_Utils_Tuple2(
											_List_fromArray(
												['value']),
											A2(
												$author$project$Morphir$IR$Type$Variable,
												_Utils_Tuple0,
												$author$project$Morphir$IR$Name$fromString('a')))
										])),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('Nothing'),
									_List_Nil)
								])))))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'andThen',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							A2(
								$author$project$Morphir$IR$SDK$Maybe$maybeType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('b')))),
						_Utils_Tuple2(
						'maybe',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'maybe',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map2',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'maybe1',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'maybe2',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map3',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('c')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'maybe1',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'maybe2',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'maybe3',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('c')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map4',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('c'),
									$author$project$Morphir$IR$SDK$Common$tVar('d')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'maybe1',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'maybe2',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'maybe3',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('c'))),
						_Utils_Tuple2(
						'maybe4',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('d')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map5',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('c'),
									$author$project$Morphir$IR$SDK$Common$tVar('d'),
									$author$project$Morphir$IR$SDK$Common$tVar('e')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'maybe1',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'maybe2',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'maybe3',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('c'))),
						_Utils_Tuple2(
						'maybe4',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('d'))),
						_Utils_Tuple2(
						'maybe5',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'withDefault',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'default',
						$author$project$Morphir$IR$SDK$Common$tVar('a')),
						_Utils_Tuple2(
						'maybe',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('a'))
			]))
};
var $author$project$Morphir$IR$SDK$Month$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains a type representing the months of the year.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Month'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents months of the year.',
					A2(
						$author$project$Morphir$IR$Type$CustomTypeSpecification,
						_List_Nil,
						$elm$core$Dict$fromList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('January'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('February'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('March'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('April'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('May'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('June'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('July'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('August'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('September'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('October'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('November'),
									_List_Nil),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('December'),
									_List_Nil)
								])))))
			])),
	values: $elm$core$Dict$empty
};
var $author$project$Morphir$IR$SDK$Number$moduleName = $author$project$Morphir$IR$Path$fromString('Number');
var $author$project$Morphir$IR$SDK$Number$divisionByZeroType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Number$moduleName, 'DivisionByZero'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Number$numberType = function (attributes) {
	return A3(
		$author$project$Morphir$IR$Type$Reference,
		attributes,
		A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Number$moduleName, 'Number'),
		_List_Nil);
};
var $author$project$Morphir$IR$SDK$Result$resultType = F3(
	function (attributes, errorType, itemType) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Result$moduleName, 'result'),
			_List_fromArray(
				[errorType, itemType]));
	});
var $author$project$Morphir$IR$SDK$Number$moduleSpec = {
	doc: $elm$core$Maybe$Just('The Decimal number type and associated functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Decimal'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a Decimal.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil)))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromInt',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'equal',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'notEqual',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'lessThan',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'lessThanOrEqual',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'greaterThan',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'greaterThanOrEqual',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'add',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'subtract',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'multiply',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'divide',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Result$resultType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Number$divisionByZeroType(_Utils_Tuple0),
					$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'abs',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'negate',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'reciprocal',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'coerceToDecimal',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'default',
						$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'number',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toDecimal',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'number',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Decimal$decimalType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toFractionalString',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'num',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'simplify',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isSimplified',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'zero',
				_List_Nil,
				$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'one',
				_List_Nil,
				$author$project$Morphir$IR$SDK$Number$numberType(_Utils_Tuple0))
			]))
};
var $author$project$Morphir$IR$SDK$Regex$moduleSpec = {
	doc: $elm$core$Maybe$Just('Regular Expressions and related functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Regex'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents regular expressions',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil)))
			])),
	values: function () {
		var valueNames = _List_fromArray(
			['fromString', 'fromStringWith', 'never', 'contains', 'split', 'find', 'replace', 'splitAtMost', 'findAtMost', 'replaceAtMost']);
		var dummyValueSpec = A2(
			$author$project$Morphir$IR$Value$Specification,
			_List_Nil,
			$author$project$Morphir$IR$Type$Unit(_Utils_Tuple0));
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (valueName) {
					return _Utils_Tuple2(
						$author$project$Morphir$IR$Name$fromString(valueName),
						A2($author$project$Morphir$IR$Documented$Documented, '', dummyValueSpec));
				},
				valueNames));
	}()
};
var $author$project$Morphir$IR$SDK$Result$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the Result type (representing the result of an application that can fail), and related functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Result'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents the result of a computation that can either succeed or fail.',
					A2(
						$author$project$Morphir$IR$Type$CustomTypeSpecification,
						_List_fromArray(
							[
								$author$project$Morphir$IR$Name$fromString('e'),
								$author$project$Morphir$IR$Name$fromString('a')
							]),
						$elm$core$Dict$fromList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('Ok'),
									_List_fromArray(
										[
											_Utils_Tuple2(
											$author$project$Morphir$IR$Name$fromString('value'),
											A2(
												$author$project$Morphir$IR$Type$Variable,
												_Utils_Tuple0,
												$author$project$Morphir$IR$Name$fromString('a')))
										])),
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('Err'),
									_List_fromArray(
										[
											_Utils_Tuple2(
											$author$project$Morphir$IR$Name$fromString('error'),
											A2(
												$author$project$Morphir$IR$Type$Variable,
												_Utils_Tuple0,
												$author$project$Morphir$IR$Name$fromString('e')))
										]))
								])))))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'andThen',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							A3(
								$author$project$Morphir$IR$SDK$Result$resultType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('x'),
								$author$project$Morphir$IR$SDK$Common$tVar('b')))),
						_Utils_Tuple2(
						'result',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Result$resultType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('x'),
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'result',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Result$resultType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('x'),
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map2',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'result1',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('b')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Result$resultType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('x'),
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map3',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('c')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'result1',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('c')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Result$resultType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('x'),
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map4',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('c'),
									$author$project$Morphir$IR$SDK$Common$tVar('d')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'result1',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('c'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('d')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Result$resultType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('x'),
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map5',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b'),
									$author$project$Morphir$IR$SDK$Common$tVar('c'),
									$author$project$Morphir$IR$SDK$Common$tVar('d'),
									$author$project$Morphir$IR$SDK$Common$tVar('e')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('r'))),
						_Utils_Tuple2(
						'result1',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('c'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('d'))),
						_Utils_Tuple2(
						'result2',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('e')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Result$resultType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('x'),
					$author$project$Morphir$IR$SDK$Common$tVar('r'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'withDefault',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'default',
						$author$project$Morphir$IR$SDK$Common$tVar('a')),
						_Utils_Tuple2(
						'result',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('a')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toMaybe',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'result',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromMaybe',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'error',
						$author$project$Morphir$IR$SDK$Common$tVar('x')),
						_Utils_Tuple2(
						'maybe',
						A2(
							$author$project$Morphir$IR$SDK$Maybe$maybeType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Result$resultType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('x'),
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'mapError',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('x')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('y'))),
						_Utils_Tuple2(
						'result',
						A3(
							$author$project$Morphir$IR$SDK$Result$resultType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Result$resultType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('y'),
					$author$project$Morphir$IR$SDK$Common$tVar('a')))
			]))
};
var $author$project$Morphir$IR$SDK$ResultList$moduleName = $author$project$Morphir$IR$Path$fromString('ResultList');
var $author$project$Morphir$IR$SDK$ResultList$resultListType = F3(
	function (attributes, errorType, itemType) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$ResultList$moduleName, 'ResultList'),
			_List_fromArray(
				[errorType, itemType]));
	});
var $author$project$Morphir$IR$SDK$ResultList$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the ResultList type, and related functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('ResultList'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a list of results.',
					A2(
						$author$project$Morphir$IR$Type$TypeAliasSpecification,
						_List_fromArray(
							[
								_List_fromArray(
								['e']),
								_List_fromArray(
								['a'])
							]),
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							A3(
								$author$project$Morphir$IR$SDK$Result$resultType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('e'),
								$author$project$Morphir$IR$SDK$Common$tVar('a'))))))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromList',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$ResultList$resultListType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('e'),
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'filter',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'list',
						A3(
							$author$project$Morphir$IR$SDK$ResultList$resultListType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$ResultList$resultListType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('e'),
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'filterOrFail',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							A3(
								$author$project$Morphir$IR$SDK$Result$resultType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('e'),
								$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)))),
						_Utils_Tuple2(
						'list',
						A3(
							$author$project$Morphir$IR$SDK$ResultList$resultListType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$ResultList$resultListType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('e'),
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'list',
						A3(
							$author$project$Morphir$IR$SDK$ResultList$resultListType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$ResultList$resultListType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('e'),
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'mapOrFail',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							A3(
								$author$project$Morphir$IR$SDK$Result$resultType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('e'),
								$author$project$Morphir$IR$SDK$Common$tVar('b')))),
						_Utils_Tuple2(
						'list',
						A3(
							$author$project$Morphir$IR$SDK$ResultList$resultListType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A3(
					$author$project$Morphir$IR$SDK$ResultList$resultListType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('e'),
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'errors',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A3(
							$author$project$Morphir$IR$SDK$ResultList$resultListType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('e'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'successes',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A3(
							$author$project$Morphir$IR$SDK$ResultList$resultListType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'partition',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A3(
							$author$project$Morphir$IR$SDK$ResultList$resultListType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e'),
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('e')),
							A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))
						])))
			]))
};
var $author$project$Morphir$IR$SDK$Rule$moduleName = $author$project$Morphir$IR$Path$fromString('Rule');
var $author$project$Morphir$IR$SDK$Rule$ruleType = F3(
	function (attributes, itemType1, itemType2) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Rule$moduleName, 'Rule'),
			_List_fromArray(
				[itemType1, itemType2]));
	});
var $author$project$Morphir$IR$SDK$Rule$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the rule type, and related functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Rule'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a rule.',
					A2(
						$author$project$Morphir$IR$Type$TypeAliasSpecification,
						_List_fromArray(
							[
								_List_fromArray(
								['a']),
								_List_fromArray(
								['b'])
							]),
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							A2(
								$author$project$Morphir$IR$SDK$Maybe$maybeType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('b'))))))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'chain',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'rules',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							A3(
								$author$project$Morphir$IR$SDK$Rule$ruleType,
								_Utils_Tuple0,
								$author$project$Morphir$IR$SDK$Common$tVar('a'),
								$author$project$Morphir$IR$SDK$Common$tVar('b'))))
					]),
				A3(
					$author$project$Morphir$IR$SDK$Rule$ruleType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'),
					$author$project$Morphir$IR$SDK$Common$tVar('b'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'any',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'is',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ref',
						$author$project$Morphir$IR$SDK$Common$tVar('a')),
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'anyOf',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ref',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'noneOf',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ref',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a'))),
						_Utils_Tuple2(
						'value',
						$author$project$Morphir$IR$SDK$Common$tVar('a'))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))
			]))
};
var $author$project$Morphir$IR$SDK$Set$moduleName = $author$project$Morphir$IR$Path$fromString('Set');
var $author$project$Morphir$IR$SDK$Set$setType = F2(
	function (attributes, itemType) {
		return A3(
			$author$project$Morphir$IR$Type$Reference,
			attributes,
			A2($author$project$Morphir$IR$SDK$Common$toFQName, $author$project$Morphir$IR$SDK$Set$moduleName, 'set'),
			_List_fromArray(
				[itemType]));
	});
var $author$project$Morphir$IR$SDK$Set$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the Set type, and related functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('Set'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a set.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(
						_List_fromArray(
							[
								_List_fromArray(
								['a'])
							]))))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'empty',
				_List_Nil,
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'singleton',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable'))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'insert',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'remove',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isEmpty',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'member',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'size',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toList',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('a'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromList',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('comparable')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('comparable2'))),
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable2'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'foldl',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'z',
						$author$project$Morphir$IR$SDK$Common$tVar('b')),
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('b')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'foldr',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'z',
						$author$project$Morphir$IR$SDK$Common$tVar('b')),
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('a')))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('b')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'filter',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('comparable')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'partition',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('comparable')
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						'set',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')),
							A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'))
						]))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'union',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'set1',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
						_Utils_Tuple2(
						'set2',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'intersect',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'set1',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
						_Utils_Tuple2(
						'set2',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'diff',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'set1',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable'))),
						_Utils_Tuple2(
						'set2',
						A2(
							$author$project$Morphir$IR$SDK$Set$setType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Set$setType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Common$tVar('comparable')))
			]))
};
var $author$project$Morphir$IR$SDK$StatefulApp$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the StatefulApp type representing a stateful app.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('StatefulApp'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a stateful app.',
					A2(
						$author$project$Morphir$IR$Type$CustomTypeSpecification,
						_List_fromArray(
							[
								$author$project$Morphir$IR$Name$fromString('k'),
								$author$project$Morphir$IR$Name$fromString('c'),
								$author$project$Morphir$IR$Name$fromString('s'),
								$author$project$Morphir$IR$Name$fromString('e')
							]),
						$elm$core$Dict$fromList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('StatefulApp'),
									_List_fromArray(
										[
											_Utils_Tuple2(
											$author$project$Morphir$IR$Name$fromString('logic'),
											A3(
												$author$project$Morphir$IR$Type$Function,
												_Utils_Tuple0,
												A2(
													$author$project$Morphir$IR$SDK$Maybe$maybeType,
													_Utils_Tuple0,
													A2(
														$author$project$Morphir$IR$Type$Variable,
														_Utils_Tuple0,
														$author$project$Morphir$IR$Name$fromString('s'))),
												A3(
													$author$project$Morphir$IR$Type$Function,
													_Utils_Tuple0,
													A2(
														$author$project$Morphir$IR$Type$Variable,
														_Utils_Tuple0,
														$author$project$Morphir$IR$Name$fromString('c')),
													A2(
														$author$project$Morphir$IR$Type$Tuple,
														_Utils_Tuple0,
														_List_fromArray(
															[
																A2(
																$author$project$Morphir$IR$SDK$Maybe$maybeType,
																_Utils_Tuple0,
																A2(
																	$author$project$Morphir$IR$Type$Variable,
																	_Utils_Tuple0,
																	$author$project$Morphir$IR$Name$fromString('s'))),
																A2(
																$author$project$Morphir$IR$Type$Variable,
																_Utils_Tuple0,
																$author$project$Morphir$IR$Name$fromString('e'))
															])))))
										]))
								])))))
			])),
	values: $elm$core$Dict$empty
};
var $author$project$Morphir$IR$SDK$String$moduleSpec = {
	doc: $elm$core$Maybe$Just('Contains the Sring type, and related functions.'),
	types: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				$author$project$Morphir$IR$Name$fromString('String'),
				A2(
					$author$project$Morphir$IR$Documented$Documented,
					'Type that represents a string of characters.',
					$author$project$Morphir$IR$Type$OpaqueTypeSpecification(_List_Nil)))
			])),
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'isEmpty',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'length',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'reverse',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'repeat',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'replace',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'match',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'replacement',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'append',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's1',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's2',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'concat',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'split',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sep',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'join',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sep',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'list',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'words',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'lines',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'slice',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'start',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'end',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'left',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'right',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'dropLeft',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'dropRight',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'contains',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ref',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'startsWith',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ref',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'endsWith',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ref',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'indexes',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ref',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'indices',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ref',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toInt',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromInt',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toFloat',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromFloat',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Basics$floatType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromChar',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ch',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'cons',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ch',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'uncons',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$Maybe$maybeType,
					_Utils_Tuple0,
					A2(
						$author$project$Morphir$IR$Type$Tuple,
						_Utils_Tuple0,
						_List_fromArray(
							[
								$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0),
								$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)
							])))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toList',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				A2(
					$author$project$Morphir$IR$SDK$List$listType,
					_Utils_Tuple0,
					$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'fromList',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						A2(
							$author$project$Morphir$IR$SDK$List$listType,
							_Utils_Tuple0,
							$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toUpper',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'toLower',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'pad',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'ch',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'padLeft',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'ch',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'padRight',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'n',
						$author$project$Morphir$IR$SDK$Basics$intType(_Utils_Tuple0)),
						_Utils_Tuple2(
						'ch',
						$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'trim',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'trimLeft',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'trimRight',
				_List_fromArray(
					[
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'map',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)
								]),
							$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0))),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'filter',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'foldl',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'z',
						$author$project$Morphir$IR$SDK$Common$tVar('b')),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('b')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'foldr',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('b'))),
						_Utils_Tuple2(
						'z',
						$author$project$Morphir$IR$SDK$Common$tVar('b')),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('b')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'any',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0)),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'all',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Char$charType(_Utils_Tuple0)
								]),
							$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))),
						_Utils_Tuple2(
						's',
						$author$project$Morphir$IR$SDK$String$stringType(_Utils_Tuple0))
					]),
				$author$project$Morphir$IR$SDK$Basics$boolType(_Utils_Tuple0))
			]))
};
var $author$project$Morphir$IR$SDK$Tuple$moduleSpec = {
	doc: $elm$core$Maybe$Just('Functions related to Tuples'),
	types: $elm$core$Dict$empty,
	values: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'pair',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'a',
						$author$project$Morphir$IR$SDK$Common$tVar('b')),
						_Utils_Tuple2(
						'b',
						$author$project$Morphir$IR$SDK$Common$tVar('b'))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('b')
						]))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'first',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'tuple',
						A2(
							$author$project$Morphir$IR$Type$Tuple,
							_Utils_Tuple0,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								])))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('a')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'second',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'tuple',
						A2(
							$author$project$Morphir$IR$Type$Tuple,
							_Utils_Tuple0,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								])))
					]),
				$author$project$Morphir$IR$SDK$Common$tVar('b')),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'mapFirst',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('x'))),
						_Utils_Tuple2(
						'tuple',
						A2(
							$author$project$Morphir$IR$Type$Tuple,
							_Utils_Tuple0,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								])))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('b')
						]))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'mapSecond',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('y'))),
						_Utils_Tuple2(
						'tuple',
						A2(
							$author$project$Morphir$IR$Type$Tuple,
							_Utils_Tuple0,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								])))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							$author$project$Morphir$IR$SDK$Common$tVar('a'),
							$author$project$Morphir$IR$SDK$Common$tVar('y')
						]))),
				A3(
				$author$project$Morphir$IR$SDK$Common$vSpec,
				'mapBoth',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'f',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('x'))),
						_Utils_Tuple2(
						'g',
						A2(
							$author$project$Morphir$IR$SDK$Common$tFun,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								]),
							$author$project$Morphir$IR$SDK$Common$tVar('y'))),
						_Utils_Tuple2(
						'tuple',
						A2(
							$author$project$Morphir$IR$Type$Tuple,
							_Utils_Tuple0,
							_List_fromArray(
								[
									$author$project$Morphir$IR$SDK$Common$tVar('a'),
									$author$project$Morphir$IR$SDK$Common$tVar('b')
								])))
					]),
				A2(
					$author$project$Morphir$IR$Type$Tuple,
					_Utils_Tuple0,
					_List_fromArray(
						[
							$author$project$Morphir$IR$SDK$Common$tVar('x'),
							$author$project$Morphir$IR$SDK$Common$tVar('y')
						])))
			]))
};
var $author$project$Morphir$IR$SDK$packageSpec = {
	modules: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['basics'])
					]),
				$author$project$Morphir$IR$SDK$Basics$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['char'])
					]),
				$author$project$Morphir$IR$SDK$Char$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['dict'])
					]),
				$author$project$Morphir$IR$SDK$Dict$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['set'])
					]),
				$author$project$Morphir$IR$SDK$Set$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['string'])
					]),
				$author$project$Morphir$IR$SDK$String$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['local', 'date'])
					]),
				$author$project$Morphir$IR$SDK$LocalDate$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['local', 'time'])
					]),
				$author$project$Morphir$IR$SDK$LocalTime$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['maybe'])
					]),
				$author$project$Morphir$IR$SDK$Maybe$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['month'])
					]),
				$author$project$Morphir$IR$SDK$Month$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['result'])
					]),
				$author$project$Morphir$IR$SDK$Result$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['list'])
					]),
				$author$project$Morphir$IR$SDK$List$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['result', 'list'])
					]),
				$author$project$Morphir$IR$SDK$ResultList$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['tuple'])
					]),
				$author$project$Morphir$IR$SDK$Tuple$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['regex'])
					]),
				$author$project$Morphir$IR$SDK$Regex$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['stateful', 'app'])
					]),
				$author$project$Morphir$IR$SDK$StatefulApp$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['rule'])
					]),
				$author$project$Morphir$IR$SDK$Rule$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['decimal'])
					]),
				$author$project$Morphir$IR$SDK$Decimal$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['int'])
					]),
				$author$project$Morphir$IR$SDK$Int$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['number'])
					]),
				$author$project$Morphir$IR$SDK$Number$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['key'])
					]),
				$author$project$Morphir$IR$SDK$Key$moduleSpec),
				_Utils_Tuple2(
				_List_fromArray(
					[
						_List_fromArray(
						['aggregate'])
					]),
				$author$project$Morphir$IR$SDK$Aggregate$moduleSpec)
			]))
};
var $author$project$Morphir$Elm$Frontend$defaultDependencies = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2($author$project$Morphir$IR$SDK$packageName, $author$project$Morphir$IR$SDK$packageSpec)
		]));
var $author$project$Morphir$IR$Repo$empty = function (packageName) {
	return $author$project$Morphir$IR$Repo$Repo(
		{dependencies: $elm$core$Dict$empty, moduleDependencies: $author$project$Morphir$Dependency$DAG$empty, modules: $elm$core$Dict$empty, nativeFunctions: $elm$core$Dict$empty, packageName: packageName, typeDependencies: $author$project$Morphir$Dependency$DAG$empty, valueDependencies: $author$project$Morphir$Dependency$DAG$empty});
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $author$project$Morphir$File$FileMap$Codec$encodeFileMap = function (fileMap) {
	return A2(
		$elm$json$Json$Encode$list,
		function (_v0) {
			var _v1 = _v0.a;
			var dirPath = _v1.a;
			var fileName = _v1.b;
			var content = _v0.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, dirPath),
								$elm$json$Json$Encode$string(fileName)
							])),
						$elm$json$Json$Encode$string(content)
					]));
		},
		$elm$core$Dict$toList(fileMap));
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Morphir$Elm$CLI$encodeResult = F3(
	function (encodeErr, encodeValue, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$null,
						encodeValue(a)
					]));
		} else {
			var e = result.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						encodeErr(e),
						$elm$json$Json$Encode$null
					]));
		}
	});
var $author$project$Morphir$TestCoverage$Codec$encodeTestCoverageError = function (err) {
	switch (err.$) {
		case 'Field':
			var errMsg = err.a;
			var error = err.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								$elm$json$Json$Encode$string(errMsg),
								$author$project$Morphir$TestCoverage$Codec$encodeTestCoverageError(error)
							])),
						$elm$json$Json$Encode$null
					]));
		case 'Index':
			var idx = err.a;
			var error = err.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								$elm$json$Json$Encode$int(idx),
								$author$project$Morphir$TestCoverage$Codec$encodeTestCoverageError(error)
							])),
						$elm$json$Json$Encode$null
					]));
		case 'OneOf':
			var errors = err.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						A2($elm$core$List$map, $author$project$Morphir$TestCoverage$Codec$encodeTestCoverageError, errors)),
						$elm$json$Json$Encode$null
					]));
		default:
			var errMsg = err.a;
			var value = err.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								$elm$json$Json$Encode$string(errMsg),
								$elm$json$Json$Encode$string('Decode Failure')
							])),
						$elm$json$Json$Encode$null
					]));
	}
};
var $author$project$Morphir$IR$NodeId$nodePathToString = function (nodePath) {
	return $elm$core$List$isEmpty(nodePath) ? '' : ('#' + A2(
		$elm$core$String$join,
		':',
		A2(
			$elm$core$List$map,
			function (pathStep) {
				if (pathStep.$ === 'ChildByName') {
					var name = pathStep.a;
					return $author$project$Morphir$IR$Name$toCamelCase(name);
				} else {
					var index = pathStep.a;
					return $elm$core$String$fromInt(index);
				}
			},
			nodePath)));
};
var $author$project$Morphir$IR$NodeId$nodeIdToString = function (nodeId) {
	var mapToTypeOrValue = F5(
		function (packageName, moduleName, localName, suffix, nodePath) {
			var constructNodeIdString = A2(
				$elm$core$String$join,
				':',
				_List_fromArray(
					[
						A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', packageName),
						A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', moduleName),
						_Utils_ap(
						$author$project$Morphir$IR$Name$toCamelCase(localName),
						suffix)
					]));
			return $elm$core$List$isEmpty(nodePath) ? constructNodeIdString : _Utils_ap(
				constructNodeIdString,
				$author$project$Morphir$IR$NodeId$nodePathToString(nodePath));
		});
	switch (nodeId.$) {
		case 'TypeID':
			var _v1 = nodeId.a;
			var packageName = _v1.a;
			var moduleName = _v1.b;
			var localName = _v1.c;
			var nodePath = nodeId.b;
			return A5(mapToTypeOrValue, packageName, moduleName, localName, '.type', nodePath);
		case 'ValueID':
			var _v2 = nodeId.a;
			var packageName = _v2.a;
			var moduleName = _v2.b;
			var localName = _v2.c;
			var nodePath = nodeId.b;
			return A5(mapToTypeOrValue, packageName, moduleName, localName, '.value', nodePath);
		default:
			var _v3 = nodeId.a;
			var packageName = _v3.a;
			var moduleName = _v3.b;
			return A2(
				$elm$core$String$join,
				':',
				_List_fromArray(
					[
						A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', packageName),
						A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', moduleName)
					]));
	}
};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $pzp1997$assoc_list$AssocList$toList = function (_v0) {
	var alist = _v0.a;
	return alist;
};
var $author$project$Morphir$TestCoverage$Codec$encodeTestCoverageResult = function (testCoverageResult) {
	return $elm$json$Json$Encode$object(
		A2(
			$elm$core$List$map,
			function (_v0) {
				var nodeId = _v0.a;
				var coverage = _v0.b;
				return _Utils_Tuple2(
					$author$project$Morphir$IR$NodeId$nodeIdToString(nodeId),
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'numberOfBranches',
								$elm$json$Json$Encode$int(coverage.numberOfBranches)),
								_Utils_Tuple2(
								'numberOfCoveredBranches',
								$elm$json$Json$Encode$int(coverage.numberOfCoveredBranches))
							])));
			},
			$pzp1997$assoc_list$AssocList$toList(testCoverageResult)));
};
var $author$project$Morphir$Elm$CLI$buildFailed = _Platform_outgoingPort('buildFailed', $elm$core$Basics$identity);
var $author$project$Morphir$IR$KindOfName$Codec$encodeKindOfName = function (kindOfName) {
	switch (kindOfName.$) {
		case 'Type':
			return $elm$json$Json$Encode$string('Type');
		case 'Constructor':
			return $elm$json$Json$Encode$string('Constructor');
		default:
			return $elm$json$Json$Encode$string('Value');
	}
};
var $author$project$Morphir$Elm$IncrementalResolve$Codec$encodeQualifiedModuleName = function (_v0) {
	var packageName = _v0.a;
	var moduleName = _v0.b;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$core$Basics$identity,
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Encode$list,
				$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
				packageName),
				A2(
				$elm$json$Json$Encode$list,
				$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
				moduleName)
			]));
};
var $author$project$Morphir$Elm$IncrementalResolve$Codec$encodeError = function (error) {
	switch (error.$) {
		case 'NoMorphirPackageFoundForElmModule':
			var strings = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('NoMorphirPackageFoundForElmModule'),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, strings)
					]));
		case 'ModuleNotImported':
			var strings = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ModuleNotImported'),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, strings)
					]));
		case 'ModuleOrAliasNotImported':
			var str = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ModuleOrAliasNotImported'),
						$elm$json$Json$Encode$string(str)
					]));
		case 'ModuleDoesNotExposeLocalName':
			var packageName = error.a;
			var moduleName = error.b;
			var name = error.c;
			var kindOfName = error.d;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ModuleDoesNotExposeLocalName'),
						A2(
						$elm$json$Json$Encode$list,
						$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
						packageName),
						A2(
						$elm$json$Json$Encode$list,
						$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
						moduleName),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, name),
						$author$project$Morphir$IR$KindOfName$Codec$encodeKindOfName(kindOfName)
					]));
		case 'ModulesDoNotExposeLocalName':
			var modName = error.a;
			var importedModsQName = error.b;
			var localName = error.c;
			var kindOfName = error.d;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ModulesDoNotExposeLocalName'),
						$elm$json$Json$Encode$string(modName),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$Elm$IncrementalResolve$Codec$encodeQualifiedModuleName, importedModsQName),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, localName),
						$author$project$Morphir$IR$KindOfName$Codec$encodeKindOfName(kindOfName)
					]));
		case 'MultipleModulesExposeLocalName':
			var importedModsQName = error.a;
			var name = error.b;
			var kindOfName = error.c;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('MultipleModulesExposeLocalName'),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$Elm$IncrementalResolve$Codec$encodeQualifiedModuleName, importedModsQName),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, name),
						$author$project$Morphir$IR$KindOfName$Codec$encodeKindOfName(kindOfName)
					]));
		case 'LocalNameNotImported':
			var name = error.a;
			var kindOfName = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('LocalNameNotImported'),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, name),
						$author$project$Morphir$IR$KindOfName$Codec$encodeKindOfName(kindOfName)
					]));
		case 'ImportedModuleNotFound':
			var qualifiedModuleName = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ImportedModuleNotFound'),
						$author$project$Morphir$Elm$IncrementalResolve$Codec$encodeQualifiedModuleName(qualifiedModuleName)
					]));
		case 'ImportedLocalNameNotFound':
			var qualifiedModuleName = error.a;
			var name = error.b;
			var kindOfName = error.c;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ImportedLocalNameNotFound'),
						$author$project$Morphir$Elm$IncrementalResolve$Codec$encodeQualifiedModuleName(qualifiedModuleName),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, name),
						$author$project$Morphir$IR$KindOfName$Codec$encodeKindOfName(kindOfName)
					]));
		default:
			var qualifiedModuleName = error.a;
			var name = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$author$project$Morphir$Elm$IncrementalResolve$Codec$encodeQualifiedModuleName(qualifiedModuleName),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, name)
					]));
	}
};
var $author$project$Morphir$IR$Name$Codec$encodeName = function (name) {
	return A2(
		$elm$json$Json$Encode$list,
		$elm$json$Json$Encode$string,
		$author$project$Morphir$IR$Name$toList(name));
};
var $author$project$Morphir$IR$Path$Codec$encodePath = function (path) {
	return A2(
		$elm$json$Json$Encode$list,
		$author$project$Morphir$IR$Name$Codec$encodeName,
		$author$project$Morphir$IR$Path$toList(path));
};
var $stil4m$elm_syntax$Elm$Syntax$Range$encode = function (_v0) {
	var start = _v0.start;
	var end = _v0.end;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$json$Json$Encode$int,
		_List_fromArray(
			[start.row, start.column, end.row, end.column]));
};
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeSourceLocation = function (sourceLocation) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'location',
				$stil4m$elm_syntax$Elm$Syntax$Range$encode(sourceLocation.location)),
				_Utils_Tuple2(
				'moduleName',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, sourceLocation.moduleName))
			]));
};
var $author$project$Morphir$Type$Class$Codec$encodeClass = function (_class) {
	return A2(
		$elm$json$Json$Encode$list,
		$elm$core$Basics$identity,
		_List_fromArray(
			[
				$elm$json$Json$Encode$string('number')
			]));
};
var $author$project$Morphir$IR$FQName$Codec$encodeFQName = function (_v0) {
	var packagePath = _v0.a;
	var modulePath = _v0.b;
	var localName = _v0.c;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$core$Basics$identity,
		_List_fromArray(
			[
				$author$project$Morphir$IR$Path$Codec$encodePath(packagePath),
				$author$project$Morphir$IR$Path$Codec$encodePath(modulePath),
				$author$project$Morphir$IR$Name$Codec$encodeName(localName)
			]));
};
var $author$project$Morphir$Type$Infer$Codec$encodeLookupError = function (lookupError) {
	switch (lookupError.$) {
		case 'CouldNotFindConstructor':
			var fQName = lookupError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('could_not_find_constructor'),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(fQName)
					]));
		case 'CouldNotFindValue':
			var fQName = lookupError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('could_not_find_value'),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(fQName)
					]));
		case 'CouldNotFindAlias':
			var fQName = lookupError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('could_not_find_alias'),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(fQName)
					]));
		default:
			var fQName = lookupError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('expected_alias'),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(fQName)
					]));
	}
};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Morphir$Type$MetaType$Codec$encodeVariable = function (i) {
	return $elm$json$Json$Encode$int(i);
};
var $author$project$Morphir$Type$MetaType$Codec$encodeMetaType = function (metaType) {
	switch (metaType.$) {
		case 'MetaVar':
			var variable = metaType.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('meta_var'),
						$author$project$Morphir$Type$MetaType$Codec$encodeVariable(variable)
					]));
		case 'MetaRef':
			var fQName = metaType.b;
			var args = metaType.c;
			var maybeAliasedType = metaType.d;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('meta_ref'),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(fQName),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$Type$MetaType$Codec$encodeMetaType, args),
						function () {
						if (maybeAliasedType.$ === 'Just') {
							var aliasedType = maybeAliasedType.a;
							return $author$project$Morphir$Type$MetaType$Codec$encodeMetaType(aliasedType);
						} else {
							return $elm$json$Json$Encode$null;
						}
					}()
					]));
		case 'MetaTuple':
			var metaTypes = metaType.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('meta_tuple'),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$Type$MetaType$Codec$encodeMetaType, metaTypes)
					]));
		case 'MetaRecord':
			var recordVar = metaType.b;
			var isOpen = metaType.c;
			var dict = metaType.d;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('meta_record'),
						$author$project$Morphir$Type$MetaType$Codec$encodeVariable(recordVar),
						$elm$json$Json$Encode$bool(isOpen),
						A2(
						$elm$json$Json$Encode$list,
						function (_v2) {
							var fieldName = _v2.a;
							var fieldType = _v2.b;
							return A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$author$project$Morphir$IR$Name$Codec$encodeName(fieldName),
										$author$project$Morphir$Type$MetaType$Codec$encodeMetaType(fieldType)
									]));
						},
						$elm$core$Dict$toList(dict))
					]));
		case 'MetaFun':
			var metaType1 = metaType.b;
			var metaType2 = metaType.c;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('meta_fun'),
						$author$project$Morphir$Type$MetaType$Codec$encodeMetaType(metaType1),
						$author$project$Morphir$Type$MetaType$Codec$encodeMetaType(metaType2)
					]));
		default:
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('meta_unit')
					]));
	}
};
var $author$project$Morphir$Type$Solve$Codec$encodeUnificationErrorType = function (unificationErrorType) {
	switch (unificationErrorType.$) {
		case 'NoUnificationRule':
			return $elm$json$Json$Encode$string('NoUnificationRule');
		case 'TuplesOfDifferentSize':
			return $elm$json$Json$Encode$string('TuplesOfDifferentSize');
		case 'RefMismatch':
			return $elm$json$Json$Encode$string('RefMismatch');
		default:
			return $elm$json$Json$Encode$string('FieldMismatch');
	}
};
var $author$project$Morphir$Type$Solve$Codec$encodeUnificationError = function (unificationError) {
	switch (unificationError.$) {
		case 'UnificationErrors':
			var unificationErrors = unificationError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('UnificationErrors'),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$Type$Solve$Codec$encodeUnificationError, unificationErrors)
					]));
		case 'CouldNotUnify':
			var unificationErrorType = unificationError.a;
			var metaType1 = unificationError.b;
			var metaType2 = unificationError.c;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('CouldNotUnify'),
						$author$project$Morphir$Type$Solve$Codec$encodeUnificationErrorType(unificationErrorType),
						$author$project$Morphir$Type$MetaType$Codec$encodeMetaType(metaType1),
						$author$project$Morphir$Type$MetaType$Codec$encodeMetaType(metaType2)
					]));
		default:
			var fieldName = unificationError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('CouldNotFindField'),
						$author$project$Morphir$IR$Name$Codec$encodeName(fieldName)
					]));
	}
};
var $author$project$Morphir$Type$Infer$Codec$encodeTypeError = function (typeError) {
	switch (typeError.$) {
		case 'TypeErrors':
			var typeErrors = typeError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('type_errors'),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$Type$Infer$Codec$encodeTypeError, typeErrors)
					]));
		case 'ClassConstraintViolation':
			var metaType = typeError.a;
			var _class = typeError.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('class_constraint_violation'),
						$author$project$Morphir$Type$MetaType$Codec$encodeMetaType(metaType),
						$author$project$Morphir$Type$Class$Codec$encodeClass(_class)
					]));
		case 'LookupError':
			var lookupError = typeError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('lookup_error'),
						$author$project$Morphir$Type$Infer$Codec$encodeLookupError(lookupError)
					]));
		case 'UnknownError':
			var message = typeError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('unknown_error'),
						$elm$json$Json$Encode$string(message)
					]));
		case 'RecursiveConstraint':
			var metaType1 = typeError.a;
			var metaType2 = typeError.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('RecursiveConstraint'),
						$author$project$Morphir$Type$MetaType$Codec$encodeMetaType(metaType1),
						$author$project$Morphir$Type$MetaType$Codec$encodeMetaType(metaType2)
					]));
		default:
			var unificationError = typeError.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('UnifyError'),
						$author$project$Morphir$Type$Solve$Codec$encodeUnificationError(unificationError)
					]));
	}
};
var $author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeError = function (error) {
	switch (error.$) {
		case 'EmptyApply':
			var sourceLocation = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('EmptyApply'),
						$author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeSourceLocation(sourceLocation)
					]));
		case 'NotSupported':
			var sourceLocation = error.a;
			var string = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('EmptyApply'),
						$author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeSourceLocation(sourceLocation)
					]));
		case 'RecordPatternNotSupported':
			var sourceLocation = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('EmptyApply'),
						$author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeSourceLocation(sourceLocation)
					]));
		case 'ResolveError':
			var sourceLocation = error.a;
			var err = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ResolveError'),
						$author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeSourceLocation(sourceLocation),
						$author$project$Morphir$Elm$IncrementalResolve$Codec$encodeError(err)
					]));
		case 'SameNameAppearsMultipleTimesInPattern':
			var sourceLocation = error.a;
			var names = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('SameNameAppearsMultipleTimesInPattern'),
						$author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeSourceLocation(sourceLocation),
						A2(
						$elm$json$Json$Encode$list,
						$elm$json$Json$Encode$string,
						$elm$core$Set$toList(names))
					]));
		case 'VariableNameCollision':
			var sourceLocation = error.a;
			var varName = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('VariableNameCollision'),
						$author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeSourceLocation(sourceLocation),
						$elm$json$Json$Encode$string(varName)
					]));
		case 'UnresolvedVariable':
			var sourceLocation = error.a;
			var varName = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('UnresolvedVariable'),
						$author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeSourceLocation(sourceLocation),
						$elm$json$Json$Encode$string(varName)
					]));
		default:
			var moduleName = error.a;
			var typeError = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('TypeCheckError'),
						$author$project$Morphir$IR$Path$Codec$encodePath(moduleName),
						$author$project$Morphir$Type$Infer$Codec$encodeTypeError(typeError)
					]));
	}
};
var $author$project$Morphir$Dependency$DAG$Codec$encodeCycleDetected = F2(
	function (encodeNode, _v0) {
		var fromNode = _v0.a;
		var toNode = _v0.b;
		return A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$json$Json$Encode$string('CycleDetected'),
					encodeNode(fromNode),
					encodeNode(toNode)
				]));
	});
var $elm$json$Json$Encode$set = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$Set$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $author$project$Morphir$IR$Repo$Codec$encodeError = function (error) {
	switch (error.$) {
		case 'ModuleNotFound':
			var moduleName = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ModuleNotFound'),
						$author$project$Morphir$IR$Path$Codec$encodePath(moduleName)
					]));
		case 'ModuleHasDependents':
			var moduleName = error.a;
			var dependentModuleNames = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ModuleHasDependents'),
						$author$project$Morphir$IR$Path$Codec$encodePath(moduleName),
						A2($elm$json$Json$Encode$set, $author$project$Morphir$IR$Path$Codec$encodePath, dependentModuleNames)
					]));
		case 'ModuleAlreadyExist':
			var moduleName = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ModuleAlreadyExist'),
						$author$project$Morphir$IR$Path$Codec$encodePath(moduleName)
					]));
		case 'TypeAlreadyExist':
			var typeName = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('TypeAlreadyExist'),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(typeName)
					]));
		case 'DependencyAlreadyExists':
			var packageName = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('DependencyAlreadyExists'),
						$author$project$Morphir$IR$Path$Codec$encodePath(packageName)
					]));
		case 'ValueAlreadyExist':
			var valueName = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ValueAlreadyExist'),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, valueName)
					]));
		case 'TypeCycleDetected':
			var cycleDetected = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('TypeCycleDetected'),
						A2($author$project$Morphir$Dependency$DAG$Codec$encodeCycleDetected, $author$project$Morphir$IR$FQName$Codec$encodeFQName, cycleDetected)
					]));
		case 'ValueCycleDetected':
			var cycleDetected = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ValueCycleDetected'),
						A2($author$project$Morphir$Dependency$DAG$Codec$encodeCycleDetected, $author$project$Morphir$IR$FQName$Codec$encodeFQName, cycleDetected)
					]));
		case 'ModuleCycleDetected':
			var cycleDetected = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ModuleCycleDetected'),
						A2($author$project$Morphir$Dependency$DAG$Codec$encodeCycleDetected, $author$project$Morphir$IR$Path$Codec$encodePath, cycleDetected)
					]));
		case 'TypeCheckError':
			var moduleName = error.a;
			var localName = error.b;
			var typeError = error.c;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('TypeCheckError'),
						$author$project$Morphir$IR$Path$Codec$encodePath(moduleName),
						$author$project$Morphir$IR$Name$Codec$encodeName(localName),
						$author$project$Morphir$Type$Infer$Codec$encodeTypeError(typeError)
					]));
		case 'CannotInsertType':
			var moduleName = error.a;
			var typeName = error.b;
			var cause = error.c;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('CannotInsertType'),
						$author$project$Morphir$IR$Path$Codec$encodePath(moduleName),
						$author$project$Morphir$IR$Name$Codec$encodeName(typeName),
						$author$project$Morphir$IR$Repo$Codec$encodeError(cause)
					]));
		case 'ValueNotFound':
			var fQName = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ValueNotFound'),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(fQName)
					]));
		default:
			var description = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('IllegalTypeUpdate'),
						$elm$json$Json$Encode$string(description)
					]));
	}
};
var $author$project$Morphir$Elm$IncrementalFrontend$Codec$encodeError = function (error) {
	var encodeProblem = function (problem) {
		switch (problem.$) {
			case 'Expecting':
				var token = problem.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$json$Json$Encode$string,
					_List_fromArray(
						['Expecting', token]));
			case 'ExpectingInt':
				return $elm$json$Json$Encode$string('ExpectingInt');
			case 'ExpectingHex':
				return $elm$json$Json$Encode$string('ExpectingHex');
			case 'ExpectingOctal':
				return $elm$json$Json$Encode$string('ExpectingOctal');
			case 'ExpectingBinary':
				return $elm$json$Json$Encode$string('ExpectingBinary');
			case 'ExpectingFloat':
				return $elm$json$Json$Encode$string('ExpectingFloat');
			case 'ExpectingNumber':
				return $elm$json$Json$Encode$string('ExpectingNumber');
			case 'ExpectingVariable':
				return $elm$json$Json$Encode$string('ExpectingVariable');
			case 'ExpectingSymbol':
				var symbol = problem.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$json$Json$Encode$string,
					_List_fromArray(
						['Expecting symbol', symbol]));
			case 'ExpectingKeyword':
				var keyword = problem.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$json$Json$Encode$string,
					_List_fromArray(
						['ExpectingKeyword', keyword]));
			case 'ExpectingEnd':
				return $elm$json$Json$Encode$string('ExpectingEnd');
			case 'UnexpectedChar':
				return $elm$json$Json$Encode$string('UnexpectedChar');
			case 'Problem':
				var message = problem.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$json$Json$Encode$string,
					_List_fromArray(
						['Problem', message]));
			default:
				return $elm$json$Json$Encode$string('BadRepeat');
		}
	};
	var encodeIRModuleName = function (moduleName) {
		return A2(
			$elm$json$Json$Encode$list,
			$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
			moduleName);
	};
	var encodeElmModuleName = function (moduleName) {
		return A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, moduleName);
	};
	var encodeDeadEnd = function (deadEnd) {
		return function (_v1) {
			var row = _v1.row;
			var col = _v1.col;
			var problem = _v1.problem;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'row',
						$elm$json$Json$Encode$int(row)),
						_Utils_Tuple2(
						'col',
						$elm$json$Json$Encode$int(col)),
						_Utils_Tuple2(
						'problem',
						encodeProblem(problem))
					]));
		}(deadEnd);
	};
	switch (error.$) {
		case 'ModuleCycleDetected':
			var fromModuleName = error.a;
			var toModuleName = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ModuleCycleDetected'),
						encodeIRModuleName(fromModuleName),
						encodeIRModuleName(toModuleName)
					]));
		case 'InvalidModuleName':
			var moduleName = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('InvalidModuleName'),
						encodeElmModuleName(moduleName)
					]));
		case 'ParseError':
			var path = error.a;
			var deadEnds = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ParserError'),
						$elm$json$Json$Encode$string(path),
						A2($elm$json$Json$Encode$list, encodeDeadEnd, deadEnds)
					]));
		case 'RepoError':
			var message = error.a;
			var errors = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('RepoError'),
						$elm$json$Json$Encode$string(message),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$IR$Repo$Codec$encodeError, errors)
					]));
		case 'TypeCycleDetected':
			var from = error.a;
			var to = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('TypeCycleDetected'),
						$author$project$Morphir$IR$Name$Codec$encodeName(from),
						$author$project$Morphir$IR$Name$Codec$encodeName(to)
					]));
		case 'ResolveError':
			var moduleName = error.a;
			var e = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ResolveError'),
						$author$project$Morphir$IR$Path$Codec$encodePath(moduleName),
						$author$project$Morphir$Elm$IncrementalResolve$Codec$encodeError(e)
					]));
		case 'ValueCycleDetected':
			var fromFQName = error.a;
			var toFQName = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('ValueCycleDetected'),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(fromFQName),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(toFQName)
					]));
		case 'MappingError':
			var errors = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('MappingError'),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$Elm$IncrementalFrontend$Mapper$Codec$encodeError, errors)
					]));
		case 'InvalidSourceFilePath':
			var path = error.a;
			var message = error.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('InvalidSourceFilePath'),
						$elm$json$Json$Encode$string(path),
						$elm$json$Json$Encode$string(message)
					]));
		default:
			var fQName = error.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('TypeNotFound'),
						$author$project$Morphir$IR$FQName$Codec$encodeFQName(fQName)
					]));
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$core$Process$sleep = _Process_sleep;
var $author$project$Morphir$Elm$CLI$failOrProceed = function (msgResult) {
	if (msgResult.$ === 'Ok') {
		var msg = msgResult.a;
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always(msg),
			$elm$core$Process$sleep(0));
	} else {
		var error = msgResult.a;
		return $author$project$Morphir$Elm$CLI$buildFailed(
			A2($elm$json$Json$Encode$list, $author$project$Morphir$Elm$IncrementalFrontend$Codec$encodeError, error));
	}
};
var $author$project$Morphir$IR$Repo$DependencyAlreadyExists = function (a) {
	return {$: 'DependencyAlreadyExists', a: a};
};
var $author$project$Morphir$IR$Repo$insertDependencySpecification = F3(
	function (packageName, packageSpec, _v0) {
		var repo = _v0.a;
		var _v1 = A2($elm$core$Dict$get, packageName, repo.dependencies);
		if (_v1.$ === 'Just') {
			return $elm$core$Result$Err(
				_List_fromArray(
					[
						$author$project$Morphir$IR$Repo$DependencyAlreadyExists(packageName)
					]));
		} else {
			return $elm$core$Result$Ok(
				$author$project$Morphir$IR$Repo$Repo(
					_Utils_update(
						repo,
						{
							dependencies: A3($elm$core$Dict$insert, packageName, packageSpec, repo.dependencies)
						})));
		}
	});
var $author$project$Morphir$IR$Module$collectTypeReferences = function (moduleDef) {
	var valueRefs = A3(
		$elm$core$List$foldl,
		$elm$core$Set$union,
		$elm$core$Set$empty,
		A2(
			$elm$core$List$concatMap,
			function (valueDef) {
				return A2(
					$elm$core$List$map,
					$author$project$Morphir$IR$Type$collectReferences,
					A2(
						$elm$core$List$cons,
						valueDef.value.value.outputType,
						A2(
							$elm$core$List$map,
							function (_v2) {
								var tpe = _v2.c;
								return tpe;
							},
							valueDef.value.value.inputTypes)));
			},
			$elm$core$Dict$values(moduleDef.values)));
	var typeRefs = A3(
		$elm$core$List$foldl,
		$elm$core$Set$union,
		$elm$core$Set$empty,
		A2(
			$elm$core$List$map,
			function (typeDef) {
				var _v0 = typeDef.value.value;
				if (_v0.$ === 'TypeAliasDefinition') {
					var tpe = _v0.b;
					return $author$project$Morphir$IR$Type$collectReferences(tpe);
				} else {
					var ctors = _v0.b;
					return A3(
						$elm$core$List$foldl,
						$elm$core$Set$union,
						$elm$core$Set$empty,
						A2(
							$elm$core$List$concatMap,
							function (ctorArgs) {
								return A2(
									$elm$core$List$map,
									function (_v1) {
										var tpe = _v1.b;
										return $author$project$Morphir$IR$Type$collectReferences(tpe);
									},
									ctorArgs);
							},
							$elm$core$Dict$values(ctors.value)));
				}
			},
			$elm$core$Dict$values(moduleDef.types)));
	return A2($elm$core$Set$union, typeRefs, valueRefs);
};
var $author$project$Morphir$IR$Module$collectValueReferences = function (moduleDef) {
	return A3(
		$elm$core$List$foldl,
		$elm$core$Set$union,
		$elm$core$Set$empty,
		A2(
			$elm$core$List$map,
			function (valueDef) {
				return $author$project$Morphir$IR$Value$collectReferences(valueDef.value.value.body);
			},
			$elm$core$Dict$values(moduleDef.values)));
};
var $author$project$Morphir$IR$Module$collectReferences = function (moduleDef) {
	return A2(
		$elm$core$Set$union,
		$author$project$Morphir$IR$Module$collectTypeReferences(moduleDef),
		$author$project$Morphir$IR$Module$collectValueReferences(moduleDef));
};
var $author$project$Morphir$IR$Module$dependsOnModules = function (moduleDef) {
	return A2(
		$elm$core$Set$map,
		function (_v0) {
			var packageName = _v0.a;
			var moduleName = _v0.b;
			return _Utils_Tuple2(packageName, moduleName);
		},
		$author$project$Morphir$IR$Module$collectReferences(moduleDef));
};
var $author$project$Morphir$IR$Package$modulesOrderedByDependency = F2(
	function (packageName, packageDef) {
		return A2(
			$elm$core$Result$map,
			function (moduleDependencies) {
				return A2(
					$elm$core$List$filterMap,
					function (moduleName) {
						return A2(
							$elm$core$Maybe$map,
							$elm$core$Tuple$pair(moduleName),
							A2($elm$core$Dict$get, moduleName, packageDef.modules));
					},
					$elm$core$List$concat(
						$author$project$Morphir$Dependency$DAG$backwardTopologicalOrdering(moduleDependencies)));
			},
			A3(
				$elm$core$List$foldl,
				F2(
					function (_v0, dagResultSoFar) {
						var moduleName = _v0.a;
						var accessControlledModuleDef = _v0.b;
						var dependsOnModules = A2(
							$elm$core$Set$map,
							$elm$core$Tuple$second,
							A2(
								$elm$core$Set$filter,
								function (_v1) {
									var dependsOnPackage = _v1.a;
									return _Utils_eq(dependsOnPackage, packageName);
								},
								$author$project$Morphir$IR$Module$dependsOnModules(accessControlledModuleDef.value)));
						return A2(
							$elm$core$Result$andThen,
							A2($author$project$Morphir$Dependency$DAG$insertNode, moduleName, dependsOnModules),
							dagResultSoFar);
					}),
				$elm$core$Result$Ok($author$project$Morphir$Dependency$DAG$empty),
				$elm$core$Dict$toList(packageDef.modules)));
	});
var $author$project$Morphir$IR$Repo$fromDistribution = function (distro) {
	var packageName = distro.a;
	var dependencies = distro.b;
	var packageDef = distro.c;
	var repoWithDependencies = A3(
		$elm$core$List$foldl,
		F2(
			function (_v2, repoResultSoFar) {
				var dependencyPackageName = _v2.a;
				var dependencyPackageSpec = _v2.b;
				return A2(
					$elm$core$Result$andThen,
					A2($author$project$Morphir$IR$Repo$insertDependencySpecification, dependencyPackageName, dependencyPackageSpec),
					repoResultSoFar);
			}),
		$elm$core$Result$Ok(
			$author$project$Morphir$IR$Repo$empty(packageName)),
		$elm$core$Dict$toList(dependencies));
	return A2(
		$elm$core$Result$andThen,
		A2(
			$elm$core$List$foldl,
			F2(
				function (_v1, repoResultSoFar) {
					var moduleName = _v1.a;
					var accessControlledModuleDef = _v1.b;
					return A2(
						$elm$core$Result$andThen,
						function (repoSoFar) {
							return A4($author$project$Morphir$IR$Repo$insertModule, moduleName, accessControlledModuleDef.value, accessControlledModuleDef.access, repoSoFar);
						},
						repoResultSoFar);
				}),
			repoWithDependencies),
		A2(
			$elm$core$Result$mapError,
			A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Repo$ModuleCycleDetected, $elm$core$List$singleton),
			A2($author$project$Morphir$IR$Package$modulesOrderedByDependency, packageName, packageDef)));
};
var $author$project$Morphir$Elm$CLI$generateResult = _Platform_outgoingPort('generateResult', $elm$core$Basics$identity);
var $author$project$Morphir$IR$NodeId$ValueID = F2(
	function (a, b) {
		return {$: 'ValueID', a: a, b: b};
	});
var $author$project$Morphir$Correctness$BranchCoverage$PatternCondition = function (a) {
	return {$: 'PatternCondition', a: a};
};
var $author$project$Morphir$Correctness$BranchCoverage$bothBranches = F2(
	function (leftBranches, rightBranches) {
		return A2(
			$elm$core$List$concatMap,
			function (leftBranch) {
				return A2(
					$elm$core$List$map,
					function (rightBranch) {
						return _Utils_ap(leftBranch, rightBranch);
					},
					rightBranches);
			},
			leftBranches);
	});
var $author$project$Morphir$Correctness$BranchCoverage$BoolCondition = function (a) {
	return {$: 'BoolCondition', a: a};
};
var $author$project$Morphir$Correctness$BranchCoverage$eitherBranches = function (allBranches) {
	return $elm$core$List$concat(allBranches);
};
var $author$project$Morphir$Correctness$BranchCoverage$conditionBranches = F3(
	function (expandCriteria, condition, expectedValue) {
		conditionBranches:
		while (true) {
			if (expandCriteria) {
				_v0$3:
				while (true) {
					if (condition.$ === 'Apply') {
						switch (condition.b.$) {
							case 'Reference':
								if ((((((((((((((((((((condition.b.b.a.b && condition.b.b.a.a.b) && (condition.b.b.a.a.a === 'morphir')) && (!condition.b.b.a.a.b.b)) && condition.b.b.a.b.b) && condition.b.b.a.b.a.b) && (condition.b.b.a.b.a.a === 's')) && condition.b.b.a.b.a.b.b) && (condition.b.b.a.b.a.b.a === 'd')) && condition.b.b.a.b.a.b.b.b) && (condition.b.b.a.b.a.b.b.a === 'k')) && (!condition.b.b.a.b.a.b.b.b.b)) && (!condition.b.b.a.b.b.b)) && condition.b.b.b.b) && condition.b.b.b.a.b) && (condition.b.b.b.a.a === 'basics')) && (!condition.b.b.b.a.b.b)) && (!condition.b.b.b.b.b)) && condition.b.b.c.b) && (condition.b.b.c.a === 'not')) && (!condition.b.b.c.b.b)) {
									var _v1 = condition.b;
									var _v2 = _v1.b;
									var _v3 = _v2.a;
									var _v4 = _v3.a;
									var _v5 = _v3.b;
									var _v6 = _v5.a;
									var _v7 = _v6.b;
									var _v8 = _v7.b;
									var _v9 = _v2.b;
									var _v10 = _v9.a;
									var _v11 = _v2.c;
									var nestedCondition = condition.c;
									var $temp$expandCriteria = expandCriteria,
										$temp$condition = nestedCondition,
										$temp$expectedValue = !expectedValue;
									expandCriteria = $temp$expandCriteria;
									condition = $temp$condition;
									expectedValue = $temp$expectedValue;
									continue conditionBranches;
								} else {
									break _v0$3;
								}
							case 'Apply':
								if (((((((((((((((((((((condition.b.b.$ === 'Reference') && condition.b.b.b.a.b) && condition.b.b.b.a.a.b) && (condition.b.b.b.a.a.a === 'morphir')) && (!condition.b.b.b.a.a.b.b)) && condition.b.b.b.a.b.b) && condition.b.b.b.a.b.a.b) && (condition.b.b.b.a.b.a.a === 's')) && condition.b.b.b.a.b.a.b.b) && (condition.b.b.b.a.b.a.b.a === 'd')) && condition.b.b.b.a.b.a.b.b.b) && (condition.b.b.b.a.b.a.b.b.a === 'k')) && (!condition.b.b.b.a.b.a.b.b.b.b)) && (!condition.b.b.b.a.b.b.b)) && condition.b.b.b.b.b) && condition.b.b.b.b.a.b) && (condition.b.b.b.b.a.a === 'basics')) && (!condition.b.b.b.b.a.b.b)) && (!condition.b.b.b.b.b.b)) && condition.b.b.b.c.b) && (!condition.b.b.b.c.b.b)) {
									switch (condition.b.b.b.c.a) {
										case 'and':
											var _v12 = condition.b;
											var _v13 = _v12.b;
											var _v14 = _v13.b;
											var _v15 = _v14.a;
											var _v16 = _v15.a;
											var _v17 = _v15.b;
											var _v18 = _v17.a;
											var _v19 = _v18.b;
											var _v20 = _v19.b;
											var _v21 = _v14.b;
											var _v22 = _v21.a;
											var _v23 = _v14.c;
											var leftCondition = _v12.c;
											var rightCondition = condition.c;
											return expectedValue ? A2(
												$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
												A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, leftCondition, true),
												A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, rightCondition, true)) : $author$project$Morphir$Correctness$BranchCoverage$eitherBranches(
												_List_fromArray(
													[
														A2(
														$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, leftCondition, true),
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, rightCondition, false)),
														A2(
														$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, leftCondition, false),
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, rightCondition, true)),
														A2(
														$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, leftCondition, false),
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, rightCondition, false))
													]));
										case 'or':
											var _v24 = condition.b;
											var _v25 = _v24.b;
											var _v26 = _v25.b;
											var _v27 = _v26.a;
											var _v28 = _v27.a;
											var _v29 = _v27.b;
											var _v30 = _v29.a;
											var _v31 = _v30.b;
											var _v32 = _v31.b;
											var _v33 = _v26.b;
											var _v34 = _v33.a;
											var _v35 = _v26.c;
											var leftCondition = _v24.c;
											var rightCondition = condition.c;
											return expectedValue ? $author$project$Morphir$Correctness$BranchCoverage$eitherBranches(
												_List_fromArray(
													[
														A2(
														$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, leftCondition, true),
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, rightCondition, false)),
														A2(
														$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, leftCondition, false),
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, rightCondition, true)),
														A2(
														$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, leftCondition, true),
														A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, rightCondition, true))
													])) : A2(
												$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
												A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, leftCondition, false),
												A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, rightCondition, false));
										default:
											break _v0$3;
									}
								} else {
									break _v0$3;
								}
							default:
								break _v0$3;
						}
					} else {
						break _v0$3;
					}
				}
				return _List_fromArray(
					[
						_List_fromArray(
						[
							$author$project$Morphir$Correctness$BranchCoverage$BoolCondition(
							{criterion: condition, expectedValue: expectedValue})
						])
					]);
			} else {
				return _List_fromArray(
					[
						_List_fromArray(
						[
							$author$project$Morphir$Correctness$BranchCoverage$BoolCondition(
							{criterion: condition, expectedValue: expectedValue})
						])
					]);
			}
		}
	});
var $author$project$Morphir$IR$Value$reduceValueBottomUp = F2(
	function (mapNode, currentValue) {
		switch (currentValue.$) {
			case 'Tuple':
				var elements = currentValue.b;
				return A2(
					mapNode,
					currentValue,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Value$reduceValueBottomUp(mapNode),
						elements));
			case 'List':
				var items = currentValue.b;
				return A2(
					mapNode,
					currentValue,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Value$reduceValueBottomUp(mapNode),
						items));
			case 'Record':
				var fields = currentValue.b;
				return A2(
					mapNode,
					currentValue,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$IR$Value$reduceValueBottomUp(mapNode),
						$elm$core$Dict$values(fields)));
			case 'Field':
				var subjectValue = currentValue.b;
				return A2(
					mapNode,
					currentValue,
					_List_fromArray(
						[
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, subjectValue)
						]));
			case 'Apply':
				var _function = currentValue.b;
				var argument = currentValue.c;
				return A2(
					mapNode,
					currentValue,
					_List_fromArray(
						[
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, _function),
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, argument)
						]));
			case 'Lambda':
				var body = currentValue.c;
				return A2(
					mapNode,
					currentValue,
					_List_fromArray(
						[
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, body)
						]));
			case 'LetDefinition':
				var inValue = currentValue.d;
				return A2(
					mapNode,
					currentValue,
					_List_fromArray(
						[
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, inValue)
						]));
			case 'LetRecursion':
				var inValue = currentValue.c;
				return A2(
					mapNode,
					currentValue,
					_List_fromArray(
						[
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, inValue)
						]));
			case 'Destructure':
				var valueToDestruct = currentValue.c;
				var inValue = currentValue.d;
				return A2(
					mapNode,
					currentValue,
					_List_fromArray(
						[
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, valueToDestruct),
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, inValue)
						]));
			case 'IfThenElse':
				var condition = currentValue.b;
				var thenBranch = currentValue.c;
				var elseBranch = currentValue.d;
				return A2(
					mapNode,
					currentValue,
					_List_fromArray(
						[
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, condition),
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, thenBranch),
							A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, elseBranch)
						]));
			case 'PatternMatch':
				var branchOutOn = currentValue.b;
				var cases = currentValue.c;
				return A2(
					mapNode,
					currentValue,
					A2(
						$elm$core$List$append,
						_List_fromArray(
							[
								A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, branchOutOn)
							]),
						A2(
							$elm$core$List$map,
							$author$project$Morphir$IR$Value$reduceValueBottomUp(mapNode),
							A2($elm$core$List$map, $elm$core$Tuple$second, cases))));
			case 'UpdateRecord':
				var valueToUpdate = currentValue.b;
				var fieldsToUpdate = currentValue.c;
				return A2(
					mapNode,
					currentValue,
					A2(
						$elm$core$List$append,
						_List_fromArray(
							[
								A2($author$project$Morphir$IR$Value$reduceValueBottomUp, mapNode, valueToUpdate)
							]),
						A2(
							$elm$core$List$map,
							$author$project$Morphir$IR$Value$reduceValueBottomUp(mapNode),
							$elm$core$Dict$values(fieldsToUpdate))));
			default:
				return A2(mapNode, currentValue, _List_Nil);
		}
	});
var $author$project$Morphir$Correctness$BranchCoverage$valueBranches = F2(
	function (expandCriteria, value) {
		return A2(
			$author$project$Morphir$IR$Value$reduceValueBottomUp,
			F2(
				function (currentValue, childBranches) {
					switch (currentValue.$) {
						case 'IfThenElse':
							var cond = currentValue.b;
							var thenBranch = currentValue.c;
							var elseBranch = currentValue.d;
							return $elm$core$List$concat(
								_List_fromArray(
									[
										A2(
										$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
										A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, cond, true),
										A2($author$project$Morphir$Correctness$BranchCoverage$valueBranches, expandCriteria, thenBranch)),
										A2(
										$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
										A3($author$project$Morphir$Correctness$BranchCoverage$conditionBranches, expandCriteria, cond, false),
										A2($author$project$Morphir$Correctness$BranchCoverage$valueBranches, expandCriteria, elseBranch))
									]));
						case 'PatternMatch':
							var subject = currentValue.b;
							var cases = currentValue.c;
							var caseBranches = F2(
								function (remainingCases, exclude) {
									if (remainingCases.b) {
										var _v2 = remainingCases.a;
										var nextCasePattern = _v2.a;
										var nextCaseBody = _v2.b;
										var restOfCases = remainingCases.b;
										var patternCondition = $author$project$Morphir$Correctness$BranchCoverage$PatternCondition(
											{excludes: exclude, includes: nextCasePattern, subject: subject});
										var nextCaseBranches = A2(
											$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
											_List_fromArray(
												[
													_List_fromArray(
													[patternCondition])
												]),
											A2($author$project$Morphir$Correctness$BranchCoverage$valueBranches, expandCriteria, nextCaseBody));
										return $elm$core$List$concat(
											_List_fromArray(
												[
													nextCaseBranches,
													A2(
													caseBranches,
													restOfCases,
													_Utils_ap(
														exclude,
														_List_fromArray(
															[nextCasePattern])))
												]));
									} else {
										return _List_Nil;
									}
								});
							return A2(
								$author$project$Morphir$Correctness$BranchCoverage$bothBranches,
								A2($author$project$Morphir$Correctness$BranchCoverage$valueBranches, expandCriteria, subject),
								A2(caseBranches, cases, _List_Nil));
						default:
							return $elm$core$List$isEmpty(childBranches) ? _List_fromArray(
								[_List_Nil]) : $author$project$Morphir$Correctness$BranchCoverage$eitherBranches(childBranches);
					}
				}),
			value);
	});
var $author$project$Morphir$Correctness$BranchCoverage$assignTestCasesToBranches = F3(
	function (ir, valueDef, testCases) {
		return A2(
			$elm$core$List$map,
			function (branch) {
				return _Utils_Tuple2(
					branch,
					A2(
						$elm$core$List$filter,
						function (testCase) {
							var variables = $elm$core$Dict$fromList(
								A2(
									$elm$core$List$filterMap,
									$elm$core$Basics$identity,
									A3(
										$elm$core$List$map2,
										F2(
											function (_v7, maybeArgValue) {
												var argName = _v7.a;
												return A2(
													$elm$core$Maybe$map,
													$elm$core$Tuple$pair(argName),
													maybeArgValue);
											}),
										valueDef.inputTypes,
										testCase.inputs)));
							var matchesConditions = function (conditions) {
								matchesConditions:
								while (true) {
									if (!conditions.b) {
										return true;
									} else {
										var nextCondition = conditions.a;
										var restOfConditions = conditions.b;
										if (nextCondition.$ === 'BoolCondition') {
											var cond = nextCondition.a;
											var rawCriterion = A3(
												$author$project$Morphir$IR$Value$mapValueAttributes,
												$elm$core$Basics$always(_Utils_Tuple0),
												$elm$core$Basics$always(_Utils_Tuple0),
												cond.criterion);
											var _v2 = A5($author$project$Morphir$Value$Interpreter$evaluateValue, $author$project$Morphir$IR$SDK$nativeFunctions, ir, variables, _List_Nil, rawCriterion);
											if (((_v2.$ === 'Ok') && (_v2.a.$ === 'Literal')) && (_v2.a.b.$ === 'BoolLiteral')) {
												var _v3 = _v2.a;
												var actualResult = _v3.b.a;
												if (_Utils_eq(cond.expectedValue, actualResult)) {
													var $temp$conditions = restOfConditions;
													conditions = $temp$conditions;
													continue matchesConditions;
												} else {
													return false;
												}
											} else {
												return false;
											}
										} else {
											var cond = nextCondition.a;
											var rawSubject = A3(
												$author$project$Morphir$IR$Value$mapValueAttributes,
												$elm$core$Basics$always(_Utils_Tuple0),
												$elm$core$Basics$always(_Utils_Tuple0),
												cond.subject);
											var evaluatedSubject = function () {
												var _v6 = A5($author$project$Morphir$Value$Interpreter$evaluateValue, $author$project$Morphir$IR$SDK$nativeFunctions, ir, variables, _List_Nil, rawSubject);
												if (_v6.$ === 'Ok') {
													var result = _v6.a;
													return result;
												} else {
													return $author$project$Morphir$IR$Value$Unit(_Utils_Tuple0);
												}
											}();
											var matches = function (pattern) {
												var _v5 = A2(
													$author$project$Morphir$Value$Interpreter$matchPattern,
													A2(
														$author$project$Morphir$IR$Value$mapPatternAttributes,
														$elm$core$Basics$always(_Utils_Tuple0),
														pattern),
													evaluatedSubject);
												if (_v5.$ === 'Ok') {
													return true;
												} else {
													return false;
												}
											};
											var matchesAny = function (patterns) {
												matchesAny:
												while (true) {
													if (!patterns.b) {
														return false;
													} else {
														var nextPattern = patterns.a;
														var restOfPatterns = patterns.b;
														if (matches(nextPattern)) {
															return true;
														} else {
															var $temp$patterns = restOfPatterns;
															patterns = $temp$patterns;
															continue matchesAny;
														}
													}
												}
											};
											return matches(cond.includes) ? matchesAny(cond.excludes) : false;
										}
									}
								}
							};
							return matchesConditions(branch);
						},
						testCases));
			},
			A2($author$project$Morphir$Correctness$BranchCoverage$valueBranches, true, valueDef.body));
	});
var $author$project$Morphir$TestCoverage$Backend$calculateNumberOfCoveredBranches = function (branchCoverageResult) {
	return $elm$core$List$length(
		A2(
			$elm$core$List$filter,
			function (item) {
				return !$elm$core$List$isEmpty(item.b);
			},
			branchCoverageResult));
};
var $pzp1997$assoc_list$AssocList$D = function (a) {
	return {$: 'D', a: a};
};
var $pzp1997$assoc_list$AssocList$remove = F2(
	function (targetKey, _v0) {
		var alist = _v0.a;
		return $pzp1997$assoc_list$AssocList$D(
			A2(
				$elm$core$List$filter,
				function (_v1) {
					var key = _v1.a;
					return !_Utils_eq(key, targetKey);
				},
				alist));
	});
var $pzp1997$assoc_list$AssocList$insert = F3(
	function (key, value, dict) {
		var _v0 = A2($pzp1997$assoc_list$AssocList$remove, key, dict);
		var alteredAlist = _v0.a;
		return $pzp1997$assoc_list$AssocList$D(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(key, value),
				alteredAlist));
	});
var $pzp1997$assoc_list$AssocList$fromList = function (alist) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, result) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($pzp1997$assoc_list$AssocList$insert, key, value, result);
			}),
		$pzp1997$assoc_list$AssocList$D(_List_Nil),
		alist);
};
var $author$project$Morphir$TestCoverage$Backend$getBranchCoverage = F4(
	function (_v0, ir, testSuite, moduleDef) {
		var packageName = _v0.a;
		var moduleName = _v0.b;
		return $pzp1997$assoc_list$AssocList$fromList(
			A2(
				$elm$core$List$map,
				function (_v1) {
					var valueName = _v1.a;
					var accesscontrolledValueDef = _v1.b;
					var valueDef = accesscontrolledValueDef.value.value;
					var currentFQN = A3($author$project$Morphir$IR$FQName$fQName, packageName, moduleName, valueName);
					var valueTestCases = A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Dict$get, currentFQN, testSuite));
					return _Utils_Tuple2(
						A2($author$project$Morphir$IR$NodeId$ValueID, currentFQN, _List_Nil),
						function (lstOfBranchAndCoveredTestCases) {
							return {
								numberOfBranches: $elm$core$List$length(lstOfBranchAndCoveredTestCases),
								numberOfCoveredBranches: $author$project$Morphir$TestCoverage$Backend$calculateNumberOfCoveredBranches(lstOfBranchAndCoveredTestCases)
							};
						}(
							A3($author$project$Morphir$Correctness$BranchCoverage$assignTestCasesToBranches, ir, valueDef, valueTestCases)));
				},
				$elm$core$Dict$toList(moduleDef.values)));
	});
var $author$project$Morphir$IR$Distribution$insertDependency = F3(
	function (dependencyPackageName, dependencyPackageSpec, distribution) {
		var packageName = distribution.a;
		var dependencies = distribution.b;
		var packageDef = distribution.c;
		return A3(
			$author$project$Morphir$IR$Distribution$Library,
			packageName,
			A3($elm$core$Dict$insert, dependencyPackageName, dependencyPackageSpec, dependencies),
			packageDef);
	});
var $author$project$Morphir$Elm$CLI$jsonDecodeError = _Platform_outgoingPort('jsonDecodeError', $elm$json$Json$Encode$string);
var $author$project$Morphir$File$FileChanges$filter = F2(
	function (f, fileChanges) {
		return A2($elm$core$Dict$filter, f, fileChanges);
	});
var $author$project$Morphir$Elm$CLI$keepElmFilesOnly = function (fileChanges) {
	return A2(
		$author$project$Morphir$File$FileChanges$filter,
		F2(
			function (path, _v0) {
				return A2($elm$core$String$endsWith, '.elm', path);
			}),
		fileChanges);
};
var $author$project$Morphir$IR$Distribution$lookupPackageName = function (distribution) {
	var packageName = distribution.a;
	return packageName;
};
var $author$project$Morphir$IR$Type$mapSpecificationAttributes = F2(
	function (f, spec) {
		switch (spec.$) {
			case 'TypeAliasSpecification':
				var params = spec.a;
				var tpe = spec.b;
				return A2(
					$author$project$Morphir$IR$Type$TypeAliasSpecification,
					params,
					A2($author$project$Morphir$IR$Type$mapTypeAttributes, f, tpe));
			case 'OpaqueTypeSpecification':
				var params = spec.a;
				return $author$project$Morphir$IR$Type$OpaqueTypeSpecification(params);
			case 'CustomTypeSpecification':
				var params = spec.a;
				var constructors = spec.b;
				return A2(
					$author$project$Morphir$IR$Type$CustomTypeSpecification,
					params,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v1, ctorArgs) {
								return A2(
									$elm$core$List$map,
									function (_v2) {
										var argName = _v2.a;
										var argType = _v2.b;
										return _Utils_Tuple2(
											argName,
											A2($author$project$Morphir$IR$Type$mapTypeAttributes, f, argType));
									},
									ctorArgs);
							}),
						constructors));
			default:
				var params = spec.a;
				var config = spec.b;
				return A2(
					$author$project$Morphir$IR$Type$DerivedTypeSpecification,
					params,
					{
						baseType: A2($author$project$Morphir$IR$Type$mapTypeAttributes, f, config.baseType),
						fromBaseType: config.fromBaseType,
						toBaseType: config.toBaseType
					});
		}
	});
var $author$project$Morphir$IR$Value$mapSpecificationAttributes = F2(
	function (f, spec) {
		return A2(
			$author$project$Morphir$IR$Value$Specification,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var name = _v0.a;
					var tpe = _v0.b;
					return _Utils_Tuple2(
						name,
						A2($author$project$Morphir$IR$Type$mapTypeAttributes, f, tpe));
				},
				spec.inputs),
			A2($author$project$Morphir$IR$Type$mapTypeAttributes, f, spec.output));
	});
var $author$project$Morphir$IR$Module$mapSpecificationAttributes = F2(
	function (tf, spec) {
		return A3(
			$author$project$Morphir$IR$Module$Specification,
			A2(
				$elm$core$Dict$map,
				F2(
					function (_v0, typeSpec) {
						return A2(
							$author$project$Morphir$IR$Documented$map,
							$author$project$Morphir$IR$Type$mapSpecificationAttributes(tf),
							typeSpec);
					}),
				spec.types),
			A2(
				$elm$core$Dict$map,
				F2(
					function (_v1, valueSpec) {
						return A2(
							$author$project$Morphir$IR$Documented$map,
							$author$project$Morphir$IR$Value$mapSpecificationAttributes(tf),
							valueSpec);
					}),
				spec.values),
			spec.doc);
	});
var $author$project$Morphir$IR$Package$mapSpecificationAttributes = F2(
	function (tf, spec) {
		return $author$project$Morphir$IR$Package$Specification(
			A2(
				$elm$core$Dict$map,
				F2(
					function (_v0, moduleSpec) {
						return A2($author$project$Morphir$IR$Module$mapSpecificationAttributes, tf, moduleSpec);
					}),
				spec.modules));
	});
var $author$project$Morphir$IR$Distribution$lookupPackageSpecification = function (distribution) {
	var packageDef = distribution.c;
	return A2(
		$author$project$Morphir$IR$Package$mapSpecificationAttributes,
		function (_v1) {
			return _Utils_Tuple0;
		},
		$author$project$Morphir$IR$Package$definitionToSpecificationWithPrivate(packageDef));
};
var $elm$json$Json$Decode$map5 = _Json_map5;
var $author$project$Morphir$Scala$Feature$TestBackend$Codec$encodeError = function (error) {
	if (error.$ === 'TestError') {
		var errorMessage = error.a;
		return A2(
			$elm$json$Json$Encode$list,
			$elm$json$Json$Encode$string,
			_List_fromArray(
				['TestError', errorMessage]));
	} else {
		var typeError = error.a;
		return A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$json$Json$Encode$string('InferenceError'),
					$author$project$Morphir$Type$Infer$Codec$encodeTypeError(typeError)
				]));
	}
};
var $author$project$Morphir$Scala$Feature$TestBackend$Codec$encodeErrors = $elm$json$Json$Encode$list($author$project$Morphir$Scala$Feature$TestBackend$Codec$encodeError);
var $author$project$Morphir$Scala$Backend$Codec$encodeError = function (error) {
	if (error.$ === 'TestError') {
		var errs = error.a;
		return $author$project$Morphir$Scala$Feature$TestBackend$Codec$encodeErrors(errs);
	} else {
		var err = error.a;
		return $elm$json$Json$Encode$string(err);
	}
};
var $author$project$Morphir$JsonSchema$Backend$Codec$encodeErrors = $elm$json$Json$Encode$list($elm$json$Json$Encode$string);
var $author$project$Morphir$IR$FQName$getLocalName = function (_v0) {
	var l = _v0.c;
	return l;
};
var $author$project$Morphir$IR$FQName$getModulePath = function (_v0) {
	var m = _v0.b;
	return m;
};
var $author$project$Morphir$IR$FQName$getPackagePath = function (_v0) {
	var p = _v0.a;
	return p;
};
var $author$project$Morphir$IR$Name$toHumanWords = function (name) {
	var words = $author$project$Morphir$IR$Name$toList(name);
	var join = function (abbrev) {
		return $elm$core$String$toUpper(
			A2($elm$core$String$join, '', abbrev));
	};
	var process = F3(
		function (prefix, abbrev, suffix) {
			process:
			while (true) {
				if (!suffix.b) {
					return $elm$core$List$isEmpty(abbrev) ? prefix : A2(
						$elm$core$List$append,
						prefix,
						_List_fromArray(
							[
								join(abbrev)
							]));
				} else {
					var first = suffix.a;
					var rest = suffix.b;
					if ($elm$core$String$length(first) === 1) {
						var $temp$prefix = prefix,
							$temp$abbrev = A2(
							$elm$core$List$append,
							abbrev,
							_List_fromArray(
								[first])),
							$temp$suffix = rest;
						prefix = $temp$prefix;
						abbrev = $temp$abbrev;
						suffix = $temp$suffix;
						continue process;
					} else {
						if (!abbrev.b) {
							var $temp$prefix = A2(
								$elm$core$List$append,
								prefix,
								_List_fromArray(
									[first])),
								$temp$abbrev = _List_Nil,
								$temp$suffix = rest;
							prefix = $temp$prefix;
							abbrev = $temp$abbrev;
							suffix = $temp$suffix;
							continue process;
						} else {
							var $temp$prefix = A2(
								$elm$core$List$append,
								prefix,
								_List_fromArray(
									[
										join(abbrev),
										first
									])),
								$temp$abbrev = _List_Nil,
								$temp$suffix = rest;
							prefix = $temp$prefix;
							abbrev = $temp$abbrev;
							suffix = $temp$suffix;
							continue process;
						}
					}
				}
			}
		});
	if (name.b && (!name.b.b)) {
		var word = name.a;
		return ($elm$core$String$length(word) === 1) ? name : A3(process, _List_Nil, _List_Nil, words);
	} else {
		return A3(process, _List_Nil, _List_Nil, words);
	}
};
var $author$project$Morphir$IR$Name$toSnakeCase = function (name) {
	return A2(
		$elm$core$String$join,
		'_',
		$author$project$Morphir$IR$Name$toHumanWords(name));
};
var $author$project$Morphir$Graph$Grapher$fqnToString = function (fqn) {
	return A2(
		$elm$core$String$join,
		'.',
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$Path$toString,
				$author$project$Morphir$IR$Name$toSnakeCase,
				'.',
				$author$project$Morphir$IR$FQName$getPackagePath(fqn)),
				A3(
				$author$project$Morphir$IR$Path$toString,
				$author$project$Morphir$IR$Name$toSnakeCase,
				'.',
				$author$project$Morphir$IR$FQName$getModulePath(fqn)),
				$author$project$Morphir$IR$Name$toSnakeCase(
				$author$project$Morphir$IR$FQName$getLocalName(fqn))
			]));
};
var $author$project$Morphir$Graph$Grapher$nodeType = function (node) {
	switch (node.$) {
		case 'Record':
			return 'Record';
		case 'Field':
			return 'Field';
		case 'Type':
			return 'Type';
		case 'Function':
			return 'Function';
		case 'Enum':
			return 'Enum';
		case 'UnitOfMeasure':
			return 'Unit';
		default:
			return 'Unknown';
	}
};
var $author$project$Morphir$Graph$Grapher$verbToString = function (verb) {
	switch (verb.$) {
		case 'IsA':
			return 'isA';
		case 'Aliases':
			return 'aliases';
		case 'Contains':
			return 'contains';
		case 'Uses':
			return 'uses';
		case 'Calls':
			return 'calls';
		case 'Produces':
			return 'produces';
		case 'Parameterizes':
			return 'parameterizes';
		case 'Unions':
			return 'unions';
		case 'Enumerates':
			return 'enumerates';
		default:
			return 'measures';
	}
};
var $author$project$Morphir$Graph$Grapher$graphEntryToComparable = function (entry) {
	var nodeId = function (node) {
		return $author$project$Morphir$Graph$Grapher$nodeType(node) + (':' + function () {
			switch (node.$) {
				case 'Record':
					var fqn = node.a;
					return $author$project$Morphir$Graph$Grapher$fqnToString(fqn);
				case 'Field':
					var fqn = node.a;
					var name = node.b;
					return $author$project$Morphir$Graph$Grapher$fqnToString(fqn) + ('#' + $author$project$Morphir$IR$Name$toSnakeCase(name));
				case 'Type':
					var fqn = node.a;
					return $author$project$Morphir$Graph$Grapher$fqnToString(fqn);
				case 'Function':
					var fqn = node.a;
					return $author$project$Morphir$Graph$Grapher$fqnToString(fqn);
				case 'Enum':
					var fqn = node.a;
					return $author$project$Morphir$Graph$Grapher$fqnToString(fqn);
				case 'UnitOfMeasure':
					var fqn = node.a;
					return $author$project$Morphir$Graph$Grapher$fqnToString(fqn);
				default:
					var s = node.a;
					return 'unknown:' + s;
			}
		}());
	};
	var edgeToString = function (edge) {
		return nodeId(edge.subject) + (' ' + ($author$project$Morphir$Graph$Grapher$verbToString(edge.verb) + (' ' + nodeId(edge.object))));
	};
	if (entry.$ === 'NodeEntry') {
		var node = entry.a;
		return 'NodeEntry: ' + nodeId(node);
	} else {
		var edge = entry.a;
		return 'EdgeEntry: ' + edgeToString(edge);
	}
};
var $author$project$Morphir$Graph$Grapher$asNode = function (entry) {
	if (entry.$ === 'NodeEntry') {
		var node = entry.a;
		return $elm$core$Maybe$Just(node);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Morphir$Graph$Grapher$Aliases = {$: 'Aliases'};
var $author$project$Morphir$Graph$Grapher$Contains = {$: 'Contains'};
var $author$project$Morphir$Graph$Grapher$Edge = F3(
	function (subject, verb, object) {
		return {object: object, subject: subject, verb: verb};
	});
var $author$project$Morphir$Graph$Grapher$EdgeEntry = function (a) {
	return {$: 'EdgeEntry', a: a};
};
var $author$project$Morphir$Graph$Grapher$Enum = function (a) {
	return {$: 'Enum', a: a};
};
var $author$project$Morphir$Graph$Grapher$Enumerates = {$: 'Enumerates'};
var $author$project$Morphir$Graph$Grapher$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $author$project$Morphir$Graph$Grapher$IsA = {$: 'IsA'};
var $author$project$Morphir$Graph$Grapher$Measures = {$: 'Measures'};
var $author$project$Morphir$Graph$Grapher$NodeEntry = function (a) {
	return {$: 'NodeEntry', a: a};
};
var $author$project$Morphir$Graph$Grapher$Record = function (a) {
	return {$: 'Record', a: a};
};
var $author$project$Morphir$Graph$Grapher$Type = function (a) {
	return {$: 'Type', a: a};
};
var $author$project$Morphir$Graph$Grapher$Unions = {$: 'Unions'};
var $author$project$Morphir$Graph$Grapher$UnitOfMeasure = function (a) {
	return {$: 'UnitOfMeasure', a: a};
};
var $author$project$Morphir$Graph$Grapher$Unknown = function (a) {
	return {$: 'Unknown', a: a};
};
var $author$project$Morphir$Graph$Grapher$isEnum = function (constructors) {
	return A2(
		$elm$core$List$all,
		function (_v0) {
			var args = _v0.b;
			return $elm$core$List$isEmpty(args);
		},
		$elm$core$Dict$toList(constructors));
};
var $author$project$Morphir$Graph$Grapher$asEnum = function (typeDef) {
	if (typeDef.$ === 'CustomTypeDefinition') {
		var accessControlledCtors = typeDef.b;
		var _v1 = $author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledCtors);
		if (_v1.$ === 'Just') {
			var constructors = _v1.a;
			return $author$project$Morphir$Graph$Grapher$isEnum(constructors) ? $elm$core$Dict$keys(constructors) : _List_Nil;
		} else {
			return _List_Nil;
		}
	} else {
		return _List_Nil;
	}
};
var $author$project$Morphir$Graph$Grapher$asUnitOfMeasure = function (typeDef) {
	if (typeDef.$ === 'CustomTypeDefinition') {
		var accessControlledCtors = typeDef.b;
		var values = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Dict$values,
				$author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledCtors)));
		if ((((values.b && values.a.b) && (values.a.a.b.$ === 'Reference')) && (!values.a.b.b)) && (!values.b.b)) {
			var _v2 = values.a;
			var _v3 = _v2.a;
			var _v4 = _v3.b;
			var fqn = _v4.b;
			return $elm$core$Maybe$Just(fqn);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Morphir$Graph$Grapher$isUnitOfMeasure = function (typeDef) {
	if (typeDef.$ === 'CustomTypeDefinition') {
		var accessControlledCtors = typeDef.b;
		var values = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Dict$values,
				$author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledCtors)));
		if ((((values.b && values.a.b) && (values.a.a.b.$ === 'Reference')) && (!values.a.b.b)) && (!values.b.b)) {
			var _v2 = values.a;
			var _v3 = _v2.a;
			var _v4 = _v3.b;
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
var $author$project$Morphir$Graph$Grapher$leafType = function (tipe) {
	if (tipe.$ === 'Reference') {
		var tipeFQN = tipe.b;
		var paramTypes = tipe.c;
		if (!paramTypes.b) {
			return A2($elm$core$List$cons, tipeFQN, _List_Nil);
		} else {
			return A2($elm$core$List$concatMap, $author$project$Morphir$Graph$Grapher$leafType, paramTypes);
		}
	} else {
		return _List_Nil;
	}
};
var $author$project$Morphir$Graph$Grapher$mapTypeDefinition = F4(
	function (packageName, moduleName, typeName, typeDef) {
		var fqn = _Utils_Tuple3(packageName, moduleName, typeName);
		var edges = function () {
			if (typeDef.$ === 'TypeAliasDefinition') {
				switch (typeDef.b.$) {
					case 'Record':
						var _v1 = typeDef.b;
						var fields = _v1.b;
						var recordNode = $author$project$Morphir$Graph$Grapher$Record(fqn);
						var fieldTriples = A2(
							$elm$core$List$map,
							function (field) {
								var fieldType = function () {
									var _v2 = field.tpe;
									if (_v2.$ === 'Reference') {
										if ((_v2.c.b && (_v2.c.a.$ === 'Reference')) && (!_v2.c.b.b)) {
											var typeFqn = _v2.b;
											var _v3 = _v2.c;
											var _v4 = _v3.a;
											var child = _v4.b;
											return $author$project$Morphir$Graph$Grapher$Type(child);
										} else {
											var typeFqn = _v2.b;
											return $author$project$Morphir$Graph$Grapher$Type(typeFqn);
										}
									} else {
										return $author$project$Morphir$Graph$Grapher$Unknown('Alias');
									}
								}();
								var fieldNode = A2(
									$author$project$Morphir$Graph$Grapher$Field,
									_Utils_Tuple3(packageName, moduleName, typeName),
									field.name);
								return _List_fromArray(
									[
										$author$project$Morphir$Graph$Grapher$NodeEntry(fieldNode),
										$author$project$Morphir$Graph$Grapher$NodeEntry(fieldType),
										$author$project$Morphir$Graph$Grapher$EdgeEntry(
										A3($author$project$Morphir$Graph$Grapher$Edge, recordNode, $author$project$Morphir$Graph$Grapher$Contains, fieldNode)),
										$author$project$Morphir$Graph$Grapher$EdgeEntry(
										A3($author$project$Morphir$Graph$Grapher$Edge, fieldNode, $author$project$Morphir$Graph$Grapher$IsA, fieldType))
									]);
							},
							fields);
						return A2(
							$elm$core$List$cons,
							$author$project$Morphir$Graph$Grapher$NodeEntry(recordNode),
							$elm$core$List$concat(fieldTriples));
					case 'Reference':
						var _v5 = typeDef.b;
						var aliasFQN = _v5.b;
						var thisNode = $author$project$Morphir$Graph$Grapher$Type(fqn);
						var aliasNode = $author$project$Morphir$Graph$Grapher$Type(aliasFQN);
						return _List_fromArray(
							[
								$author$project$Morphir$Graph$Grapher$NodeEntry(thisNode),
								$author$project$Morphir$Graph$Grapher$NodeEntry(aliasNode),
								$author$project$Morphir$Graph$Grapher$EdgeEntry(
								A3($author$project$Morphir$Graph$Grapher$Edge, thisNode, $author$project$Morphir$Graph$Grapher$Aliases, aliasNode))
							]);
					default:
						return _List_Nil;
				}
			} else {
				var accessControlledCtors = typeDef.b;
				var typeNode = $author$project$Morphir$Graph$Grapher$Type(fqn);
				var unions = function () {
					if (!$author$project$Morphir$Graph$Grapher$isUnitOfMeasure(typeDef)) {
						var _v6 = $author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledCtors);
						if (_v6.$ === 'Just') {
							var ctors = _v6.a;
							return $elm$core$List$concat(
								A2(
									$elm$core$List$map,
									function (_v7) {
										var namesAndTypes = _v7.b;
										return A2(
											$elm$core$List$concatMap,
											function (_v8) {
												var tipe = _v8.b;
												return A2(
													$elm$core$List$concatMap,
													function (leafFqn) {
														var leafNode = $author$project$Morphir$Graph$Grapher$Type(leafFqn);
														return _List_fromArray(
															[
																$author$project$Morphir$Graph$Grapher$NodeEntry(leafNode),
																$author$project$Morphir$Graph$Grapher$EdgeEntry(
																A3($author$project$Morphir$Graph$Grapher$Edge, typeNode, $author$project$Morphir$Graph$Grapher$Unions, leafNode))
															]);
													},
													$author$project$Morphir$Graph$Grapher$leafType(tipe));
											},
											namesAndTypes);
									},
									$elm$core$Dict$toList(ctors)));
						} else {
							return _List_Nil;
						}
					} else {
						return _List_Nil;
					}
				}();
				var unitOfMeasures = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						function (x) {
							return _List_fromArray(
								[
									$author$project$Morphir$Graph$Grapher$NodeEntry(
									$author$project$Morphir$Graph$Grapher$UnitOfMeasure(fqn)),
									x
								]);
						},
						A2(
							$elm$core$Maybe$map,
							function (measureFqn) {
								return $author$project$Morphir$Graph$Grapher$EdgeEntry(
									A3(
										$author$project$Morphir$Graph$Grapher$Edge,
										typeNode,
										$author$project$Morphir$Graph$Grapher$Measures,
										$author$project$Morphir$Graph$Grapher$UnitOfMeasure(measureFqn)));
							},
							$author$project$Morphir$Graph$Grapher$asUnitOfMeasure(typeDef))));
				var enums = A2(
					$elm$core$List$map,
					function (name) {
						return $author$project$Morphir$Graph$Grapher$EdgeEntry(
							A3(
								$author$project$Morphir$Graph$Grapher$Edge,
								typeNode,
								$author$project$Morphir$Graph$Grapher$Enumerates,
								$author$project$Morphir$Graph$Grapher$Enum(
									_Utils_Tuple3(
										$author$project$Morphir$IR$FQName$getPackagePath(fqn),
										$author$project$Morphir$IR$FQName$getModulePath(fqn),
										name))));
					},
					$author$project$Morphir$Graph$Grapher$asEnum(typeDef));
				return A2(
					$elm$core$List$cons,
					$author$project$Morphir$Graph$Grapher$NodeEntry(typeNode),
					_Utils_ap(
						unions,
						_Utils_ap(enums, unitOfMeasures)));
			}
		}();
		return edges;
	});
var $author$project$Morphir$Graph$Grapher$mapModuleTypes = F3(
	function (packageName, moduleName, moduleDef) {
		return A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var typeName = _v0.a;
				var accessControlledDocumentedTypeDef = _v0.b;
				return A4($author$project$Morphir$Graph$Grapher$mapTypeDefinition, packageName, moduleName, typeName, accessControlledDocumentedTypeDef.value.value);
			},
			$elm$core$Dict$toList(moduleDef.types));
	});
var $author$project$Morphir$Graph$Grapher$Calls = {$: 'Calls'};
var $author$project$Morphir$Graph$Grapher$Function = function (a) {
	return {$: 'Function', a: a};
};
var $author$project$Morphir$Graph$Grapher$Produces = {$: 'Produces'};
var $author$project$Morphir$Graph$Grapher$Uses = {$: 'Uses'};
var $author$project$Morphir$Graph$Grapher$collectReferences = F2(
	function (referenceFQN, children) {
		if (!children.b) {
			return A2($elm$core$List$cons, referenceFQN, _List_Nil);
		} else {
			return A2(
				$elm$core$List$concatMap,
				function (child) {
					if (child.$ === 'Reference') {
						var childFQN = child.b;
						var grandChildren = child.c;
						return A2($author$project$Morphir$Graph$Grapher$collectReferences, childFQN, grandChildren);
					} else {
						return _List_Nil;
					}
				},
				children);
		}
	});
var $author$project$Morphir$Graph$Grapher$mapValueDefinition = F5(
	function (packageName, moduleName, valueName, valueDef, nodeRegistry) {
		var lookupNode = function (key) {
			return A2($elm$core$Dict$get, key, nodeRegistry);
		};
		var makeRefEdge = F4(
			function (subject, verb, key, _default) {
				var node = lookupNode(
					$author$project$Morphir$Graph$Grapher$fqnToString(key));
				return A2(
					$elm$core$Maybe$withDefault,
					_List_fromArray(
						[
							$author$project$Morphir$Graph$Grapher$NodeEntry(_default),
							$author$project$Morphir$Graph$Grapher$EdgeEntry(
							A3($author$project$Morphir$Graph$Grapher$Edge, subject, verb, _default))
						]),
					A2(
						$elm$core$Maybe$map,
						function (object) {
							return _List_fromArray(
								[
									$author$project$Morphir$Graph$Grapher$EdgeEntry(
									A3($author$project$Morphir$Graph$Grapher$Edge, subject, verb, object))
								]);
						},
						node));
			});
		var functionFqn = _Utils_Tuple3(packageName, moduleName, valueName);
		var functionNode = $author$project$Morphir$Graph$Grapher$Function(functionFqn);
		var inputTriples = A2(
			$elm$core$List$concatMap,
			function (fqn) {
				return A4(
					makeRefEdge,
					functionNode,
					$author$project$Morphir$Graph$Grapher$Uses,
					fqn,
					$author$project$Morphir$Graph$Grapher$Type(fqn));
			},
			A2(
				$elm$core$List$concatMap,
				function (inputType) {
					if (inputType.c.$ === 'Reference') {
						var _v3 = inputType.c;
						var inputFqn = _v3.b;
						var children = _v3.c;
						return A2($author$project$Morphir$Graph$Grapher$collectReferences, inputFqn, children);
					} else {
						return _List_Nil;
					}
				},
				valueDef.inputTypes));
		var outputTriples = function () {
			var _v1 = valueDef.outputType;
			switch (_v1.$) {
				case 'Reference':
					var outputFQN = _v1.b;
					return A4(
						makeRefEdge,
						functionNode,
						$author$project$Morphir$Graph$Grapher$Produces,
						outputFQN,
						$author$project$Morphir$Graph$Grapher$Type(outputFQN));
				case 'Tuple':
					var tupleTypes = _v1.b;
					return A2(
						$elm$core$List$concatMap,
						function (leafFQN) {
							return A4(
								makeRefEdge,
								functionNode,
								$author$project$Morphir$Graph$Grapher$Produces,
								leafFQN,
								$author$project$Morphir$Graph$Grapher$Type(leafFQN));
						},
						A2($elm$core$List$concatMap, $author$project$Morphir$Graph$Grapher$leafType, tupleTypes));
				default:
					return _List_Nil;
			}
		}();
		var subFunctionTriples = function () {
			var collectFunctions = function (value) {
				collectFunctions:
				while (true) {
					switch (value.$) {
						case 'Reference':
							var calledFQN = value.b;
							return A4(
								makeRefEdge,
								functionNode,
								$author$project$Morphir$Graph$Grapher$Calls,
								calledFQN,
								$author$project$Morphir$Graph$Grapher$Function(calledFQN));
						case 'Tuple':
							var values = value.b;
							return A2($elm$core$List$concatMap, collectFunctions, values);
						case 'List':
							var values = value.b;
							return A2($elm$core$List$concatMap, collectFunctions, values);
						case 'Field':
							var v = value.b;
							var name = value.c;
							var $temp$value = v;
							value = $temp$value;
							continue collectFunctions;
						case 'Apply':
							var value1 = value.b;
							var value2 = value.c;
							return A2(
								$elm$core$List$concatMap,
								collectFunctions,
								_List_fromArray(
									[value1, value2]));
						case 'Lambda':
							var v = value.c;
							var $temp$value = v;
							value = $temp$value;
							continue collectFunctions;
						case 'LetDefinition':
							var v = value.d;
							var $temp$value = v;
							value = $temp$value;
							continue collectFunctions;
						case 'LetRecursion':
							var v = value.c;
							var $temp$value = v;
							value = $temp$value;
							continue collectFunctions;
						case 'Destructure':
							var value1 = value.c;
							var value2 = value.d;
							return A2(
								$elm$core$List$concatMap,
								collectFunctions,
								_List_fromArray(
									[value1, value2]));
						case 'IfThenElse':
							var value1 = value.b;
							var value2 = value.c;
							var value3 = value.d;
							return A2(
								$elm$core$List$concatMap,
								collectFunctions,
								_List_fromArray(
									[value1, value2, value3]));
						case 'PatternMatch':
							var v = value.b;
							var tuples = value.c;
							return _Utils_ap(
								collectFunctions(v),
								A2(
									$elm$core$List$concatMap,
									collectFunctions,
									A2($elm$core$List$map, $elm$core$Tuple$second, tuples)));
						case 'UpdateRecord':
							var v = value.b;
							var dict = value.c;
							return _Utils_ap(
								collectFunctions(v),
								A2(
									$elm$core$List$concatMap,
									collectFunctions,
									$elm$core$Dict$values(dict)));
						default:
							return _List_Nil;
					}
				}
			};
			return collectFunctions(valueDef.body);
		}();
		return A2(
			$elm$core$List$cons,
			$author$project$Morphir$Graph$Grapher$NodeEntry(functionNode),
			_Utils_ap(
				subFunctionTriples,
				_Utils_ap(inputTriples, outputTriples)));
	});
var $author$project$Morphir$Graph$Grapher$mapModuleValues = F4(
	function (packageName, moduleName, moduleDef, typeRegistry) {
		return A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var valueName = _v0.a;
				var accessControlledDocumentedValueDef = _v0.b;
				return A5($author$project$Morphir$Graph$Grapher$mapValueDefinition, packageName, moduleName, valueName, accessControlledDocumentedValueDef.value.value, typeRegistry);
			},
			$elm$core$Dict$toList(moduleDef.values));
	});
var $author$project$Morphir$Graph$Grapher$fieldToKey = F2(
	function (fqn, name) {
		return $author$project$Morphir$Graph$Grapher$fqnToString(fqn) + ('#' + $author$project$Morphir$IR$Name$toSnakeCase(name));
	});
var $author$project$Morphir$Graph$Grapher$nodeFQN = function (node) {
	switch (node.$) {
		case 'Record':
			var fqn = node.a;
			return fqn;
		case 'Field':
			var fqn = node.a;
			return fqn;
		case 'Type':
			var fqn = node.a;
			return fqn;
		case 'Function':
			var fqn = node.a;
			return fqn;
		case 'Enum':
			var fqn = node.a;
			return fqn;
		case 'UnitOfMeasure':
			var fqn = node.a;
			return fqn;
		default:
			var s = node.a;
			return _Utils_Tuple3(
				_List_Nil,
				_List_Nil,
				_List_fromArray(
					[s]));
	}
};
var $author$project$Morphir$Graph$Grapher$referenceToKey = $author$project$Morphir$Graph$Grapher$fqnToString;
var $author$project$Morphir$Graph$Grapher$nodeToKey = function (node) {
	if (node.$ === 'Field') {
		var fqn = node.a;
		var name = node.b;
		return A2($author$project$Morphir$Graph$Grapher$fieldToKey, fqn, name);
	} else {
		return $author$project$Morphir$Graph$Grapher$referenceToKey(
			$author$project$Morphir$Graph$Grapher$nodeFQN(node));
	}
};
var $author$project$Morphir$Graph$Grapher$mapPackageDefinition = F2(
	function (packageName, packageDef) {
		var types = A2(
			$elm$core$List$concatMap,
			function (_v1) {
				var moduleName = _v1.a;
				var accessControlledModuleDef = _v1.b;
				return A3($author$project$Morphir$Graph$Grapher$mapModuleTypes, packageName, moduleName, accessControlledModuleDef.value);
			},
			$elm$core$Dict$toList(packageDef.modules));
		var typeRegistry = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (node) {
					return _Utils_Tuple2(
						$author$project$Morphir$Graph$Grapher$nodeToKey(node),
						node);
				},
				A2($elm$core$List$filterMap, $author$project$Morphir$Graph$Grapher$asNode, types)));
		var values = A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var moduleName = _v0.a;
				var accessControlledModuleDef = _v0.b;
				return A4($author$project$Morphir$Graph$Grapher$mapModuleValues, packageName, moduleName, accessControlledModuleDef.value, typeRegistry);
			},
			$elm$core$Dict$toList(packageDef.modules));
		return _Utils_ap(values, types);
	});
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$Set$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$Set$insert, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$uniqueBy = F2(
	function (f, list) {
		return A4($elm_community$list_extra$List$Extra$uniqueHelp, f, $elm$core$Set$empty, list, _List_Nil);
	});
var $author$project$Morphir$Graph$Grapher$mapDistribution = function (distro) {
	var packageName = distro.a;
	var packageDef = distro.c;
	return A2(
		$elm_community$list_extra$List$Extra$uniqueBy,
		$author$project$Morphir$Graph$Grapher$graphEntryToComparable,
		A2($author$project$Morphir$Graph$Grapher$mapPackageDefinition, packageName, packageDef));
};
var $author$project$Morphir$Graph$CypherBackend$fqnToString = function (fqn) {
	return A2(
		$elm$core$String$join,
		'.',
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$IR$Path$toString,
				$author$project$Morphir$IR$Name$toSnakeCase,
				'.',
				$author$project$Morphir$IR$FQName$getPackagePath(fqn)),
				A3(
				$author$project$Morphir$IR$Path$toString,
				$author$project$Morphir$IR$Name$toSnakeCase,
				'.',
				$author$project$Morphir$IR$FQName$getModulePath(fqn)),
				$author$project$Morphir$IR$Name$toSnakeCase(
				$author$project$Morphir$IR$FQName$getLocalName(fqn))
			]));
};
var $author$project$Morphir$Graph$CypherBackend$splitNode = function (node) {
	var humanize = function (name) {
		return A2(
			$elm$core$String$join,
			' ',
			$author$project$Morphir$IR$Name$toHumanWords(name));
	};
	switch (node.$) {
		case 'Record':
			var fqn = node.a;
			return _Utils_Tuple3(
				$author$project$Morphir$Graph$Grapher$nodeType(node),
				$author$project$Morphir$Graph$CypherBackend$fqnToString(fqn),
				humanize(
					$author$project$Morphir$IR$FQName$getLocalName(fqn)));
		case 'Field':
			var fqn = node.a;
			var name = node.b;
			return _Utils_Tuple3(
				$author$project$Morphir$Graph$Grapher$nodeType(node),
				$author$project$Morphir$Graph$CypherBackend$fqnToString(fqn) + ('#' + $author$project$Morphir$IR$Name$toSnakeCase(name)),
				humanize(name));
		case 'Type':
			var fqn = node.a;
			return _Utils_Tuple3(
				$author$project$Morphir$Graph$Grapher$nodeType(node),
				$author$project$Morphir$Graph$CypherBackend$fqnToString(fqn),
				humanize(
					$author$project$Morphir$IR$FQName$getLocalName(fqn)));
		case 'Function':
			var fqn = node.a;
			return _Utils_Tuple3(
				$author$project$Morphir$Graph$Grapher$nodeType(node),
				$author$project$Morphir$Graph$CypherBackend$fqnToString(fqn),
				humanize(
					$author$project$Morphir$IR$FQName$getLocalName(fqn)));
		case 'Enum':
			var fqn = node.a;
			return _Utils_Tuple3(
				$author$project$Morphir$Graph$Grapher$nodeType(node),
				$author$project$Morphir$Graph$CypherBackend$fqnToString(fqn),
				humanize(
					$author$project$Morphir$IR$FQName$getLocalName(fqn)));
		case 'UnitOfMeasure':
			var fqn = node.a;
			return _Utils_Tuple3(
				$author$project$Morphir$Graph$Grapher$nodeType(node),
				$author$project$Morphir$Graph$CypherBackend$fqnToString(fqn),
				humanize(
					$author$project$Morphir$IR$FQName$getLocalName(fqn)));
		default:
			var s = node.a;
			return _Utils_Tuple3('Unknown', 'unknown', s);
	}
};
var $author$project$Morphir$Graph$CypherBackend$nodeToCreate = function (node) {
	var _v0 = $author$project$Morphir$Graph$CypherBackend$splitNode(node);
	var tipe = _v0.a;
	var id = _v0.b;
	var name = _v0.c;
	return 'CREATE (n:' + (tipe + (' {id:\'' + (id + ('\', name:\'' + (name + '\'});')))));
};
var $author$project$Morphir$Graph$CypherBackend$toRelationship = function (edge) {
	var create = 'CREATE (s)-[:' + ($author$project$Morphir$Graph$Grapher$verbToString(edge.verb) + ']->(o)');
	var _v0 = $author$project$Morphir$Graph$CypherBackend$splitNode(edge.subject);
	var subjectType = _v0.a;
	var subjectId = _v0.b;
	var matchs = 'MATCH (s:' + (subjectType + (' {id:\'' + (subjectId + '\'})')));
	var _v1 = $author$project$Morphir$Graph$CypherBackend$splitNode(edge.object);
	var objectType = _v1.a;
	var objectId = _v1.b;
	var matcho = 'MATCH (o:' + (objectType + (' {id:\'' + (objectId + '\'})')));
	return matchs + (' ' + (matcho + (' ' + (create + ';'))));
};
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, $elm$core$Set$empty, list, _List_Nil);
};
var $author$project$Morphir$Graph$CypherBackend$mapDistribution = F2(
	function (opt, distro) {
		var graphEntries = $author$project$Morphir$Graph$Grapher$mapDistribution(distro);
		var nodes = A2(
			$elm$core$List$filterMap,
			function (entry) {
				if (entry.$ === 'NodeEntry') {
					var node = entry.a;
					return $elm$core$Maybe$Just(
						$author$project$Morphir$Graph$CypherBackend$nodeToCreate(node));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			graphEntries);
		var edges = A2(
			$elm$core$List$filterMap,
			function (entry) {
				if (entry.$ === 'EdgeEntry') {
					var edge = entry.a;
					return $elm$core$Maybe$Just(
						$author$project$Morphir$Graph$CypherBackend$toRelationship(edge));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			graphEntries);
		var content = A2(
			$elm$core$String$join,
			'\n',
			$elm_community$list_extra$List$Extra$unique(
				$elm$core$List$concat(
					_List_fromArray(
						[nodes, edges]))));
		return $elm$core$Dict$fromList(
			_List_fromArray(
				[
					_Utils_Tuple2(
					_Utils_Tuple2(
						_List_fromArray(
							['dist']),
						'graph.cypher'),
					content)
				]));
	});
var $author$project$Morphir$Metadata$getModules = function (meta) {
	var modules = meta.a;
	return modules;
};
var $author$project$Morphir$Metadata$getTypes = function (meta) {
	var types = meta.b;
	return types;
};
var $author$project$Morphir$Metadata$Metadata = F6(
	function (a, b, c, d, e, f) {
		return {$: 'Metadata', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $author$project$Morphir$Metadata$asAlias = function (typeDef) {
	if ((typeDef.$ === 'TypeAliasDefinition') && (typeDef.b.$ === 'Reference')) {
		var _v1 = typeDef.b;
		var aliasFQN = _v1.b;
		return $elm$core$Maybe$Just(aliasFQN);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Morphir$Metadata$asBaseType = function (typeDef) {
	if (typeDef.$ === 'CustomTypeDefinition') {
		var accessControlledCtors = typeDef.b;
		var values = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Dict$values,
				$author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledCtors)));
		if ((((values.b && values.a.b) && (values.a.a.b.$ === 'Reference')) && (!values.a.b.b)) && (!values.b.b)) {
			var _v2 = values.a;
			var _v3 = _v2.a;
			var _v4 = _v3.b;
			var fqn = _v4.b;
			return $elm$core$Maybe$Just(fqn);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Morphir$Metadata$isEnum = function (constructors) {
	return A2(
		$elm$core$List$all,
		function (_v0) {
			var name = _v0.a;
			var args = _v0.b;
			return $elm$core$List$isEmpty(args);
		},
		$elm$core$Dict$toList(constructors));
};
var $author$project$Morphir$Metadata$asEnum = function (typeDef) {
	if (typeDef.$ === 'CustomTypeDefinition') {
		var accessControlledCtors = typeDef.b;
		var _v1 = $author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledCtors);
		if (_v1.$ === 'Just') {
			var constructors = _v1.a;
			return $author$project$Morphir$Metadata$isEnum(constructors) ? $elm$core$Dict$keys(constructors) : _List_Nil;
		} else {
			return _List_Nil;
		}
	} else {
		return _List_Nil;
	}
};
var $author$project$Morphir$Metadata$isUnion = function (typeDef) {
	if (typeDef.$ === 'CustomTypeDefinition') {
		var accessControlledCtors = typeDef.b;
		var values = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Dict$values,
				$author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledCtors)));
		return $elm$core$List$length(values) > 1;
	} else {
		return false;
	}
};
var $author$project$Morphir$Scala$AST$Documented = F2(
	function (doc, value) {
		return {doc: doc, value: value};
	});
var $author$project$Morphir$Metadata$mapTypeDefinition = F5(
	function (packageName, moduleName, typeName, typeDef, documentation) {
		var mDocumentation = function (s) {
			return $elm$core$String$isEmpty(s) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s);
		}(
			$elm$core$String$trim(documentation));
		var fqn = _Utils_Tuple3(packageName, moduleName, typeName);
		return _Utils_Tuple2(
			fqn,
			A2($author$project$Morphir$Scala$AST$Documented, mDocumentation, typeDef));
	});
var $author$project$Morphir$Metadata$mapModuleTypes = F3(
	function (packageName, moduleName, moduleDef) {
		return A2(
			$elm$core$List$map,
			function (_v0) {
				var typeName = _v0.a;
				var accessControlledDocumentedTypeDef = _v0.b;
				return A5($author$project$Morphir$Metadata$mapTypeDefinition, packageName, moduleName, typeName, accessControlledDocumentedTypeDef.value.value, accessControlledDocumentedTypeDef.value.doc);
			},
			$elm$core$Dict$toList(moduleDef.types));
	});
var $author$project$Morphir$Metadata$mapPackageDefinition = F2(
	function (packageName, packageDef) {
		var typeList = A2(
			$elm$core$List$concatMap,
			function (_v4) {
				var moduleName = _v4.a;
				var accessControlledModuleDef = _v4.b;
				return A3($author$project$Morphir$Metadata$mapModuleTypes, packageName, moduleName, accessControlledModuleDef.value);
			},
			$elm$core$Dict$toList(packageDef.modules));
		var types = $elm$core$Dict$fromList(typeList);
		var unions = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filter,
				function (_v3) {
					var k = _v3.a;
					var v = _v3.b;
					return $author$project$Morphir$Metadata$isUnion(v.value);
				},
				typeList));
		var modules = $elm$core$Dict$keys(packageDef.modules);
		var enums = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v2) {
					var k = _v2.a;
					var v = _v2.b;
					var es = $author$project$Morphir$Metadata$asEnum(v.value);
					return $elm$core$List$isEmpty(es) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
						_Utils_Tuple2(k, es));
				},
				typeList));
		var bases = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v1) {
					var k = _v1.a;
					var v = _v1.b;
					var bs = $author$project$Morphir$Metadata$asBaseType(v.value);
					return A2(
						$elm$core$Maybe$map,
						function (b) {
							return _Utils_Tuple2(k, b);
						},
						bs);
				},
				typeList));
		var aliases = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v0) {
					var k = _v0.a;
					var v = _v0.b;
					var bs = $author$project$Morphir$Metadata$asAlias(v.value);
					return A2(
						$elm$core$Maybe$map,
						function (b) {
							return _Utils_Tuple2(k, b);
						},
						bs);
				},
				typeList));
		return A6($author$project$Morphir$Metadata$Metadata, modules, types, enums, bases, unions, aliases);
	});
var $author$project$Morphir$Metadata$mapDistribution = function (distro) {
	var packageName = distro.a;
	var packageDef = distro.c;
	return A2($author$project$Morphir$Metadata$mapPackageDefinition, packageName, packageDef);
};
var $elm_community$list_extra$List$Extra$unconsLast = function (list) {
	var _v0 = $elm$core$List$reverse(list);
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var last_ = _v0.a;
		var rest = _v0.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				last_,
				$elm$core$List$reverse(rest)));
	}
};
var $author$project$Morphir$Graph$SemanticBackend$toFQName = function (path) {
	var _v0 = A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2(_List_Nil, _List_Nil),
		$elm_community$list_extra$List$Extra$unconsLast(path));
	var localName = _v0.a;
	var newModulePath = _v0.b;
	return A3($author$project$Morphir$IR$FQName$fQName, _List_Nil, newModulePath, localName);
};
var $author$project$Morphir$File$SourceCode$concat = $elm$core$String$concat;
var $author$project$Morphir$File$SourceCode$empty = '';
var $author$project$Morphir$Graph$SemanticBackend$moduleToIRI = function (fqn) {
	return A2(
		$elm$core$String$join,
		'/',
		A2(
			$elm$core$List$cons,
			'http:/',
			A2(
				$elm$core$List$map,
				$author$project$Morphir$IR$Name$toSnakeCase,
				$elm$core$List$concat(
					_List_fromArray(
						[
							$author$project$Morphir$IR$FQName$getPackagePath(fqn),
							$author$project$Morphir$IR$FQName$getModulePath(fqn)
						])))));
};
var $author$project$Morphir$Graph$SemanticBackend$fqnToIRI = function (fqn) {
	return A2(
		$elm$core$String$join,
		'/',
		_List_fromArray(
			[
				$author$project$Morphir$Graph$SemanticBackend$moduleToIRI(fqn),
				$author$project$Morphir$IR$Name$toSnakeCase(
				$author$project$Morphir$IR$FQName$getLocalName(fqn))
			]));
};
var $author$project$Morphir$File$SourceCode$newLine = '\n';
var $author$project$Morphir$File$SourceCode$space = ' ';
var $author$project$Morphir$File$SourceCode$indentLines = F2(
	function (depth, lines) {
		return A2(
			$elm$core$String$join,
			$author$project$Morphir$File$SourceCode$newLine,
			A2(
				$elm$core$List$map,
				function (line) {
					return A2(
						$elm$core$String$append,
						A2($elm$core$String$repeat, depth, $author$project$Morphir$File$SourceCode$space),
						line);
				},
				A2($elm$core$List$concatMap, $elm$core$String$lines, lines)));
	});
var $author$project$Morphir$Graph$SemanticBackend$prettyPrint = F3(
	function (_package, modules, types) {
		var reducePath = function (modulePath) {
			if (!modulePath.b) {
				return _List_Nil;
			} else {
				if (!modulePath.b.b) {
					var name = modulePath.a;
					return _List_fromArray(
						[
							A3($author$project$Morphir$IR$FQName$fQName, _List_Nil, _List_Nil, name)
						]);
				} else {
					var fqn = $author$project$Morphir$Graph$SemanticBackend$toFQName(modulePath);
					return A2(
						$elm$core$List$cons,
						fqn,
						reducePath(
							$author$project$Morphir$IR$FQName$getModulePath(fqn)));
				}
			}
		};
		var namespacePrefix = $author$project$Morphir$IR$Name$toSnakeCase(
			$author$project$Morphir$IR$FQName$getLocalName(_package));
		var toSkos = F2(
			function (skosType, fqn) {
				if (!fqn.b.b) {
					if (!fqn.c.b) {
						return $author$project$Morphir$File$SourceCode$empty;
					} else {
						var name = fqn.c;
						return $author$project$Morphir$File$SourceCode$concat(
							_List_fromArray(
								[
									$author$project$Morphir$File$SourceCode$concat(
									_List_fromArray(
										[
											namespacePrefix,
											':',
											$author$project$Morphir$IR$Name$toSnakeCase(name),
											$author$project$Morphir$File$SourceCode$space,
											'rdf:type',
											$author$project$Morphir$File$SourceCode$space,
											skosType,
											$author$project$Morphir$File$SourceCode$space,
											';',
											$author$project$Morphir$File$SourceCode$newLine
										])),
									A2(
									$author$project$Morphir$File$SourceCode$indentLines,
									2,
									_List_fromArray(
										[
											$author$project$Morphir$File$SourceCode$concat(
											_List_fromArray(
												[
													'skos:prefLabel',
													$author$project$Morphir$File$SourceCode$space,
													'\"',
													A2(
													$elm$core$String$join,
													' ',
													$author$project$Morphir$IR$Name$toHumanWords(name)),
													'\"',
													$author$project$Morphir$File$SourceCode$space,
													'.'
												]))
										])),
									$author$project$Morphir$File$SourceCode$newLine,
									$author$project$Morphir$File$SourceCode$newLine
								]));
					}
				} else {
					var domain = fqn.b;
					var name = fqn.c;
					return $author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							[
								$author$project$Morphir$File$SourceCode$concat(
								_List_fromArray(
									[
										namespacePrefix,
										':',
										$author$project$Morphir$IR$Name$toSnakeCase(name),
										$author$project$Morphir$File$SourceCode$space,
										'rdf:type',
										$author$project$Morphir$File$SourceCode$space,
										skosType,
										$author$project$Morphir$File$SourceCode$space,
										';',
										$author$project$Morphir$File$SourceCode$newLine
									])),
								A2(
								$author$project$Morphir$File$SourceCode$indentLines,
								2,
								_List_fromArray(
									[
										$author$project$Morphir$File$SourceCode$concat(
										_List_fromArray(
											[
												'skos:prefLabel',
												$author$project$Morphir$File$SourceCode$space,
												'\"',
												A2(
												$elm$core$String$join,
												' ',
												$author$project$Morphir$IR$Name$toHumanWords(name)),
												'\"',
												$author$project$Morphir$File$SourceCode$space,
												';'
											])),
										$author$project$Morphir$File$SourceCode$concat(
										_List_fromArray(
											[
												'skos:broader',
												$author$project$Morphir$File$SourceCode$space,
												namespacePrefix,
												':',
												$author$project$Morphir$IR$Name$toSnakeCase(
												$author$project$Morphir$IR$FQName$getLocalName(
													$author$project$Morphir$Graph$SemanticBackend$toFQName(domain))),
												$author$project$Morphir$File$SourceCode$space,
												'.'
											]))
									])),
								$author$project$Morphir$File$SourceCode$newLine,
								$author$project$Morphir$File$SourceCode$newLine
							]));
				}
			});
		var namespaceIRI = $author$project$Morphir$Graph$SemanticBackend$fqnToIRI(
			A2($elm$core$Debug$log, '..', _package));
		var moduleFqns = $elm$core$Set$fromList(
			A2($elm$core$List$concatMap, reducePath, modules));
		var dataElementConcept = namespacePrefix + (':' + 'DataElement');
		var typeSkos = A2(
			$elm$core$List$map,
			toSkos(dataElementConcept),
			$elm$core$Dict$keys(types));
		var dataDomainConcept = namespacePrefix + (':' + 'DataDomain');
		var moduleSkos = A2(
			$elm$core$List$map,
			toSkos(dataDomainConcept),
			A2(
				$elm$core$List$sortBy,
				function (x) {
					return $elm$core$String$toLower(
						$author$project$Morphir$IR$FQName$toString(x));
				},
				$elm$core$Set$toList(moduleFqns)));
		return $author$project$Morphir$File$SourceCode$concat(
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							['@prefix', $author$project$Morphir$File$SourceCode$space, namespacePrefix, ':', $author$project$Morphir$File$SourceCode$space, '<', namespaceIRI, '>', $author$project$Morphir$File$SourceCode$space, '.', $author$project$Morphir$File$SourceCode$newLine])),
						$author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							['@prefix skos: <http://www.w3.org/2004/02/skos/core#> .', $author$project$Morphir$File$SourceCode$newLine])),
						$author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							['@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .', $author$project$Morphir$File$SourceCode$newLine])),
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							[dataDomainConcept, $author$project$Morphir$File$SourceCode$space, 'rdf:type', $author$project$Morphir$File$SourceCode$space, 'skos:Concept', $author$project$Morphir$File$SourceCode$space, ';', $author$project$Morphir$File$SourceCode$newLine])),
						A2(
						$author$project$Morphir$File$SourceCode$indentLines,
						2,
						_List_fromArray(
							[
								$author$project$Morphir$File$SourceCode$concat(
								_List_fromArray(
									['skos:prefLabel', $author$project$Morphir$File$SourceCode$space, '\"Data Domain\"', $author$project$Morphir$File$SourceCode$space, ';'])),
								$author$project$Morphir$File$SourceCode$concat(
								_List_fromArray(
									['skos:broader', $author$project$Morphir$File$SourceCode$space, 'skos:Concept', $author$project$Morphir$File$SourceCode$space, '.']))
							])),
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							[dataElementConcept, $author$project$Morphir$File$SourceCode$space, 'rdf:type', $author$project$Morphir$File$SourceCode$space, 'skos:Concept', $author$project$Morphir$File$SourceCode$space, ';', $author$project$Morphir$File$SourceCode$newLine])),
						A2(
						$author$project$Morphir$File$SourceCode$indentLines,
						2,
						_List_fromArray(
							[
								$author$project$Morphir$File$SourceCode$concat(
								_List_fromArray(
									['skos:prefLabel', $author$project$Morphir$File$SourceCode$space, '\"Data Element\"', $author$project$Morphir$File$SourceCode$space, ';'])),
								$author$project$Morphir$File$SourceCode$concat(
								_List_fromArray(
									['skos:broader', $author$project$Morphir$File$SourceCode$space, 'skos:Concept', $author$project$Morphir$File$SourceCode$space, '.']))
							])),
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$File$SourceCode$newLine
					]),
				_Utils_ap(moduleSkos, typeSkos)));
	});
var $author$project$Morphir$Graph$SemanticBackend$toFile = F3(
	function (_package, modules, types) {
		var path = _List_Nil;
		var file = 'taxonomy.ttl';
		var content = A3($author$project$Morphir$Graph$SemanticBackend$prettyPrint, _package, modules, types);
		return _Utils_Tuple2(
			_Utils_Tuple2(path, file),
			content);
	});
var $author$project$Morphir$Graph$SemanticBackend$mapDistribution = F2(
	function (options, distro) {
		var _package = $author$project$Morphir$Graph$SemanticBackend$toFQName(
			$author$project$Morphir$IR$Distribution$lookupPackageName(distro));
		var metadata = $author$project$Morphir$Metadata$mapDistribution(distro);
		var modules = $author$project$Morphir$Metadata$getModules(metadata);
		var types = $author$project$Morphir$Metadata$getTypes(metadata);
		return $elm$core$Dict$fromList(
			_List_fromArray(
				[
					A3($author$project$Morphir$Graph$SemanticBackend$toFile, _package, modules, types)
				]));
	});
var $author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchemaType = function (schemaType) {
	switch (schemaType.$) {
		case 'Integer':
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string('integer'))
					]));
		case 'Array':
			var arrayType = schemaType.a;
			var isUnique = schemaType.b;
			if (arrayType.$ === 'ListType') {
				var itemSchemaType = arrayType.a;
				return $elm$json$Json$Encode$object(
					$elm$core$List$concat(
						_List_fromArray(
							[
								_List_fromArray(
								[
									_Utils_Tuple2(
									'type',
									$elm$json$Json$Encode$string('array')),
									_Utils_Tuple2(
									'items',
									$author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchemaType(itemSchemaType))
								]),
								isUnique ? _List_fromArray(
								[
									_Utils_Tuple2(
									'uniqueItems',
									$elm$json$Json$Encode$bool(true))
								]) : _List_Nil
							])));
			} else {
				var schemaTypes = arrayType.a;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'type',
							$elm$json$Json$Encode$string('array')),
							_Utils_Tuple2(
							'items',
							$elm$json$Json$Encode$bool(false)),
							_Utils_Tuple2(
							'prefixItems',
							A2($elm$json$Json$Encode$list, $author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchemaType, schemaTypes))
						]));
			}
		case 'String':
			var stringConstraint = schemaType.a;
			var _v2 = stringConstraint.format;
			if (_v2.$ === 'Just') {
				var format = _v2.a;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'type',
							$elm$json$Json$Encode$string('string')),
							_Utils_Tuple2(
							'format',
							$elm$json$Json$Encode$string(format))
						]));
			} else {
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'type',
							$elm$json$Json$Encode$string('string'))
						]));
			}
		case 'Number':
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string('number'))
					]));
		case 'Boolean':
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string('boolean'))
					]));
		case 'Object':
			var st = schemaType.a;
			var requiredFields = schemaType.b;
			return $elm$json$Json$Encode$object(
				$elm$core$List$concat(
					_List_fromArray(
						[
							_List_fromArray(
							[
								_Utils_Tuple2(
								'type',
								$elm$json$Json$Encode$string('object')),
								_Utils_Tuple2(
								'properties',
								A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchemaType, st))
							]),
							$elm$core$List$isEmpty(requiredFields) ? _List_Nil : _List_fromArray(
							[
								_Utils_Tuple2(
								'required',
								A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, requiredFields))
							])
						])));
		case 'Const':
			var value = schemaType.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'const',
						$elm$json$Json$Encode$string(value))
					]));
		case 'Ref':
			var string = schemaType.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'$ref',
						$elm$json$Json$Encode$string(string))
					]));
		case 'Null':
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'type',
						$elm$json$Json$Encode$string('null'))
					]));
		default:
			var schemaTypes = schemaType.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'oneOf',
						A2($elm$json$Json$Encode$list, $author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchemaType, schemaTypes))
					]));
	}
};
var $author$project$Morphir$JsonSchema$PrettyPrinter$encodeDefinitions = function (schemaTypeByTypeName) {
	return A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchemaType, schemaTypeByTypeName);
};
var $author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchema = function (schema) {
	return A2(
		$elm$json$Json$Encode$encode,
		4,
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'$id',
					$elm$json$Json$Encode$string(schema.id)),
					_Utils_Tuple2(
					'$schema',
					$elm$json$Json$Encode$string(schema.schemaVersion)),
					_Utils_Tuple2(
					'$defs',
					$author$project$Morphir$JsonSchema$PrettyPrinter$encodeDefinitions(schema.definitions))
				])));
};
var $author$project$Morphir$IR$Package$lookupModuleDefinition = F2(
	function (modulePath, packageDef) {
		return A2(
			$elm$core$Maybe$map,
			$author$project$Morphir$IR$AccessControlled$withPrivateAccess,
			A2($elm$core$Dict$get, modulePath, packageDef.modules));
	});
var $author$project$Morphir$JsonSchema$Utils$getTypeDefinitionsFromModule = F5(
	function (typeName, moduleName, moduleDef, pkgName, pkgDef) {
		var typeDefList = function () {
			if (moduleDef.$ === 'Just') {
				var moduleDefn = moduleDef.a;
				return A2(
					$elm$core$List$map,
					function (_v1) {
						var name = _v1.a;
						var accControlled = _v1.b;
						var _v2 = accControlled.value.value;
						if (_v2.$ === 'TypeAliasDefinition') {
							var typ = _v2.b;
							var nameBeingSearched = $author$project$Morphir$IR$Name$toTitleCase(typeName);
							var nameBeingProcessed = $author$project$Morphir$IR$Name$toTitleCase(name);
							if (_Utils_eq(nameBeingSearched, nameBeingProcessed)) {
								if ((typ.$ === 'Reference') && (!typ.c.b)) {
									var _v4 = typ.b;
									var m = _v4.b;
									var l = _v4.c;
									var refModuleDef = A2($author$project$Morphir$IR$Package$lookupModuleDefinition, m, pkgDef);
									var refTypeDef = A5($author$project$Morphir$JsonSchema$Utils$getTypeDefinitionsFromModule, l, m, refModuleDef, pkgName, pkgDef);
									var baseTypeDef = _Utils_Tuple2(
										_Utils_Tuple2(moduleName, typeName),
										accControlled.value.value);
									return A2($elm$core$List$cons, baseTypeDef, refTypeDef);
								} else {
									return _List_fromArray(
										[
											_Utils_Tuple2(
											_Utils_Tuple2(moduleName, typeName),
											accControlled.value.value)
										]);
								}
							} else {
								return _List_Nil;
							}
						} else {
							var ctors = _v2.b;
							var nameBeingSearched = $author$project$Morphir$IR$Name$toTitleCase(typeName);
							var nameBeingProcessed = $author$project$Morphir$IR$Name$toTitleCase(name);
							if (_Utils_eq(nameBeingSearched, nameBeingProcessed)) {
								var refTypesDefs = A2(
									$elm$core$List$cons,
									_List_fromArray(
										[
											_Utils_Tuple2(
											_Utils_Tuple2(moduleName, typeName),
											accControlled.value.value)
										]),
									A2(
										$elm$core$List$concatMap,
										function (_v5) {
											var ctorArgs = _v5.b;
											return A2(
												$elm$core$List$map,
												function (_v6) {
													var argType = _v6.b;
													if ((argType.$ === 'Reference') && (!argType.c.b)) {
														var _v8 = argType.b;
														var m = _v8.b;
														var l = _v8.c;
														var refModuleDef = A2($author$project$Morphir$IR$Package$lookupModuleDefinition, m, pkgDef);
														var refTypeDef = A5($author$project$Morphir$JsonSchema$Utils$getTypeDefinitionsFromModule, l, m, refModuleDef, pkgName, pkgDef);
														var baseTypeDef = _Utils_Tuple2(
															_Utils_Tuple2(moduleName, typeName),
															accControlled.value.value);
														return A2($elm$core$List$cons, baseTypeDef, refTypeDef);
													} else {
														return _List_Nil;
													}
												},
												ctorArgs);
										},
										$elm$core$Dict$toList(ctors.value)));
								return A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										_Utils_Tuple2(moduleName, typeName),
										accControlled.value.value),
									$elm$core$List$concat(refTypesDefs));
							} else {
								return _List_Nil;
							}
						}
					},
					$elm$core$Dict$toList(moduleDefn.types));
			} else {
				return _List_Nil;
			}
		}();
		return $elm$core$List$concat(typeDefList);
	});
var $author$project$Morphir$JsonSchema$Utils$extractTypes = F4(
	function (modName, moduleDef, pkgName, pkgDef) {
		return A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var name = _v0.a;
				var accessControlled = _v0.b;
				var _v1 = accessControlled.value.value;
				if (_v1.$ === 'TypeAliasDefinition') {
					var typ = _v1.b;
					if ((typ.$ === 'Reference') && (!typ.c.b)) {
						var _v3 = typ.b;
						return A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								_Utils_Tuple2(modName, name),
								accessControlled.value.value),
							A5(
								$author$project$Morphir$JsonSchema$Utils$getTypeDefinitionsFromModule,
								name,
								modName,
								$elm$core$Maybe$Just(moduleDef),
								pkgName,
								pkgDef));
					} else {
						return _List_fromArray(
							[
								_Utils_Tuple2(
								_Utils_Tuple2(modName, name),
								accessControlled.value.value)
							]);
					}
				} else {
					var typName = _v1.a;
					var ctors = _v1.b;
					var typeDefs = A2(
						$elm$core$List$cons,
						_List_fromArray(
							[
								_Utils_Tuple2(
								_Utils_Tuple2(modName, name),
								accessControlled.value.value)
							]),
						A2(
							$elm$core$List$map,
							function (_v4) {
								var ctorName = _v4.a;
								var ctorArgs = _v4.b;
								return A2(
									$elm$core$List$concatMap,
									function (_v5) {
										var argName = _v5.a;
										var argType = _v5.b;
										if ((argType.$ === 'Reference') && (!argType.c.b)) {
											var _v7 = argType.b;
											var p = _v7.a;
											var m = _v7.b;
											var l = _v7.c;
											return A5(
												$author$project$Morphir$JsonSchema$Utils$getTypeDefinitionsFromModule,
												name,
												modName,
												$elm$core$Maybe$Just(moduleDef),
												pkgName,
												pkgDef);
										} else {
											return _List_Nil;
										}
									},
									ctorArgs);
							},
							$elm$core$Dict$toList(ctors.value)));
					return $elm$core$List$concat(typeDefs);
				}
			},
			$elm$core$Dict$toList(moduleDef.types));
	});
var $author$project$Morphir$JsonSchema$AST$Array = F2(
	function (a, b) {
		return {$: 'Array', a: a, b: b};
	});
var $author$project$Morphir$JsonSchema$AST$Const = function (a) {
	return {$: 'Const', a: a};
};
var $author$project$Morphir$JsonSchema$AST$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $author$project$Morphir$JsonSchema$AST$TupleType = function (a) {
	return {$: 'TupleType', a: a};
};
var $author$project$Morphir$JsonSchema$Backend$mapQualifiedName = function (_v0) {
	var path = _v0.a;
	var name = _v0.b;
	return $elm$core$String$concat(
		_List_fromArray(
			[
				A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', path),
				'.',
				$author$project$Morphir$IR$Name$toTitleCase(name)
			]));
};
var $author$project$Morphir$JsonSchema$AST$Boolean = {$: 'Boolean'};
var $author$project$Morphir$JsonSchema$AST$Integer = {$: 'Integer'};
var $author$project$Morphir$JsonSchema$AST$ListType = function (a) {
	return {$: 'ListType', a: a};
};
var $author$project$Morphir$JsonSchema$AST$Null = {$: 'Null'};
var $author$project$Morphir$JsonSchema$AST$Number = {$: 'Number'};
var $author$project$Morphir$JsonSchema$AST$Object = F2(
	function (a, b) {
		return {$: 'Object', a: a, b: b};
	});
var $author$project$Morphir$JsonSchema$AST$Ref = function (a) {
	return {$: 'Ref', a: a};
};
var $author$project$Morphir$JsonSchema$AST$String = function (a) {
	return {$: 'String', a: a};
};
var $author$project$Morphir$JsonSchema$AST$StringConstraints = function (format) {
	return {format: format};
};
var $author$project$Morphir$IR$Type$toString = function (tpe) {
	switch (tpe.$) {
		case 'Variable':
			var name = tpe.b;
			return $author$project$Morphir$IR$Name$toCamelCase(name);
		case 'Reference':
			var _v1 = tpe.b;
			var packageName = _v1.a;
			var moduleName = _v1.b;
			var localName = _v1.c;
			var args = tpe.c;
			var referenceName = A2(
				$elm$core$String$join,
				'.',
				_List_fromArray(
					[
						A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', packageName),
						A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', moduleName),
						$author$project$Morphir$IR$Name$toTitleCase(localName)
					]));
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$cons,
					referenceName,
					A2($elm$core$List$map, $author$project$Morphir$IR$Type$toString, args)));
		case 'Tuple':
			var elems = tpe.b;
			return $elm$core$String$concat(
				_List_fromArray(
					[
						'( ',
						A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, $author$project$Morphir$IR$Type$toString, elems)),
						' )'
					]));
		case 'Record':
			var fields = tpe.b;
			return $elm$core$String$concat(
				_List_fromArray(
					[
						'{ ',
						A2(
						$elm$core$String$join,
						', ',
						A2(
							$elm$core$List$map,
							function (field) {
								return $elm$core$String$concat(
									_List_fromArray(
										[
											$author$project$Morphir$IR$Name$toCamelCase(field.name),
											' : ',
											$author$project$Morphir$IR$Type$toString(field.tpe)
										]));
							},
							fields)),
						' }'
					]));
		case 'ExtensibleRecord':
			var varName = tpe.b;
			var fields = tpe.c;
			return $elm$core$String$concat(
				_List_fromArray(
					[
						'{ ',
						$author$project$Morphir$IR$Name$toCamelCase(varName),
						' | ',
						A2(
						$elm$core$String$join,
						', ',
						A2(
							$elm$core$List$map,
							function (field) {
								return $elm$core$String$concat(
									_List_fromArray(
										[
											$author$project$Morphir$IR$Name$toCamelCase(field.name),
											' : ',
											$author$project$Morphir$IR$Type$toString(field.tpe)
										]));
							},
							fields)),
						' }'
					]));
		case 'Function':
			if (tpe.b.$ === 'Function') {
				var argType = tpe.b;
				var returnType = tpe.c;
				return $elm$core$String$concat(
					_List_fromArray(
						[
							'(',
							$author$project$Morphir$IR$Type$toString(argType),
							') -> ',
							$author$project$Morphir$IR$Type$toString(returnType)
						]));
			} else {
				var argType = tpe.b;
				var returnType = tpe.c;
				return $elm$core$String$concat(
					_List_fromArray(
						[
							$author$project$Morphir$IR$Type$toString(argType),
							' -> ',
							$author$project$Morphir$IR$Type$toString(returnType)
						]));
			}
		default:
			return '()';
	}
};
var $author$project$Morphir$JsonSchema$Backend$mapType = F2(
	function (qName, typ) {
		switch (typ.$) {
			case 'Reference':
				var fQName = typ.b;
				var moduleName = fQName.b;
				var localName = fQName.c;
				var argTypes = typ.c;
				var _v1 = _Utils_Tuple2(
					$author$project$Morphir$IR$FQName$toString(fQName),
					argTypes);
				_v1$14:
				while (true) {
					if (!_v1.b.b) {
						switch (_v1.a) {
							case 'Morphir.SDK:Basics:int':
								return $elm$core$Result$Ok($author$project$Morphir$JsonSchema$AST$Integer);
							case 'Morphir.SDK:Decimal:decimal':
								return $elm$core$Result$Ok(
									$author$project$Morphir$JsonSchema$AST$String(
										$author$project$Morphir$JsonSchema$AST$StringConstraints($elm$core$Maybe$Nothing)));
							case 'Morphir.SDK:String:string':
								return $elm$core$Result$Ok(
									$author$project$Morphir$JsonSchema$AST$String(
										$author$project$Morphir$JsonSchema$AST$StringConstraints($elm$core$Maybe$Nothing)));
							case 'Morphir.SDK:Char:char':
								return $elm$core$Result$Ok(
									$author$project$Morphir$JsonSchema$AST$String(
										$author$project$Morphir$JsonSchema$AST$StringConstraints($elm$core$Maybe$Nothing)));
							case 'Morphir.SDK:LocalDate:localDate':
								return $elm$core$Result$Ok(
									$author$project$Morphir$JsonSchema$AST$String(
										$author$project$Morphir$JsonSchema$AST$StringConstraints(
											$elm$core$Maybe$Just('date'))));
							case 'Morphir.SDK:LocalTime:localTime':
								return $elm$core$Result$Ok(
									$author$project$Morphir$JsonSchema$AST$String(
										$author$project$Morphir$JsonSchema$AST$StringConstraints(
											$elm$core$Maybe$Just('time'))));
							case 'Morphir.SDK:Month:month':
								return $elm$core$Result$Ok(
									$author$project$Morphir$JsonSchema$AST$OneOf(
										_List_fromArray(
											[
												$author$project$Morphir$JsonSchema$AST$Const('January'),
												$author$project$Morphir$JsonSchema$AST$Const('February'),
												$author$project$Morphir$JsonSchema$AST$Const('March'),
												$author$project$Morphir$JsonSchema$AST$Const('April'),
												$author$project$Morphir$JsonSchema$AST$Const('May'),
												$author$project$Morphir$JsonSchema$AST$Const('June'),
												$author$project$Morphir$JsonSchema$AST$Const('July'),
												$author$project$Morphir$JsonSchema$AST$Const('August'),
												$author$project$Morphir$JsonSchema$AST$Const('September'),
												$author$project$Morphir$JsonSchema$AST$Const('October'),
												$author$project$Morphir$JsonSchema$AST$Const('November'),
												$author$project$Morphir$JsonSchema$AST$Const('December')
											])));
							case 'Morphir.SDK:Basics:float':
								return $elm$core$Result$Ok($author$project$Morphir$JsonSchema$AST$Number);
							case 'Morphir.SDK:Basics:bool':
								return $elm$core$Result$Ok($author$project$Morphir$JsonSchema$AST$Boolean);
							default:
								break _v1$14;
						}
					} else {
						if (!_v1.b.b.b) {
							switch (_v1.a) {
								case 'Morphir.SDK:List:list':
									var _v2 = _v1.b;
									var itemType = _v2.a;
									return A3(
										$elm$core$Result$map2,
										$author$project$Morphir$JsonSchema$AST$Array,
										A2(
											$elm$core$Result$map,
											$author$project$Morphir$JsonSchema$AST$ListType,
											A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, itemType)),
										$elm$core$Result$Ok(false));
								case 'Morphir.SDK:Set:set':
									var _v3 = _v1.b;
									var itemType = _v3.a;
									return A3(
										$elm$core$Result$map2,
										$author$project$Morphir$JsonSchema$AST$Array,
										A2(
											$elm$core$Result$map,
											$author$project$Morphir$JsonSchema$AST$ListType,
											A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, itemType)),
										$elm$core$Result$Ok(true));
								case 'Morphir.SDK:Maybe:maybe':
									var _v4 = _v1.b;
									var itemType = _v4.a;
									return A2(
										$elm$core$Result$map,
										function (schemaItemType) {
											return $author$project$Morphir$JsonSchema$AST$OneOf(
												_List_fromArray(
													[$author$project$Morphir$JsonSchema$AST$Null, schemaItemType]));
										},
										A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, itemType));
								default:
									break _v1$14;
							}
						} else {
							if (!_v1.b.b.b.b) {
								switch (_v1.a) {
									case 'Morphir.SDK:Result:result':
										var _v5 = _v1.b;
										var error = _v5.a;
										var _v6 = _v5.b;
										var value = _v6.a;
										return A2(
											$elm$core$Result$map,
											$author$project$Morphir$JsonSchema$AST$OneOf,
											A2(
												$elm$core$Result$mapError,
												$elm$core$List$concat,
												$author$project$Morphir$SDK$ResultList$keepAllErrors(
													_List_fromArray(
														[
															A2(
															$elm$core$Result$map,
															function (errorSchema) {
																return A2(
																	$author$project$Morphir$JsonSchema$AST$Array,
																	$author$project$Morphir$JsonSchema$AST$TupleType(
																		_List_fromArray(
																			[
																				$author$project$Morphir$JsonSchema$AST$Const('Err'),
																				errorSchema
																			])),
																	true);
															},
															A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, error)),
															A2(
															$elm$core$Result$map,
															function (valueSchema) {
																return A2(
																	$author$project$Morphir$JsonSchema$AST$Array,
																	$author$project$Morphir$JsonSchema$AST$TupleType(
																		_List_fromArray(
																			[
																				$author$project$Morphir$JsonSchema$AST$Const('Ok'),
																				valueSchema
																			])),
																	true);
															},
															A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, value))
														]))));
									case 'Morphir.SDK:Dict:dict':
										var _v7 = _v1.b;
										var keyType = _v7.a;
										var _v8 = _v7.b;
										var valueType = _v8.a;
										var tupleSchemaList = _List_fromArray(
											[
												A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, keyType),
												A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, valueType)
											]);
										return A2(
											$elm$core$Result$map,
											function (tupleSchema) {
												return A2(
													$author$project$Morphir$JsonSchema$AST$Array,
													$author$project$Morphir$JsonSchema$AST$ListType(
														A2(
															$author$project$Morphir$JsonSchema$AST$Array,
															$author$project$Morphir$JsonSchema$AST$TupleType(tupleSchema),
															false)),
													true);
											},
											A2(
												$elm$core$Result$mapError,
												$elm$core$List$concat,
												$author$project$Morphir$SDK$ResultList$keepAllErrors(tupleSchemaList)));
									default:
										break _v1$14;
								}
							} else {
								break _v1$14;
							}
						}
					}
				}
				return $elm$core$Result$Ok(
					$author$project$Morphir$JsonSchema$AST$Ref(
						$elm$core$String$concat(
							_List_fromArray(
								[
									'#/$defs/',
									A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', moduleName),
									'.',
									$author$project$Morphir$IR$Name$toTitleCase(localName)
								]))));
			case 'Record':
				var fields = typ.b;
				var requiredFields = A2(
					$elm$core$List$filterMap,
					function (field) {
						var _v12 = field.tpe;
						if (_v12.$ === 'Reference') {
							var fQName = _v12.b;
							var argTypes = _v12.c;
							var _v13 = _Utils_Tuple2(
								$author$project$Morphir$IR$FQName$toString(fQName),
								argTypes);
							if (_v13.a === 'Morphir.SDK:Maybe:maybe') {
								return $elm$core$Maybe$Nothing;
							} else {
								return $elm$core$Maybe$Just(
									$author$project$Morphir$IR$Name$toCamelCase(field.name));
							}
						} else {
							return $elm$core$Maybe$Just(
								$author$project$Morphir$IR$Name$toCamelCase(field.name));
						}
					},
					fields);
				return A2(
					$elm$core$Result$map,
					function (schemaDict) {
						return A2(
							$author$project$Morphir$JsonSchema$AST$Object,
							$elm$core$Dict$fromList(schemaDict),
							requiredFields);
					},
					A2(
						$elm$core$Result$mapError,
						$elm$core$List$concat,
						$author$project$Morphir$SDK$ResultList$keepAllErrors(
							A2(
								$elm$core$List$map,
								function (field) {
									var _v9 = field.tpe;
									if (_v9.$ === 'Reference') {
										var fQName = _v9.b;
										var argTypes = _v9.c;
										var _v10 = _Utils_Tuple2(
											$author$project$Morphir$IR$FQName$toString(fQName),
											argTypes);
										if (((_v10.a === 'Morphir.SDK:Maybe:maybe') && _v10.b.b) && (!_v10.b.b.b)) {
											var _v11 = _v10.b;
											var itemType = _v11.a;
											return A2(
												$elm$core$Result$map,
												function (fieldSchemaType) {
													return _Utils_Tuple2(
														$author$project$Morphir$IR$Name$toCamelCase(field.name),
														fieldSchemaType);
												},
												A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, itemType));
										} else {
											return A2(
												$elm$core$Result$map,
												function (fieldSchemaType) {
													return _Utils_Tuple2(
														$author$project$Morphir$IR$Name$toCamelCase(field.name),
														fieldSchemaType);
												},
												A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, field.tpe));
										}
									} else {
										return A2(
											$elm$core$Result$map,
											function (fieldSchemaType) {
												return _Utils_Tuple2(
													$author$project$Morphir$IR$Name$toCamelCase(field.name),
													fieldSchemaType);
											},
											A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, field.tpe));
									}
								},
								fields))));
			case 'Tuple':
				var typeList = typ.b;
				return A2(
					$elm$core$Result$map,
					function (itemType) {
						return A2(
							$author$project$Morphir$JsonSchema$AST$Array,
							$author$project$Morphir$JsonSchema$AST$TupleType(itemType),
							false);
					},
					A2(
						$elm$core$Result$mapError,
						$elm$core$List$concat,
						$author$project$Morphir$SDK$ResultList$keepAllErrors(
							A2(
								$elm$core$List$map,
								function (tpe) {
									return A2($author$project$Morphir$JsonSchema$Backend$mapType, qName, tpe);
								},
								typeList))));
			default:
				return $elm$core$Result$Err(
					_List_fromArray(
						[
							'Cannot map type ' + ($author$project$Morphir$IR$Type$toString(typ) + (' in module ' + A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', qName.a)))
						]));
		}
	});
var $author$project$Morphir$JsonSchema$Backend$mapTypeDefinition = F2(
	function (qualifiedName, definition) {
		var path = qualifiedName.a;
		var name = qualifiedName.b;
		if (definition.$ === 'TypeAliasDefinition') {
			var typ = definition.b;
			return A2(
				$elm$core$Result$map,
				function (schemaType) {
					return _List_fromArray(
						[
							_Utils_Tuple2(
							$author$project$Morphir$JsonSchema$Backend$mapQualifiedName(
								_Utils_Tuple2(path, name)),
							schemaType)
						]);
				},
				A2(
					$author$project$Morphir$JsonSchema$Backend$mapType,
					_Utils_Tuple2(path, name),
					typ));
		} else {
			var accessControlledCtors = definition.b;
			return A2(
				$elm$core$Result$map,
				function (schemaTypes) {
					return _List_fromArray(
						[
							_Utils_Tuple2(
							A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', path) + ('.' + $author$project$Morphir$IR$Name$toTitleCase(name)),
							$author$project$Morphir$JsonSchema$AST$OneOf(schemaTypes))
						]);
				},
				A2(
					$elm$core$Result$mapError,
					$elm$core$List$concat,
					$author$project$Morphir$SDK$ResultList$keepAllErrors(
						A2(
							$elm$core$List$map,
							function (_v1) {
								var ctorName = _v1.a;
								var ctorArgs = _v1.b;
								var ctorNameString = $author$project$Morphir$IR$Name$toTitleCase(ctorName);
								return $elm$core$List$isEmpty(ctorArgs) ? $elm$core$Result$Ok(
									$author$project$Morphir$JsonSchema$AST$Const(ctorNameString)) : A2(
									$elm$core$Result$map,
									function (schemaType) {
										return A2(
											$author$project$Morphir$JsonSchema$AST$Array,
											$author$project$Morphir$JsonSchema$AST$TupleType(
												A2(
													$elm$core$List$cons,
													$author$project$Morphir$JsonSchema$AST$Const(
														$author$project$Morphir$IR$Name$toTitleCase(ctorName)),
													schemaType)),
											false);
									},
									A2(
										$elm$core$Result$mapError,
										$elm$core$List$concat,
										$author$project$Morphir$SDK$ResultList$keepAllErrors(
											A2(
												$elm$core$List$map,
												function (tpe) {
													return A2($author$project$Morphir$JsonSchema$Backend$mapType, qualifiedName, tpe.b);
												},
												ctorArgs))));
							},
							$elm$core$Dict$toList(accessControlledCtors.value)))));
		}
	});
var $author$project$Morphir$JsonSchema$Backend$generateSchemaByTypeNameOrModuleName = F3(
	function (inputString, pkgName, pkgDef) {
		var moduleName = A2(
			$elm$core$List$map,
			$author$project$Morphir$IR$Name$fromString,
			$elm$core$List$reverse(
				A2($elm$core$String$split, '.', inputString)));
		var _v0 = A2($author$project$Morphir$IR$Package$lookupModuleDefinition, moduleName, pkgDef);
		if (_v0.$ === 'Just') {
			var moduleDef = _v0.a;
			return A2(
				$elm$core$Result$map,
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$concat,
						function (definitions) {
							return {
								definitions: $elm$core$Dict$fromList(definitions),
								id: 'https://morphir.finos.org/' + (A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toSnakeCase, '-', pkgName) + '.schema.json'),
								schemaVersion: 'https://json-schema.org/draft/2020-12/schema'
							};
						}),
					A2(
						$elm$core$Basics$composeR,
						$author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchema,
						$elm$core$Dict$singleton(
							_Utils_Tuple2(_List_Nil, inputString + '.json')))),
				A2(
					$elm$core$Result$mapError,
					$elm$core$List$concat,
					$author$project$Morphir$SDK$ResultList$keepAllErrors(
						A2(
							$elm$core$List$map,
							function (_v1) {
								var qualifiedName = _v1.a;
								var typeDef = _v1.b;
								return A2($author$project$Morphir$JsonSchema$Backend$mapTypeDefinition, qualifiedName, typeDef);
							},
							A4($author$project$Morphir$JsonSchema$Utils$extractTypes, moduleName, moduleDef, pkgName, pkgDef)))));
		} else {
			var typeName = A2(
				$elm$core$List$take,
				1,
				$elm$core$List$reverse(
					A2($elm$core$String$split, '.', inputString)));
			var modulePath = A2(
				$elm$core$List$map,
				$author$project$Morphir$IR$Name$fromString,
				A2(
					$elm$core$List$take,
					$elm$core$List$length(
						A2($elm$core$String$split, '.', inputString)) - 1,
					A2($elm$core$String$split, '.', inputString)));
			var _v2 = A2($author$project$Morphir$IR$Package$lookupModuleDefinition, modulePath, pkgDef);
			if (_v2.$ === 'Just') {
				var moduleDefi = _v2.a;
				var typeDefinitionsFound = A5(
					$author$project$Morphir$JsonSchema$Utils$getTypeDefinitionsFromModule,
					typeName,
					modulePath,
					$elm$core$Maybe$Just(moduleDefi),
					pkgName,
					pkgDef);
				return ($elm$core$List$length(typeDefinitionsFound) > 0) ? A2(
					$elm$core$Result$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$concat,
						A2(
							$elm$core$Basics$composeR,
							function (definitions) {
								return {
									definitions: $elm$core$Dict$fromList(definitions),
									id: 'https://morphir.finos.org/' + (A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toSnakeCase, '-', pkgName) + '.schema.json'),
									schemaVersion: 'https://json-schema.org/draft/2020-12/schema'
								};
							},
							A2(
								$elm$core$Basics$composeR,
								$author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchema,
								$elm$core$Dict$singleton(
									_Utils_Tuple2(_List_Nil, inputString + '.json'))))),
					A2(
						$elm$core$Result$mapError,
						$elm$core$List$concat,
						$author$project$Morphir$SDK$ResultList$keepAllErrors(
							A2(
								$elm$core$List$map,
								function (x) {
									return A2($author$project$Morphir$JsonSchema$Backend$mapTypeDefinition, x.a, x.b);
								},
								typeDefinitionsFound)))) : $elm$core$Result$Err(
					_List_fromArray(
						[
							'Type ' + ($author$project$Morphir$IR$Name$toTitleCase(typeName) + (' not found in the module: ' + A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', modulePath)))
						]));
			} else {
				return $elm$core$Result$Err(
					_List_fromArray(
						['Module found in the package: ' + inputString]));
			}
		}
	});
var $author$project$Morphir$JsonSchema$Backend$generateSchema = F2(
	function (packageName, packageDefinition) {
		var schemaTypeDefinitions = A2(
			$elm$core$Result$map,
			$elm$core$List$concat,
			A2(
				$elm$core$Result$mapError,
				$elm$core$List$concat,
				$author$project$Morphir$SDK$ResultList$keepAllErrors(
					A2(
						$elm$core$List$map,
						function (_v0) {
							var modName = _v0.a;
							var modDef = _v0.b;
							return A2(
								$elm$core$Result$map,
								$elm$core$List$concat,
								A2(
									$elm$core$Result$mapError,
									$elm$core$List$concat,
									$author$project$Morphir$SDK$ResultList$keepAllErrors(
										A2(
											$elm$core$List$map,
											function (_v1) {
												var qualifiedName = _v1.a;
												var typeDef = _v1.b;
												return A2($author$project$Morphir$JsonSchema$Backend$mapTypeDefinition, qualifiedName, typeDef);
											},
											A4($author$project$Morphir$JsonSchema$Utils$extractTypes, modName, modDef.value, packageName, packageDefinition)))));
						},
						$elm$core$Dict$toList(packageDefinition.modules)))));
		return A2(
			$elm$core$Result$map,
			function (definitions) {
				return {
					definitions: $elm$core$Dict$fromList(definitions),
					id: 'https://morphir.finos.org/' + (A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toSnakeCase, '-', packageName) + '.schema.json'),
					schemaVersion: 'https://json-schema.org/draft/2020-12/schema'
				};
			},
			schemaTypeDefinitions);
	});
var $author$project$Morphir$JsonSchema$Backend$mapPackageDefinition = F3(
	function (opts, packageName, packageDefinition) {
		return A2(
			$elm$core$Result$map,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Morphir$JsonSchema$PrettyPrinter$encodeSchema,
				$elm$core$Dict$singleton(
					_Utils_Tuple2(
						_List_Nil,
						$elm$core$String$isEmpty(opts.filename) ? (A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', packageName) + '.json') : (opts.filename + '.json')))),
			A2($author$project$Morphir$JsonSchema$Backend$generateSchema, packageName, packageDefinition));
	});
var $author$project$Morphir$JsonSchema$Backend$mapDistribution = F2(
	function (opts, distro) {
		var packageName = distro.a;
		var packageDef = distro.c;
		var _v1 = opts.include;
		if (_v1.$ === 'Just') {
			var strings = _v1.a;
			return A2(
				$elm$core$Result$map,
				A2($elm$core$List$foldl, $elm$core$Dict$union, $elm$core$Dict$empty),
				A2(
					$elm$core$Result$mapError,
					$elm$core$List$concat,
					$author$project$Morphir$SDK$ResultList$keepAllErrors(
						A2(
							$elm$core$List$map,
							function (currentString) {
								return A3($author$project$Morphir$JsonSchema$Backend$generateSchemaByTypeNameOrModuleName, currentString, packageName, packageDef);
							},
							$elm$core$Set$toList(strings)))));
		} else {
			return A3($author$project$Morphir$JsonSchema$Backend$mapPackageDefinition, opts, packageName, packageDef);
		}
	});
var $author$project$Morphir$Scala$Backend$CodecError = function (a) {
	return {$: 'CodecError', a: a};
};
var $author$project$Morphir$Scala$PrettyPrinter$Options = F2(
	function (indentDepth, maxWidth) {
		return {indentDepth: indentDepth, maxWidth: maxWidth};
	});
var $author$project$Morphir$Scala$Backend$TestError = function (a) {
	return {$: 'TestError', a: a};
};
var $author$project$Morphir$Scala$Feature$TestBackend$GenericTest = {$: 'GenericTest'};
var $author$project$Morphir$Scala$Feature$TestBackend$ScalaTest = {$: 'ScalaTest'};
var $author$project$Morphir$Scala$AST$Case = {$: 'Case'};
var $author$project$Morphir$Scala$AST$Class = function (a) {
	return {$: 'Class', a: a};
};
var $author$project$Morphir$Scala$AST$MemberTypeDecl = function (a) {
	return {$: 'MemberTypeDecl', a: a};
};
var $author$project$Morphir$Scala$AST$NamedMatch = function (a) {
	return {$: 'NamedMatch', a: a};
};
var $author$project$Morphir$Scala$AST$Object = function (a) {
	return {$: 'Object', a: a};
};
var $author$project$Morphir$Scala$AST$TypeRef = F2(
	function (a, b) {
		return {$: 'TypeRef', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$ValueDecl = function (a) {
	return {$: 'ValueDecl', a: a};
};
var $author$project$Morphir$Scala$Feature$TestBackend$sdkPath = _List_fromArray(
	['morphir', 'sdk']);
var $author$project$Morphir$Scala$Feature$TestBackend$descriptionField = {
	name: 'description',
	tpe: A2($author$project$Morphir$Scala$AST$TypeRef, $author$project$Morphir$Scala$Feature$TestBackend$sdkPath, 'String.String')
};
var $author$project$Morphir$Scala$AST$TypeVar = function (a) {
	return {$: 'TypeVar', a: a};
};
var $author$project$Morphir$Scala$Feature$TestBackend$inputField = {
	name: 'input',
	tpe: $author$project$Morphir$Scala$AST$TypeVar('Any')
};
var $author$project$Morphir$Scala$Feature$TestBackend$kindToString = function (testKind) {
	if (testKind.$ === 'ScalaTest') {
		return 'ScalaTest';
	} else {
		return 'GenericTest';
	}
};
var $author$project$Morphir$Scala$AST$Apply = F2(
	function (a, b) {
		return {$: 'Apply', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$ArgValue = F2(
	function (a, b) {
		return {$: 'ArgValue', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$Block = F2(
	function (a, b) {
		return {$: 'Block', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$Variable = function (a) {
	return {$: 'Variable', a: a};
};
var $author$project$Morphir$Scala$Feature$TestBackend$applyOneArg = function (target) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Morphir$Scala$AST$ArgValue($elm$core$Maybe$Nothing),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$singleton,
			$author$project$Morphir$Scala$AST$Apply(target)));
};
var $author$project$Morphir$Scala$Feature$TestBackend$outputField = {
	name: 'expectedOutput',
	tpe: $author$project$Morphir$Scala$AST$TypeVar('Any')
};
var $author$project$Morphir$Scala$Feature$TestBackend$scalaVar = $author$project$Morphir$Scala$AST$Variable;
var $author$project$Morphir$Scala$Feature$TestBackend$mapScalaTestCaseToScalaValue = F2(
	function (testKind, scalaTestCase) {
		if (testKind.$ === 'ScalaTest') {
			return A2(
				$author$project$Morphir$Scala$AST$Apply,
				A2(
					$author$project$Morphir$Scala$Feature$TestBackend$applyOneArg,
					$author$project$Morphir$Scala$Feature$TestBackend$scalaVar('test'),
					scalaTestCase.description),
				_List_fromArray(
					[
						A2(
						$author$project$Morphir$Scala$AST$ArgValue,
						$elm$core$Maybe$Nothing,
						A2(
							$author$project$Morphir$Scala$AST$Block,
							_List_Nil,
							A2(
								$author$project$Morphir$Scala$Feature$TestBackend$applyOneArg,
								A2(
									$author$project$Morphir$Scala$Feature$TestBackend$applyOneArg,
									$author$project$Morphir$Scala$Feature$TestBackend$scalaVar('assertResult'),
									scalaTestCase.expectedOutput),
								scalaTestCase.subjectWithInputsApplied)))
					]));
		} else {
			return A2(
				$author$project$Morphir$Scala$AST$Apply,
				$author$project$Morphir$Scala$AST$Variable('TestCase'),
				_List_fromArray(
					[
						A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, scalaTestCase.subjectWithInputsApplied),
						A2(
						$author$project$Morphir$Scala$AST$ArgValue,
						$elm$core$Maybe$Just($author$project$Morphir$Scala$Feature$TestBackend$outputField.name),
						scalaTestCase.expectedOutput),
						A2(
						$author$project$Morphir$Scala$AST$ArgValue,
						$elm$core$Maybe$Just($author$project$Morphir$Scala$Feature$TestBackend$descriptionField.name),
						scalaTestCase.description)
					]));
		}
	});
var $author$project$Morphir$Scala$Feature$TestBackend$mapTestCases = F2(
	function (testKind, scalaTestCases) {
		return A2(
			$elm$core$List$map,
			$author$project$Morphir$Scala$Feature$TestBackend$mapScalaTestCaseToScalaValue(testKind),
			scalaTestCases);
	});
var $author$project$Morphir$Scala$AST$Ref = F2(
	function (a, b) {
		return {$: 'Ref', a: a, b: b};
	});
var $author$project$Morphir$Scala$Feature$TestBackend$scalaList = function (lst) {
	return A2(
		$author$project$Morphir$Scala$AST$Apply,
		A2($author$project$Morphir$Scala$AST$Ref, $author$project$Morphir$Scala$Feature$TestBackend$sdkPath, 'List'),
		A2(
			$elm$core$List$map,
			$author$project$Morphir$Scala$AST$ArgValue($elm$core$Maybe$Nothing),
			lst));
};
var $author$project$Morphir$Scala$Feature$TestBackend$scalaTestPath = _List_fromArray(
	['org', 'scalatest', 'funsuite']);
var $author$project$Morphir$Scala$AST$Annotated = F2(
	function (annotations, value) {
		return {annotations: annotations, value: value};
	});
var $author$project$Morphir$Scala$AST$withoutAnnotation = function (a) {
	return A2($author$project$Morphir$Scala$AST$Annotated, _List_Nil, a);
};
var $author$project$Morphir$Scala$Feature$TestBackend$createTestDecl = F2(
	function (testKind, scalaTestCases) {
		var testCasesValDecl = $author$project$Morphir$Scala$AST$ValueDecl(
			{
				modifiers: _List_Nil,
				pattern: $author$project$Morphir$Scala$AST$NamedMatch('testCases'),
				value: $author$project$Morphir$Scala$Feature$TestBackend$scalaList(
					A2($author$project$Morphir$Scala$Feature$TestBackend$mapTestCases, testKind, scalaTestCases)),
				valueType: $elm$core$Maybe$Nothing
			});
		var testCaseClass = $author$project$Morphir$Scala$AST$MemberTypeDecl(
			$author$project$Morphir$Scala$AST$Class(
				{
					body: _List_Nil,
					ctorArgs: $elm$core$List$singleton(
						A2(
							$elm$core$List$map,
							function (field) {
								return {defaultValue: $elm$core$Maybe$Nothing, modifiers: _List_Nil, name: field.name, tpe: field.tpe};
							},
							_List_fromArray(
								[$author$project$Morphir$Scala$Feature$TestBackend$inputField, $author$project$Morphir$Scala$Feature$TestBackend$outputField, $author$project$Morphir$Scala$Feature$TestBackend$descriptionField]))),
					_extends: _List_Nil,
					members: _List_Nil,
					modifiers: _List_fromArray(
						[$author$project$Morphir$Scala$AST$Case]),
					name: 'TestCase',
					typeArgs: _List_Nil
				}));
		if (testKind.$ === 'ScalaTest') {
			return $author$project$Morphir$Scala$AST$withoutAnnotation(
				$author$project$Morphir$Scala$AST$Class(
					{
						body: A2($author$project$Morphir$Scala$Feature$TestBackend$mapTestCases, testKind, scalaTestCases),
						ctorArgs: _List_Nil,
						_extends: _List_fromArray(
							[
								A2($author$project$Morphir$Scala$AST$TypeRef, $author$project$Morphir$Scala$Feature$TestBackend$scalaTestPath, 'AnyFunSuite')
							]),
						members: _List_Nil,
						modifiers: _List_Nil,
						name: $author$project$Morphir$Scala$Feature$TestBackend$kindToString(testKind),
						typeArgs: _List_Nil
					}));
		} else {
			return $author$project$Morphir$Scala$AST$withoutAnnotation(
				$author$project$Morphir$Scala$AST$Object(
					{
						body: $elm$core$Maybe$Nothing,
						_extends: _List_Nil,
						members: _List_fromArray(
							[
								$author$project$Morphir$Scala$AST$withoutAnnotation(testCaseClass),
								$author$project$Morphir$Scala$AST$withoutAnnotation(testCasesValDecl)
							]),
						modifiers: _List_Nil,
						name: $author$project$Morphir$Scala$Feature$TestBackend$kindToString(testKind)
					}));
		}
	});
var $author$project$Morphir$Scala$AST$Literal = function (a) {
	return {$: 'Literal', a: a};
};
var $author$project$Morphir$Scala$AST$StringLit = function (a) {
	return {$: 'StringLit', a: a};
};
var $author$project$Morphir$Scala$Feature$TestBackend$TestError = function (a) {
	return {$: 'TestError', a: a};
};
var $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName = function (_v0) {
	var packagePath = _v0.a;
	var modulePath = _v0.b;
	var localName = _v0.c;
	var scalaModulePath = function () {
		var _v1 = $elm$core$List$reverse(modulePath);
		if (!_v1.b) {
			return _List_Nil;
		} else {
			var lastName = _v1.a;
			var reverseModulePath = _v1.b;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
						packagePath),
						A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
						$elm$core$List$reverse(reverseModulePath)),
						_List_fromArray(
						[
							$author$project$Morphir$IR$Name$toTitleCase(lastName)
						])
					]));
		}
	}();
	return _Utils_Tuple2(scalaModulePath, localName);
};
var $author$project$Morphir$Scala$AST$BooleanLit = function (a) {
	return {$: 'BooleanLit', a: a};
};
var $author$project$Morphir$Scala$AST$CharacterLit = function (a) {
	return {$: 'CharacterLit', a: a};
};
var $author$project$Morphir$Scala$AST$FloatLit = function (a) {
	return {$: 'FloatLit', a: a};
};
var $author$project$Morphir$Scala$AST$FunctionDecl = function (a) {
	return {$: 'FunctionDecl', a: a};
};
var $author$project$Morphir$Scala$AST$IfElse = F3(
	function (a, b, c) {
		return {$: 'IfElse', a: a, b: b, c: c};
	});
var $author$project$Morphir$Scala$AST$IntegerLit = function (a) {
	return {$: 'IntegerLit', a: a};
};
var $author$project$Morphir$Scala$AST$Lambda = F2(
	function (a, b) {
		return {$: 'Lambda', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$Match = F2(
	function (a, b) {
		return {$: 'Match', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$MatchCases = function (a) {
	return {$: 'MatchCases', a: a};
};
var $author$project$Morphir$Scala$AST$Select = F2(
	function (a, b) {
		return {$: 'Select', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$StructuralValue = function (a) {
	return {$: 'StructuralValue', a: a};
};
var $author$project$Morphir$Scala$AST$Tuple = function (a) {
	return {$: 'Tuple', a: a};
};
var $author$project$Morphir$Scala$AST$TypeAscripted = F2(
	function (a, b) {
		return {$: 'TypeAscripted', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$Unit = {$: 'Unit'};
var $author$project$Morphir$Scala$AST$Wildcard = {$: 'Wildcard'};
var $author$project$Morphir$IR$Value$collectPatternVariables = function (pattern) {
	switch (pattern.$) {
		case 'WildcardPattern':
			return $elm$core$Set$empty;
		case 'AsPattern':
			var subject = pattern.b;
			var name = pattern.c;
			return A2(
				$elm$core$Set$insert,
				name,
				$author$project$Morphir$IR$Value$collectPatternVariables(subject));
		case 'TuplePattern':
			var elemPatterns = pattern.b;
			return A3(
				$elm$core$List$foldl,
				$elm$core$Set$union,
				$elm$core$Set$empty,
				A2($elm$core$List$map, $author$project$Morphir$IR$Value$collectPatternVariables, elemPatterns));
		case 'ConstructorPattern':
			var argPatterns = pattern.c;
			return A3(
				$elm$core$List$foldl,
				$elm$core$Set$union,
				$elm$core$Set$empty,
				A2($elm$core$List$map, $author$project$Morphir$IR$Value$collectPatternVariables, argPatterns));
		case 'EmptyListPattern':
			return $elm$core$Set$empty;
		case 'HeadTailPattern':
			var headPattern = pattern.b;
			var tailPattern = pattern.c;
			return A2(
				$elm$core$Set$union,
				$author$project$Morphir$IR$Value$collectPatternVariables(headPattern),
				$author$project$Morphir$IR$Value$collectPatternVariables(tailPattern));
		case 'LiteralPattern':
			return $elm$core$Set$empty;
		default:
			return $elm$core$Set$empty;
	}
};
var $author$project$Morphir$Scala$AST$AliasedMatch = F2(
	function (a, b) {
		return {$: 'AliasedMatch', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$DecimalLit = function (a) {
	return {$: 'DecimalLit', a: a};
};
var $author$project$Morphir$Scala$AST$EmptyListMatch = {$: 'EmptyListMatch'};
var $author$project$Morphir$Scala$AST$HeadTailMatch = F2(
	function (a, b) {
		return {$: 'HeadTailMatch', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$LiteralMatch = function (a) {
	return {$: 'LiteralMatch', a: a};
};
var $author$project$Morphir$Scala$AST$TupleMatch = function (a) {
	return {$: 'TupleMatch', a: a};
};
var $author$project$Morphir$Scala$AST$UnapplyMatch = F3(
	function (a, b, c) {
		return {$: 'UnapplyMatch', a: a, b: b, c: c};
	});
var $author$project$Morphir$Scala$AST$WildcardMatch = {$: 'WildcardMatch'};
var $author$project$Morphir$Scala$Feature$Core$mapPattern = function (pattern) {
	switch (pattern.$) {
		case 'WildcardPattern':
			var a = pattern.a;
			return $author$project$Morphir$Scala$AST$WildcardMatch;
		case 'AsPattern':
			if (pattern.b.$ === 'WildcardPattern') {
				var a = pattern.a;
				var alias = pattern.c;
				return $author$project$Morphir$Scala$AST$NamedMatch(
					$author$project$Morphir$IR$Name$toCamelCase(alias));
			} else {
				var a = pattern.a;
				var aliasedPattern = pattern.b;
				var alias = pattern.c;
				return A2(
					$author$project$Morphir$Scala$AST$AliasedMatch,
					$author$project$Morphir$IR$Name$toCamelCase(alias),
					$author$project$Morphir$Scala$Feature$Core$mapPattern(aliasedPattern));
			}
		case 'TuplePattern':
			var a = pattern.a;
			var itemPatterns = pattern.b;
			return $author$project$Morphir$Scala$AST$TupleMatch(
				A2($elm$core$List$map, $author$project$Morphir$Scala$Feature$Core$mapPattern, itemPatterns));
		case 'ConstructorPattern':
			var a = pattern.a;
			var fQName = pattern.b;
			var argPatterns = pattern.c;
			var _v1 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(fQName);
			var path = _v1.a;
			var name = _v1.b;
			return A3(
				$author$project$Morphir$Scala$AST$UnapplyMatch,
				path,
				$author$project$Morphir$IR$Name$toTitleCase(name),
				A2($elm$core$List$map, $author$project$Morphir$Scala$Feature$Core$mapPattern, argPatterns));
		case 'EmptyListPattern':
			var a = pattern.a;
			return $author$project$Morphir$Scala$AST$EmptyListMatch;
		case 'HeadTailPattern':
			var a = pattern.a;
			var headPattern = pattern.b;
			var tailPattern = pattern.c;
			return A2(
				$author$project$Morphir$Scala$AST$HeadTailMatch,
				$author$project$Morphir$Scala$Feature$Core$mapPattern(headPattern),
				$author$project$Morphir$Scala$Feature$Core$mapPattern(tailPattern));
		case 'LiteralPattern':
			var a = pattern.a;
			var literal = pattern.b;
			var map = function (l) {
				switch (l.$) {
					case 'BoolLiteral':
						var v = l.a;
						return $author$project$Morphir$Scala$AST$BooleanLit(v);
					case 'CharLiteral':
						var v = l.a;
						return $author$project$Morphir$Scala$AST$CharacterLit(v);
					case 'StringLiteral':
						var v = l.a;
						return $author$project$Morphir$Scala$AST$StringLit(v);
					case 'WholeNumberLiteral':
						var v = l.a;
						return $author$project$Morphir$Scala$AST$IntegerLit(v);
					case 'FloatLiteral':
						var v = l.a;
						return $author$project$Morphir$Scala$AST$FloatLit(v);
					default:
						var v = l.a;
						return $author$project$Morphir$Scala$AST$DecimalLit(v);
				}
			};
			return $author$project$Morphir$Scala$AST$LiteralMatch(
				map(literal));
		default:
			var a = pattern.a;
			return $author$project$Morphir$Scala$AST$WildcardMatch;
	}
};
var $author$project$Morphir$Scala$AST$FunctionType = F2(
	function (a, b) {
		return {$: 'FunctionType', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$StructuralType = function (a) {
	return {$: 'StructuralType', a: a};
};
var $author$project$Morphir$Scala$AST$TupleType = function (a) {
	return {$: 'TupleType', a: a};
};
var $author$project$Morphir$Scala$AST$TypeApply = F2(
	function (a, b) {
		return {$: 'TypeApply', a: a, b: b};
	});
var $author$project$Morphir$Scala$Feature$Core$mapFQNameToTypeRef = function (fQName) {
	var _v0 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(fQName);
	var path = _v0.a;
	var name = _v0.b;
	return A2(
		$author$project$Morphir$Scala$AST$TypeRef,
		path,
		$author$project$Morphir$IR$Name$toTitleCase(name));
};
var $author$project$Morphir$Scala$Common$javaObjectMethods = $elm$core$Set$fromList(
	_List_fromArray(
		['clone', 'equals', 'finalize', 'getClass', 'hashCode', 'notify', 'notifyAll', 'toString', 'wait']));
var $author$project$Morphir$Scala$Common$scalaKeywords = $elm$core$Set$fromList(
	_List_fromArray(
		['abstract', 'case', 'catch', 'class', 'def', 'do', 'else', 'extends', 'false', 'final', 'finally', 'for', 'forSome', 'if', 'implicit', 'import', 'lazy', 'macro', 'match', 'new', 'null', 'object', 'override', 'package', 'private', 'protected', 'return', 'sealed', 'super', 'this', 'throw', 'trait', 'try', 'true', 'type', 'val', 'var', 'while', 'with', 'yield']));
var $author$project$Morphir$Scala$Common$mapValueName = function (name) {
	var scalaName = $author$project$Morphir$IR$Name$toCamelCase(name);
	return (A2($elm$core$Set$member, scalaName, $author$project$Morphir$Scala$Common$scalaKeywords) || A2($elm$core$Set$member, scalaName, $author$project$Morphir$Scala$Common$javaObjectMethods)) ? ('_' + scalaName) : scalaName;
};
var $author$project$Morphir$Scala$Feature$Core$mapType = function (tpe) {
	switch (tpe.$) {
		case 'Variable':
			var a = tpe.a;
			var name = tpe.b;
			return $author$project$Morphir$Scala$AST$TypeVar(
				$author$project$Morphir$IR$Name$toTitleCase(name));
		case 'Reference':
			var a = tpe.a;
			var fQName = tpe.b;
			var argTypes = tpe.c;
			var typeRef = $author$project$Morphir$Scala$Feature$Core$mapFQNameToTypeRef(fQName);
			return $elm$core$List$isEmpty(argTypes) ? typeRef : A2(
				$author$project$Morphir$Scala$AST$TypeApply,
				typeRef,
				A2($elm$core$List$map, $author$project$Morphir$Scala$Feature$Core$mapType, argTypes));
		case 'Tuple':
			var a = tpe.a;
			var elemTypes = tpe.b;
			return $author$project$Morphir$Scala$AST$TupleType(
				A2($elm$core$List$map, $author$project$Morphir$Scala$Feature$Core$mapType, elemTypes));
		case 'Record':
			var a = tpe.a;
			var fields = tpe.b;
			return $author$project$Morphir$Scala$AST$StructuralType(
				A2(
					$elm$core$List$map,
					function (field) {
						return $author$project$Morphir$Scala$AST$FunctionDecl(
							{
								args: _List_Nil,
								body: $elm$core$Maybe$Nothing,
								modifiers: _List_Nil,
								name: $author$project$Morphir$Scala$Common$mapValueName(field.name),
								returnType: $elm$core$Maybe$Just(
									$author$project$Morphir$Scala$Feature$Core$mapType(field.tpe)),
								typeArgs: _List_Nil
							});
					},
					fields));
		case 'ExtensibleRecord':
			var a = tpe.a;
			var argName = tpe.b;
			var fields = tpe.c;
			return $author$project$Morphir$Scala$AST$StructuralType(
				A2(
					$elm$core$List$map,
					function (field) {
						return $author$project$Morphir$Scala$AST$FunctionDecl(
							{
								args: _List_Nil,
								body: $elm$core$Maybe$Nothing,
								modifiers: _List_Nil,
								name: $author$project$Morphir$Scala$Common$mapValueName(field.name),
								returnType: $elm$core$Maybe$Just(
									$author$project$Morphir$Scala$Feature$Core$mapType(field.tpe)),
								typeArgs: _List_Nil
							});
					},
					fields));
		case 'Function':
			var a = tpe.a;
			var argType = tpe.b;
			var returnType = tpe.c;
			return A2(
				$author$project$Morphir$Scala$AST$FunctionType,
				$author$project$Morphir$Scala$Feature$Core$mapType(argType),
				$author$project$Morphir$Scala$Feature$Core$mapType(returnType));
		default:
			var a = tpe.a;
			return A2(
				$author$project$Morphir$Scala$AST$TypeRef,
				_List_fromArray(
					['scala']),
				'Unit');
	}
};
var $author$project$Morphir$IR$Value$uncurryApply = F2(
	function (fun, lastArg) {
		if (fun.$ === 'Apply') {
			var nestedFun = fun.b;
			var nestedArg = fun.c;
			var _v1 = A2($author$project$Morphir$IR$Value$uncurryApply, nestedFun, nestedArg);
			var f = _v1.a;
			var initArgs = _v1.b;
			return _Utils_Tuple2(
				f,
				A2(
					$elm$core$List$append,
					initArgs,
					_List_fromArray(
						[lastArg])));
		} else {
			return _Utils_Tuple2(
				fun,
				_List_fromArray(
					[lastArg]));
		}
	});
var $author$project$Morphir$Scala$Feature$Core$uniqueVarName = F2(
	function (varNamesInUse, hint) {
		var varsInUse = A2($elm$core$Set$map, $author$project$Morphir$Scala$Common$mapValueName, varNamesInUse);
		var firstCandidate = 'a' + $elm$core$String$fromInt(hint);
		var findUnused = F2(
			function (h, i) {
				findUnused:
				while (true) {
					var candidate = 'a' + ($elm$core$String$fromInt(h) + $elm$core$String$fromInt(i));
					if (A2($elm$core$Set$member, candidate, varsInUse)) {
						var $temp$h = h,
							$temp$i = i + 1;
						h = $temp$h;
						i = $temp$i;
						continue findUnused;
					} else {
						return candidate;
					}
				}
			});
		return A2($elm$core$Set$member, firstCandidate, varsInUse) ? A2(findUnused, 0, hint) : firstCandidate;
	});
var $author$project$Morphir$Scala$Feature$Core$curryConstructorArgs = F4(
	function (inScopeVars, constructorType, constructorFQName, constructorArgs) {
		var extractArgTypes = function (tpe) {
			if (tpe.$ === 'Function') {
				var argType = tpe.b;
				var returnType = tpe.c;
				var _v20 = extractArgTypes(returnType);
				var argTypes = _v20.a;
				var finalReturnType = _v20.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, argType, argTypes),
					finalReturnType);
			} else {
				return _Utils_Tuple2(_List_Nil, tpe);
			}
		};
		var _v21 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(constructorFQName);
		var path = _v21.a;
		var name = _v21.b;
		var _v22 = extractArgTypes(constructorType);
		var constructorArgTypes = _v22.a;
		var constructorReturnType = _v22.b;
		var unspecifiedArgs = A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, argType) {
					return _Utils_Tuple2(
						A2($author$project$Morphir$Scala$Feature$Core$uniqueVarName, inScopeVars, index),
						argType);
				}),
			A2(
				$elm$core$List$drop,
				$elm$core$List$length(constructorArgs),
				constructorArgTypes));
		var curryUnspecifiedArgs = F3(
			function (argsToCurry, scalaConstructorValue, scalaArgumentsSpecified) {
				if (argsToCurry.b) {
					var _v24 = argsToCurry.a;
					var firstArgName = _v24.a;
					var firstArgType = _v24.b;
					var restOfArgs = argsToCurry.b;
					return A2(
						$author$project$Morphir$Scala$AST$Lambda,
						_List_fromArray(
							[
								_Utils_Tuple2(
								firstArgName,
								$elm$core$Maybe$Just(
									$author$project$Morphir$Scala$Feature$Core$mapType(firstArgType)))
							]),
						A3(
							curryUnspecifiedArgs,
							restOfArgs,
							scalaConstructorValue,
							_Utils_ap(
								scalaArgumentsSpecified,
								_List_fromArray(
									[
										A2(
										$author$project$Morphir$Scala$AST$ArgValue,
										$elm$core$Maybe$Nothing,
										$author$project$Morphir$Scala$AST$Variable(firstArgName))
									]))));
				} else {
					return A2(
						$author$project$Morphir$Scala$AST$TypeAscripted,
						A2($author$project$Morphir$Scala$AST$Apply, scalaConstructorValue, scalaArgumentsSpecified),
						$author$project$Morphir$Scala$Feature$Core$mapType(constructorReturnType));
				}
			});
		var _v25 = _Utils_Tuple2(constructorArgTypes, unspecifiedArgs);
		if (!_v25.a.b) {
			return A2(
				$author$project$Morphir$Scala$AST$Ref,
				path,
				$author$project$Morphir$IR$Name$toTitleCase(name));
		} else {
			if (((!_v25.a.b.b) && _v25.b.b) && (!_v25.b.b.b)) {
				var _v26 = _v25.a;
				var _v27 = _v25.b;
				return A2(
					$author$project$Morphir$Scala$AST$Ref,
					path,
					$author$project$Morphir$IR$Name$toTitleCase(name));
			} else {
				return A3(
					curryUnspecifiedArgs,
					unspecifiedArgs,
					A2(
						$author$project$Morphir$Scala$AST$Ref,
						path,
						$author$project$Morphir$IR$Name$toTitleCase(name)),
					A2(
						$elm$core$List$map,
						function (arg) {
							return A2(
								$author$project$Morphir$Scala$AST$ArgValue,
								$elm$core$Maybe$Nothing,
								A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, arg));
						},
						constructorArgs));
			}
		}
	});
var $author$project$Morphir$Scala$Feature$Core$mapValue = F2(
	function (inScopeVars, value) {
		switch (value.$) {
			case 'Literal':
				var tpe = value.a;
				var literal = value.b;
				var wrap = F3(
					function (modulePath, moduleName, lit) {
						return A2(
							$author$project$Morphir$Scala$AST$Apply,
							A2($author$project$Morphir$Scala$AST$Ref, modulePath, moduleName),
							_List_fromArray(
								[
									A2(
									$author$project$Morphir$Scala$AST$ArgValue,
									$elm$core$Maybe$Nothing,
									$author$project$Morphir$Scala$AST$Literal(lit))
								]));
					});
				switch (literal.$) {
					case 'BoolLiteral':
						var v = literal.a;
						return $author$project$Morphir$Scala$AST$Literal(
							$author$project$Morphir$Scala$AST$BooleanLit(v));
					case 'CharLiteral':
						var v = literal.a;
						return A3(
							wrap,
							_List_fromArray(
								['morphir', 'sdk', 'Char']),
							'from',
							$author$project$Morphir$Scala$AST$CharacterLit(v));
					case 'StringLiteral':
						var v = literal.a;
						return $author$project$Morphir$Scala$AST$Literal(
							$author$project$Morphir$Scala$AST$StringLit(v));
					case 'WholeNumberLiteral':
						var v = literal.a;
						return A3(
							wrap,
							_List_fromArray(
								['morphir', 'sdk', 'Basics']),
							'Int',
							$author$project$Morphir$Scala$AST$IntegerLit(v));
					case 'FloatLiteral':
						var v = literal.a;
						return A3(
							wrap,
							_List_fromArray(
								['morphir', 'sdk', 'Basics']),
							'Float',
							$author$project$Morphir$Scala$AST$FloatLit(v));
					default:
						return _Debug_todo(
							'Morphir.Scala.Feature.Core',
							{
								start: {line: 475, column: 21},
								end: {line: 475, column: 31}
							})('branch \'DecimalLiteral _\' not implemented');
				}
			case 'Constructor':
				var constructorType = value.a;
				var fQName = value.b;
				return A2(
					$author$project$Morphir$Scala$AST$TypeAscripted,
					A4($author$project$Morphir$Scala$Feature$Core$curryConstructorArgs, inScopeVars, constructorType, fQName, _List_Nil),
					$author$project$Morphir$Scala$Feature$Core$mapType(constructorType));
			case 'Tuple':
				var a = value.a;
				var elemValues = value.b;
				return $author$project$Morphir$Scala$AST$Tuple(
					A2(
						$elm$core$List$map,
						$author$project$Morphir$Scala$Feature$Core$mapValue(inScopeVars),
						elemValues));
			case 'List':
				var a = value.a;
				var itemValues = value.b;
				return A2(
					$author$project$Morphir$Scala$AST$Apply,
					A2(
						$author$project$Morphir$Scala$AST$Ref,
						_List_fromArray(
							['morphir', 'sdk']),
						'List'),
					A2(
						$elm$core$List$map,
						$author$project$Morphir$Scala$AST$ArgValue($elm$core$Maybe$Nothing),
						A2(
							$elm$core$List$map,
							$author$project$Morphir$Scala$Feature$Core$mapValue(inScopeVars),
							itemValues)));
			case 'Record':
				var tpe = value.a;
				var fieldValues = value.b;
				if (tpe.$ === 'Reference') {
					var fQName = tpe.b;
					var typeArgs = tpe.c;
					var _v3 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(fQName);
					var path = _v3.a;
					var name = _v3.b;
					return A2(
						$author$project$Morphir$Scala$AST$Apply,
						A2(
							$author$project$Morphir$Scala$AST$Ref,
							path,
							$author$project$Morphir$IR$Name$toTitleCase(name)),
						A2(
							$elm$core$List$map,
							function (_v4) {
								var fieldName = _v4.a;
								var fieldValue = _v4.b;
								return A2(
									$author$project$Morphir$Scala$AST$ArgValue,
									$elm$core$Maybe$Just(
										$author$project$Morphir$Scala$Common$mapValueName(fieldName)),
									A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, fieldValue));
							},
							$elm$core$Dict$toList(fieldValues)));
				} else {
					return $author$project$Morphir$Scala$AST$StructuralValue(
						A2(
							$elm$core$List$map,
							function (_v5) {
								var fieldName = _v5.a;
								var fieldValue = _v5.b;
								return _Utils_Tuple2(
									$author$project$Morphir$Scala$Common$mapValueName(fieldName),
									A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, fieldValue));
							},
							$elm$core$Dict$toList(fieldValues)));
				}
			case 'Variable':
				var a = value.a;
				var name = value.b;
				return $author$project$Morphir$Scala$AST$Variable(
					$author$project$Morphir$Scala$Common$mapValueName(name));
			case 'Reference':
				var a = value.a;
				var fQName = value.b;
				var _v6 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(fQName);
				var path = _v6.a;
				var name = _v6.b;
				return A2(
					$author$project$Morphir$Scala$AST$Ref,
					path,
					$author$project$Morphir$Scala$Common$mapValueName(name));
			case 'Field':
				var a = value.a;
				var subjectValue = value.b;
				var fieldName = value.c;
				return A2(
					$author$project$Morphir$Scala$AST$Select,
					A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, subjectValue),
					$author$project$Morphir$Scala$Common$mapValueName(fieldName));
			case 'FieldFunction':
				var tpe = value.a;
				var fieldName = value.b;
				if (tpe.$ === 'Function') {
					var inputType = tpe.b;
					return A2(
						$author$project$Morphir$Scala$AST$Lambda,
						_List_fromArray(
							[
								_Utils_Tuple2(
								'x',
								$elm$core$Maybe$Just(
									$author$project$Morphir$Scala$Feature$Core$mapType(inputType)))
							]),
						A2(
							$author$project$Morphir$Scala$AST$Select,
							$author$project$Morphir$Scala$AST$Variable('x'),
							$author$project$Morphir$Scala$Common$mapValueName(fieldName)));
				} else {
					return A2(
						$author$project$Morphir$Scala$AST$Select,
						$author$project$Morphir$Scala$AST$Wildcard,
						$author$project$Morphir$Scala$Common$mapValueName(fieldName));
				}
			case 'Apply':
				var applyType = value.a;
				var applyFun = value.b;
				var applyArg = value.c;
				var _v8 = A2($author$project$Morphir$IR$Value$uncurryApply, applyFun, applyArg);
				var bottomFun = _v8.a;
				var args = _v8.b;
				if (bottomFun.$ === 'Constructor') {
					var constructorType = bottomFun.a;
					var fQName = bottomFun.b;
					return A4($author$project$Morphir$Scala$Feature$Core$curryConstructorArgs, inScopeVars, constructorType, fQName, args);
				} else {
					return A2(
						$author$project$Morphir$Scala$AST$Apply,
						A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, applyFun),
						_List_fromArray(
							[
								A2(
								$author$project$Morphir$Scala$AST$ArgValue,
								$elm$core$Maybe$Nothing,
								A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, applyArg))
							]));
				}
			case 'Lambda':
				var lambdaType = value.a;
				var argPattern = value.b;
				var bodyValue = value.c;
				var newInScopeVars = A2(
					$elm$core$Set$union,
					$author$project$Morphir$IR$Value$collectPatternVariables(argPattern),
					inScopeVars);
				if ((argPattern.$ === 'AsPattern') && (argPattern.b.$ === 'WildcardPattern')) {
					var tpe = argPattern.a;
					var alias = argPattern.c;
					return A2(
						$author$project$Morphir$Scala$AST$Lambda,
						_List_fromArray(
							[
								_Utils_Tuple2(
								$author$project$Morphir$Scala$Common$mapValueName(alias),
								$elm$core$Maybe$Just(
									$author$project$Morphir$Scala$Feature$Core$mapType(tpe)))
							]),
						A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, bodyValue));
				} else {
					return A2(
						$author$project$Morphir$Scala$AST$TypeAscripted,
						$author$project$Morphir$Scala$AST$MatchCases(
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Morphir$Scala$Feature$Core$mapPattern(argPattern),
									A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, bodyValue))
								])),
						$author$project$Morphir$Scala$Feature$Core$mapType(lambdaType));
				}
			case 'LetDefinition':
				var flattenLetDef = function (v) {
					if (v.$ === 'LetDefinition') {
						var a = v.a;
						var dName = v.b;
						var d = v.c;
						var inV = v.d;
						var _v12 = flattenLetDef(inV);
						var nestedDefs = _v12.a;
						var nestedInValue = _v12.b;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(dName, d),
								nestedDefs),
							nestedInValue);
					} else {
						return _Utils_Tuple2(_List_Nil, v);
					}
				};
				var _v13 = flattenLetDef(value);
				var defs = _v13.a;
				var finalInValue = _v13.b;
				var newInScopeVars = A2(
					$elm$core$Set$union,
					$elm$core$Set$fromList(
						A2($elm$core$List$map, $elm$core$Tuple$first, defs)),
					inScopeVars);
				return A2(
					$author$project$Morphir$Scala$AST$Block,
					A2(
						$elm$core$List$map,
						function (_v14) {
							var defName = _v14.a;
							var def = _v14.b;
							return $elm$core$List$isEmpty(def.inputTypes) ? $author$project$Morphir$Scala$AST$ValueDecl(
								{
									modifiers: _List_Nil,
									pattern: $author$project$Morphir$Scala$AST$NamedMatch(
										$author$project$Morphir$Scala$Common$mapValueName(defName)),
									value: A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, def.body),
									valueType: $elm$core$Maybe$Just(
										$author$project$Morphir$Scala$Feature$Core$mapType(def.outputType))
								}) : $author$project$Morphir$Scala$AST$FunctionDecl(
								{
									args: A2(
										$elm$core$List$map,
										function (_v15) {
											var argName = _v15.a;
											var argType = _v15.c;
											return _List_fromArray(
												[
													{
													defaultValue: $elm$core$Maybe$Nothing,
													modifiers: _List_Nil,
													name: $author$project$Morphir$IR$Name$toCamelCase(argName),
													tpe: $author$project$Morphir$Scala$Feature$Core$mapType(argType)
												}
												]);
										},
										def.inputTypes),
									body: $elm$core$Maybe$Just(
										A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, def.body)),
									modifiers: _List_Nil,
									name: $author$project$Morphir$Scala$Common$mapValueName(defName),
									returnType: $elm$core$Maybe$Just(
										$author$project$Morphir$Scala$Feature$Core$mapType(def.outputType)),
									typeArgs: _List_Nil
								});
						},
						defs),
					A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, finalInValue));
			case 'LetRecursion':
				var a = value.a;
				var defs = value.b;
				var inValue = value.c;
				var newInScopeVars = A2(
					$elm$core$Set$union,
					$elm$core$Set$fromList(
						$elm$core$Dict$keys(defs)),
					inScopeVars);
				return A2(
					$author$project$Morphir$Scala$AST$Block,
					A2(
						$elm$core$List$map,
						function (_v16) {
							var defName = _v16.a;
							var def = _v16.b;
							return $author$project$Morphir$Scala$AST$FunctionDecl(
								{
									args: $elm$core$List$isEmpty(def.inputTypes) ? _List_Nil : _List_fromArray(
										[
											A2(
											$elm$core$List$map,
											function (_v17) {
												var argName = _v17.a;
												var argType = _v17.c;
												return {
													defaultValue: $elm$core$Maybe$Nothing,
													modifiers: _List_Nil,
													name: $author$project$Morphir$IR$Name$toCamelCase(argName),
													tpe: $author$project$Morphir$Scala$Feature$Core$mapType(argType)
												};
											},
											def.inputTypes)
										]),
									body: $elm$core$Maybe$Just(
										A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, def.body)),
									modifiers: _List_Nil,
									name: $author$project$Morphir$Scala$Common$mapValueName(defName),
									returnType: $elm$core$Maybe$Just(
										$author$project$Morphir$Scala$Feature$Core$mapType(def.outputType)),
									typeArgs: _List_Nil
								});
						},
						$elm$core$Dict$toList(defs)),
					A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, inValue));
			case 'Destructure':
				var bindPattern = value.b;
				var bindValue = value.c;
				var inValue = value.d;
				var newInScopeVars = A2(
					$elm$core$Set$union,
					$author$project$Morphir$IR$Value$collectPatternVariables(bindPattern),
					inScopeVars);
				return A2(
					$author$project$Morphir$Scala$AST$Block,
					_List_fromArray(
						[
							$author$project$Morphir$Scala$AST$ValueDecl(
							{
								modifiers: _List_Nil,
								pattern: $author$project$Morphir$Scala$Feature$Core$mapPattern(bindPattern),
								value: A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, bindValue),
								valueType: $elm$core$Maybe$Nothing
							})
						]),
					A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, inValue));
			case 'IfThenElse':
				var a = value.a;
				var condValue = value.b;
				var thenValue = value.c;
				var elseValue = value.d;
				return A3(
					$author$project$Morphir$Scala$AST$IfElse,
					A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, condValue),
					A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, thenValue),
					A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, elseValue));
			case 'PatternMatch':
				var a = value.a;
				var onValue = value.b;
				var cases = value.c;
				return A2(
					$author$project$Morphir$Scala$AST$Match,
					A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, onValue),
					$author$project$Morphir$Scala$AST$MatchCases(
						A2(
							$elm$core$List$map,
							function (_v18) {
								var casePattern = _v18.a;
								var caseValue = _v18.b;
								var newInScopeVars = A2(
									$elm$core$Set$union,
									$author$project$Morphir$IR$Value$collectPatternVariables(casePattern),
									inScopeVars);
								return _Utils_Tuple2(
									$author$project$Morphir$Scala$Feature$Core$mapPattern(casePattern),
									A2($author$project$Morphir$Scala$Feature$Core$mapValue, newInScopeVars, caseValue));
							},
							cases)));
			case 'UpdateRecord':
				var a = value.a;
				var subjectValue = value.b;
				var fieldUpdates = value.c;
				return A2(
					$author$project$Morphir$Scala$AST$Apply,
					A2(
						$author$project$Morphir$Scala$AST$Select,
						A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, subjectValue),
						'copy'),
					$elm$core$Dict$values(
						A2(
							$elm$core$Dict$map,
							F2(
								function (fieldName, fieldValue) {
									return A2(
										$author$project$Morphir$Scala$AST$ArgValue,
										$elm$core$Maybe$Just(
											$author$project$Morphir$Scala$Common$mapValueName(fieldName)),
										A2($author$project$Morphir$Scala$Feature$Core$mapValue, inScopeVars, fieldValue));
								}),
							fieldUpdates)));
			default:
				var a = value.a;
				return $author$project$Morphir$Scala$AST$Unit;
		}
	});
var $author$project$Morphir$Scala$Feature$TestBackend$InferenceError = function (a) {
	return {$: 'InferenceError', a: a};
};
var $author$project$Morphir$Scala$Feature$TestBackend$rawValueToTypedValue = F3(
	function (ir, valueType, rawValue) {
		var mapInferResult = function (res) {
			return A2(
				$elm$core$Result$mapError,
				$author$project$Morphir$Scala$Feature$TestBackend$InferenceError,
				A2(
					$elm$core$Result$map,
					A2($author$project$Morphir$IR$Value$mapValueAttributes, $elm$core$Basics$identity, $elm$core$Tuple$second),
					res));
		};
		if (valueType.$ === 'Just') {
			var tpe = valueType.a;
			var valDef = {body: rawValue, inputTypes: _List_Nil, outputType: tpe};
			return mapInferResult(
				A2(
					$elm$core$Result$map,
					function ($) {
						return $.body;
					},
					A2($author$project$Morphir$Type$Infer$inferValueDefinition, ir, valDef)));
		} else {
			return mapInferResult(
				A2($author$project$Morphir$Type$Infer$inferValue, ir, rawValue));
		}
	});
var $author$project$Morphir$Scala$Feature$TestBackend$valueRef = function (fqn) {
	return A2($author$project$Morphir$IR$Value$Reference, _Utils_Tuple0, fqn);
};
var $author$project$Morphir$Scala$Feature$TestBackend$morphirTestCaseToScalaTestCase = F2(
	function (ir, fullySpecifiedMorphirTestCases) {
		var mapper = F2(
			function (count, _v2) {
				var fqn = _v2.a;
				var testCase = _v2.b;
				var valueSpecResult = A2(
					$elm$core$Result$fromMaybe,
					$author$project$Morphir$Scala$Feature$TestBackend$TestError(
						'Could not find a function with FQN: ' + $author$project$Morphir$IR$FQName$toString(fqn)),
					A2($author$project$Morphir$IR$lookupValueSpecification, fqn, ir));
				var toScalaVal = F2(
					function (maybeTpe, val) {
						return A2(
							$elm$core$Result$map,
							$author$project$Morphir$Scala$Feature$Core$mapValue($elm$core$Set$empty),
							A3($author$project$Morphir$Scala$Feature$TestBackend$rawValueToTypedValue, ir, maybeTpe, val));
					});
				var descriptionScalaValue = function () {
					var _v1 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(fqn);
					var path = _v1.a;
					var name = _v1.b;
					return $author$project$Morphir$Scala$AST$Literal(
						$author$project$Morphir$Scala$AST$StringLit(
							$elm$core$String$concat(
								_List_fromArray(
									[
										A2($elm$core$String$join, '.', path),
										'.',
										$author$project$Morphir$IR$Name$toCamelCase(name),
										' test' + $elm$core$String$fromInt(count),
										(testCase.description === '') ? '' : (' : ' + testCase.description)
									]))));
				}();
				var applyArgsOnRef = F2(
					function (args, appliedSoFar) {
						if (!args.b) {
							return appliedSoFar;
						} else {
							var nextArg = args.a;
							var otherArgs = args.b;
							return A2(
								applyArgsOnRef,
								otherArgs,
								A3($author$project$Morphir$IR$Value$Apply, _Utils_Tuple0, appliedSoFar, nextArg));
						}
					});
				return A3(
					$elm$core$Result$map2,
					F2(
						function (input, output) {
							return {description: descriptionScalaValue, expectedOutput: output, subjectWithInputsApplied: input};
						}),
					A2(
						toScalaVal,
						$elm$core$Maybe$Nothing,
						A2(
							applyArgsOnRef,
							testCase.inputs,
							$author$project$Morphir$Scala$Feature$TestBackend$valueRef(fqn))),
					A2(
						$elm$core$Result$andThen,
						function (valSpec) {
							return A2(
								toScalaVal,
								$elm$core$Maybe$Just(valSpec.output),
								testCase.expectedOutput);
						},
						valueSpecResult));
			});
		return $author$project$Morphir$SDK$ResultList$keepFirstError(
			A2($elm$core$List$indexedMap, mapper, fullySpecifiedMorphirTestCases));
	});
var $author$project$Morphir$Scala$Feature$TestBackend$splitTestSuite = function (morphirTestSuite) {
	var allInputsSpecified = A2(
		$elm$core$Basics$composeL,
		$elm$core$List$all(
			function (i) {
				return !_Utils_eq(i, $elm$core$Maybe$Nothing);
			}),
		function ($) {
			return $.inputs;
		});
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, testCaseGroups) {
				var fqn = _v0.a;
				var allTestCases = _v0.b;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (testCase, _v1) {
							var fullySpecifiedTestCases = _v1.a;
							var partiallySpecifiedTestCases = _v1.b;
							return allInputsSpecified(testCase) ? _Utils_Tuple2(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										fqn,
										{
											description: testCase.description,
											expectedOutput: testCase.expectedOutput,
											inputs: A2($elm$core$List$filterMap, $elm$core$Basics$identity, testCase.inputs)
										}),
									fullySpecifiedTestCases),
								partiallySpecifiedTestCases) : _Utils_Tuple2(
								fullySpecifiedTestCases,
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(fqn, testCase),
									partiallySpecifiedTestCases));
						}),
					testCaseGroups,
					allTestCases);
			}),
		_Utils_Tuple2(_List_Nil, _List_Nil),
		$elm$core$Dict$toList(morphirTestSuite));
};
var $author$project$Morphir$Scala$Feature$TestBackend$genTestSuite = F4(
	function (opts, packageName, ir, morphirTestSuite) {
		var testsToGenerate = _List_fromArray(
			[
				_Utils_Tuple2($author$project$Morphir$Scala$Feature$TestBackend$GenericTest, opts.includeGenericTests),
				_Utils_Tuple2($author$project$Morphir$Scala$Feature$TestBackend$ScalaTest, opts.includeScalaTests)
			]);
		var _v0 = $author$project$Morphir$Scala$Feature$TestBackend$splitTestSuite(morphirTestSuite);
		var fullySpecifiedTestCases = _v0.a;
		var scalaTestCasesResult = A2($author$project$Morphir$Scala$Feature$TestBackend$morphirTestCaseToScalaTestCase, ir, fullySpecifiedTestCases);
		return $author$project$Morphir$SDK$ResultList$keepAllErrors(
			A2(
				$elm$core$List$filterMap,
				function (_v1) {
					var kind = _v1.a;
					var shouldGenerateForKind = _v1.b;
					return shouldGenerateForKind ? $elm$core$Maybe$Just(
						A2(
							$elm$core$Result$map,
							function (scalaTestCases) {
								return {
									dirPath: $elm$core$List$concat(
										_List_fromArray(
											[
												A2(
												$elm$core$List$map,
												A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
												packageName),
												_List_fromArray(
												['_morphirtests'])
											])),
									fileName: $author$project$Morphir$Scala$Feature$TestBackend$kindToString(kind) + '.scala',
									imports: _List_Nil,
									packageDecl: _List_fromArray(
										[
											A3(
											$author$project$Morphir$IR$Path$toString,
											A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $elm$core$String$toLower),
											'.',
											packageName),
											'_morphirtests'
										]),
									typeDecls: _List_fromArray(
										[
											A2(
											$author$project$Morphir$Scala$AST$Documented,
											$elm$core$Maybe$Just('Generated based on morphir-tests.json'),
											A2($author$project$Morphir$Scala$Feature$TestBackend$createTestDecl, kind, scalaTestCases))
										])
								};
							},
							scalaTestCasesResult)) : $elm$core$Maybe$Nothing;
				},
				testsToGenerate));
	});
var $author$project$Morphir$File$SourceCode$dot = '.';
var $author$project$Morphir$File$SourceCode$dotSep = function (parts) {
	return A2($elm$core$String$join, $author$project$Morphir$File$SourceCode$dot, parts);
};
var $author$project$Morphir$Scala$PrettyPrinter$mapAnnotated = F2(
	function (valueToDoc, annotated) {
		var _v0 = annotated.annotations;
		if (!_v0.b) {
			return valueToDoc(annotated.value);
		} else {
			var annotations = _v0;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$File$SourceCode$dotSep(annotations),
						$author$project$Morphir$File$SourceCode$newLine,
						valueToDoc(annotated.value),
						$author$project$Morphir$File$SourceCode$newLine
					]));
		}
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapDocumented = F2(
	function (valueToDoc, documented) {
		var _v0 = documented.doc;
		if (_v0.$ === 'Just') {
			var doc = _v0.a;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							['/** ', doc, $author$project$Morphir$File$SourceCode$newLine])),
						$author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							['*/', $author$project$Morphir$File$SourceCode$newLine])),
						valueToDoc(documented.value)
					]));
		} else {
			return valueToDoc(documented.value);
		}
	});
var $author$project$Morphir$File$SourceCode$indent = F2(
	function (depth, string) {
		return A2(
			$author$project$Morphir$File$SourceCode$indentLines,
			depth,
			$elm$core$String$lines(string));
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapLit = function (lit) {
	switch (lit.$) {
		case 'BooleanLit':
			var bool = lit.a;
			return bool ? 'true' : 'false';
		case 'CharacterLit':
			var _char = lit.a;
			return '\'' + ($elm$core$String$fromChar(_char) + '\'');
		case 'StringLit':
			var string = lit.a;
			return '\"' + (string + '\"');
		case 'IntegerLit':
			var _int = lit.a;
			return $elm$core$String$fromInt(_int);
		case 'FloatLit':
			var _float = lit.a;
			return $elm$core$String$fromFloat(_float);
		default:
			var decimal = lit.a;
			return $chain_partners$elm_bignum$Decimal$toString(decimal);
	}
};
var $author$project$Morphir$Scala$PrettyPrinter$mapModifier = function (mod) {
	switch (mod.$) {
		case 'Sealed':
			return 'sealed';
		case 'Final':
			return 'final';
		case 'Case':
			return 'case';
		case 'Val':
			return 'val';
		case 'Package':
			return 'package';
		case 'Implicit':
			return 'implicit';
		case 'Abstract':
			return 'abstract';
		default:
			var maybeScope = mod.a;
			if (maybeScope.$ === 'Just') {
				var scope = maybeScope.a;
				return $author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						['private[', scope, ']']));
			} else {
				return 'private';
			}
	}
};
var $author$project$Morphir$Scala$PrettyPrinter$mapModifiers = function (mods) {
	if (!mods.b) {
		return $author$project$Morphir$File$SourceCode$empty;
	} else {
		return _Utils_ap(
			A2(
				$elm$core$String$join,
				$author$project$Morphir$File$SourceCode$space,
				A2($elm$core$List$map, $author$project$Morphir$Scala$PrettyPrinter$mapModifier, mods)),
			$author$project$Morphir$File$SourceCode$space);
	}
};
var $author$project$Morphir$File$SourceCode$parens = function (string) {
	return $elm$core$String$concat(
		_List_fromArray(
			['(', string, ')']));
};
var $author$project$Morphir$Scala$Common$prefixKeyword = function (word) {
	return A2($elm$core$Set$member, word, $author$project$Morphir$Scala$Common$scalaKeywords) ? ('_' + word) : word;
};
var $author$project$Morphir$Scala$Common$prefixKeywords = function (strings) {
	return A2($elm$core$List$map, $author$project$Morphir$Scala$Common$prefixKeyword, strings);
};
var $author$project$Morphir$Scala$PrettyPrinter$mapPattern = function (pattern) {
	switch (pattern.$) {
		case 'WildcardMatch':
			return '_';
		case 'NamedMatch':
			var name = pattern.a;
			return $author$project$Morphir$Scala$Common$prefixKeyword(name);
		case 'AliasedMatch':
			var name = pattern.a;
			var aliasedPattern = pattern.b;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$Scala$Common$prefixKeyword(name),
						' @ ',
						$author$project$Morphir$Scala$PrettyPrinter$mapPattern(aliasedPattern)
					]));
		case 'LiteralMatch':
			var lit = pattern.a;
			return $author$project$Morphir$Scala$PrettyPrinter$mapLit(lit);
		case 'UnapplyMatch':
			var path = pattern.a;
			var name = pattern.b;
			var argPatterns = pattern.c;
			var argsDoc = function () {
				if (!argPatterns.b) {
					return $author$project$Morphir$File$SourceCode$empty;
				} else {
					return $author$project$Morphir$File$SourceCode$parens(
						$author$project$Morphir$File$SourceCode$concat(
							A2(
								$elm$core$List$intersperse,
								', ',
								A2($elm$core$List$map, $author$project$Morphir$Scala$PrettyPrinter$mapPattern, argPatterns))));
				}
			}();
			return _Utils_ap(
				$author$project$Morphir$File$SourceCode$dotSep(
					$author$project$Morphir$Scala$Common$prefixKeywords(
						_Utils_ap(
							path,
							_List_fromArray(
								[name])))),
				argsDoc);
		case 'TupleMatch':
			var elemPatterns = pattern.a;
			return $author$project$Morphir$File$SourceCode$parens(
				$author$project$Morphir$File$SourceCode$concat(
					A2(
						$elm$core$List$intersperse,
						', ',
						A2($elm$core$List$map, $author$project$Morphir$Scala$PrettyPrinter$mapPattern, elemPatterns))));
		case 'EmptyListMatch':
			return 'Nil';
		case 'HeadTailMatch':
			var headPattern = pattern.a;
			var tailPattern = pattern.b;
			return $author$project$Morphir$Scala$PrettyPrinter$mapPattern(headPattern) + (' :: ' + $author$project$Morphir$Scala$PrettyPrinter$mapPattern(tailPattern));
		default:
			var childPattern = pattern.a;
			var message = pattern.b;
			return $author$project$Morphir$Scala$PrettyPrinter$mapPattern(childPattern) + (' /* ' + (message + ' */ '));
	}
};
var $author$project$Morphir$Scala$PrettyPrinter$matchBlock = F2(
	function (opt, statements) {
		return $author$project$Morphir$File$SourceCode$concat(
			_List_fromArray(
				[
					'{',
					$author$project$Morphir$File$SourceCode$newLine,
					A2(
					$author$project$Morphir$File$SourceCode$indentLines,
					opt.indentDepth,
					A2(
						$elm$core$List$map,
						function (_v0) {
							var pattern = _v0.a;
							var value = _v0.b;
							return $author$project$Morphir$File$SourceCode$concat(
								_List_fromArray(
									[
										$author$project$Morphir$File$SourceCode$concat(
										_List_fromArray(
											['case ', pattern, ' => ', $author$project$Morphir$File$SourceCode$newLine])),
										A2($author$project$Morphir$File$SourceCode$indent, opt.indentDepth, value)
									]));
						},
						statements)),
					$author$project$Morphir$File$SourceCode$newLine,
					'}'
				]));
	});
var $author$project$Morphir$Scala$PrettyPrinter$statementBlock = F2(
	function (opt, statements) {
		return $author$project$Morphir$File$SourceCode$concat(
			_List_fromArray(
				[
					'{',
					$author$project$Morphir$File$SourceCode$newLine,
					A2($author$project$Morphir$File$SourceCode$indentLines, opt.indentDepth, statements),
					$author$project$Morphir$File$SourceCode$newLine,
					'}'
				]));
	});
var $author$project$Morphir$Scala$PrettyPrinter$argValueBlock = F2(
	function (opt, argValues) {
		var mapArgValue = function (_v25) {
			var name = _v25.a;
			var value = _v25.b;
			if (name.$ === 'Just') {
				var argName = name.a;
				return argName + (' = ' + A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, value));
			} else {
				return A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, value);
			}
		};
		if (argValues.b && (!argValues.b.b)) {
			var singleArgValue = argValues.a;
			return $author$project$Morphir$File$SourceCode$parens(
				mapArgValue(singleArgValue));
		} else {
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'(',
						$author$project$Morphir$File$SourceCode$newLine,
						A2(
						$author$project$Morphir$File$SourceCode$indentLines,
						opt.indentDepth,
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (index, argValue) {
									return _Utils_eq(
										index + 1,
										$elm$core$List$length(argValues)) ? mapArgValue(argValue) : $author$project$Morphir$File$SourceCode$concat(
										_List_fromArray(
											[
												mapArgValue(argValue),
												','
											]));
								}),
							argValues)),
						$author$project$Morphir$File$SourceCode$newLine,
						')'
					]));
		}
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapArgDecl = F2(
	function (opt, argDecl) {
		var defaultValueDoc = function () {
			var _v22 = argDecl.defaultValue;
			if (_v22.$ === 'Just') {
				var value = _v22.a;
				return ' = ' + A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, value);
			} else {
				return $author$project$Morphir$File$SourceCode$empty;
			}
		}();
		return $author$project$Morphir$Scala$PrettyPrinter$mapModifiers(argDecl.modifiers) + (argDecl.name + (': ' + (A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, argDecl.tpe) + defaultValueDoc)));
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapArgDecls = F2(
	function (opt, argDecls) {
		return '(' + ($author$project$Morphir$File$SourceCode$newLine + (A2(
			$author$project$Morphir$File$SourceCode$indent,
			opt.indentDepth,
			$author$project$Morphir$File$SourceCode$concat(
				A2(
					$elm$core$List$intersperse,
					',' + $author$project$Morphir$File$SourceCode$newLine,
					A2(
						$elm$core$List$map,
						$author$project$Morphir$Scala$PrettyPrinter$mapArgDecl(opt),
						argDecls)))) + ($author$project$Morphir$File$SourceCode$newLine + ')')));
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapExtends = F2(
	function (opt, types) {
		if (!types.b) {
			return $author$project$Morphir$File$SourceCode$empty;
		} else {
			return ' extends ' + $author$project$Morphir$File$SourceCode$concat(
				A2(
					$elm$core$List$intersperse,
					' with ',
					A2(
						$elm$core$List$map,
						$author$project$Morphir$Scala$PrettyPrinter$mapType(opt),
						types)));
		}
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapMemberDecl = F2(
	function (opt, memberDecl) {
		switch (memberDecl.$) {
			case 'TypeAlias':
				var typeAlias = memberDecl.a;
				return 'type ' + (typeAlias.alias + (A2($author$project$Morphir$Scala$PrettyPrinter$mapTypeArgs, opt, typeAlias.typeArgs) + (' = ' + A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, typeAlias.tpe))));
			case 'ValueDecl':
				var decl = memberDecl.a;
				return $author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						[
							$author$project$Morphir$Scala$PrettyPrinter$mapModifiers(decl.modifiers),
							'val ',
							$author$project$Morphir$Scala$PrettyPrinter$mapPattern(decl.pattern),
							function () {
							var _v17 = decl.valueType;
							if (_v17.$ === 'Just') {
								var tpe = _v17.a;
								return $author$project$Morphir$File$SourceCode$concat(
									_List_fromArray(
										[
											': ',
											A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, tpe)
										]));
							} else {
								return $author$project$Morphir$File$SourceCode$empty;
							}
						}(),
							' = ',
							A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, decl.value)
						]));
			case 'FunctionDecl':
				var decl = memberDecl.a;
				var returnTypeDoc = function () {
					var _v20 = decl.returnType;
					if (_v20.$ === 'Just') {
						var tpe = _v20.a;
						return ': ' + A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, tpe);
					} else {
						return $author$project$Morphir$File$SourceCode$empty;
					}
				}();
				var modifierDoc = $author$project$Morphir$Scala$PrettyPrinter$mapModifiers(decl.modifiers);
				var bodyDoc = function () {
					var _v19 = decl.body;
					if (_v19.$ === 'Just') {
						if (_v19.a.$ === 'Block') {
							var value = _v19.a;
							return ' = ' + A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, value);
						} else {
							var value = _v19.a;
							return ' =' + ($author$project$Morphir$File$SourceCode$newLine + A2(
								$author$project$Morphir$File$SourceCode$indent,
								opt.indentDepth,
								A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, value)));
						}
					} else {
						return $author$project$Morphir$File$SourceCode$empty;
					}
				}();
				var argsDoc = function () {
					var _v18 = decl.args;
					if (!_v18.b) {
						return $author$project$Morphir$File$SourceCode$empty;
					} else {
						return $author$project$Morphir$File$SourceCode$concat(
							A2(
								$elm$core$List$map,
								$author$project$Morphir$Scala$PrettyPrinter$mapArgDecls(opt),
								decl.args));
					}
				}();
				return modifierDoc + ('def ' + (decl.name + (A2($author$project$Morphir$Scala$PrettyPrinter$mapTypeArgs, opt, decl.typeArgs) + (argsDoc + (returnTypeDoc + bodyDoc)))));
			default:
				var decl = memberDecl.a;
				return A2($author$project$Morphir$Scala$PrettyPrinter$mapTypeDecl, opt, decl);
		}
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapType = F2(
	function (opt, tpe) {
		switch (tpe.$) {
			case 'TypeVar':
				var name = tpe.a;
				return name;
			case 'TypeRef':
				var path = tpe.a;
				var name = tpe.b;
				return $author$project$Morphir$File$SourceCode$dotSep(
					_Utils_ap(
						path,
						_List_fromArray(
							[name])));
			case 'TypeOfValue':
				var path = tpe.a;
				return $author$project$Morphir$File$SourceCode$dotSep(
					_Utils_ap(
						path,
						_List_fromArray(
							['type '])));
			case 'TypeApply':
				var ctor = tpe.a;
				var args = tpe.b;
				return A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, ctor) + ('[' + ($author$project$Morphir$File$SourceCode$concat(
					A2(
						$elm$core$List$intersperse,
						', ',
						A2(
							$elm$core$List$map,
							$author$project$Morphir$Scala$PrettyPrinter$mapType(opt),
							args))) + ']'));
			case 'TupleType':
				var elemTypes = tpe.a;
				return $author$project$Morphir$File$SourceCode$parens(
					$author$project$Morphir$File$SourceCode$concat(
						A2(
							$elm$core$List$intersperse,
							', ',
							A2(
								$elm$core$List$map,
								$author$project$Morphir$Scala$PrettyPrinter$mapType(opt),
								elemTypes))));
			case 'StructuralType':
				var memberDecls = tpe.a;
				return $elm$core$List$isEmpty(memberDecls) ? '{}' : $author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						[
							'{ ',
							$author$project$Morphir$File$SourceCode$concat(
							A2(
								$elm$core$List$intersperse,
								'; ',
								A2(
									$elm$core$List$map,
									$author$project$Morphir$Scala$PrettyPrinter$mapMemberDecl(opt),
									memberDecls))),
							' }'
						]));
			case 'FunctionType':
				var argType = tpe.a;
				var returnType = tpe.b;
				return function () {
					switch (argType.$) {
						case 'TupleType':
							return $author$project$Morphir$File$SourceCode$parens(
								A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, argType));
						case 'FunctionType':
							return $author$project$Morphir$File$SourceCode$parens(
								A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, argType));
						default:
							return A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, argType);
					}
				}() + (' => ' + A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, returnType));
			case 'TypeParametrized':
				var ctor = tpe.a;
				var args = tpe.b;
				var params = tpe.c;
				return A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, ctor) + ($author$project$Morphir$File$SourceCode$newLine + ('[' + ($author$project$Morphir$File$SourceCode$concat(
					A2(
						$elm$core$List$intersperse,
						', ' + $author$project$Morphir$File$SourceCode$newLine,
						A2(
							$elm$core$List$map,
							$author$project$Morphir$Scala$PrettyPrinter$mapType(opt),
							args))) + ('](' + (A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, params) + ')')))));
			default:
				var childType = tpe.a;
				var message = tpe.b;
				return A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, childType) + (' /* ' + (message + ' */ '));
		}
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapTypeArgs = F2(
	function (opt, typeArgs) {
		if (!typeArgs.b) {
			return $author$project$Morphir$File$SourceCode$empty;
		} else {
			var types = typeArgs;
			return '[' + ($author$project$Morphir$File$SourceCode$concat(
				A2(
					$elm$core$List$intersperse,
					', ',
					A2(
						$elm$core$List$map,
						$author$project$Morphir$Scala$PrettyPrinter$mapType(opt),
						types))) + ']');
		}
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapTypeDecl = F2(
	function (opt, typeDecl) {
		switch (typeDecl.$) {
			case 'Trait':
				var decl = typeDecl.a;
				var body = ' {' + ($author$project$Morphir$File$SourceCode$newLine + ($author$project$Morphir$File$SourceCode$newLine + (A2(
					$author$project$Morphir$File$SourceCode$indent,
					opt.indentDepth,
					$author$project$Morphir$File$SourceCode$concat(
						A2(
							$elm$core$List$intersperse,
							_Utils_ap($author$project$Morphir$File$SourceCode$newLine, $author$project$Morphir$File$SourceCode$newLine),
							A2(
								$elm$core$List$map,
								$author$project$Morphir$Scala$PrettyPrinter$mapAnnotated(
									$author$project$Morphir$Scala$PrettyPrinter$mapMemberDecl(opt)),
								decl.members)))) + ($author$project$Morphir$File$SourceCode$newLine + ($author$project$Morphir$File$SourceCode$newLine + '}')))));
				return $author$project$Morphir$Scala$PrettyPrinter$mapModifiers(decl.modifiers) + ('trait ' + (decl.name + (A2($author$project$Morphir$Scala$PrettyPrinter$mapTypeArgs, opt, decl.typeArgs) + (A2($author$project$Morphir$Scala$PrettyPrinter$mapExtends, opt, decl._extends) + body))));
			case 'Class':
				var decl = typeDecl.a;
				var members = function () {
					var _v10 = decl.members;
					if (!_v10.b) {
						return $author$project$Morphir$File$SourceCode$empty;
					} else {
						return _Utils_ap(
							$author$project$Morphir$File$SourceCode$newLine,
							_Utils_ap(
								$author$project$Morphir$File$SourceCode$newLine,
								_Utils_ap(
									A2(
										$author$project$Morphir$File$SourceCode$indent,
										opt.indentDepth,
										$author$project$Morphir$File$SourceCode$concat(
											A2(
												$elm$core$List$intersperse,
												_Utils_ap($author$project$Morphir$File$SourceCode$newLine, $author$project$Morphir$File$SourceCode$newLine),
												A2(
													$elm$core$List$map,
													$author$project$Morphir$Scala$PrettyPrinter$mapAnnotated(
														$author$project$Morphir$Scala$PrettyPrinter$mapMemberDecl(opt)),
													decl.members)))),
									_Utils_ap($author$project$Morphir$File$SourceCode$newLine, $author$project$Morphir$File$SourceCode$newLine))));
					}
				}();
				var ctorArgsDoc = function () {
					var _v9 = decl.ctorArgs;
					if (!_v9.b) {
						return $author$project$Morphir$File$SourceCode$empty;
					} else {
						return $author$project$Morphir$File$SourceCode$concat(
							A2(
								$elm$core$List$map,
								$author$project$Morphir$Scala$PrettyPrinter$mapArgDecls(opt),
								decl.ctorArgs));
					}
				}();
				var bodyDoc = A3(
					$elm$core$List$foldl,
					F2(
						function (value, valDocsSoFar) {
							return _Utils_ap(
								valDocsSoFar,
								_Utils_ap(
									$author$project$Morphir$File$SourceCode$newLine,
									A2(
										$author$project$Morphir$File$SourceCode$indent,
										opt.indentDepth,
										A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, value))));
						}),
					$author$project$Morphir$File$SourceCode$empty,
					decl.body);
				return $author$project$Morphir$Scala$PrettyPrinter$mapModifiers(decl.modifiers) + ('class ' + (decl.name + (A2($author$project$Morphir$Scala$PrettyPrinter$mapTypeArgs, opt, decl.typeArgs) + (ctorArgsDoc + (A2($author$project$Morphir$Scala$PrettyPrinter$mapExtends, opt, decl._extends) + ('{' + (members + (bodyDoc + '}'))))))));
			default:
				var decl = typeDecl.a;
				var memberDoc = function () {
					var _v12 = decl.members;
					if (!_v12.b) {
						return $author$project$Morphir$File$SourceCode$empty;
					} else {
						return _Utils_ap(
							$author$project$Morphir$File$SourceCode$newLine,
							_Utils_ap(
								$author$project$Morphir$File$SourceCode$newLine,
								_Utils_ap(
									A2(
										$author$project$Morphir$File$SourceCode$indent,
										opt.indentDepth,
										$author$project$Morphir$File$SourceCode$concat(
											A2(
												$elm$core$List$intersperse,
												_Utils_ap($author$project$Morphir$File$SourceCode$newLine, $author$project$Morphir$File$SourceCode$newLine),
												A2(
													$elm$core$List$map,
													$author$project$Morphir$Scala$PrettyPrinter$mapAnnotated(
														$author$project$Morphir$Scala$PrettyPrinter$mapMemberDecl(opt)),
													decl.members)))),
									_Utils_ap($author$project$Morphir$File$SourceCode$newLine, $author$project$Morphir$File$SourceCode$newLine))));
					}
				}();
				var bodyDoc = function () {
					var _v11 = decl.body;
					if (_v11.$ === 'Just') {
						if (_v11.a.$ === 'Block') {
							var value = _v11.a;
							return A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, value);
						} else {
							var value = _v11.a;
							return _Utils_ap(
								$author$project$Morphir$File$SourceCode$newLine,
								A2(
									$author$project$Morphir$File$SourceCode$indent,
									opt.indentDepth,
									A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, value)));
						}
					} else {
						return $author$project$Morphir$File$SourceCode$empty;
					}
				}();
				return $author$project$Morphir$Scala$PrettyPrinter$mapModifiers(decl.modifiers) + ('object ' + (decl.name + (A2($author$project$Morphir$Scala$PrettyPrinter$mapExtends, opt, decl._extends) + ('{' + (memberDoc + (bodyDoc + '}'))))));
		}
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapValue = F2(
	function (opt, value) {
		switch (value.$) {
			case 'Literal':
				var lit = value.a;
				return $author$project$Morphir$Scala$PrettyPrinter$mapLit(lit);
			case 'Variable':
				var name = value.a;
				return $author$project$Morphir$Scala$Common$prefixKeyword(name);
			case 'Ref':
				var path = value.a;
				var name = value.b;
				return $author$project$Morphir$File$SourceCode$dotSep(
					$author$project$Morphir$Scala$Common$prefixKeywords(
						_Utils_ap(
							path,
							_List_fromArray(
								[name]))));
			case 'Select':
				var targetValue = value.a;
				var name = value.b;
				return _Utils_ap(
					A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, targetValue),
					_Utils_ap(
						$author$project$Morphir$File$SourceCode$dot,
						$author$project$Morphir$Scala$Common$prefixKeyword(name)));
			case 'Wildcard':
				return '_';
			case 'Apply':
				var funValue = value.a;
				var argValues = value.b;
				return _Utils_ap(
					A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, funValue),
					A2($author$project$Morphir$Scala$PrettyPrinter$argValueBlock, opt, argValues));
			case 'UnOp':
				var op = value.a;
				var right = value.b;
				return _Utils_ap(
					op,
					A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, right));
			case 'BinOp':
				var left = value.a;
				var op = value.b;
				var right = value.c;
				return $author$project$Morphir$File$SourceCode$parens(
					A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, left)) + (' ' + (op + (' ' + $author$project$Morphir$File$SourceCode$parens(
					A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, right)))));
			case 'Lambda':
				var args = value.a;
				var bodyValue = value.b;
				var argDoc = function (_v2) {
					var argName = _v2.a;
					var maybeArgType = _v2.b;
					if (maybeArgType.$ === 'Just') {
						var argType = maybeArgType.a;
						return $author$project$Morphir$File$SourceCode$concat(
							_List_fromArray(
								[
									$author$project$Morphir$Scala$Common$prefixKeyword(argName),
									': ',
									A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, argType)
								]));
					} else {
						return $author$project$Morphir$Scala$Common$prefixKeyword(argName);
					}
				};
				var argsDoc = $author$project$Morphir$File$SourceCode$parens(
					A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, argDoc, args)));
				return $author$project$Morphir$File$SourceCode$parens(
					argsDoc + (' =>' + ($author$project$Morphir$File$SourceCode$newLine + A2(
						$author$project$Morphir$File$SourceCode$indent,
						opt.indentDepth,
						A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, bodyValue)))));
			case 'Block':
				var decls = value.a;
				var returnValue = value.b;
				var declDocs = A2(
					$elm$core$List$map,
					$author$project$Morphir$Scala$PrettyPrinter$mapMemberDecl(opt),
					decls);
				var statements = _Utils_ap(
					declDocs,
					_List_fromArray(
						[
							A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, returnValue)
						]));
				return A2(
					$author$project$Morphir$Scala$PrettyPrinter$statementBlock,
					opt,
					A2($elm$core$List$intersperse, $author$project$Morphir$File$SourceCode$empty, statements));
			case 'MatchCases':
				var cases = value.a;
				return A2(
					$author$project$Morphir$Scala$PrettyPrinter$matchBlock,
					opt,
					A2(
						$elm$core$List$map,
						function (_v3) {
							var pattern = _v3.a;
							var caseValue = _v3.b;
							return _Utils_Tuple2(
								$author$project$Morphir$Scala$PrettyPrinter$mapPattern(pattern),
								A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, caseValue));
						},
						cases));
			case 'Match':
				var targetValue = value.a;
				var casesValue = value.b;
				return A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, targetValue) + (' match ' + A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, casesValue));
			case 'IfElse':
				var condValue = value.a;
				var trueValue = value.b;
				var falseValue = value.c;
				return $author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						[
							'if ',
							$author$project$Morphir$File$SourceCode$parens(
							A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, condValue)),
							' ',
							function () {
							if (trueValue.$ === 'Block') {
								return A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, trueValue);
							} else {
								return A2(
									$author$project$Morphir$Scala$PrettyPrinter$statementBlock,
									opt,
									_List_fromArray(
										[
											A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, trueValue)
										]));
							}
						}(),
							' else ',
							function () {
							switch (falseValue.$) {
								case 'IfElse':
									return A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, falseValue);
								case 'Block':
									return A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, falseValue);
								default:
									return A2(
										$author$project$Morphir$Scala$PrettyPrinter$statementBlock,
										opt,
										_List_fromArray(
											[
												A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, falseValue)
											]));
							}
						}()
						]));
			case 'Tuple':
				var elemValues = value.a;
				return $author$project$Morphir$File$SourceCode$parens(
					$author$project$Morphir$File$SourceCode$concat(
						A2(
							$elm$core$List$intersperse,
							', ',
							A2(
								$elm$core$List$map,
								$author$project$Morphir$Scala$PrettyPrinter$mapValue(opt),
								elemValues))));
			case 'StructuralValue':
				var fieldValues = value.a;
				return $elm$core$List$isEmpty(fieldValues) ? 'new {}' : $author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						[
							'new {',
							$author$project$Morphir$File$SourceCode$newLine,
							A2(
							$author$project$Morphir$File$SourceCode$indentLines,
							opt.indentDepth,
							A2(
								$elm$core$List$map,
								function (_v6) {
									var fieldName = _v6.a;
									var fieldValue = _v6.b;
									return $author$project$Morphir$File$SourceCode$concat(
										_List_fromArray(
											[
												'def ',
												fieldName,
												' = ',
												A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, fieldValue)
											]));
								},
								fieldValues)),
							$author$project$Morphir$File$SourceCode$newLine,
							'}'
						]));
			case 'Unit':
				return '{}';
			case 'This':
				return 'this';
			case 'CommentedValue':
				var childValue = value.a;
				var message = value.b;
				return A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, childValue) + (' /* ' + (message + ' */ '));
			case 'ForComp':
				var generators = value.a;
				var yieldValue = value.b;
				return $author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						[
							'for {',
							$author$project$Morphir$File$SourceCode$newLine,
							A2(
							$author$project$Morphir$File$SourceCode$indentLines,
							opt.indentDepth,
							A2(
								$elm$core$List$map,
								function (generator) {
									switch (generator.$) {
										case 'Guard':
											var expr = generator.a;
											return $author$project$Morphir$File$SourceCode$concat(
												_List_fromArray(
													[
														'if ',
														A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, expr)
													]));
										case 'Extract':
											var pattern = generator.a;
											var expr = generator.b;
											return $author$project$Morphir$File$SourceCode$concat(
												_List_fromArray(
													[
														$author$project$Morphir$Scala$PrettyPrinter$mapPattern(pattern),
														' <- ',
														A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, expr)
													]));
										default:
											var pattern = generator.a;
											var expr = generator.b;
											return $author$project$Morphir$File$SourceCode$concat(
												_List_fromArray(
													[
														$author$project$Morphir$Scala$PrettyPrinter$mapPattern(pattern),
														' <- ',
														A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, expr)
													]));
									}
								},
								generators)),
							$author$project$Morphir$File$SourceCode$newLine,
							'}  yield ',
							A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, yieldValue)
						]));
			default:
				var nestedValue = value.a;
				var tpe = value.b;
				return $author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						[
							'(',
							A2($author$project$Morphir$Scala$PrettyPrinter$mapValue, opt, nestedValue),
							' : ',
							A2($author$project$Morphir$Scala$PrettyPrinter$mapType, opt, tpe),
							')'
						]));
		}
	});
var $author$project$Morphir$Scala$PrettyPrinter$mapCompilationUnit = F2(
	function (opt, cu) {
		return $author$project$Morphir$File$SourceCode$concat(
			_List_fromArray(
				[
					$author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						[
							'package ',
							$author$project$Morphir$File$SourceCode$dotSep(
							$author$project$Morphir$Scala$Common$prefixKeywords(cu.packageDecl)),
							$author$project$Morphir$File$SourceCode$newLine
						])),
					$author$project$Morphir$File$SourceCode$newLine,
					A2(
					$elm$core$String$join,
					_Utils_ap($author$project$Morphir$File$SourceCode$newLine, $author$project$Morphir$File$SourceCode$newLine),
					A2(
						$elm$core$List$map,
						$author$project$Morphir$Scala$PrettyPrinter$mapDocumented(
							$author$project$Morphir$Scala$PrettyPrinter$mapAnnotated(
								$author$project$Morphir$Scala$PrettyPrinter$mapTypeDecl(opt))),
						cu.typeDecls))
				]));
	});
var $author$project$Morphir$Scala$Feature$Core$mapFunctionBody = function (valueDef) {
	return A2(
		$author$project$Morphir$Scala$Feature$Core$mapValue,
		$elm$core$Set$fromList(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var name = _v0.a;
					return name;
				},
				valueDef.inputTypes)),
		valueDef.body);
};
var $author$project$Morphir$Scala$AST$Final = {$: 'Final'};
var $author$project$Morphir$Scala$AST$TypeAlias = function (a) {
	return {$: 'TypeAlias', a: a};
};
var $author$project$Morphir$Scala$AST$Sealed = {$: 'Sealed'};
var $author$project$Morphir$Scala$AST$Trait = function (a) {
	return {$: 'Trait', a: a};
};
var $author$project$Morphir$Scala$AST$TypeOfValue = function (a) {
	return {$: 'TypeOfValue', a: a};
};
var $author$project$Morphir$Scala$WellKnownTypes$anyVal = A2(
	$author$project$Morphir$Scala$AST$TypeRef,
	_List_fromArray(
		['scala']),
	'AnyVal');
var $author$project$Morphir$Scala$AST$withAnnotation = F2(
	function (annotations, a) {
		return A2($author$project$Morphir$Scala$AST$Annotated, annotations, a);
	});
var $author$project$Morphir$Scala$Feature$Core$mapCustomTypeDefinition = F6(
	function (currentPackagePath, currentModulePath, moduleDef, typeName, typeParams, accessControlledCtors) {
		var parentTraitRef = $author$project$Morphir$Scala$Feature$Core$mapFQNameToTypeRef(
			_Utils_Tuple3(currentPackagePath, currentModulePath, typeName));
		var caseClass = F3(
			function (name, args, _extends) {
				return $elm$core$List$isEmpty(args) ? $author$project$Morphir$Scala$AST$Object(
					{
						body: $elm$core$Maybe$Nothing,
						_extends: _extends,
						members: _List_Nil,
						modifiers: _List_fromArray(
							[$author$project$Morphir$Scala$AST$Case]),
						name: $author$project$Morphir$IR$Name$toTitleCase(name)
					}) : $author$project$Morphir$Scala$AST$Class(
					{
						body: _List_Nil,
						ctorArgs: $elm$core$List$singleton(
							A2(
								$elm$core$List$map,
								function (_v6) {
									var argName = _v6.a;
									var argType = _v6.b;
									return {
										defaultValue: $elm$core$Maybe$Nothing,
										modifiers: _List_Nil,
										name: $author$project$Morphir$IR$Name$toCamelCase(argName),
										tpe: $author$project$Morphir$Scala$Feature$Core$mapType(argType)
									};
								},
								args)),
						_extends: _extends,
						members: _List_Nil,
						modifiers: _List_fromArray(
							[$author$project$Morphir$Scala$AST$Final, $author$project$Morphir$Scala$AST$Case]),
						name: $author$project$Morphir$IR$Name$toTitleCase(name),
						typeArgs: A2(
							$elm$core$List$map,
							A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$Scala$AST$TypeVar),
							typeParams)
					});
			});
		var sealedTraitHierarchy = _List_fromArray(
			[
				$author$project$Morphir$Scala$AST$Trait(
				{
					_extends: _List_Nil,
					members: _List_Nil,
					modifiers: _List_fromArray(
						[$author$project$Morphir$Scala$AST$Sealed]),
					name: $author$project$Morphir$IR$Name$toTitleCase(typeName),
					typeArgs: A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$Scala$AST$TypeVar),
						typeParams)
				}),
				$author$project$Morphir$Scala$AST$Object(
				{
					body: $elm$core$Maybe$Nothing,
					_extends: _List_Nil,
					members: A2(
						$elm$core$List$map,
						function (_v5) {
							var ctorName = _v5.a;
							var ctorArgs = _v5.b;
							return A2(
								$author$project$Morphir$Scala$AST$withAnnotation,
								_List_Nil,
								$author$project$Morphir$Scala$AST$MemberTypeDecl(
									A3(
										caseClass,
										ctorName,
										ctorArgs,
										$elm$core$List$isEmpty(typeParams) ? _List_fromArray(
											[parentTraitRef]) : _List_fromArray(
											[
												A2(
												$author$project$Morphir$Scala$AST$TypeApply,
												parentTraitRef,
												A2(
													$elm$core$List$map,
													A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$Scala$AST$TypeVar),
													typeParams))
											]))));
						},
						$elm$core$Dict$toList(accessControlledCtors.value)),
					modifiers: _List_Nil,
					name: $author$project$Morphir$IR$Name$toTitleCase(typeName)
				})
			]);
		var _v0 = function () {
			var _v1 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(
				_Utils_Tuple3(currentPackagePath, currentModulePath, typeName));
			var thePath = _v1.a;
			var theName = _v1.b;
			return _Utils_Tuple2(
				thePath,
				$author$project$Morphir$IR$Name$toTitleCase(theName));
		}();
		var parentPackagePath = _v0.a;
		var parentTraitName = _v0.b;
		var companionObjectVal = function (name) {
			var companionTypeRef = $author$project$Morphir$Scala$AST$TypeOfValue(
				_Utils_ap(
					parentPackagePath,
					_List_fromArray(
						[
							parentTraitName,
							$author$project$Morphir$IR$Name$toTitleCase(name)
						])));
			return $author$project$Morphir$Scala$AST$ValueDecl(
				{
					modifiers: _List_Nil,
					pattern: $author$project$Morphir$Scala$AST$NamedMatch(
						$author$project$Morphir$IR$Name$toTitleCase(name)),
					value: A2(
						$author$project$Morphir$Scala$AST$Ref,
						_Utils_ap(
							parentPackagePath,
							_List_fromArray(
								[parentTraitName])),
						$author$project$Morphir$IR$Name$toTitleCase(name)),
					valueType: $elm$core$Maybe$Just(companionTypeRef)
				});
		};
		var companionHelpers = A2(
			$elm$core$List$map,
			function (_v4) {
				var ctorName = _v4.a;
				return $author$project$Morphir$Scala$AST$withoutAnnotation(
					companionObjectVal(ctorName));
			},
			$elm$core$Dict$toList(accessControlledCtors.value));
		var _v2 = $elm$core$Dict$toList(accessControlledCtors.value);
		if (_v2.b && (!_v2.b.b)) {
			var _v3 = _v2.a;
			var ctorName = _v3.a;
			var ctorArgs = _v3.b;
			return _Utils_eq(ctorName, typeName) ? (($elm$core$List$length(ctorArgs) === 1) ? _List_fromArray(
				[
					$author$project$Morphir$Scala$AST$withoutAnnotation(
					$author$project$Morphir$Scala$AST$MemberTypeDecl(
						A3(
							caseClass,
							ctorName,
							ctorArgs,
							_List_fromArray(
								[$author$project$Morphir$Scala$WellKnownTypes$anyVal]))))
				]) : ((!$elm$core$List$length(ctorArgs)) ? _List_fromArray(
				[
					$author$project$Morphir$Scala$AST$withoutAnnotation(
					$author$project$Morphir$Scala$AST$TypeAlias(
						{
							alias: $author$project$Morphir$IR$Name$toTitleCase(typeName),
							tpe: $author$project$Morphir$Scala$AST$TypeOfValue(
								_List_fromArray(
									[
										$author$project$Morphir$IR$Name$toTitleCase(typeName)
									])),
							typeArgs: _List_Nil
						})),
					$author$project$Morphir$Scala$AST$withoutAnnotation(
					$author$project$Morphir$Scala$AST$MemberTypeDecl(
						A3(caseClass, ctorName, ctorArgs, _List_Nil)))
				]) : _List_fromArray(
				[
					$author$project$Morphir$Scala$AST$withoutAnnotation(
					$author$project$Morphir$Scala$AST$MemberTypeDecl(
						A3(caseClass, ctorName, ctorArgs, _List_Nil)))
				]))) : $elm$core$List$concat(
				_List_fromArray(
					[
						A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$Scala$AST$MemberTypeDecl, $author$project$Morphir$Scala$AST$withoutAnnotation),
						sealedTraitHierarchy),
						companionHelpers
					]));
		} else {
			return $elm$core$List$concat(
				_List_fromArray(
					[
						A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$Scala$AST$MemberTypeDecl, $author$project$Morphir$Scala$AST$withoutAnnotation),
						sealedTraitHierarchy),
						companionHelpers
					]));
		}
	});
var $author$project$Morphir$Scala$Feature$Core$mapTypeMember = F4(
	function (currentPackagePath, currentModulePath, accessControlledModuleDef, _v0) {
		var typeName = _v0.a;
		var accessControlledDocumentedTypeDef = _v0.b;
		var _v1 = accessControlledDocumentedTypeDef.value.value;
		if (_v1.$ === 'TypeAliasDefinition') {
			if (_v1.b.$ === 'Record') {
				var typeParams = _v1.a;
				var _v2 = _v1.b;
				var fields = _v2.b;
				return _List_fromArray(
					[
						$author$project$Morphir$Scala$AST$withoutAnnotation(
						$author$project$Morphir$Scala$AST$MemberTypeDecl(
							$author$project$Morphir$Scala$AST$Class(
								{
									body: _List_Nil,
									ctorArgs: $elm$core$List$singleton(
										A2(
											$elm$core$List$map,
											function (field) {
												return {
													defaultValue: $elm$core$Maybe$Nothing,
													modifiers: _List_Nil,
													name: $author$project$Morphir$IR$Name$toCamelCase(field.name),
													tpe: $author$project$Morphir$Scala$Feature$Core$mapType(field.tpe)
												};
											},
											fields)),
									_extends: _List_Nil,
									members: _List_Nil,
									modifiers: _List_fromArray(
										[$author$project$Morphir$Scala$AST$Final, $author$project$Morphir$Scala$AST$Case]),
									name: $author$project$Morphir$IR$Name$toTitleCase(typeName),
									typeArgs: A2(
										$elm$core$List$map,
										A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$Scala$AST$TypeVar),
										typeParams)
								})))
					]);
			} else {
				var typeParams = _v1.a;
				var typeExp = _v1.b;
				return _List_fromArray(
					[
						$author$project$Morphir$Scala$AST$withoutAnnotation(
						$author$project$Morphir$Scala$AST$TypeAlias(
							{
								alias: $author$project$Morphir$IR$Name$toTitleCase(typeName),
								tpe: $author$project$Morphir$Scala$Feature$Core$mapType(typeExp),
								typeArgs: A2(
									$elm$core$List$map,
									A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$Scala$AST$TypeVar),
									typeParams)
							}))
					]);
			}
		} else {
			var typeParams = _v1.a;
			var accessControlledCtors = _v1.b;
			return A6($author$project$Morphir$Scala$Feature$Core$mapCustomTypeDefinition, currentPackagePath, currentModulePath, accessControlledModuleDef.value, typeName, typeParams, accessControlledCtors);
		}
	});
var $author$project$Morphir$Scala$Feature$Core$mapModuleDefinition = F3(
	function (currentPackagePath, currentModulePath, accessControlledModuleDef) {
		var typeMembers = A2(
			$elm$core$List$concatMap,
			function (types) {
				return A4($author$project$Morphir$Scala$Feature$Core$mapTypeMember, currentPackagePath, currentModulePath, accessControlledModuleDef, types);
			},
			$elm$core$Dict$toList(accessControlledModuleDef.value.types));
		var functionMembers = function () {
			var gatherTypeNames = F2(
				function (tpe, acc) {
					return A2(
						$elm$core$Set$union,
						acc,
						A2(
							$elm$core$Set$map,
							$author$project$Morphir$IR$Name$toTitleCase,
							$author$project$Morphir$IR$Type$collectVariables(tpe)));
				});
			var gatherAllTypeNames = function (inputTypes) {
				return A2(
					$elm$core$List$map,
					$author$project$Morphir$Scala$AST$TypeVar,
					$elm$core$Set$toList(
						A3($elm$core$List$foldl, gatherTypeNames, $elm$core$Set$empty, inputTypes)));
			};
			return A2(
				$elm$core$List$map,
				$author$project$Morphir$Scala$AST$withoutAnnotation,
				A2(
					$elm$core$List$concatMap,
					function (_v3) {
						var valueName = _v3.a;
						var accessControlledValueDef = _v3.b;
						return _List_fromArray(
							[
								$author$project$Morphir$Scala$AST$FunctionDecl(
								{
									args: $elm$core$List$isEmpty(accessControlledValueDef.value.value.inputTypes) ? _List_Nil : A2(
										$elm$core$List$map,
										function (_v4) {
											var argName = _v4.a;
											var a = _v4.b;
											var argType = _v4.c;
											return _List_fromArray(
												[
													{
													defaultValue: $elm$core$Maybe$Nothing,
													modifiers: _List_Nil,
													name: $author$project$Morphir$Scala$Common$mapValueName(argName),
													tpe: $author$project$Morphir$Scala$Feature$Core$mapType(argType)
												}
												]);
										},
										accessControlledValueDef.value.value.inputTypes),
									body: $elm$core$Maybe$Just(
										$author$project$Morphir$Scala$Feature$Core$mapFunctionBody(accessControlledValueDef.value.value)),
									modifiers: function () {
										var _v5 = accessControlledValueDef.access;
										if (_v5.$ === 'Public') {
											return _List_Nil;
										} else {
											return _List_Nil;
										}
									}(),
									name: $author$project$Morphir$Scala$Common$mapValueName(valueName),
									returnType: $elm$core$Maybe$Just(
										$author$project$Morphir$Scala$Feature$Core$mapType(accessControlledValueDef.value.value.outputType)),
									typeArgs: gatherAllTypeNames(
										A2(
											$elm$core$List$cons,
											accessControlledValueDef.value.value.outputType,
											A2(
												$elm$core$List$map,
												function (_v6) {
													var tpe = _v6.c;
													return tpe;
												},
												accessControlledValueDef.value.value.inputTypes)))
								})
							]);
					},
					$elm$core$Dict$toList(accessControlledModuleDef.value.values)));
		}();
		var _v0 = function () {
			var _v1 = $elm$core$List$reverse(currentModulePath);
			if (!_v1.b) {
				return _Utils_Tuple2(_List_Nil, _List_Nil);
			} else {
				var lastName = _v1.a;
				var reverseModulePath = _v1.b;
				return _Utils_Tuple2(
					A2(
						$elm$core$List$append,
						A2(
							$elm$core$List$map,
							A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
							currentPackagePath),
						A2(
							$elm$core$List$map,
							A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
							$elm$core$List$reverse(reverseModulePath))),
					lastName);
			}
		}();
		var scalaPackagePath = _v0.a;
		var moduleName = _v0.b;
		var moduleUnit = {
			dirPath: scalaPackagePath,
			fileName: $author$project$Morphir$IR$Name$toTitleCase(moduleName) + '.scala',
			imports: _List_Nil,
			packageDecl: scalaPackagePath,
			typeDecls: _List_fromArray(
				[
					A2(
					$author$project$Morphir$Scala$AST$Documented,
					$elm$core$Maybe$Just(
						A2(
							$elm$core$String$join,
							'',
							_List_fromArray(
								[
									'Generated based on ',
									A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', currentModulePath)
								]))),
					A2(
						$author$project$Morphir$Scala$AST$Annotated,
						_List_Nil,
						$author$project$Morphir$Scala$AST$Object(
							{
								body: $elm$core$Maybe$Nothing,
								_extends: _List_Nil,
								members: A2($elm$core$List$append, typeMembers, functionMembers),
								modifiers: function () {
									var _v2 = accessControlledModuleDef.access;
									if (_v2.$ === 'Public') {
										return _List_Nil;
									} else {
										return _List_Nil;
									}
								}(),
								name: $author$project$Morphir$IR$Name$toTitleCase(moduleName)
							})))
				])
		};
		return _List_fromArray(
			[moduleUnit]);
	});
var $author$project$Morphir$Scala$AST$Private = function (a) {
	return {$: 'Private', a: a};
};
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $author$project$Morphir$Scala$Feature$Codec$circePackagePath = _List_fromArray(
	['io', 'circe']);
var $author$project$Morphir$Scala$Feature$Codec$circeJsonPath = $elm$core$List$concat(
	_List_fromArray(
		[
			$author$project$Morphir$Scala$Feature$Codec$circePackagePath,
			_List_fromArray(
			['Json'])
		]));
var $author$project$Morphir$Scala$AST$Extract = F2(
	function (a, b) {
		return {$: 'Extract', a: a, b: b};
	});
var $author$project$Morphir$Scala$AST$ForComp = F2(
	function (a, b) {
		return {$: 'ForComp', a: a, b: b};
	});
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $author$project$Morphir$Scala$Feature$Codec$decoderLambda = F2(
	function (args, body) {
		return A2(
			$author$project$Morphir$Scala$AST$Lambda,
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapFirst($author$project$Morphir$IR$Name$toCamelCase),
				args),
			body);
	});
var $author$project$Morphir$Scala$Feature$Codec$typeRef = F3(
	function (name, path, typeParams) {
		if (!typeParams.b) {
			return A2(
				$author$project$Morphir$Scala$AST$TypeRef,
				path,
				$author$project$Morphir$IR$Name$toTitleCase(name));
		} else {
			return A2(
				$author$project$Morphir$Scala$AST$TypeApply,
				A2(
					$author$project$Morphir$Scala$AST$TypeRef,
					path,
					$author$project$Morphir$IR$Name$toTitleCase(name)),
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$Scala$AST$TypeVar),
					typeParams));
		}
	});
var $author$project$Morphir$Scala$Feature$Codec$mapTypeToDecoderReference = F2(
	function (maybeTypeNameAndPath, tpe) {
		switch (tpe.$) {
			case 'Variable':
				var varName = tpe.b;
				return $elm$core$Result$Ok(
					$author$project$Morphir$Scala$AST$Variable(
						$author$project$Morphir$IR$Name$toCamelCase(
							A2($elm$core$List$cons, 'decode', varName))));
			case 'Reference':
				var _v1 = tpe.b;
				var packageName = _v1.a;
				var moduleName = _v1.b;
				var typeName = _v1.c;
				var typeArgs = tpe.c;
				var scalaReference = F2(
					function (path, name) {
						return A2($author$project$Morphir$Scala$AST$Ref, path, name);
					});
				var scalaPackageName = A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
					_Utils_ap(packageName, moduleName));
				var decoderName = $author$project$Morphir$IR$Name$toCamelCase(
					A2($elm$core$List$cons, 'decode', typeName));
				var codecPath = $elm$core$List$concat(
					_List_fromArray(
						[
							scalaPackageName,
							_List_fromArray(
							['Codec'])
						]));
				if (!typeArgs.b) {
					return $elm$core$Result$Ok(
						A2(scalaReference, codecPath, decoderName));
				} else {
					return A2(
						$elm$core$Result$map,
						$author$project$Morphir$Scala$AST$Apply(
							A2(scalaReference, codecPath, decoderName)),
						A2(
							$elm$core$Result$map,
							$elm$core$List$map(
								$author$project$Morphir$Scala$AST$ArgValue($elm$core$Maybe$Nothing)),
							$author$project$Morphir$SDK$ResultList$keepFirstError(
								A2(
									$elm$core$List$map,
									function (typeArg) {
										return A2($author$project$Morphir$Scala$Feature$Codec$mapTypeToDecoderReference, maybeTypeNameAndPath, typeArg);
									},
									typeArgs))));
				}
			case 'Tuple':
				var a = tpe.a;
				var types = tpe.b;
				var yieldValue = $author$project$Morphir$Scala$AST$Tuple(
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (index, _v3) {
								return $author$project$Morphir$Scala$AST$Variable(
									'arg' + $elm$core$String$fromInt(index + 1));
							}),
						types));
				var decodedTypesResult = A2(
					$elm$core$Result$map,
					function (val) {
						return A2(
							$elm$core$List$map,
							function (y) {
								return y;
							},
							val);
					},
					$author$project$Morphir$SDK$ResultList$keepFirstError(
						A2(
							$elm$core$List$map,
							function (currentType) {
								return A2($author$project$Morphir$Scala$Feature$Codec$mapTypeToDecoderReference, maybeTypeNameAndPath, currentType);
							},
							types)));
				var generatorsResult = A2(
					$elm$core$Result$map,
					function (decodedTypes) {
						return A2(
							$elm$core$List$indexedMap,
							F2(
								function (index, decodedType) {
									return A2(
										$author$project$Morphir$Scala$AST$Extract,
										$author$project$Morphir$Scala$AST$NamedMatch(
											'arg' + $elm$core$String$fromInt(index + 1)),
										A2(
											$author$project$Morphir$Scala$AST$Apply,
											decodedType,
											_List_fromArray(
												[
													A2(
													$author$project$Morphir$Scala$AST$ArgValue,
													$elm$core$Maybe$Nothing,
													$author$project$Morphir$Scala$AST$Variable('c'))
												])));
								}),
							decodedTypes);
					},
					decodedTypesResult);
				var forCompResult = A2(
					$elm$core$Result$map,
					function (generators) {
						return A2($author$project$Morphir$Scala$AST$ForComp, generators, yieldValue);
					},
					generatorsResult);
				return A2(
					$elm$core$Result$map,
					function (forComp) {
						return A2(
							$author$project$Morphir$Scala$AST$Lambda,
							_List_fromArray(
								[
									_Utils_Tuple2(
									'c',
									$elm$core$Maybe$Just(
										A2($author$project$Morphir$Scala$AST$TypeRef, $author$project$Morphir$Scala$Feature$Codec$circePackagePath, 'HCursor')))
								]),
							forComp);
					},
					forCompResult);
			case 'Record':
				var a = tpe.a;
				var fields = tpe.b;
				var yieldArgs = A2(
					$elm$core$List$map,
					function (field) {
						return A2(
							$author$project$Morphir$Scala$AST$ArgValue,
							$elm$core$Maybe$Nothing,
							$author$project$Morphir$Scala$AST$Variable(
								$author$project$Morphir$IR$Name$toCamelCase(field.name) + '_'));
					},
					fields);
				var yieldValue = A2(
					$elm$core$Maybe$withDefault,
					$author$project$Morphir$Scala$AST$StructuralValue(
						A2(
							$elm$core$List$map,
							function (_v5) {
								var name = _v5.name;
								return _Utils_Tuple2(
									$author$project$Morphir$IR$Name$toCamelCase(name),
									$author$project$Morphir$Scala$AST$Variable(
										$author$project$Morphir$IR$Name$toCamelCase(name) + '_'));
							},
							fields)),
					A2(
						$elm$core$Maybe$map,
						function (_v4) {
							var name = _v4.a;
							var path = _v4.b;
							return A2(
								$author$project$Morphir$Scala$AST$Apply,
								A2(
									$author$project$Morphir$Scala$AST$Ref,
									path,
									$author$project$Morphir$IR$Name$toTitleCase(name)),
								yieldArgs);
						},
						maybeTypeNameAndPath));
				var generatorsResult = $author$project$Morphir$SDK$ResultList$keepFirstError(
					A2(
						$elm$core$List$map,
						function (field) {
							return A2(
								$elm$core$Result$map,
								function (fieldValueDecoder) {
									var fieldNameLiteral = $author$project$Morphir$Scala$AST$Literal(
										$author$project$Morphir$Scala$AST$StringLit(
											$author$project$Morphir$IR$Name$toCamelCase(field.name)));
									var downFieldApply = A2(
										$author$project$Morphir$Scala$AST$Apply,
										A2(
											$author$project$Morphir$Scala$AST$Select,
											$author$project$Morphir$Scala$AST$Variable('c'),
											'downField'),
										_List_fromArray(
											[
												A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, fieldNameLiteral)
											]));
									var downFieldApplyWithAs = A2($author$project$Morphir$Scala$AST$Select, downFieldApply, 'as');
									var forCompFieldRHS = A2(
										$author$project$Morphir$Scala$AST$Apply,
										downFieldApplyWithAs,
										_List_fromArray(
											[
												A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, fieldValueDecoder)
											]));
									var forCompField = A2(
										$author$project$Morphir$Scala$AST$Extract,
										$author$project$Morphir$Scala$AST$NamedMatch(
											$author$project$Morphir$IR$Name$toCamelCase(field.name) + '_'),
										forCompFieldRHS);
									return forCompField;
								},
								A2($author$project$Morphir$Scala$Feature$Codec$mapTypeToDecoderReference, $elm$core$Maybe$Nothing, field.tpe));
						},
						fields));
				return A2(
					$elm$core$Result$map,
					function (generators) {
						return A2(
							$author$project$Morphir$Scala$Feature$Codec$decoderLambda,
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('c'),
									$elm$core$Maybe$Just(
										A3(
											$author$project$Morphir$Scala$Feature$Codec$typeRef,
											$author$project$Morphir$IR$Name$fromString('HCursor'),
											$author$project$Morphir$Scala$Feature$Codec$circePackagePath,
											_List_Nil)))
								]),
							A2($author$project$Morphir$Scala$AST$ForComp, generators, yieldValue));
					},
					generatorsResult);
			case 'Function':
				var a = tpe.a;
				var argType = tpe.b;
				var returnType = tpe.c;
				return $elm$core$Result$Err('Cannot decode a function');
			case 'Unit':
				var a = tpe.a;
				return $elm$core$Result$Ok(
					A2(
						$author$project$Morphir$Scala$AST$Ref,
						_List_fromArray(
							['morphir', 'sdk', 'basics', 'Codec']),
						'decodeUnit'));
			default:
				var a = tpe.a;
				var name = tpe.b;
				var fields = tpe.c;
				var yieldArgs = A2(
					$elm$core$List$map,
					function (field) {
						return A2(
							$author$project$Morphir$Scala$AST$ArgValue,
							$elm$core$Maybe$Nothing,
							$author$project$Morphir$Scala$AST$Variable(
								$author$project$Morphir$IR$Name$toCamelCase(field.name)));
					},
					fields);
				var yieldValue = A2(
					$elm$core$Maybe$withDefault,
					$author$project$Morphir$Scala$AST$StructuralValue(
						A2(
							$elm$core$List$map,
							function (field) {
								return _Utils_Tuple2(
									$author$project$Morphir$IR$Name$toCamelCase(field.name),
									$author$project$Morphir$Scala$AST$Variable(
										$author$project$Morphir$IR$Name$toCamelCase(field.name)));
							},
							fields)),
					A2(
						$elm$core$Maybe$map,
						function (_v6) {
							var n = _v6.a;
							var path = _v6.b;
							return A2(
								$author$project$Morphir$Scala$AST$Apply,
								A2(
									$author$project$Morphir$Scala$AST$Ref,
									path,
									$author$project$Morphir$IR$Name$toTitleCase(n)),
								yieldArgs);
						},
						maybeTypeNameAndPath));
				var generatorsResult = $author$project$Morphir$SDK$ResultList$keepFirstError(
					A2(
						$elm$core$List$map,
						function (field) {
							return A2(
								$elm$core$Result$map,
								function (fieldValueDecoder) {
									var fieldNameLiteral = $author$project$Morphir$Scala$AST$Literal(
										$author$project$Morphir$Scala$AST$StringLit(
											$author$project$Morphir$IR$Name$toCamelCase(field.name)));
									var downFieldApply = A2(
										$author$project$Morphir$Scala$AST$Apply,
										A2(
											$author$project$Morphir$Scala$AST$Select,
											$author$project$Morphir$Scala$AST$Variable('c'),
											'downField'),
										_List_fromArray(
											[
												A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, fieldNameLiteral)
											]));
									var downFieldApplyWithAs = A2($author$project$Morphir$Scala$AST$Select, downFieldApply, 'as');
									var forCompFieldRHS = A2(
										$author$project$Morphir$Scala$AST$Apply,
										downFieldApplyWithAs,
										_List_fromArray(
											[
												A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, fieldValueDecoder)
											]));
									var forCompField = A2(
										$author$project$Morphir$Scala$AST$Extract,
										$author$project$Morphir$Scala$AST$NamedMatch(
											$author$project$Morphir$IR$Name$toCamelCase(field.name)),
										forCompFieldRHS);
									return forCompField;
								},
								A2($author$project$Morphir$Scala$Feature$Codec$mapTypeToDecoderReference, $elm$core$Maybe$Nothing, field.tpe));
						},
						fields));
				return A2(
					$elm$core$Result$map,
					function (generators) {
						return A2(
							$author$project$Morphir$Scala$Feature$Codec$decoderLambda,
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$fromString('c'),
									$elm$core$Maybe$Just(
										A3(
											$author$project$Morphir$Scala$Feature$Codec$typeRef,
											$author$project$Morphir$IR$Name$fromString('HCursor'),
											$author$project$Morphir$Scala$Feature$Codec$circePackagePath,
											_List_Nil)))
								]),
							A2($author$project$Morphir$Scala$AST$ForComp, generators, yieldValue));
					},
					generatorsResult);
		}
	});
var $author$project$Morphir$Scala$Feature$Codec$mapConstructorsToDecoder = F3(
	function (fqName_, ctorArgs, name) {
		var ctorName = fqName_.c;
		var yeildArgValues = A2(
			$elm$core$List$map,
			function (_v3) {
				var argName = _v3.a;
				var argType = _v3.b;
				return A2(
					$author$project$Morphir$Scala$AST$ArgValue,
					$elm$core$Maybe$Nothing,
					$author$project$Morphir$Scala$AST$Variable(
						$author$project$Morphir$IR$Name$toCamelCase(argName)));
			},
			ctorArgs);
		var generatorsResult = $author$project$Morphir$SDK$ResultList$keepFirstError(
			A2(
				$elm$core$List$map,
				function (arg) {
					var argIndex = A2(
						$elm$core$String$right,
						1,
						$author$project$Morphir$IR$Name$toCamelCase(arg.a));
					var downApply = $author$project$Morphir$Scala$AST$Variable('c' + ('.downN(' + (argIndex + ')')));
					var asSelect = A2($author$project$Morphir$Scala$AST$Select, downApply, 'as');
					var generatorRHS = A2(
						$elm$core$Result$map,
						A2(
							$elm$core$Basics$composeL,
							A2(
								$elm$core$Basics$composeL,
								$author$project$Morphir$Scala$AST$Apply(asSelect),
								$elm$core$List$singleton),
							$author$project$Morphir$Scala$AST$ArgValue($elm$core$Maybe$Nothing)),
						A2($author$project$Morphir$Scala$Feature$Codec$mapTypeToDecoderReference, $elm$core$Maybe$Nothing, arg.b));
					return A2(
						$elm$core$Result$map,
						$author$project$Morphir$Scala$AST$Extract(
							$author$project$Morphir$Scala$AST$NamedMatch(
								$author$project$Morphir$IR$Name$toCamelCase(arg.a))),
						generatorRHS);
				},
				ctorArgs));
		var fqName = function () {
			var _v2 = fqName_;
			var packageName = _v2.a;
			var moduleName = _v2.b;
			var localName = _v2.c;
			return _Utils_Tuple3(packageName, moduleName, localName);
		}();
		var scalaFqn = function (_v1) {
			var scalaTypePath = _v1.a;
			var scalaName = _v1.b;
			return A2(
				$elm$core$String$join,
				'.',
				_List_fromArray(
					[scalaTypePath, scalaName]));
		}(
			A2(
				$elm$core$Tuple$mapSecond,
				$author$project$Morphir$IR$Name$toTitleCase,
				A2(
					$elm$core$Tuple$mapFirst,
					$elm$core$String$join('.'),
					$author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(fqName))));
		var yeildExpression = A2(
			$author$project$Morphir$Scala$AST$Apply,
			$author$project$Morphir$Scala$AST$Variable(scalaFqn),
			yeildArgValues);
		var _v0 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(fqName);
		var tpePath = _v0.a;
		var tpeName = _v0.b;
		return $elm$core$List$isEmpty(ctorArgs) ? $elm$core$Result$Ok(
			_Utils_Tuple2(
				$author$project$Morphir$Scala$AST$LiteralMatch(
					$author$project$Morphir$Scala$AST$StringLit(
						$author$project$Morphir$IR$Name$toTitleCase(ctorName))),
				A2(
					$author$project$Morphir$Scala$AST$Apply,
					A2(
						$author$project$Morphir$Scala$AST$Ref,
						_List_fromArray(
							['scala']),
						'Right'),
					_List_fromArray(
						[
							A2(
							$author$project$Morphir$Scala$AST$ArgValue,
							$elm$core$Maybe$Nothing,
							$author$project$Morphir$Scala$AST$Variable(scalaFqn))
						])))) : A2(
			$elm$core$Result$map,
			function (generators) {
				return _Utils_Tuple2(
					$author$project$Morphir$Scala$AST$LiteralMatch(
						$author$project$Morphir$Scala$AST$StringLit(
							$author$project$Morphir$IR$Name$toTitleCase(ctorName))),
					A2($author$project$Morphir$Scala$AST$ForComp, generators, yeildExpression));
			},
			generatorsResult);
	});
var $author$project$Morphir$Scala$AST$Implicit = {$: 'Implicit'};
var $author$project$Morphir$Scala$Feature$Codec$scalaDeclaration = F6(
	function (codecPrefix, codecType, scalaTpe, typeName, typeParams, scalaValue) {
		if (!typeParams.b) {
			return $author$project$Morphir$Scala$AST$withoutAnnotation(
				$author$project$Morphir$Scala$AST$ValueDecl(
					{
						modifiers: _List_fromArray(
							[$author$project$Morphir$Scala$AST$Implicit]),
						pattern: $author$project$Morphir$Scala$AST$NamedMatch(
							$author$project$Morphir$IR$Name$toCamelCase(
								A2($elm$core$List$cons, codecPrefix, typeName))),
						value: scalaValue,
						valueType: $elm$core$Maybe$Just(
							A2(
								$author$project$Morphir$Scala$AST$TypeApply,
								A2($author$project$Morphir$Scala$AST$TypeRef, $author$project$Morphir$Scala$Feature$Codec$circePackagePath, codecType),
								_List_fromArray(
									[scalaTpe])))
					}));
		} else {
			var functionTypeArgs = A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$Scala$AST$TypeVar),
				typeParams);
			var functionArgList = A2(
				$elm$core$List$map,
				function (typeArgName) {
					return {
						defaultValue: $elm$core$Maybe$Nothing,
						modifiers: _List_Nil,
						name: $author$project$Morphir$IR$Name$toCamelCase(
							A2($elm$core$List$cons, codecPrefix, typeArgName)),
						tpe: A2(
							$author$project$Morphir$Scala$AST$TypeApply,
							A2($author$project$Morphir$Scala$AST$TypeRef, $author$project$Morphir$Scala$Feature$Codec$circePackagePath, codecType),
							_List_fromArray(
								[
									$author$project$Morphir$Scala$AST$TypeVar(
									$author$project$Morphir$IR$Name$toTitleCase(typeArgName))
								]))
					};
				},
				typeParams);
			return $author$project$Morphir$Scala$AST$withoutAnnotation(
				$author$project$Morphir$Scala$AST$FunctionDecl(
					{
						args: _List_fromArray(
							[functionArgList]),
						body: $elm$core$Maybe$Just(scalaValue),
						modifiers: _List_fromArray(
							[$author$project$Morphir$Scala$AST$Implicit]),
						name: $author$project$Morphir$IR$Name$toCamelCase(
							A2($elm$core$List$cons, codecPrefix, typeName)),
						returnType: $elm$core$Maybe$Just(
							A2(
								$author$project$Morphir$Scala$AST$TypeApply,
								A2($author$project$Morphir$Scala$AST$TypeRef, $author$project$Morphir$Scala$Feature$Codec$circePackagePath, codecType),
								_List_fromArray(
									[scalaTpe]))),
						typeArgs: functionTypeArgs
					}));
		}
	});
var $author$project$Morphir$Scala$Feature$Codec$scalaType = F3(
	function (typeParams, tpeName, scalaTypePath) {
		if (!typeParams.b) {
			return A2(
				$author$project$Morphir$Scala$AST$TypeRef,
				scalaTypePath,
				$author$project$Morphir$IR$Name$toTitleCase(tpeName));
		} else {
			var params = typeParams;
			return A2(
				$author$project$Morphir$Scala$AST$TypeApply,
				A2(
					$author$project$Morphir$Scala$AST$TypeRef,
					scalaTypePath,
					$author$project$Morphir$IR$Name$toTitleCase(tpeName)),
				A2(
					$elm$core$List$map,
					function (paramName) {
						return $author$project$Morphir$Scala$AST$TypeVar(
							$author$project$Morphir$IR$Name$toTitleCase(paramName));
					},
					params));
		}
	});
var $author$project$Morphir$Scala$Feature$Codec$mapTypeDefinitionToDecoder = F3(
	function (currentPackagePath, currentModulePath, _v0) {
		var typeName = _v0.a;
		var accessControlledDocumentedTypeDef = _v0.b;
		var _v1 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(
			A3($author$project$Morphir$IR$FQName$fQName, currentPackagePath, currentModulePath, typeName));
		var scalaTypePath = _v1.a;
		var scalaTypeName = _v1.b;
		var _v2 = accessControlledDocumentedTypeDef.value.value;
		if (_v2.$ === 'TypeAliasDefinition') {
			var typeParams = _v2.a;
			var typeExp = _v2.b;
			return A2(
				$elm$core$Result$map,
				A5(
					$author$project$Morphir$Scala$Feature$Codec$scalaDeclaration,
					'decode',
					'Decoder',
					A3($author$project$Morphir$Scala$Feature$Codec$scalaType, typeParams, scalaTypeName, scalaTypePath),
					scalaTypeName,
					typeParams),
				A2(
					$author$project$Morphir$Scala$Feature$Codec$mapTypeToDecoderReference,
					$elm$core$Maybe$Just(
						_Utils_Tuple2(scalaTypeName, scalaTypePath)),
					typeExp));
		} else {
			var typeParams = _v2.a;
			var accessControlledCtors = _v2.b;
			var underscore = $author$project$Morphir$Scala$AST$Variable('_');
			var patternMatchResult = $author$project$Morphir$SDK$ResultList$keepFirstError(
				A2(
					$elm$core$List$map,
					function (_v3) {
						var ctorName = _v3.a;
						var ctorArgs = _v3.b;
						return A3(
							$author$project$Morphir$Scala$Feature$Codec$mapConstructorsToDecoder,
							_Utils_Tuple3(currentPackagePath, currentModulePath, ctorName),
							ctorArgs,
							scalaTypeName);
					},
					$elm$core$Dict$toList(accessControlledCtors.value)));
			var hCursor = $author$project$Morphir$Scala$AST$Variable('c');
			var wrapSingleConstructorsWithArray = A2(
				$author$project$Morphir$Scala$AST$Apply,
				A2($author$project$Morphir$Scala$AST$Select, hCursor, 'withFocus'),
				_List_fromArray(
					[
						A2(
						$author$project$Morphir$Scala$AST$ArgValue,
						$elm$core$Maybe$Nothing,
						A2(
							$author$project$Morphir$Scala$AST$Apply,
							A2($author$project$Morphir$Scala$AST$Select, underscore, 'withString'),
							_List_fromArray(
								[
									A2(
									$author$project$Morphir$Scala$AST$ArgValue,
									$elm$core$Maybe$Nothing,
									A2(
										$author$project$Morphir$Scala$AST$Lambda,
										_List_fromArray(
											[
												_Utils_Tuple2('str', $elm$core$Maybe$Nothing)
											]),
										A2(
											$author$project$Morphir$Scala$AST$Apply,
											A2($author$project$Morphir$Scala$AST$Ref, $author$project$Morphir$Scala$Feature$Codec$circeJsonPath, 'arr'),
											_List_fromArray(
												[
													A2(
													$author$project$Morphir$Scala$AST$ArgValue,
													$elm$core$Maybe$Nothing,
													A2(
														$author$project$Morphir$Scala$AST$Apply,
														A2($author$project$Morphir$Scala$AST$Ref, $author$project$Morphir$Scala$Feature$Codec$circeJsonPath, 'fromString'),
														_List_fromArray(
															[
																A2(
																$author$project$Morphir$Scala$AST$ArgValue,
																$elm$core$Maybe$Nothing,
																$author$project$Morphir$Scala$AST$Variable('str'))
															])))
												]))))
								])))
					]));
			var downApply = A2(
				$author$project$Morphir$Scala$AST$Select,
				A2(
					$author$project$Morphir$Scala$AST$Apply,
					A2(
						$author$project$Morphir$Scala$AST$Select,
						A2(
							$author$project$Morphir$Scala$AST$Apply,
							A2($author$project$Morphir$Scala$AST$Select, wrapSingleConstructorsWithArray, 'downN'),
							_List_fromArray(
								[
									A2(
									$author$project$Morphir$Scala$AST$ArgValue,
									$elm$core$Maybe$Nothing,
									$author$project$Morphir$Scala$AST$Literal(
										$author$project$Morphir$Scala$AST$IntegerLit(0)))
								])),
						'as'),
					_List_fromArray(
						[
							A2(
							$author$project$Morphir$Scala$AST$ArgValue,
							$elm$core$Maybe$Nothing,
							A2(
								$author$project$Morphir$Scala$AST$Ref,
								_List_fromArray(
									['morphir', 'sdk', 'string', 'Codec']),
								'decodeString'))
						])),
				'flatMap');
			var scalaValueResult = A2(
				$elm$core$Result$map,
				function (patternMatch) {
					return A2(
						$author$project$Morphir$Scala$AST$Lambda,
						_List_fromArray(
							[
								_Utils_Tuple2(
								'c',
								$elm$core$Maybe$Just(
									A2($author$project$Morphir$Scala$AST$TypeRef, $author$project$Morphir$Scala$Feature$Codec$circePackagePath, 'HCursor')))
							]),
						A2(
							$author$project$Morphir$Scala$AST$Apply,
							downApply,
							_List_fromArray(
								[
									A2(
									$author$project$Morphir$Scala$AST$ArgValue,
									$elm$core$Maybe$Nothing,
									A2(
										$author$project$Morphir$Scala$AST$Lambda,
										_List_fromArray(
											[
												_Utils_Tuple2('tag', $elm$core$Maybe$Nothing)
											]),
										A2(
											$author$project$Morphir$Scala$AST$Match,
											$author$project$Morphir$Scala$AST$Variable('tag'),
											$author$project$Morphir$Scala$AST$MatchCases(patternMatch))))
								])));
				},
				patternMatchResult);
			return A2(
				$elm$core$Result$map,
				A5(
					$author$project$Morphir$Scala$Feature$Codec$scalaDeclaration,
					'decode',
					'Decoder',
					A3($author$project$Morphir$Scala$Feature$Codec$scalaType, typeParams, scalaTypeName, scalaTypePath),
					scalaTypeName,
					typeParams),
				scalaValueResult);
		}
	});
var $author$project$Morphir$Scala$Feature$Codec$encoderLambda = F2(
	function (types, body) {
		return A2(
			$author$project$Morphir$Scala$AST$Lambda,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var argName = _v0.a;
					var tpe = _v0.b;
					return _Utils_Tuple2(
						$author$project$Morphir$IR$Name$toCamelCase(argName),
						tpe);
				},
				types),
			body);
	});
var $author$project$Morphir$Scala$Feature$Codec$mapTypeToEncoderReference = F5(
	function (maybeFqn, tpeName, tpePath, typeParams, tpe) {
		switch (tpe.$) {
			case 'Variable':
				var varName = tpe.b;
				return $elm$core$Result$Ok(
					$author$project$Morphir$Scala$AST$Variable(
						$author$project$Morphir$IR$Name$toCamelCase(
							A2($elm$core$List$cons, 'encode', varName))));
			case 'Reference':
				var _v1 = tpe.b;
				var packageName = _v1.a;
				var moduleName = _v1.b;
				var typeName = _v1.c;
				var typeArgs = tpe.c;
				var scalaPackageName = A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
					_Utils_ap(packageName, moduleName));
				var encoderName = $author$project$Morphir$IR$Name$toCamelCase(
					A2($elm$core$List$cons, 'encode', typeName));
				var codecPath = $elm$core$List$concat(
					_List_fromArray(
						[
							scalaPackageName,
							_List_fromArray(
							['Codec'])
						]));
				var scalaReference = A2($author$project$Morphir$Scala$AST$Ref, codecPath, encoderName);
				if (!typeArgs.b) {
					return $elm$core$Result$Ok(scalaReference);
				} else {
					return A2(
						$elm$core$Result$map,
						$author$project$Morphir$Scala$AST$Apply(scalaReference),
						A2(
							$elm$core$Result$map,
							$elm$core$List$map(
								$author$project$Morphir$Scala$AST$ArgValue($elm$core$Maybe$Nothing)),
							$author$project$Morphir$SDK$ResultList$keepFirstError(
								A2(
									$elm$core$List$map,
									function (typeArg) {
										return A5($author$project$Morphir$Scala$Feature$Codec$mapTypeToEncoderReference, maybeFqn, tpeName, tpePath, typeParams, typeArg);
									},
									typeArgs))));
				}
			case 'Tuple':
				var a = tpe.a;
				var types = tpe.b;
				var encodedTypesResult = A2(
					$elm$core$Result$map,
					function (elementsEncoderReference) {
						return A2(
							$elm$core$List$indexedMap,
							F2(
								function (index, elEncodeRef) {
									return A2(
										$author$project$Morphir$Scala$AST$Apply,
										elEncodeRef,
										_List_fromArray(
											[
												A2(
												$author$project$Morphir$Scala$AST$ArgValue,
												$elm$core$Maybe$Nothing,
												A2(
													$author$project$Morphir$Scala$AST$Select,
													$author$project$Morphir$Scala$AST$Variable(
														$author$project$Morphir$IR$Name$toCamelCase(tpeName)),
													'_' + $elm$core$String$fromInt(index + 1)))
											]));
								}),
							elementsEncoderReference);
					},
					$author$project$Morphir$SDK$ResultList$keepFirstError(
						A2(
							$elm$core$List$map,
							function (currentType) {
								return A5($author$project$Morphir$Scala$Feature$Codec$mapTypeToEncoderReference, maybeFqn, tpeName, tpePath, typeParams, currentType);
							},
							types)));
				return A2(
					$elm$core$Result$map,
					function (encodedElements) {
						return A2(
							$author$project$Morphir$Scala$AST$Lambda,
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Morphir$IR$Name$toCamelCase(tpeName),
									$elm$core$Maybe$Just(
										$author$project$Morphir$Scala$Feature$Core$mapType(tpe)))
								]),
							A2(
								$author$project$Morphir$Scala$AST$Apply,
								A2($author$project$Morphir$Scala$AST$Ref, $author$project$Morphir$Scala$Feature$Codec$circeJsonPath, 'arr'),
								A2(
									$elm$core$List$map,
									$author$project$Morphir$Scala$AST$ArgValue($elm$core$Maybe$Nothing),
									encodedElements)));
					},
					encodedTypesResult);
			case 'Record':
				var a = tpe.a;
				var fields = tpe.b;
				var recordTpe = function () {
					if (maybeFqn.$ === 'Just') {
						var fqn = maybeFqn.a;
						return A3(
							$author$project$Morphir$IR$Type$Reference,
							a,
							fqn,
							A2(
								$elm$core$List$map,
								$author$project$Morphir$IR$Type$Variable(a),
								typeParams));
					} else {
						return tpe;
					}
				}();
				var objFields = $author$project$Morphir$SDK$ResultList$keepFirstError(
					A2(
						$elm$core$List$map,
						function (field) {
							return A2(
								$elm$core$Result$map,
								function (fieldEncoder) {
									var fieldNameLiteral = $author$project$Morphir$Scala$AST$Literal(
										$author$project$Morphir$Scala$AST$StringLit(
											$author$project$Morphir$IR$Name$toCamelCase(field.name)));
									var fieldName = $author$project$Morphir$IR$Name$toCamelCase(field.name);
									return A2(
										$author$project$Morphir$Scala$AST$ArgValue,
										$elm$core$Maybe$Nothing,
										$author$project$Morphir$Scala$AST$Tuple(
											_List_fromArray(
												[
													fieldNameLiteral,
													A2(
													$author$project$Morphir$Scala$AST$Apply,
													fieldEncoder,
													_List_fromArray(
														[
															A2(
															$author$project$Morphir$Scala$AST$ArgValue,
															$elm$core$Maybe$Nothing,
															A2(
																$author$project$Morphir$Scala$AST$Select,
																$author$project$Morphir$Scala$AST$Variable(
																	$author$project$Morphir$IR$Name$toCamelCase(tpeName)),
																fieldName))
														]))
												])));
								},
								A5($author$project$Morphir$Scala$Feature$Codec$mapTypeToEncoderReference, maybeFqn, tpeName, tpePath, typeParams, field.tpe));
						},
						fields));
				var objRef = A2(
					$elm$core$Result$map,
					$author$project$Morphir$Scala$AST$Apply(
						A2($author$project$Morphir$Scala$AST$Ref, $author$project$Morphir$Scala$Feature$Codec$circeJsonPath, 'obj')),
					objFields);
				return A2(
					$elm$core$Result$map,
					$author$project$Morphir$Scala$Feature$Codec$encoderLambda(
						_List_fromArray(
							[
								_Utils_Tuple2(
								tpeName,
								$elm$core$Maybe$Just(
									$author$project$Morphir$Scala$Feature$Core$mapType(recordTpe)))
							])),
					objRef);
			case 'ExtensibleRecord':
				var a = tpe.a;
				var name = tpe.b;
				var fields = tpe.c;
				var objFields = $author$project$Morphir$SDK$ResultList$keepFirstError(
					A2(
						$elm$core$List$map,
						function (field) {
							return A2(
								$elm$core$Result$map,
								function (fieldValueEncoder) {
									var fieldNameLiteral = $author$project$Morphir$Scala$AST$Literal(
										$author$project$Morphir$Scala$AST$StringLit(
											$author$project$Morphir$IR$Name$toCamelCase(field.name)));
									var fieldName = $author$project$Morphir$IR$Name$toCamelCase(field.name);
									return A2(
										$author$project$Morphir$Scala$AST$ArgValue,
										$elm$core$Maybe$Nothing,
										$author$project$Morphir$Scala$AST$Tuple(
											_List_fromArray(
												[
													fieldNameLiteral,
													A2(
													$author$project$Morphir$Scala$AST$Apply,
													fieldValueEncoder,
													_List_fromArray(
														[
															A2(
															$author$project$Morphir$Scala$AST$ArgValue,
															$elm$core$Maybe$Nothing,
															A2(
																$author$project$Morphir$Scala$AST$Select,
																$author$project$Morphir$Scala$AST$Variable(
																	$author$project$Morphir$IR$Name$toCamelCase(tpeName)),
																fieldName))
														]))
												])));
								},
								A5($author$project$Morphir$Scala$Feature$Codec$mapTypeToEncoderReference, maybeFqn, tpeName, tpePath, typeParams, field.tpe));
						},
						fields));
				var objRef = A2(
					$elm$core$Result$map,
					$author$project$Morphir$Scala$AST$Apply(
						A2($author$project$Morphir$Scala$AST$Ref, $author$project$Morphir$Scala$Feature$Codec$circeJsonPath, 'obj')),
					objFields);
				return A2(
					$elm$core$Result$map,
					$author$project$Morphir$Scala$Feature$Codec$encoderLambda(
						_List_fromArray(
							[
								_Utils_Tuple2(
								tpeName,
								$elm$core$Maybe$Just(
									$author$project$Morphir$Scala$Feature$Core$mapType(tpe)))
							])),
					objRef);
			case 'Function':
				var a = tpe.a;
				var argType = tpe.b;
				var returnType = tpe.c;
				return $elm$core$Result$Err('Cannot encode a function');
			default:
				var a = tpe.a;
				return $elm$core$Result$Ok(
					A2(
						$author$project$Morphir$Scala$AST$Ref,
						_List_fromArray(
							['morphir', 'sdk', 'basics', 'Codec']),
						'encodeUnit'));
		}
	});
var $author$project$Morphir$Scala$Feature$Codec$mapConstructorsToEncoders = F4(
	function (tpePath, fqName, ctorArgs, typeParams) {
		var ctorName = fqName.c;
		var scalaFqn = function (_v1) {
			var scalaTypePath = _v1.a;
			var scalaName = _v1.b;
			return A2(
				$elm$core$String$join,
				'.',
				_List_fromArray(
					[scalaTypePath, scalaName]));
		}(
			A2(
				$elm$core$Tuple$mapSecond,
				$author$project$Morphir$IR$Name$toTitleCase,
				A2(
					$elm$core$Tuple$mapFirst,
					$elm$core$String$join('.'),
					$author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(fqName))));
		var argsEncodersResult = $author$project$Morphir$SDK$ResultList$keepFirstError(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var argName = _v0.a;
					var argType = _v0.b;
					var arg = $author$project$Morphir$Scala$AST$Variable(
						$author$project$Morphir$IR$Name$toCamelCase(argName));
					return A2(
						$elm$core$Result$map,
						function (typeEncoder) {
							return A2(
								$author$project$Morphir$Scala$AST$Apply,
								typeEncoder,
								_List_fromArray(
									[
										A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, arg)
									]));
						},
						A5($author$project$Morphir$Scala$Feature$Codec$mapTypeToEncoderReference, $elm$core$Maybe$Nothing, argName, _List_Nil, typeParams, argType));
				},
				ctorArgs));
		var argNames = A2(
			$elm$core$List$map,
			function (arg) {
				return $author$project$Morphir$Scala$AST$NamedMatch(
					$author$project$Morphir$IR$Name$toCamelCase(arg.a));
			},
			ctorArgs);
		return $elm$core$List$isEmpty(ctorArgs) ? $elm$core$Result$Ok(
			_Utils_Tuple2(
				A3($author$project$Morphir$Scala$AST$UnapplyMatch, _List_Nil, scalaFqn, argNames),
				A2(
					$author$project$Morphir$Scala$AST$Apply,
					A2($author$project$Morphir$Scala$AST$Ref, $author$project$Morphir$Scala$Feature$Codec$circeJsonPath, 'fromString'),
					$elm$core$List$singleton(
						A2(
							$author$project$Morphir$Scala$AST$ArgValue,
							$elm$core$Maybe$Nothing,
							$author$project$Morphir$Scala$AST$Literal(
								$author$project$Morphir$Scala$AST$StringLit(
									$author$project$Morphir$IR$Name$toTitleCase(ctorName)))))))) : A2(
			$elm$core$Result$map,
			function (argsEncoders) {
				return _Utils_Tuple2(
					A3($author$project$Morphir$Scala$AST$UnapplyMatch, _List_Nil, scalaFqn, argNames),
					A2(
						$author$project$Morphir$Scala$AST$Apply,
						A2($author$project$Morphir$Scala$AST$Ref, $author$project$Morphir$Scala$Feature$Codec$circeJsonPath, 'arr'),
						A2(
							$elm$core$List$map,
							$author$project$Morphir$Scala$AST$ArgValue($elm$core$Maybe$Nothing),
							_Utils_ap(
								_List_fromArray(
									[
										A2(
										$author$project$Morphir$Scala$AST$Apply,
										A2($author$project$Morphir$Scala$AST$Ref, $author$project$Morphir$Scala$Feature$Codec$circeJsonPath, 'fromString'),
										$elm$core$List$singleton(
											A2(
												$author$project$Morphir$Scala$AST$ArgValue,
												$elm$core$Maybe$Nothing,
												$author$project$Morphir$Scala$AST$Literal(
													$author$project$Morphir$Scala$AST$StringLit(
														$author$project$Morphir$IR$Name$toTitleCase(ctorName))))))
									]),
								argsEncoders))));
			},
			argsEncodersResult);
	});
var $author$project$Morphir$Scala$Feature$Codec$mapTypeDefinitionToEncoder = F3(
	function (currentPackagePath, currentModulePath, _v0) {
		var typeName = _v0.a;
		var accessControlledDocumentedTypeDef = _v0.b;
		var typeFqn = A3($author$project$Morphir$IR$FQName$fQName, currentPackagePath, currentModulePath, typeName);
		var _v1 = $author$project$Morphir$Scala$Feature$Core$mapFQNameToPathAndName(typeFqn);
		var scalaTypePath = _v1.a;
		var scalaTypeName = _v1.b;
		var _v2 = accessControlledDocumentedTypeDef.value.value;
		if (_v2.$ === 'TypeAliasDefinition') {
			var typeParams = _v2.a;
			var typeExp = _v2.b;
			return A2(
				$elm$core$Result$map,
				A5(
					$author$project$Morphir$Scala$Feature$Codec$scalaDeclaration,
					'encode',
					'Encoder',
					A3($author$project$Morphir$Scala$Feature$Codec$scalaType, typeParams, scalaTypeName, scalaTypePath),
					scalaTypeName,
					typeParams),
				A5(
					$author$project$Morphir$Scala$Feature$Codec$mapTypeToEncoderReference,
					$elm$core$Maybe$Just(typeFqn),
					typeName,
					scalaTypePath,
					typeParams,
					typeExp));
		} else {
			var typeParams = _v2.a;
			var accessControlledCtors = _v2.b;
			var patternMatch = $author$project$Morphir$SDK$ResultList$keepFirstError(
				A2(
					$elm$core$List$map,
					function (_v3) {
						var ctorName = _v3.a;
						var ctorArgs = _v3.b;
						return A4(
							$author$project$Morphir$Scala$Feature$Codec$mapConstructorsToEncoders,
							scalaTypePath,
							_Utils_Tuple3(currentPackagePath, currentModulePath, ctorName),
							ctorArgs,
							typeParams);
					},
					$elm$core$Dict$toList(accessControlledCtors.value)));
			return A2(
				$elm$core$Result$map,
				A5(
					$author$project$Morphir$Scala$Feature$Codec$scalaDeclaration,
					'encode',
					'Encoder',
					A3($author$project$Morphir$Scala$Feature$Codec$scalaType, typeParams, scalaTypeName, scalaTypePath),
					scalaTypeName,
					typeParams),
				A2(
					$elm$core$Result$map,
					$author$project$Morphir$Scala$Feature$Codec$encoderLambda(
						_List_fromArray(
							[
								_Utils_Tuple2(
								scalaTypeName,
								$elm$core$Maybe$Just(
									A3($author$project$Morphir$Scala$Feature$Codec$typeRef, scalaTypeName, scalaTypePath, typeParams)))
							])),
					A2(
						$elm$core$Result$map,
						$author$project$Morphir$Scala$AST$Match(
							$author$project$Morphir$Scala$AST$Variable(
								$author$project$Morphir$IR$Name$toCamelCase(scalaTypeName))),
						A2($elm$core$Result$map, $author$project$Morphir$Scala$AST$MatchCases, patternMatch))));
		}
	});
var $author$project$Morphir$Scala$Feature$Codec$mapModuleDefinitionToCodecs = F3(
	function (currentPackagePath, currentModulePath, accessControlledModuleDef) {
		var scalaPackagePath = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
			_Utils_ap(currentPackagePath, currentModulePath));
		var encoderTypeMembersResult = $author$project$Morphir$SDK$ResultList$keepFirstError(
			A2(
				$elm$core$List$map,
				function (types) {
					return A3($author$project$Morphir$Scala$Feature$Codec$mapTypeDefinitionToEncoder, currentPackagePath, currentModulePath, types);
				},
				$elm$core$Dict$toList(accessControlledModuleDef.value.types)));
		var decoderTypeMembersResult = $author$project$Morphir$SDK$ResultList$keepFirstError(
			A2(
				$elm$core$List$map,
				function (types) {
					return A3($author$project$Morphir$Scala$Feature$Codec$mapTypeDefinitionToDecoder, currentPackagePath, currentModulePath, types);
				},
				$elm$core$Dict$toList(accessControlledModuleDef.value.types)));
		var moduleUnit = A3(
			$elm$core$Result$map2,
			F2(
				function (encoderTypeMembers, decoderTypeMembers) {
					return {
						dirPath: $author$project$Morphir$Scala$Common$prefixKeywords(scalaPackagePath),
						fileName: 'Codec.scala',
						imports: _List_Nil,
						packageDecl: scalaPackagePath,
						typeDecls: _List_fromArray(
							[
								A2(
								$author$project$Morphir$Scala$AST$Documented,
								$elm$core$Maybe$Just(
									A2(
										$elm$core$String$join,
										'',
										_List_fromArray(
											[
												'Generated based on ',
												A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', currentModulePath)
											]))),
								$author$project$Morphir$Scala$AST$withoutAnnotation(
									$author$project$Morphir$Scala$AST$Object(
										{
											body: $elm$core$Maybe$Nothing,
											_extends: _List_Nil,
											members: $elm$core$List$concat(
												_List_fromArray(
													[encoderTypeMembers, decoderTypeMembers])),
											modifiers: function () {
												var _v0 = accessControlledModuleDef.access;
												if (_v0.$ === 'Public') {
													return _List_Nil;
												} else {
													return _List_fromArray(
														[
															$author$project$Morphir$Scala$AST$Private(
															A2(
																$elm$core$Maybe$map,
																A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
																$elm_community$list_extra$List$Extra$last(currentPackagePath)))
														]);
												}
											}(),
											name: 'Codec'
										})))
							])
					};
				}),
			encoderTypeMembersResult,
			decoderTypeMembersResult);
		return A2($elm$core$Result$map, $elm$core$List$singleton, moduleUnit);
	});
var $author$project$Morphir$Scala$Backend$mapPackageDefinition = F5(
	function (opt, testSuite, distribution, packagePath, packageDef) {
		var generatedTestsResult = A2(
			$elm$core$Result$mapError,
			$author$project$Morphir$Scala$Backend$TestError,
			A4(
				$author$project$Morphir$Scala$Feature$TestBackend$genTestSuite,
				opt.testOptions,
				packagePath,
				$author$project$Morphir$IR$fromDistribution(distribution),
				testSuite));
		var generatedScala = A2(
			$elm$core$List$concatMap,
			function (_v1) {
				var modulePath = _v1.a;
				var moduleImpl = _v1.b;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A3($author$project$Morphir$Scala$Feature$Core$mapModuleDefinition, packagePath, modulePath, moduleImpl)
						]));
			},
			$elm$core$Dict$toList(packageDef.modules));
		var generatedCodecsResult = opt.includeCodecs ? A2(
			$elm$core$Result$mapError,
			$author$project$Morphir$Scala$Backend$CodecError,
			A2(
				$elm$core$Result$map,
				$elm$core$List$concat,
				$author$project$Morphir$SDK$ResultList$keepFirstError(
					A2(
						$elm$core$List$map,
						function (_v0) {
							var modulePath = _v0.a;
							var moduleImpl = _v0.b;
							return A2(
								$elm$core$Result$map,
								A2($elm$core$Basics$composeR, $elm$core$List$singleton, $elm$core$List$concat),
								A3($author$project$Morphir$Scala$Feature$Codec$mapModuleDefinitionToCodecs, packagePath, modulePath, moduleImpl));
						},
						$elm$core$Dict$toList(packageDef.modules))))) : $elm$core$Result$Ok(_List_Nil);
		return A3(
			$elm$core$Result$map2,
			F2(
				function (generatedTests, generatedCodecs) {
					return $elm$core$Dict$fromList(
						A2(
							$elm$core$List$map,
							function (compilationUnit) {
								var fileContent = A2(
									$author$project$Morphir$Scala$PrettyPrinter$mapCompilationUnit,
									A2($author$project$Morphir$Scala$PrettyPrinter$Options, 2, 80),
									compilationUnit);
								return _Utils_Tuple2(
									_Utils_Tuple2(compilationUnit.dirPath, compilationUnit.fileName),
									fileContent);
							},
							$elm$core$List$concat(
								_List_fromArray(
									[generatedScala, generatedCodecs, generatedTests]))));
				}),
			generatedTestsResult,
			generatedCodecsResult);
	});
var $author$project$Morphir$IR$Package$selectModules = F3(
	function (modulesToInclude, packageName, packageDef) {
		selectModules:
		while (true) {
			var findAllDependencies = function (current) {
				return A3(
					$elm$core$List$foldl,
					$elm$core$Set$union,
					$elm$core$Set$empty,
					A2(
						$elm$core$List$filterMap,
						function (currentModuleName) {
							return A2(
								$elm$core$Maybe$map,
								function (mDef) {
									return $elm$core$Set$fromList(
										A2(
											$elm$core$List$filterMap,
											function (_v1) {
												var pName = _v1.a;
												var mName = _v1.b;
												return _Utils_eq(pName, packageName) ? $elm$core$Maybe$Just(mName) : $elm$core$Maybe$Nothing;
											},
											$elm$core$Set$toList(
												$author$project$Morphir$IR$Module$dependsOnModules(mDef.value))));
								},
								A2($elm$core$Dict$get, currentModuleName, packageDef.modules));
						},
						$elm$core$Set$toList(current)));
			};
			var expandedModulesToInclude = A2(
				$elm$core$Set$union,
				findAllDependencies(modulesToInclude),
				modulesToInclude);
			if (_Utils_eq(modulesToInclude, expandedModulesToInclude)) {
				return _Utils_update(
					packageDef,
					{
						modules: $elm$core$Dict$fromList(
							A2(
								$elm$core$List$filter,
								function (_v0) {
									var moduleName = _v0.a;
									return A2($elm$core$Set$member, moduleName, modulesToInclude);
								},
								$elm$core$Dict$toList(packageDef.modules)))
					});
			} else {
				var $temp$modulesToInclude = expandedModulesToInclude,
					$temp$packageName = packageName,
					$temp$packageDef = packageDef;
				modulesToInclude = $temp$modulesToInclude;
				packageName = $temp$packageName;
				packageDef = $temp$packageDef;
				continue selectModules;
			}
		}
	});
var $author$project$Morphir$Scala$Backend$mapDistribution = F3(
	function (opt, testSuite, distro) {
		var packageName = distro.a;
		var dependencies = distro.b;
		var packageDef = distro.c;
		var _v1 = opt.limitToModules;
		if (_v1.$ === 'Just') {
			var modulesToInclude = _v1.a;
			return A5(
				$author$project$Morphir$Scala$Backend$mapPackageDefinition,
				opt,
				testSuite,
				distro,
				packageName,
				A3($author$project$Morphir$IR$Package$selectModules, modulesToInclude, packageName, packageDef));
		} else {
			return A5($author$project$Morphir$Scala$Backend$mapPackageDefinition, opt, testSuite, distro, packageName, packageDef);
		}
	});
var $author$project$Morphir$Scala$Spark$Backend$FunctionNotFound = function (a) {
	return {$: 'FunctionNotFound', a: a};
};
var $author$project$Morphir$Scala$Spark$Backend$RelationalBackendError = function (a) {
	return {$: 'RelationalBackendError', a: a};
};
var $author$project$Morphir$Scala$Spark$Backend$UnknownArgumentType = function (a) {
	return {$: 'UnknownArgumentType', a: a};
};
var $author$project$Morphir$Spark$API$dataFrame = A2(
	$author$project$Morphir$Scala$AST$TypeRef,
	_List_fromArray(
		['org', 'apache', 'spark', 'sql']),
	'DataFrame');
var $author$project$Morphir$Relational$IR$From = function (a) {
	return {$: 'From', a: a};
};
var $author$project$Morphir$Relational$IR$Select = F2(
	function (a, b) {
		return {$: 'Select', a: a, b: b};
	});
var $author$project$Morphir$Relational$Backend$UnhandledValue = function (a) {
	return {$: 'UnhandledValue', a: a};
};
var $author$project$Morphir$Relational$Backend$UnknownValueReturnedByMapFunction = function (a) {
	return {$: 'UnknownValueReturnedByMapFunction', a: a};
};
var $author$project$Morphir$Relational$IR$Where = F2(
	function (a, b) {
		return {$: 'Where', a: a, b: b};
	});
var $author$project$Morphir$Relational$Backend$mapValue = function (value) {
	_v0$3:
	while (true) {
		switch (value.$) {
			case 'Variable':
				var varName = value.b;
				return $elm$core$Result$Ok(
					$author$project$Morphir$Relational$IR$From(varName));
			case 'Apply':
				if ((((((((((((((((((((((value.b.$ === 'Apply') && (value.b.b.$ === 'Reference')) && value.b.b.b.a.b) && value.b.b.b.a.a.b) && (value.b.b.b.a.a.a === 'morphir')) && (!value.b.b.b.a.a.b.b)) && value.b.b.b.a.b.b) && value.b.b.b.a.b.a.b) && (value.b.b.b.a.b.a.a === 's')) && value.b.b.b.a.b.a.b.b) && (value.b.b.b.a.b.a.b.a === 'd')) && value.b.b.b.a.b.a.b.b.b) && (value.b.b.b.a.b.a.b.b.a === 'k')) && (!value.b.b.b.a.b.a.b.b.b.b)) && (!value.b.b.b.a.b.b.b)) && value.b.b.b.b.b) && value.b.b.b.b.a.b) && (value.b.b.b.b.a.a === 'list')) && (!value.b.b.b.b.a.b.b)) && (!value.b.b.b.b.b.b)) && value.b.b.b.c.b) && (!value.b.b.b.c.b.b)) {
					switch (value.b.b.b.c.a) {
						case 'filter':
							var _v1 = value.b;
							var _v2 = _v1.b;
							var _v3 = _v2.b;
							var _v4 = _v3.a;
							var _v5 = _v4.a;
							var _v6 = _v4.b;
							var _v7 = _v6.a;
							var _v8 = _v7.b;
							var _v9 = _v8.b;
							var _v10 = _v3.b;
							var _v11 = _v10.a;
							var _v12 = _v3.c;
							var predicate = _v1.c;
							var sourceRelation = value.c;
							return A2(
								$elm$core$Result$map,
								function (source) {
									return A2($author$project$Morphir$Relational$IR$Where, predicate, source);
								},
								$author$project$Morphir$Relational$Backend$mapValue(sourceRelation));
						case 'map':
							if (value.b.c.$ === 'Lambda') {
								var _v13 = value.b;
								var _v14 = _v13.b;
								var _v15 = _v14.b;
								var _v16 = _v15.a;
								var _v17 = _v16.a;
								var _v18 = _v16.b;
								var _v19 = _v18.a;
								var _v20 = _v19.b;
								var _v21 = _v20.b;
								var _v22 = _v15.b;
								var _v23 = _v22.a;
								var _v24 = _v15.c;
								var _v25 = _v13.c;
								var argPattern = _v25.b;
								var mapping = _v25.c;
								var sourceRelation = value.c;
								if (mapping.$ === 'Record') {
									var fields = mapping.b;
									return A2(
										$elm$core$Result$map,
										function (source) {
											return A2(
												$author$project$Morphir$Relational$IR$Select,
												$elm$core$Dict$toList(fields),
												source);
										},
										$author$project$Morphir$Relational$Backend$mapValue(sourceRelation));
								} else {
									var other = mapping;
									return $elm$core$Result$Err(
										$author$project$Morphir$Relational$Backend$UnknownValueReturnedByMapFunction(other));
								}
							} else {
								break _v0$3;
							}
						default:
							break _v0$3;
					}
				} else {
					break _v0$3;
				}
			default:
				break _v0$3;
		}
	}
	var other = value;
	var _v27 = A2($elm$core$Debug$log, 'Relational.Backend.mapValue unhandled', other);
	return $elm$core$Result$Err(
		$author$project$Morphir$Relational$Backend$UnhandledValue(other));
};
var $author$project$Morphir$Relational$Backend$mapFunctionBody = function (body) {
	return $author$project$Morphir$Relational$Backend$mapValue(body);
};
var $author$project$Morphir$Scala$Spark$Backend$LambdaExpected = function (a) {
	return {$: 'LambdaExpected', a: a};
};
var $author$project$Morphir$Spark$API$alias = F2(
	function (name, value) {
		return A2(
			$author$project$Morphir$Scala$AST$Apply,
			A2($author$project$Morphir$Scala$AST$Select, value, 'alias'),
			_List_fromArray(
				[
					A2(
					$author$project$Morphir$Scala$AST$ArgValue,
					$elm$core$Maybe$Nothing,
					$author$project$Morphir$Scala$AST$Literal(
						$author$project$Morphir$Scala$AST$StringLit(name)))
				]));
	});
var $author$project$Morphir$Spark$API$filter = F2(
	function (predicate, from) {
		return A2(
			$author$project$Morphir$Scala$AST$Apply,
			A2($author$project$Morphir$Scala$AST$Select, from, 'filter'),
			_List_fromArray(
				[
					A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, predicate)
				]));
	});
var $author$project$Morphir$Spark$API$join = F4(
	function (rightRelation, predicate, joinTypeLabel, leftRelation) {
		return A2(
			$author$project$Morphir$Scala$AST$Apply,
			A2($author$project$Morphir$Scala$AST$Select, leftRelation, 'join'),
			_List_fromArray(
				[
					A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, rightRelation),
					A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, predicate),
					A2(
					$author$project$Morphir$Scala$AST$ArgValue,
					$elm$core$Maybe$Nothing,
					$author$project$Morphir$Scala$AST$Literal(
						$author$project$Morphir$Scala$AST$StringLit(joinTypeLabel)))
				]));
	});
var $author$project$Morphir$Scala$AST$BinOp = F3(
	function (a, b, c) {
		return {$: 'BinOp', a: a, b: b, c: c};
	});
var $author$project$Morphir$Spark$API$andWhen = F3(
	function (cond, thenBranch, soFar) {
		return A2(
			$author$project$Morphir$Scala$AST$Apply,
			A2($author$project$Morphir$Scala$AST$Select, soFar, 'when'),
			_List_fromArray(
				[
					A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, cond),
					A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, thenBranch)
				]));
	});
var $author$project$Morphir$Spark$API$column = function (name) {
	return A2(
		$author$project$Morphir$Scala$AST$Apply,
		A2(
			$author$project$Morphir$Scala$AST$Ref,
			_List_fromArray(
				['org', 'apache', 'spark', 'sql', 'functions']),
			'col'),
		_List_fromArray(
			[
				A2(
				$author$project$Morphir$Scala$AST$ArgValue,
				$elm$core$Maybe$Nothing,
				$author$project$Morphir$Scala$AST$Literal(
					$author$project$Morphir$Scala$AST$StringLit(name)))
			]));
};
var $author$project$Morphir$Spark$API$literal = function (lit) {
	return A2(
		$author$project$Morphir$Scala$AST$Apply,
		A2(
			$author$project$Morphir$Scala$AST$Ref,
			_List_fromArray(
				['org', 'apache', 'spark', 'sql', 'functions']),
			'lit'),
		_List_fromArray(
			[
				A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, lit)
			]));
};
var $author$project$Morphir$Spark$API$otherwise = F2(
	function (elseBranch, soFar) {
		return A2(
			$author$project$Morphir$Scala$AST$Apply,
			A2($author$project$Morphir$Scala$AST$Select, soFar, 'otherwise'),
			_List_fromArray(
				[
					A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, elseBranch)
				]));
	});
var $author$project$Morphir$Spark$API$when = F2(
	function (cond, thenBranch) {
		return A2(
			$author$project$Morphir$Scala$AST$Apply,
			A2(
				$author$project$Morphir$Scala$AST$Ref,
				_List_fromArray(
					['org', 'apache', 'spark', 'sql', 'functions']),
				'when'),
			_List_fromArray(
				[
					A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, cond),
					A2($author$project$Morphir$Scala$AST$ArgValue, $elm$core$Maybe$Nothing, thenBranch)
				]));
	});
var $author$project$Morphir$Scala$Spark$Backend$mapColumnExpression = function (value) {
	mapColumnExpression:
	while (true) {
		var mapLiteral = function (l) {
			switch (l.$) {
				case 'BoolLiteral':
					var bool = l.a;
					return $author$project$Morphir$Scala$AST$BooleanLit(bool);
				case 'CharLiteral':
					var _char = l.a;
					return $author$project$Morphir$Scala$AST$CharacterLit(_char);
				case 'StringLiteral':
					var string = l.a;
					return $author$project$Morphir$Scala$AST$StringLit(string);
				case 'WholeNumberLiteral':
					var _int = l.a;
					return $author$project$Morphir$Scala$AST$IntegerLit(_int);
				case 'FloatLiteral':
					var _float = l.a;
					return $author$project$Morphir$Scala$AST$FloatLit(_float);
				default:
					var decimal = l.a;
					return $author$project$Morphir$Scala$AST$DecimalLit(decimal);
			}
		};
		var _default = function (v) {
			return A2($author$project$Morphir$Scala$Feature$Core$mapValue, $elm$core$Set$empty, v);
		};
		_v0$4:
		while (true) {
			switch (value.$) {
				case 'Literal':
					var lit = value.b;
					return $author$project$Morphir$Spark$API$literal(
						$author$project$Morphir$Scala$AST$Literal(
							mapLiteral(lit)));
				case 'Field':
					var name = value.c;
					return $author$project$Morphir$Spark$API$column(
						$author$project$Morphir$IR$Name$toCamelCase(name));
				case 'Apply':
					if ((value.b.$ === 'Apply') && (value.b.b.$ === 'Reference')) {
						var _v1 = value.b;
						var _v2 = _v1.b;
						var fqn = _v2.b;
						var arg1 = _v1.c;
						var arg2 = value.c;
						var _v3 = $author$project$Morphir$IR$FQName$toString(fqn);
						if (_v3 === 'Morphir.SDK:Basics:equal') {
							return A3(
								$author$project$Morphir$Scala$AST$BinOp,
								$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(arg1),
								'===',
								$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(arg2));
						} else {
							return _default(value);
						}
					} else {
						break _v0$4;
					}
				case 'IfThenElse':
					var toScala = F2(
						function (_v4, soFar) {
							toScala:
							while (true) {
								var cases = _v4.a;
								var otherwise = _v4.b;
								if (!cases.b) {
									return A2(
										$author$project$Morphir$Spark$API$otherwise,
										$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(otherwise),
										soFar);
								} else {
									var _v6 = cases.a;
									var headCond = _v6.a;
									var headBranch = _v6.b;
									var tailCases = cases.b;
									var $temp$_v4 = _Utils_Tuple2(tailCases, otherwise),
										$temp$soFar = A3(
										$author$project$Morphir$Spark$API$andWhen,
										$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(headCond),
										$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(headBranch),
										soFar);
									_v4 = $temp$_v4;
									soFar = $temp$soFar;
									continue toScala;
								}
							}
						});
					var toIfElseChain = function (v) {
						if (v.$ === 'IfThenElse') {
							var cond = v.b;
							var thenBranch = v.c;
							var elseBranch = v.d;
							var _v8 = toIfElseChain(elseBranch);
							var nestedCases = _v8.a;
							var otherwise = _v8.b;
							return _Utils_Tuple2(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(cond, thenBranch),
									nestedCases),
								otherwise);
						} else {
							return _Utils_Tuple2(_List_Nil, v);
						}
					};
					var _v9 = toIfElseChain(value);
					if (!_v9.a.b) {
						var otherwise = _v9.b;
						var $temp$value = otherwise;
						value = $temp$value;
						continue mapColumnExpression;
					} else {
						var _v10 = _v9.a;
						var _v11 = _v10.a;
						var firstCond = _v11.a;
						var firstBranch = _v11.b;
						var otherCases = _v10.b;
						var otherwise = _v9.b;
						return A2(
							toScala,
							_Utils_Tuple2(otherCases, otherwise),
							A2(
								$author$project$Morphir$Spark$API$when,
								$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(firstCond),
								$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(firstBranch)));
					}
				default:
					break _v0$4;
			}
		}
		return _default(value);
	}
};
var $author$project$Morphir$Spark$API$select = F2(
	function (columns, from) {
		return A2(
			$author$project$Morphir$Scala$AST$Apply,
			A2($author$project$Morphir$Scala$AST$Select, from, 'select'),
			A2(
				$elm$core$List$map,
				$author$project$Morphir$Scala$AST$ArgValue($elm$core$Maybe$Nothing),
				columns));
	});
var $author$project$Morphir$Scala$Spark$Backend$mapRelation = function (relation) {
	switch (relation.$) {
		case 'Values':
			var values = relation.a;
			return _Debug_todo(
				'Morphir.Scala.Spark.Backend',
				{
					start: {line: 148, column: 13},
					end: {line: 148, column: 23}
				})('not implemented yet');
		case 'From':
			var name = relation.a;
			return $elm$core$Result$Ok(
				$author$project$Morphir$Scala$AST$Variable(
					$author$project$Morphir$IR$Name$toCamelCase(name)));
		case 'Where':
			var predicate = relation.a;
			var sourceRelation = relation.b;
			if (predicate.$ === 'Lambda') {
				var body = predicate.c;
				return A2(
					$elm$core$Result$map,
					$author$project$Morphir$Spark$API$filter(
						$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(body)),
					$author$project$Morphir$Scala$Spark$Backend$mapRelation(sourceRelation));
			} else {
				return $elm$core$Result$Err(
					$author$project$Morphir$Scala$Spark$Backend$LambdaExpected(predicate));
			}
		case 'Select':
			var columns = relation.a;
			var sourceRelation = relation.b;
			return A2(
				$elm$core$Result$map,
				$author$project$Morphir$Spark$API$select(
					A2(
						$elm$core$List$map,
						function (_v2) {
							var columnName = _v2.a;
							var columnValue = _v2.b;
							return A2(
								$author$project$Morphir$Spark$API$alias,
								$author$project$Morphir$IR$Name$toCamelCase(columnName),
								$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(columnValue));
						},
						columns)),
				$author$project$Morphir$Scala$Spark$Backend$mapRelation(sourceRelation));
		default:
			var joinType = relation.a;
			var predicate = relation.b;
			var leftRelation = relation.c;
			var rightRelation = relation.d;
			return A3(
				$elm$core$Result$map2,
				F2(
					function (left, right) {
						return A4(
							$author$project$Morphir$Spark$API$join,
							right,
							$author$project$Morphir$Scala$Spark$Backend$mapColumnExpression(predicate),
							function () {
								if (joinType.$ === 'Inner') {
									return 'inner';
								} else {
									switch (joinType.a.$) {
										case 'Left':
											var _v4 = joinType.a;
											return 'left';
										case 'Right':
											var _v5 = joinType.a;
											return 'right';
										default:
											var _v6 = joinType.a;
											return 'full';
									}
								}
							}(),
							left);
					}),
				$author$project$Morphir$Scala$Spark$Backend$mapRelation(leftRelation),
				$author$project$Morphir$Scala$Spark$Backend$mapRelation(rightRelation));
	}
};
var $author$project$Morphir$Scala$Spark$Backend$mapFunctionDefinition = F2(
	function (ir, fullyQualifiedFunctionName) {
		var localFunctionName = fullyQualifiedFunctionName.c;
		var mapFunctionInputs = function (inputTypes) {
			return $author$project$Morphir$SDK$ResultList$keepFirstError(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var argName = _v0.a;
						var argType = _v0.c;
						if ((((((((((((((((((((((((argType.$ === 'Reference') && argType.b.a.b) && argType.b.a.a.b) && (argType.b.a.a.a === 'morphir')) && (!argType.b.a.a.b.b)) && argType.b.a.b.b) && argType.b.a.b.a.b) && (argType.b.a.b.a.a === 's')) && argType.b.a.b.a.b.b) && (argType.b.a.b.a.b.a === 'd')) && argType.b.a.b.a.b.b.b) && (argType.b.a.b.a.b.b.a === 'k')) && (!argType.b.a.b.a.b.b.b.b)) && (!argType.b.a.b.b.b)) && argType.b.b.b) && argType.b.b.a.b) && (argType.b.b.a.a === 'list')) && (!argType.b.b.a.b.b)) && (!argType.b.b.b.b)) && argType.b.c.b) && (argType.b.c.a === 'list')) && (!argType.b.c.b.b)) && argType.c.b) && (!argType.c.b.b)) {
							var _v2 = argType.b;
							var _v3 = _v2.a;
							var _v4 = _v3.a;
							var _v5 = _v3.b;
							var _v6 = _v5.a;
							var _v7 = _v6.b;
							var _v8 = _v7.b;
							var _v9 = _v2.b;
							var _v10 = _v9.a;
							var _v11 = _v2.c;
							var _v12 = argType.c;
							var itemType = _v12.a;
							return $elm$core$Result$Ok(
								{
									defaultValue: $elm$core$Maybe$Nothing,
									modifiers: _List_Nil,
									name: $author$project$Morphir$IR$Name$toCamelCase(argName),
									tpe: $author$project$Morphir$Spark$API$dataFrame
								});
						} else {
							var other = argType;
							return $elm$core$Result$Err(
								$author$project$Morphir$Scala$Spark$Backend$UnknownArgumentType(other));
						}
					},
					inputTypes));
		};
		var mapFunctionBody = function (body) {
			return A2(
				$elm$core$Result$andThen,
				$author$project$Morphir$Scala$Spark$Backend$mapRelation,
				A2(
					$elm$core$Result$mapError,
					$author$project$Morphir$Scala$Spark$Backend$RelationalBackendError,
					$author$project$Morphir$Relational$Backend$mapFunctionBody(body)));
		};
		return A2(
			$elm$core$Result$andThen,
			function (functionDef) {
				return A3(
					$elm$core$Result$map2,
					F2(
						function (scalaArgs, scalaFunctionBody) {
							return $author$project$Morphir$Scala$AST$FunctionDecl(
								{
									args: _List_fromArray(
										[scalaArgs]),
									body: $elm$core$Maybe$Just(scalaFunctionBody),
									modifiers: _List_Nil,
									name: $author$project$Morphir$IR$Name$toCamelCase(localFunctionName),
									returnType: $elm$core$Maybe$Just($author$project$Morphir$Spark$API$dataFrame),
									typeArgs: _List_Nil
								});
						}),
					mapFunctionInputs(functionDef.inputTypes),
					mapFunctionBody(functionDef.body));
			},
			A2(
				$elm$core$Result$fromMaybe,
				$author$project$Morphir$Scala$Spark$Backend$FunctionNotFound(fullyQualifiedFunctionName),
				A2($author$project$Morphir$IR$lookupValueDefinition, fullyQualifiedFunctionName, ir)));
	});
var $author$project$Morphir$Scala$Spark$Backend$mapDistribution = F2(
	function (opt, distro) {
		var packageName = distro.a;
		var packageDef = distro.c;
		var ir = $author$project$Morphir$IR$fromDistribution(distro);
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v1) {
					var moduleName = _v1.a;
					var accessControlledModuleDef = _v1.b;
					var packagePath = A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
						_Utils_ap(packageName, moduleName));
					var object = $author$project$Morphir$Scala$AST$Object(
						{
							body: $elm$core$Maybe$Nothing,
							_extends: _List_Nil,
							members: A2(
								$elm$core$List$filterMap,
								function (_v2) {
									var valueName = _v2.a;
									var _v3 = A2(
										$author$project$Morphir$Scala$Spark$Backend$mapFunctionDefinition,
										ir,
										_Utils_Tuple3(packageName, moduleName, valueName));
									if (_v3.$ === 'Ok') {
										var memberDecl = _v3.a;
										return $elm$core$Maybe$Just(
											$author$project$Morphir$Scala$AST$withoutAnnotation(memberDecl));
									} else {
										var err = _v3.a;
										var _v4 = A2($elm$core$Debug$log, 'mapFunctionDefinition error', err);
										return $elm$core$Maybe$Nothing;
									}
								},
								$elm$core$Dict$toList(accessControlledModuleDef.value.values)),
							modifiers: _List_Nil,
							name: 'SparkJobs'
						});
					var compilationUnit = {
						dirPath: packagePath,
						fileName: 'SparkJobs.scala',
						imports: _List_Nil,
						packageDecl: packagePath,
						typeDecls: _List_fromArray(
							[
								A2(
								$author$project$Morphir$Scala$AST$Documented,
								$elm$core$Maybe$Nothing,
								$author$project$Morphir$Scala$AST$withoutAnnotation(object))
							])
					};
					return _Utils_Tuple2(
						_Utils_Tuple2(packagePath, 'SparkJobs.scala'),
						A2(
							$author$project$Morphir$Scala$PrettyPrinter$mapCompilationUnit,
							A2($author$project$Morphir$Scala$PrettyPrinter$Options, 2, 80),
							compilationUnit));
				},
				$elm$core$Dict$toList(packageDef.modules)));
	});
var $author$project$Morphir$SpringBoot$Backend$getScalaPackagePath = F2(
	function (currentPackagePath, currentModulePath) {
		var _v0 = $elm$core$List$reverse(currentModulePath);
		if (!_v0.b) {
			return _Utils_Tuple2(_List_Nil, _List_Nil);
		} else {
			var lastName = _v0.a;
			var reverseModulePath = _v0.b;
			return _Utils_Tuple2(
				A2(
					$elm$core$List$append,
					A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
						currentPackagePath),
					A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
						$elm$core$List$reverse(reverseModulePath))),
				lastName);
		}
	});
var $author$project$Morphir$SpringBoot$Backend$mapMainApp = F2(
	function (currentPackagePath, currentModulePath) {
		var scalaPackagePath = A2($author$project$Morphir$SpringBoot$Backend$getScalaPackagePath, currentPackagePath, currentModulePath).a;
		var moduleMainApp = {
			dirPath: scalaPackagePath,
			fileName: 'MainApplication' + '.scala',
			imports: _List_Nil,
			packageDecl: scalaPackagePath,
			typeDecls: _List_fromArray(
				[
					A2(
					$author$project$Morphir$Scala$AST$Documented,
					$elm$core$Maybe$Just(
						A2(
							$elm$core$String$join,
							'',
							_List_fromArray(
								[
									'Generated based on ',
									A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', currentModulePath)
								]))),
					A2(
						$author$project$Morphir$Scala$AST$Annotated,
						_List_fromArray(
							['@org.springframework.boot.autoconfigure.SpringBootApplication']),
						$author$project$Morphir$Scala$AST$Class(
							{
								body: _List_Nil,
								ctorArgs: _List_Nil,
								_extends: _List_Nil,
								members: _List_fromArray(
									[
										A2(
										$author$project$Morphir$Scala$AST$Annotated,
										_List_fromArray(
											['@org.springframework.beans.factory.annotation.Autowired']),
										$author$project$Morphir$Scala$AST$ValueDecl(
											{
												modifiers: _List_fromArray(
													[
														$author$project$Morphir$Scala$AST$Private($elm$core$Maybe$Nothing)
													]),
												pattern: $author$project$Morphir$Scala$AST$NamedMatch('servletContext'),
												value: $author$project$Morphir$Scala$AST$Variable('null'),
												valueType: $elm$core$Maybe$Just(
													$author$project$Morphir$Scala$AST$TypeVar('javax.servlet.ServletContext'))
											})),
										A2(
										$author$project$Morphir$Scala$AST$Annotated,
										_List_fromArray(
											['@org.springframework.context.annotation.Bean']),
										$author$project$Morphir$Scala$AST$FunctionDecl(
											{
												args: _List_Nil,
												body: $elm$core$Maybe$Just(
													A2(
														$author$project$Morphir$Scala$AST$Block,
														_List_Nil,
														A3(
															$author$project$Morphir$Scala$AST$BinOp,
															A2(
																$author$project$Morphir$Scala$AST$Apply,
																A2(
																	$author$project$Morphir$Scala$AST$Ref,
																	_List_fromArray(
																		['servletContext']),
																	'setAttribute'),
																_List_fromArray(
																	[
																		A2(
																		$author$project$Morphir$Scala$AST$ArgValue,
																		$elm$core$Maybe$Nothing,
																		$author$project$Morphir$Scala$AST$Variable('com.codahale.metrics.servlets.MetricsServlet.METRICS_REGISTRY')),
																		A2(
																		$author$project$Morphir$Scala$AST$ArgValue,
																		$elm$core$Maybe$Nothing,
																		$author$project$Morphir$Scala$AST$Variable('morphir.reference.model.MainApplication.metricRegistry'))
																	])),
															$author$project$Morphir$File$SourceCode$newLine,
															A2(
																$author$project$Morphir$Scala$AST$Apply,
																A2($author$project$Morphir$Scala$AST$Ref, _List_Nil, 'new org.springframework.boot.web.servlet.ServletRegistrationBean'),
																_List_fromArray(
																	[
																		A2(
																		$author$project$Morphir$Scala$AST$ArgValue,
																		$elm$core$Maybe$Nothing,
																		$author$project$Morphir$Scala$AST$Variable('new com.codahale.metrics.servlets.MetricsServlet()')),
																		A2(
																		$author$project$Morphir$Scala$AST$ArgValue,
																		$elm$core$Maybe$Nothing,
																		$author$project$Morphir$Scala$AST$Variable('\"/metrics\"'))
																	]))))),
												modifiers: _List_Nil,
												name: 'adminServletRegistrationBean',
												returnType: $elm$core$Maybe$Nothing,
												typeArgs: _List_Nil
											})),
										A2(
										$author$project$Morphir$Scala$AST$Annotated,
										_List_fromArray(
											['@org.springframework.context.annotation.Bean']),
										$author$project$Morphir$Scala$AST$FunctionDecl(
											{
												args: _List_Nil,
												body: $elm$core$Maybe$Just(
													A2(
														$author$project$Morphir$Scala$AST$Select,
														A2(
															$author$project$Morphir$Scala$AST$Ref,
															_List_fromArray(
																[
																	'new springfox.documentation.spring.web.plugins.Docket(springfox.documentation.spi.DocumentationType.SWAGGER_2)',
																	'select',
																	'apis(springfox.documentation.builders.RequestHandlerSelectors.basePackage( \"' + ($author$project$Morphir$File$SourceCode$dotSep(scalaPackagePath) + '\" ))')
																]),
															'paths(springfox.documentation.builders.PathSelectors.any)'),
														'build')),
												modifiers: _List_Nil,
												name: 'api',
												returnType: $elm$core$Maybe$Just(
													$author$project$Morphir$Scala$AST$TypeVar('springfox.documentation.spring.web.plugins.Docket')),
												typeArgs: _List_Nil
											}))
									]),
								modifiers: _List_Nil,
								name: 'MainApplication',
								typeArgs: _List_Nil
							}))),
					A2(
					$author$project$Morphir$Scala$AST$Documented,
					$elm$core$Maybe$Just(
						A2(
							$elm$core$String$join,
							'',
							_List_fromArray(
								[
									'Generated based on ',
									A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', currentModulePath)
								]))),
					$author$project$Morphir$Scala$AST$withoutAnnotation(
						$author$project$Morphir$Scala$AST$Object(
							{
								body: $elm$core$Maybe$Just(
									A2(
										$author$project$Morphir$Scala$AST$Ref,
										_List_fromArray(
											['org.springframework.boot.SpringApplication']),
										'run(classOf[MainApplication], args:_*)')),
								_extends: _List_fromArray(
									[
										$author$project$Morphir$Scala$AST$TypeVar('App')
									]),
								members: _List_fromArray(
									[
										$author$project$Morphir$Scala$AST$withoutAnnotation(
										$author$project$Morphir$Scala$AST$ValueDecl(
											{
												modifiers: _List_Nil,
												pattern: $author$project$Morphir$Scala$AST$NamedMatch('metricRegistry'),
												value: $author$project$Morphir$Scala$AST$Variable('new com.codahale.metrics.MetricRegistry'),
												valueType: $elm$core$Maybe$Nothing
											}))
									]),
								modifiers: _List_Nil,
								name: 'MainApplication'
							})))
				])
		};
		return _List_fromArray(
			[moduleMainApp]);
	});
var $author$project$Morphir$Scala$AST$ArgDecl = F4(
	function (modifiers, tpe, name, defaultValue) {
		return {defaultValue: defaultValue, modifiers: modifiers, name: name, tpe: tpe};
	});
var $author$project$Morphir$SpringBoot$Backend$mapStatefulAppDefinition = F2(
	function (currentPackagePath, currentModulePath) {
		var scalaPackagePath = A2($author$project$Morphir$SpringBoot$Backend$getScalaPackagePath, currentPackagePath, currentModulePath).a;
		var moduleMainApp = {
			dirPath: scalaPackagePath,
			fileName: 'StatefulApp.scala',
			imports: _List_Nil,
			packageDecl: scalaPackagePath,
			typeDecls: _List_fromArray(
				[
					A2(
					$author$project$Morphir$Scala$AST$Documented,
					$elm$core$Maybe$Just(
						A2(
							$elm$core$String$join,
							'',
							_List_fromArray(
								[
									'Generated based on ',
									A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', currentModulePath)
								]))),
					$author$project$Morphir$Scala$AST$withoutAnnotation(
						$author$project$Morphir$Scala$AST$Class(
							{
								body: _List_Nil,
								ctorArgs: _List_fromArray(
									[
										_List_fromArray(
										[
											A4(
											$author$project$Morphir$Scala$AST$ArgDecl,
											_List_Nil,
											A2(
												$author$project$Morphir$Scala$AST$FunctionType,
												A2(
													$author$project$Morphir$Scala$AST$TypeApply,
													A2(
														$author$project$Morphir$Scala$AST$TypeRef,
														_List_fromArray(
															['morphir', 'sdk', 'Maybe']),
														'Maybe'),
													_List_fromArray(
														[
															$author$project$Morphir$Scala$AST$TypeVar('S')
														])),
												A2(
													$author$project$Morphir$Scala$AST$FunctionType,
													$author$project$Morphir$Scala$AST$TypeVar('C'),
													$author$project$Morphir$Scala$AST$TupleType(
														_List_fromArray(
															[
																A2(
																$author$project$Morphir$Scala$AST$TypeApply,
																A2(
																	$author$project$Morphir$Scala$AST$TypeRef,
																	_List_fromArray(
																		['morphir', 'sdk', 'Maybe']),
																	'Maybe'),
																_List_fromArray(
																	[
																		$author$project$Morphir$Scala$AST$TypeVar('S')
																	])),
																$author$project$Morphir$Scala$AST$TypeVar('E')
															])))),
											'businessLogic',
											$elm$core$Maybe$Nothing)
										])
									]),
								_extends: _List_Nil,
								members: _List_Nil,
								modifiers: _List_fromArray(
									[$author$project$Morphir$Scala$AST$Case]),
								name: 'StatefulApp',
								typeArgs: _List_fromArray(
									[
										$author$project$Morphir$Scala$AST$TypeVar('K'),
										$author$project$Morphir$Scala$AST$TypeVar('C'),
										$author$project$Morphir$Scala$AST$TypeVar('S'),
										$author$project$Morphir$Scala$AST$TypeVar('E')
									])
							})))
				])
		};
		return _List_fromArray(
			[moduleMainApp]);
	});
var $author$project$Morphir$Scala$AST$Abstract = {$: 'Abstract'};
var $author$project$Morphir$Scala$AST$TypeParametrized = F3(
	function (a, b, c) {
		return {$: 'TypeParametrized', a: a, b: b, c: c};
	});
var $author$project$Morphir$SpringBoot$Backend$addJacksonAnnotations = function (annotatedMembers) {
	var mapMember = function (annotatedMemberTypeDecl) {
		var _v0 = annotatedMemberTypeDecl.value;
		_v0$2:
		while (true) {
			if (_v0.$ === 'MemberTypeDecl') {
				switch (_v0.a.$) {
					case 'Trait':
						var caseClassNames = A2(
							$elm$core$List$filterMap,
							function (member) {
								if ((member.$ === 'MemberTypeDecl') && (member.a.$ === 'Class')) {
									var _class = member.a.a;
									return $elm$core$Maybe$Just(_class.name);
								} else {
									return $elm$core$Maybe$Nothing;
								}
							},
							A2(
								$elm$core$List$map,
								function ($) {
									return $.value;
								},
								annotatedMembers));
						return A2(
							$author$project$Morphir$Scala$AST$Annotated,
							A2(
								$elm$core$List$append,
								_List_fromArray(
									[
										'@com.fasterxml.jackson.annotation.JsonTypeInfo(use = com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME,' + ($author$project$Morphir$File$SourceCode$newLine + ('include = com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY, property = \"type\")' + ($author$project$Morphir$File$SourceCode$newLine + ('@com.fasterxml.jackson.annotation.JsonSubTypes(Array' + ($author$project$Morphir$File$SourceCode$newLine + ('(' + ($author$project$Morphir$File$SourceCode$newLine + ($elm$core$String$concat(
										A2(
											$elm$core$List$map,
											function (name) {
												return 'new com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = classOf[' + (name + ('], name = \"' + (name + ('\"),' + $author$project$Morphir$File$SourceCode$newLine))));
											},
											caseClassNames)) + '))'))))))))
									]),
								annotatedMemberTypeDecl.annotations),
							annotatedMemberTypeDecl.value);
					case 'Class':
						var _class = _v0.a.a;
						return A2(
							$author$project$Morphir$Scala$AST$Annotated,
							annotatedMemberTypeDecl.annotations,
							$author$project$Morphir$Scala$AST$MemberTypeDecl(
								$author$project$Morphir$Scala$AST$Class(
									{
										body: _List_Nil,
										ctorArgs: A2(
											$elm$core$List$map,
											function (args) {
												return A2(
													$elm$core$List$concatMap,
													function (cons) {
														return _List_fromArray(
															[
																{defaultValue: cons.defaultValue, modifiers: cons.modifiers, name: '@scala.beans.BeanProperty ' + ('@com.fasterxml.jackson.annotation.JsonProperty (\"' + (cons.name + ('\") ' + cons.name))), tpe: cons.tpe}
															]);
													},
													args);
											},
											_class.ctorArgs),
										_extends: _class._extends,
										members: _class.members,
										modifiers: _class.modifiers,
										name: _class.name,
										typeArgs: _class.typeArgs
									})));
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return annotatedMemberTypeDecl;
	};
	return A2($elm$core$List$map, mapMember, annotatedMembers);
};
var $author$project$Morphir$IR$Package$definitionToSpecification = function (def) {
	return {
		modules: $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v0) {
					var path = _v0.a;
					var accessControlledModule = _v0.b;
					return A2(
						$elm$core$Maybe$map,
						function (moduleDef) {
							return _Utils_Tuple2(
								path,
								$author$project$Morphir$IR$Module$definitionToSpecification(moduleDef));
						},
						$author$project$Morphir$IR$AccessControlled$withPublicAccess(accessControlledModule));
				},
				$elm$core$Dict$toList(def.modules)))
	};
};
var $author$project$Morphir$IR$Package$lookupModuleSpecification = F2(
	function (modulePath, packageSpec) {
		return A2($elm$core$Dict$get, modulePath, packageSpec.modules);
	});
var $author$project$Morphir$IR$Distribution$lookupModuleSpecification = F3(
	function (packageName, modulePath, distribution) {
		var libraryPackageName = distribution.a;
		var dependencies = distribution.b;
		var packageDef = distribution.c;
		return _Utils_eq(packageName, libraryPackageName) ? A2(
			$author$project$Morphir$IR$Package$lookupModuleSpecification,
			modulePath,
			$author$project$Morphir$IR$Package$definitionToSpecification(packageDef)) : A2(
			$elm$core$Maybe$andThen,
			$author$project$Morphir$IR$Package$lookupModuleSpecification(modulePath),
			A2($elm$core$Dict$get, packageName, dependencies));
	});
var $author$project$Morphir$IR$Module$lookupTypeSpecification = F2(
	function (localName, moduleSpec) {
		return A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.value;
			},
			A2($elm$core$Dict$get, localName, moduleSpec.types));
	});
var $author$project$Morphir$IR$Distribution$lookupTypeSpecification = F4(
	function (packageName, moduleName, localName, distribution) {
		return A2(
			$elm$core$Maybe$andThen,
			$author$project$Morphir$IR$Module$lookupTypeSpecification(localName),
			A3($author$project$Morphir$IR$Distribution$lookupModuleSpecification, packageName, moduleName, distribution));
	});
var $author$project$Morphir$SpringBoot$Backend$mapStatefulAppImplementation = F5(
	function (opt, distribution, currentPackagePath, currentModulePath, accessControlledModuleDef) {
		var statefulAppTypes = A2(
			$elm$core$List$concatMap,
			function (_v33) {
				var a = _v33.b;
				var _v34 = a.value.value.outputType;
				if (_v34.$ === 'Reference') {
					var _v35 = _v34.b;
					var mod = _v35.a;
					var _package = _v35.b;
					var name = _v35.c;
					var list = _v34.c;
					var _v36 = _Utils_Tuple3(
						A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', mod),
						A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', _package),
						$author$project$Morphir$IR$Name$toTitleCase(name));
					if (((_v36.a === 'Morphir.SDK') && (_v36.b === 'StatefulApp')) && (_v36.c === 'StatefulApp')) {
						return A2($elm$core$List$map, $author$project$Morphir$Scala$Feature$Core$mapType, list);
					} else {
						return _List_Nil;
					}
				} else {
					return _List_Nil;
				}
			},
			$elm$core$Dict$toList(accessControlledModuleDef.value.values));
		var typeNamesStatefulApp = function () {
			if ((((((((statefulAppTypes.b && (statefulAppTypes.a.$ === 'TypeRef')) && statefulAppTypes.b.b) && (statefulAppTypes.b.a.$ === 'TypeRef')) && statefulAppTypes.b.b.b) && (statefulAppTypes.b.b.a.$ === 'TypeRef')) && statefulAppTypes.b.b.b.b) && (statefulAppTypes.b.b.b.a.$ === 'TypeRef')) && (!statefulAppTypes.b.b.b.b.b)) {
				var _v26 = statefulAppTypes.a;
				var keyTypeName = _v26.b;
				var _v27 = statefulAppTypes.b;
				var _v28 = _v27.a;
				var commandTypeName = _v28.b;
				var _v29 = _v27.b;
				var _v30 = _v29.a;
				var stateTypeName = _v30.b;
				var _v31 = _v29.b;
				var _v32 = _v31.a;
				var eventTypeName = _v32.b;
				return _List_fromArray(
					[keyTypeName, commandTypeName, stateTypeName, eventTypeName]);
			} else {
				return _List_Nil;
			}
		}();
		var scalaPackagePath = A2($author$project$Morphir$SpringBoot$Backend$getScalaPackagePath, currentPackagePath, currentModulePath).a;
		var moduleName = A2($author$project$Morphir$SpringBoot$Backend$getScalaPackagePath, currentPackagePath, currentModulePath).b;
		var memberStatefulApp = function (name) {
			var _v24 = A2(
				$elm$core$Dict$get,
				$author$project$Morphir$IR$Name$fromString(name),
				accessControlledModuleDef.value.types);
			if (_v24.$ === 'Just') {
				var accessControlledDocumentedTypeDef = _v24.a;
				return A4(
					$author$project$Morphir$Scala$Feature$Core$mapTypeMember,
					currentPackagePath,
					currentModulePath,
					accessControlledModuleDef,
					_Utils_Tuple2(
						$author$project$Morphir$IR$Name$fromString(name),
						accessControlledDocumentedTypeDef));
			} else {
				return _List_Nil;
			}
		};
		var statefulAppMembers = function () {
			if ((((typeNamesStatefulApp.b && typeNamesStatefulApp.b.b) && typeNamesStatefulApp.b.b.b) && typeNamesStatefulApp.b.b.b.b) && (!typeNamesStatefulApp.b.b.b.b.b)) {
				var keyTypeName = typeNamesStatefulApp.a;
				var _v21 = typeNamesStatefulApp.b;
				var commandTypeName = _v21.a;
				var _v22 = _v21.b;
				var stateTypeName = _v22.a;
				var _v23 = _v22.b;
				var eventTypeName = _v23.a;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							memberStatefulApp(keyTypeName),
							$author$project$Morphir$SpringBoot$Backend$addJacksonAnnotations(
							memberStatefulApp(eventTypeName)),
							$author$project$Morphir$SpringBoot$Backend$addJacksonAnnotations(
							memberStatefulApp(commandTypeName)),
							memberStatefulApp(stateTypeName)
						]));
			} else {
				return _List_Nil;
			}
		}();
		var innerTypesNamesStatefulApp = $elm_community$list_extra$List$Extra$unique(
			A2(
				$elm$core$List$concatMap,
				function (name) {
					var _v12 = A4(
						$author$project$Morphir$IR$Distribution$lookupTypeSpecification,
						currentPackagePath,
						currentModulePath,
						$author$project$Morphir$IR$Name$fromString(name),
						distribution);
					_v12$2:
					while (true) {
						if (_v12.$ === 'Just') {
							switch (_v12.a.$) {
								case 'TypeAliasSpecification':
									var _v13 = _v12.a;
									var aliasType = _v13.b;
									var _v14 = $author$project$Morphir$Scala$Feature$Core$mapType(aliasType);
									if (_v14.$ === 'TypeRef') {
										var typeName = _v14.b;
										return _List_fromArray(
											[typeName]);
									} else {
										return _List_Nil;
									}
								case 'CustomTypeSpecification':
									var _v15 = _v12.a;
									var constructors = _v15.b;
									return A2(
										$elm$core$List$concatMap,
										function (_v16) {
											var types = _v16.b;
											return A2(
												$elm$core$List$concatMap,
												function (_v17) {
													var consType = _v17.b;
													if (consType.$ === 'Reference') {
														var _v19 = consType.b;
														var consTypeName = _v19.c;
														return _List_fromArray(
															[
																$author$project$Morphir$IR$Name$toTitleCase(consTypeName)
															]);
													} else {
														return _List_Nil;
													}
												},
												types);
										},
										$elm$core$Dict$toList(constructors));
								default:
									break _v12$2;
							}
						} else {
							break _v12$2;
						}
					}
					return _List_Nil;
				},
				typeNamesStatefulApp));
		var innerMembers = A2(
			$elm$core$List$concatMap,
			function (_v11) {
				var typeName = _v11.a;
				var accessControlledDocumentedTypeDef = _v11.b;
				return A2(
					$elm$core$List$member,
					$author$project$Morphir$IR$Name$toTitleCase(typeName),
					innerTypesNamesStatefulApp) ? A4(
					$author$project$Morphir$Scala$Feature$Core$mapTypeMember,
					currentPackagePath,
					currentModulePath,
					accessControlledModuleDef,
					_Utils_Tuple2(typeName, accessControlledDocumentedTypeDef)) : _List_Nil;
			},
			$elm$core$Dict$toList(accessControlledModuleDef.value.types));
		var functionName = function () {
			var _v3 = accessControlledModuleDef.access;
			if (_v3.$ === 'Public') {
				var _v4 = accessControlledModuleDef.value;
				var types = _v4.types;
				var values = _v4.values;
				var _v5 = A2(
					$elm$core$Dict$get,
					$author$project$Morphir$IR$Name$fromString('app'),
					values);
				if (_v5.$ === 'Just') {
					var acsCtrlValueDef = _v5.a;
					var _v6 = acsCtrlValueDef.access;
					if (_v6.$ === 'Public') {
						var _v7 = acsCtrlValueDef.value.value.body;
						if (((_v7.$ === 'Apply') && (_v7.b.$ === 'Constructor')) && (_v7.c.$ === 'Reference')) {
							var _v8 = _v7.b;
							var _v9 = _v7.c;
							var _v10 = _v9.b;
							var name = _v10.c;
							return name;
						} else {
							return _List_Nil;
						}
					} else {
						return _List_Nil;
					}
				} else {
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		}();
		var stateFulImplAdapter = {
			dirPath: scalaPackagePath,
			fileName: $author$project$Morphir$IR$Name$toTitleCase(moduleName) + ('SpringBoot' + '.scala'),
			imports: _List_Nil,
			packageDecl: scalaPackagePath,
			typeDecls: _List_fromArray(
				[
					A2(
					$author$project$Morphir$Scala$AST$Documented,
					$elm$core$Maybe$Just(
						A2(
							$elm$core$String$join,
							'',
							_List_fromArray(
								[
									'Generated based on ',
									A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', currentModulePath)
								]))),
					A2(
						$author$project$Morphir$Scala$AST$Annotated,
						_List_fromArray(
							['@org.springframework.web.bind.annotation.RestController']),
						$author$project$Morphir$Scala$AST$Class(
							{
								body: _List_Nil,
								ctorArgs: _List_Nil,
								_extends: _List_fromArray(
									[
										A3(
										$author$project$Morphir$Scala$AST$TypeParametrized,
										$author$project$Morphir$Scala$AST$TypeVar('SpringBootStatefulAppAdapter'),
										statefulAppTypes,
										$author$project$Morphir$Scala$AST$TypeVar(
											'StatefulApp (' + ($author$project$Morphir$File$SourceCode$dotSep(scalaPackagePath) + ('.' + ($author$project$Morphir$IR$Name$toTitleCase(moduleName) + ('.' + (A2(
												$elm$core$String$join,
												'',
												$author$project$Morphir$IR$Name$toList(functionName)) + ' _ )')))))))
									]),
								members: _List_Nil,
								modifiers: _List_Nil,
								name: $author$project$Morphir$IR$Name$toTitleCase(moduleName) + 'SpringBoot',
								typeArgs: _List_Nil
							})))
				])
		};
		var functionMembers = A2(
			$elm$core$List$map,
			$author$project$Morphir$Scala$AST$withoutAnnotation,
			A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var valueName = _v0.a;
					var accessControlledValueDef = _v0.b;
					return _Utils_eq(
						$author$project$Morphir$IR$Name$toTitleCase(valueName),
						$author$project$Morphir$IR$Name$toTitleCase(functionName)) ? _List_fromArray(
						[
							$author$project$Morphir$Scala$AST$FunctionDecl(
							{
								args: $elm$core$List$isEmpty(accessControlledValueDef.value.value.inputTypes) ? _List_Nil : A2(
									$elm$core$List$map,
									function (_v1) {
										var argName = _v1.a;
										var argType = _v1.c;
										return _List_fromArray(
											[
												{
												defaultValue: $elm$core$Maybe$Nothing,
												modifiers: _List_Nil,
												name: $author$project$Morphir$IR$Name$toCamelCase(argName),
												tpe: $author$project$Morphir$Scala$Feature$Core$mapType(argType)
											}
											]);
									},
									accessControlledValueDef.value.value.inputTypes),
								body: $elm$core$Maybe$Just(
									$author$project$Morphir$Scala$Feature$Core$mapFunctionBody(accessControlledValueDef.value.value)),
								modifiers: function () {
									var _v2 = accessControlledValueDef.access;
									if (_v2.$ === 'Public') {
										return _List_Nil;
									} else {
										return _List_fromArray(
											[
												$author$project$Morphir$Scala$AST$Private($elm$core$Maybe$Nothing)
											]);
									}
								}(),
								name: $author$project$Morphir$IR$Name$toCamelCase(valueName),
								returnType: $elm$core$Maybe$Just(
									$author$project$Morphir$Scala$Feature$Core$mapType(accessControlledValueDef.value.value.outputType)),
								typeArgs: _List_Nil
							})
						]) : _List_Nil;
				},
				$elm$core$Dict$toList(accessControlledModuleDef.value.values)));
		var statefulModule = {
			dirPath: scalaPackagePath,
			fileName: $author$project$Morphir$IR$Name$toTitleCase(moduleName) + '.scala',
			imports: _List_Nil,
			packageDecl: scalaPackagePath,
			typeDecls: _List_fromArray(
				[
					A2(
					$author$project$Morphir$Scala$AST$Documented,
					$elm$core$Maybe$Just(
						A2(
							$elm$core$String$join,
							'',
							_List_fromArray(
								[
									'Generated based on ',
									A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', currentModulePath)
								]))),
					A2(
						$author$project$Morphir$Scala$AST$Annotated,
						_List_Nil,
						$author$project$Morphir$Scala$AST$Object(
							{
								body: $elm$core$Maybe$Nothing,
								_extends: _List_Nil,
								members: A2(
									$elm$core$List$append,
									innerMembers,
									A2($elm$core$List$append, statefulAppMembers, functionMembers)),
								modifiers: _List_Nil,
								name: $author$project$Morphir$IR$Name$toTitleCase(moduleName)
							})))
				])
		};
		var adapterAbstractModule = {
			dirPath: scalaPackagePath,
			fileName: 'SpringBootStatefulAppAdapter.scala',
			imports: _List_Nil,
			packageDecl: scalaPackagePath,
			typeDecls: _List_fromArray(
				[
					A2(
					$author$project$Morphir$Scala$AST$Documented,
					$elm$core$Maybe$Just(
						A2(
							$elm$core$String$join,
							'',
							_List_fromArray(
								[
									'Generated based on ',
									A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', currentModulePath)
								]))),
					$author$project$Morphir$Scala$AST$withoutAnnotation(
						$author$project$Morphir$Scala$AST$Class(
							{
								body: _List_Nil,
								ctorArgs: _List_fromArray(
									[
										_List_fromArray(
										[
											{
											defaultValue: $elm$core$Maybe$Nothing,
											modifiers: _List_Nil,
											name: '@scala.beans.BeanProperty ' + ('@com.fasterxml.jackson.annotation.JsonProperty (\"' + ('key' + ('\") ' + 'key'))),
											tpe: $author$project$Morphir$Scala$AST$TypeVar('K')
										},
											{
											defaultValue: $elm$core$Maybe$Nothing,
											modifiers: _List_Nil,
											name: '@scala.beans.BeanProperty ' + ('@com.fasterxml.jackson.annotation.JsonProperty (\"' + ('command' + ('\") ' + 'command'))),
											tpe: $author$project$Morphir$Scala$AST$TypeVar('C')
										}
										])
									]),
								_extends: _List_Nil,
								members: _List_Nil,
								modifiers: _List_fromArray(
									[$author$project$Morphir$Scala$AST$Case]),
								name: 'TupleKeyCommand',
								typeArgs: _List_fromArray(
									[
										$author$project$Morphir$Scala$AST$TypeVar('K'),
										$author$project$Morphir$Scala$AST$TypeVar('C')
									])
							}))),
					A2(
					$author$project$Morphir$Scala$AST$Documented,
					$elm$core$Maybe$Just(
						A2(
							$elm$core$String$join,
							'',
							_List_fromArray(
								[
									'Generated based on ',
									A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', currentModulePath)
								]))),
					$author$project$Morphir$Scala$AST$withoutAnnotation(
						$author$project$Morphir$Scala$AST$Class(
							{
								body: _List_Nil,
								ctorArgs: _List_fromArray(
									[
										_List_fromArray(
										[
											A4(
											$author$project$Morphir$Scala$AST$ArgDecl,
											_List_Nil,
											A2(
												$author$project$Morphir$Scala$AST$TypeApply,
												$author$project$Morphir$Scala$AST$TypeVar(
													$author$project$Morphir$File$SourceCode$dotSep(scalaPackagePath) + '.StatefulApp'),
												_List_fromArray(
													[
														$author$project$Morphir$Scala$AST$TypeVar('K'),
														$author$project$Morphir$Scala$AST$TypeVar('C'),
														$author$project$Morphir$Scala$AST$TypeVar('S'),
														$author$project$Morphir$Scala$AST$TypeVar('E')
													])),
											'statefulApp',
											$elm$core$Maybe$Nothing)
										])
									]),
								_extends: _List_Nil,
								members: _List_fromArray(
									[
										$author$project$Morphir$Scala$AST$withoutAnnotation(
										$author$project$Morphir$Scala$AST$ValueDecl(
											{
												modifiers: _List_Nil,
												pattern: $author$project$Morphir$Scala$AST$NamedMatch('requests'),
												value: $author$project$Morphir$Scala$AST$Variable(
													$author$project$Morphir$File$SourceCode$dotSep(scalaPackagePath) + '.MainApplication.metricRegistry.meter(\"statefulAppRequests\")'),
												valueType: $elm$core$Maybe$Nothing
											})),
										$author$project$Morphir$Scala$AST$withoutAnnotation(
										$author$project$Morphir$Scala$AST$ValueDecl(
											{
												modifiers: _List_Nil,
												pattern: $author$project$Morphir$Scala$AST$NamedMatch('table'),
												value: $author$project$Morphir$Scala$AST$Variable('new scala.collection.mutable.HashMap[K, S]'),
												valueType: $elm$core$Maybe$Nothing
											})),
										A2(
										$author$project$Morphir$Scala$AST$Annotated,
										_List_fromArray(
											['@org.springframework.web.bind.annotation.PostMapping(value= Array(\"/v1.0/command\"), consumes = Array(org.springframework.http.MediaType.APPLICATION_JSON_VALUE), produces = Array(\"application/json\"))']),
										$author$project$Morphir$Scala$AST$FunctionDecl(
											{
												args: _List_fromArray(
													[
														_List_fromArray(
														[
															A4(
															$author$project$Morphir$Scala$AST$ArgDecl,
															_List_Nil,
															A2(
																$author$project$Morphir$Scala$AST$TypeApply,
																$author$project$Morphir$Scala$AST$TypeVar('TupleKeyCommand'),
																_List_fromArray(
																	[
																		$author$project$Morphir$Scala$AST$TypeVar('K'),
																		$author$project$Morphir$Scala$AST$TypeVar('C')
																	])),
															'@org.springframework.web.bind.annotation.RequestBody input',
															$elm$core$Maybe$Nothing)
														])
													]),
												body: $elm$core$Maybe$Just(
													$author$project$Morphir$Scala$AST$Variable('{requests.mark' + ($author$project$Morphir$File$SourceCode$newLine + ('val state = table.get(input.key)' + ($author$project$Morphir$File$SourceCode$newLine + ('val result = process(input.command, state)' + ($author$project$Morphir$File$SourceCode$newLine + ('update(input.key, state, result)' + ($author$project$Morphir$File$SourceCode$newLine + 'result._2}'))))))))),
												modifiers: _List_Nil,
												name: 'entryPoint',
												returnType: $elm$core$Maybe$Just(
													$author$project$Morphir$Scala$AST$TypeVar('E')),
												typeArgs: _List_Nil
											})),
										$author$project$Morphir$Scala$AST$withoutAnnotation(
										$author$project$Morphir$Scala$AST$FunctionDecl(
											{
												args: _List_fromArray(
													[
														_List_fromArray(
														[
															A4(
															$author$project$Morphir$Scala$AST$ArgDecl,
															_List_Nil,
															$author$project$Morphir$Scala$AST$TypeVar('K'),
															'key',
															$elm$core$Maybe$Nothing),
															A4(
															$author$project$Morphir$Scala$AST$ArgDecl,
															_List_Nil,
															A2(
																$author$project$Morphir$Scala$AST$TypeApply,
																$author$project$Morphir$Scala$AST$TypeVar('Option'),
																_List_fromArray(
																	[
																		$author$project$Morphir$Scala$AST$TypeVar('S')
																	])),
															'state',
															$elm$core$Maybe$Nothing),
															A4(
															$author$project$Morphir$Scala$AST$ArgDecl,
															_List_Nil,
															$author$project$Morphir$Scala$AST$TupleType(
																_List_fromArray(
																	[
																		A2(
																		$author$project$Morphir$Scala$AST$TypeApply,
																		A2(
																			$author$project$Morphir$Scala$AST$TypeRef,
																			_List_fromArray(
																				['morphir.sdk.Maybe']),
																			'Maybe'),
																		_List_fromArray(
																			[
																				$author$project$Morphir$Scala$AST$TypeVar('S')
																			])),
																		$author$project$Morphir$Scala$AST$TypeVar('E')
																	])),
															'result',
															$elm$core$Maybe$Nothing)
														])
													]),
												body: $elm$core$Maybe$Just(
													A2(
														$author$project$Morphir$Scala$AST$Match,
														$author$project$Morphir$Scala$AST$Tuple(
															_List_fromArray(
																[
																	$author$project$Morphir$Scala$AST$Variable('state'),
																	$author$project$Morphir$Scala$AST$Variable('result')
																])),
														$author$project$Morphir$Scala$AST$MatchCases(
															_List_fromArray(
																[
																	_Utils_Tuple2(
																	$author$project$Morphir$Scala$AST$TupleMatch(
																		_List_fromArray(
																			[
																				$author$project$Morphir$Scala$AST$NamedMatch('None'),
																				$author$project$Morphir$Scala$AST$TupleMatch(
																				_List_fromArray(
																					[
																						A3(
																						$author$project$Morphir$Scala$AST$UnapplyMatch,
																						_List_fromArray(
																							['morphir.sdk.Maybe']),
																						'Just(a)',
																						_List_Nil),
																						$author$project$Morphir$Scala$AST$WildcardMatch
																					]))
																			])),
																	A2(
																		$author$project$Morphir$Scala$AST$Apply,
																		A2(
																			$author$project$Morphir$Scala$AST$Ref,
																			_List_fromArray(
																				['table']),
																			'addOne'),
																		_List_fromArray(
																			[
																				A2(
																				$author$project$Morphir$Scala$AST$ArgValue,
																				$elm$core$Maybe$Nothing,
																				$author$project$Morphir$Scala$AST$Tuple(
																					_List_fromArray(
																						[
																							$author$project$Morphir$Scala$AST$Variable('key'),
																							$author$project$Morphir$Scala$AST$Variable('a')
																						])))
																			]))),
																	_Utils_Tuple2(
																	$author$project$Morphir$Scala$AST$TupleMatch(
																		_List_fromArray(
																			[
																				$author$project$Morphir$Scala$AST$NamedMatch('Some(_)'),
																				$author$project$Morphir$Scala$AST$TupleMatch(
																				_List_fromArray(
																					[
																						A3(
																						$author$project$Morphir$Scala$AST$UnapplyMatch,
																						_List_fromArray(
																							['morphir.sdk.Maybe']),
																						'Nothing',
																						_List_Nil),
																						$author$project$Morphir$Scala$AST$WildcardMatch
																					]))
																			])),
																	A2(
																		$author$project$Morphir$Scala$AST$Apply,
																		A2(
																			$author$project$Morphir$Scala$AST$Ref,
																			_List_fromArray(
																				['table']),
																			'remove'),
																		_List_fromArray(
																			[
																				A2(
																				$author$project$Morphir$Scala$AST$ArgValue,
																				$elm$core$Maybe$Nothing,
																				$author$project$Morphir$Scala$AST$Variable('key'))
																			]))),
																	_Utils_Tuple2(
																	$author$project$Morphir$Scala$AST$WildcardMatch,
																	$author$project$Morphir$Scala$AST$Variable('None'))
																])))),
												modifiers: _List_Nil,
												name: 'update',
												returnType: $elm$core$Maybe$Nothing,
												typeArgs: _List_Nil
											})),
										$author$project$Morphir$Scala$AST$withoutAnnotation(
										$author$project$Morphir$Scala$AST$FunctionDecl(
											{
												args: _List_fromArray(
													[
														_List_fromArray(
														[
															A4(
															$author$project$Morphir$Scala$AST$ArgDecl,
															_List_Nil,
															$author$project$Morphir$Scala$AST$TypeVar('C'),
															'command',
															$elm$core$Maybe$Nothing),
															A4(
															$author$project$Morphir$Scala$AST$ArgDecl,
															_List_Nil,
															A2(
																$author$project$Morphir$Scala$AST$TypeApply,
																$author$project$Morphir$Scala$AST$TypeVar('Option'),
																_List_fromArray(
																	[
																		$author$project$Morphir$Scala$AST$TypeVar('S')
																	])),
															'state',
															$elm$core$Maybe$Nothing)
														])
													]),
												body: $elm$core$Maybe$Just(
													A2(
														$author$project$Morphir$Scala$AST$Apply,
														A2(
															$author$project$Morphir$Scala$AST$Apply,
															A2(
																$author$project$Morphir$Scala$AST$Ref,
																_List_fromArray(
																	['statefulApp']),
																'businessLogic'),
															_List_fromArray(
																[
																	A2(
																	$author$project$Morphir$Scala$AST$ArgValue,
																	$elm$core$Maybe$Nothing,
																	$author$project$Morphir$Scala$AST$Variable('state'))
																])),
														_List_fromArray(
															[
																A2(
																$author$project$Morphir$Scala$AST$ArgValue,
																$elm$core$Maybe$Nothing,
																$author$project$Morphir$Scala$AST$Variable('command'))
															]))),
												modifiers: _List_Nil,
												name: 'process',
												returnType: $elm$core$Maybe$Just(
													$author$project$Morphir$Scala$AST$TupleType(
														_List_fromArray(
															[
																$author$project$Morphir$Scala$AST$TypeVar('morphir.sdk.Maybe.Maybe[S]'),
																$author$project$Morphir$Scala$AST$TypeVar('E')
															]))),
												typeArgs: _List_Nil
											})),
										A2(
										$author$project$Morphir$Scala$AST$Annotated,
										_List_fromArray(
											['@springfox.documentation.annotations.ApiIgnore' + ($author$project$Morphir$File$SourceCode$newLine + '@org.springframework.web.bind.annotation.RequestMapping(value = Array(\"/\"))')]),
										$author$project$Morphir$Scala$AST$FunctionDecl(
											{
												args: _List_Nil,
												body: $elm$core$Maybe$Just(
													$author$project$Morphir$Scala$AST$Variable('new org.springframework.web.servlet.ModelAndView(\"redirect:/swagger-ui/index.html\")')),
												modifiers: _List_Nil,
												name: 'home',
												returnType: $elm$core$Maybe$Nothing,
												typeArgs: _List_Nil
											})),
										A2(
										$author$project$Morphir$Scala$AST$Annotated,
										_List_fromArray(
											['@org.springframework.web.bind.annotation.GetMapping(value = Array(\"/v1.0/list\"))']),
										$author$project$Morphir$Scala$AST$FunctionDecl(
											{
												args: _List_Nil,
												body: $elm$core$Maybe$Just(
													$author$project$Morphir$Scala$AST$Variable('{implicit val formats = org.json4s.DefaultFormats' + ($author$project$Morphir$File$SourceCode$newLine + 'org.json4s.jackson.Serialization.write(table)}'))),
												modifiers: _List_Nil,
												name: 'list',
												returnType: $elm$core$Maybe$Nothing,
												typeArgs: _List_Nil
											}))
									]),
								modifiers: _List_fromArray(
									[$author$project$Morphir$Scala$AST$Abstract]),
								name: 'SpringBootStatefulAppAdapter',
								typeArgs: _List_fromArray(
									[
										$author$project$Morphir$Scala$AST$TypeVar('K'),
										$author$project$Morphir$Scala$AST$TypeVar('C'),
										$author$project$Morphir$Scala$AST$TypeVar('S'),
										$author$project$Morphir$Scala$AST$TypeVar('E')
									])
							})))
				])
		};
		return _List_fromArray(
			[stateFulImplAdapter, statefulModule, adapterAbstractModule]);
	});
var $author$project$Morphir$SpringBoot$Backend$mapPackageDefinition = F4(
	function (opt, distribution, packagePath, packageDef) {
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var modulePath = _v0.a;
					var moduleImpl = _v0.b;
					return A2(
						$elm$core$List$map,
						function (compilationUnit) {
							var fileContent = A2(
								$author$project$Morphir$Scala$PrettyPrinter$mapCompilationUnit,
								A2($author$project$Morphir$Scala$PrettyPrinter$Options, 2, 80),
								compilationUnit);
							return _Utils_Tuple2(
								_Utils_Tuple2(
									A2(
										$elm$core$List$append,
										_List_fromArray(
											['src', 'main', 'java']),
										compilationUnit.dirPath),
									compilationUnit.fileName),
								fileContent);
						},
						A2(
							$elm$core$List$append,
							A2($author$project$Morphir$SpringBoot$Backend$mapStatefulAppDefinition, packagePath, modulePath),
							A2(
								$elm$core$List$append,
								A2($author$project$Morphir$SpringBoot$Backend$mapMainApp, packagePath, modulePath),
								A5($author$project$Morphir$SpringBoot$Backend$mapStatefulAppImplementation, opt, distribution, packagePath, modulePath, moduleImpl))));
				},
				$elm$core$Dict$toList(packageDef.modules)));
	});
var $author$project$Morphir$SpringBoot$Backend$mapDistribution = F2(
	function (opt, distro) {
		var packagePath = distro.a;
		var dependencies = distro.b;
		var packageDef = distro.c;
		return A4($author$project$Morphir$SpringBoot$Backend$mapPackageDefinition, opt, distro, packagePath, packageDef);
	});
var $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression = function (typeExp) {
	switch (typeExp.$) {
		case 'List':
			var subTypeExp = typeExp.a;
			return $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression(subTypeExp);
		case 'Tuple':
			var subTypeExpList = typeExp.a;
			return A2($elm$core$List$concatMap, $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression, subTypeExpList);
		case 'Union':
			var subTypeExpList = typeExp.a;
			return A2($elm$core$List$concatMap, $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression, subTypeExpList);
		case 'Object':
			var fieldList = typeExp.a;
			return A2(
				$elm$core$List$concatMap,
				function (_v1) {
					var subTypeExp = _v1.b;
					return $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression(subTypeExp);
				},
				fieldList);
		case 'TypeRef':
			var _v2 = typeExp.a;
			var packagePath = _v2.a;
			var modulePath = _v2.b;
			var subTypeExpList = typeExp.b;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						[
							_Utils_Tuple2(packagePath, modulePath)
						]),
						A2($elm$core$List$concatMap, $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression, subTypeExpList)
					]));
		case 'Map':
			var keyType = typeExp.a;
			var valueType = typeExp.b;
			return A2(
				$elm$core$List$concatMap,
				$author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression,
				_List_fromArray(
					[keyType, valueType]));
		case 'Nullable':
			var subTypeExp = typeExp.a;
			return $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression(subTypeExp);
		default:
			return _List_Nil;
	}
};
var $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeDef = function (typeDef) {
	switch (typeDef.$) {
		case 'Namespace':
			var namespace = typeDef.a;
			return A2($elm$core$List$concatMap, $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeDef, namespace.content);
		case 'TypeAlias':
			var typeAlias = typeDef.a;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						A2($elm$core$List$concatMap, $author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression, typeAlias.variables),
						$author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression(typeAlias.typeExpression)
					]));
		case 'VariantClass':
			var variantClass = typeDef.a;
			return A2(
				$elm$core$List$concatMap,
				$author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeExpression,
				_Utils_ap(variantClass.variables, variantClass.typeExpressions));
		default:
			var importAlias = typeDef.a;
			return _List_fromArray(
				[importAlias.namespacePath]);
	}
};
var $author$project$Morphir$TypeScript$Backend$Imports$filterUnique = function (inputList) {
	var incrementalFilterUnique = F2(
		function (element, shorterList) {
			return A2($elm$core$List$member, element, shorterList) ? shorterList : A2($elm$core$List$cons, element, shorterList);
		});
	return A3($elm$core$List$foldr, incrementalFilterUnique, _List_Nil, inputList);
};
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $author$project$Morphir$TypeScript$Backend$Imports$getUniqueImportRefs = F3(
	function (currentPackagePath, currentModulePath, typeDef) {
		return $author$project$Morphir$TypeScript$Backend$Imports$filterUnique(
			$elm$core$List$sort(
				A2(
					$elm$core$List$filter,
					function (_v1) {
						var packagePath = _v1.a;
						var modulePath = _v1.b;
						return (!_Utils_eq(packagePath, _List_Nil)) || (!_Utils_eq(modulePath, _List_Nil));
					},
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var packagePath = _v0.a;
							var modulePath = _v0.b;
							return (!_Utils_eq(packagePath, currentPackagePath)) || (!_Utils_eq(modulePath, currentModulePath));
						},
						$author$project$Morphir$TypeScript$Backend$Imports$collectRefsFromTypeDef(typeDef)))));
	});
var $author$project$Morphir$TypeScript$AST$ImportAlias = function (a) {
	return {$: 'ImportAlias', a: a};
};
var $author$project$Morphir$TypeScript$AST$Namespace = function (a) {
	return {$: 'Namespace', a: a};
};
var $author$project$Morphir$TypeScript$AST$Private = {$: 'Private'};
var $author$project$Morphir$TypeScript$AST$Public = {$: 'Public'};
var $author$project$Morphir$TypeScript$Backend$Types$mapPrivacy = function (privacy) {
	if (privacy.$ === 'Public') {
		return $author$project$Morphir$TypeScript$AST$Public;
	} else {
		return $author$project$Morphir$TypeScript$AST$Private;
	}
};
var $author$project$Morphir$TypeScript$Backend$TopLevelNamespace$mergeNamespaces = function (inputList) {
	var hasMatch = F2(
		function (needle, haystack) {
			return A2(
				$elm$core$List$any,
				function (candidate) {
					var _v2 = _Utils_Tuple2(needle, candidate);
					if ((_v2.a.$ === 'Namespace') && (_v2.b.$ === 'Namespace')) {
						var ns1 = _v2.a.a;
						var ns2 = _v2.b.a;
						return _Utils_eq(ns1.name, ns2.name);
					} else {
						return false;
					}
				},
				haystack);
		});
	var conditionallyMergeTwoNamespaces = F2(
		function (td1, td2) {
			var _v1 = _Utils_Tuple2(td1, td2);
			if ((_v1.a.$ === 'Namespace') && (_v1.b.$ === 'Namespace')) {
				var ns1 = _v1.a.a;
				var ns2 = _v1.b.a;
				return _Utils_eq(ns1.name, ns2.name) ? $author$project$Morphir$TypeScript$AST$Namespace(
					{
						content: $author$project$Morphir$TypeScript$Backend$TopLevelNamespace$mergeNamespaces(
							_Utils_ap(ns2.content, ns1.content)),
						name: ns2.name,
						privacy: (_Utils_eq(ns1.privacy, $author$project$Morphir$TypeScript$AST$Public) || _Utils_eq(ns2.privacy, $author$project$Morphir$TypeScript$AST$Public)) ? $author$project$Morphir$TypeScript$AST$Public : $author$project$Morphir$TypeScript$AST$Private
					}) : td2;
			} else {
				return td2;
			}
		});
	var insertNamespaceIntoList = F2(
		function (typeDef, targetList) {
			var _v0 = _Utils_Tuple2(
				typeDef,
				A2(hasMatch, typeDef, targetList));
			if ((_v0.a.$ === 'Namespace') && _v0.b) {
				return A2(
					$elm$core$List$map,
					conditionallyMergeTwoNamespaces(typeDef),
					targetList);
			} else {
				return _Utils_ap(
					targetList,
					_List_fromArray(
						[typeDef]));
			}
		});
	return A3($elm$core$List$foldl, insertNamespaceIntoList, _List_Nil, inputList);
};
var $author$project$Morphir$TypeScript$Backend$TopLevelNamespace$mapModuleNamespacesForTopLevelFile = F2(
	function (packagePath, packageDef) {
		var makeImportAlias = function (_v2) {
			var privacy = _v2.a;
			var modulePath = _v2.b;
			var _v1 = $elm$core$List$reverse(
				_Utils_ap(packagePath, modulePath));
			if (!_v1.b) {
				return _List_Nil;
			} else {
				var lastName = _v1.a;
				var restOfPath = _v1.b;
				var step = F2(
					function (name, state) {
						return $author$project$Morphir$TypeScript$AST$Namespace(
							{
								content: $elm$core$List$singleton(state),
								name: $author$project$Morphir$IR$Name$toTitleCase(name),
								privacy: privacy
							});
					});
				var importAlias = $author$project$Morphir$TypeScript$AST$ImportAlias(
					{
						name: $author$project$Morphir$IR$Name$toTitleCase(lastName),
						namespacePath: _Utils_Tuple2(packagePath, modulePath),
						privacy: privacy
					});
				return _List_fromArray(
					[
						A3($elm$core$List$foldl, step, importAlias, restOfPath)
					]);
			}
		};
		return $author$project$Morphir$TypeScript$Backend$TopLevelNamespace$mergeNamespaces(
			A2(
				$elm$core$List$concatMap,
				makeImportAlias,
				A2(
					$elm$core$List$map,
					function (_v0) {
						var modulePath = _v0.a;
						var moduleImpl = _v0.b;
						return _Utils_Tuple2(
							$author$project$Morphir$TypeScript$Backend$Types$mapPrivacy(moduleImpl.access),
							modulePath);
					},
					$elm$core$Dict$toList(packageDef.modules))));
	});
var $author$project$Morphir$TypeScript$Backend$Imports$getTypeScriptPackagePathAndModuleName = F2(
	function (packagePath, modulePath) {
		var _v0 = $elm$core$List$reverse(modulePath);
		if (!_v0.b) {
			return _Utils_Tuple2(_List_Nil, _List_Nil);
		} else {
			var lastName = _v0.a;
			var reverseModulePath = _v0.b;
			return _Utils_Tuple2(
				A2(
					$elm$core$List$append,
					A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
						packagePath),
					A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toCamelCase, $elm$core$String$toLower),
						$elm$core$List$reverse(reverseModulePath))),
				lastName);
		}
	});
var $author$project$Morphir$TypeScript$Backend$Imports$filePathFromTop = function (_v0) {
	var packagePath = _v0.a;
	var modulePath = _v0.b;
	return function (_v1) {
		var typeScriptPackagePath = _v1.a;
		var moduleName = _v1.b;
		return $author$project$Morphir$File$SourceCode$concat(
			_List_fromArray(
				[
					A2($elm$core$String$join, '/', typeScriptPackagePath),
					'/',
					$author$project$Morphir$IR$Name$toTitleCase(moduleName)
				]));
	}(
		A2($author$project$Morphir$TypeScript$Backend$Imports$getTypeScriptPackagePathAndModuleName, packagePath, modulePath));
};
var $author$project$Morphir$TypeScript$Backend$Imports$makeRelativeImport = F2(
	function (dirPath, modulePathFromTop) {
		var filePathPrefix = A2(
			$elm$core$String$join,
			'/',
			function (list) {
				return A2($elm$core$List$cons, '.', list);
			}(
				A2(
					$elm$core$List$map,
					function (_v0) {
						return '..';
					},
					dirPath)));
		return filePathPrefix + ('/' + modulePathFromTop);
	});
var $author$project$Morphir$TypeScript$AST$namespaceNameFromPackageAndModule = F2(
	function (packagePath, modulePath) {
		return A2(
			$elm$core$String$join,
			'_',
			A2(
				$elm$core$List$map,
				$author$project$Morphir$IR$Name$toTitleCase,
				_Utils_ap(packagePath, modulePath)));
	});
var $author$project$Morphir$TypeScript$Backend$Imports$renderInternalImport = F2(
	function (dirPath, _v0) {
		var packagePath = _v0.a;
		var modulePath = _v0.b;
		var modulePathFromTop = $author$project$Morphir$TypeScript$Backend$Imports$filePathFromTop(
			_Utils_Tuple2(packagePath, modulePath));
		return {
			importClause: '{ ' + (A2($author$project$Morphir$TypeScript$AST$namespaceNameFromPackageAndModule, packagePath, modulePath) + ' }'),
			moduleSpecifier: A2($author$project$Morphir$TypeScript$Backend$Imports$makeRelativeImport, dirPath, modulePathFromTop)
		};
	});
var $author$project$Morphir$TypeScript$Backend$TopLevelNamespace$makeTopLevelNamespaceModule = F2(
	function (packagePath, packageDef) {
		var typeDefs = A2($author$project$Morphir$TypeScript$Backend$TopLevelNamespace$mapModuleNamespacesForTopLevelFile, packagePath, packageDef);
		var topLevelPackageName = function () {
			if (packagePath.b) {
				var firstName = packagePath.a;
				return $author$project$Morphir$IR$Name$toTitleCase(firstName) + '.ts';
			} else {
				return '.ts';
			}
		}();
		return {
			dirPath: _List_Nil,
			fileName: topLevelPackageName,
			imports: A2(
				$elm$core$List$map,
				$author$project$Morphir$TypeScript$Backend$Imports$renderInternalImport(_List_Nil),
				A2(
					$elm$core$List$concatMap,
					A2($author$project$Morphir$TypeScript$Backend$Imports$getUniqueImportRefs, _List_Nil, _List_Nil),
					typeDefs)),
			typeDefs: typeDefs
		};
	});
var $author$project$Morphir$TypeScript$PrettyPrinter$mapImportDeclaration = function (_v0) {
	var importClause = _v0.importClause;
	var moduleSpecifier = _v0.moduleSpecifier;
	return $author$project$Morphir$File$SourceCode$concat(
		_List_fromArray(
			['import ', importClause, ' from ', '\"' + (moduleSpecifier + '\"')]));
};
var $author$project$Morphir$TypeScript$PrettyPrinter$defaultIndent = 2;
var $author$project$Morphir$TypeScript$PrettyPrinter$exportIfPublic = function (privacy) {
	if (privacy.$ === 'Public') {
		return 'export ';
	} else {
		return '';
	}
};
var $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$defaultIndent = 2;
var $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$namespaceNameFromPackageAndModule = F2(
	function (packagePath, modulePath) {
		return A2(
			$elm$core$String$join,
			'_',
			A2(
				$elm$core$List$map,
				$author$project$Morphir$IR$Name$toTitleCase,
				_Utils_ap(packagePath, modulePath)));
	});
var $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapField = function (_v5) {
	var fieldName = _v5.a;
	var fieldType = _v5.b;
	return $author$project$Morphir$File$SourceCode$concat(
		_List_fromArray(
			[
				fieldName,
				': ',
				$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp(fieldType),
				';'
			]));
};
var $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapGenericVariables = function (variables) {
	var _v4 = $elm$core$List$length(variables);
	if (!_v4) {
		return '';
	} else {
		return $author$project$Morphir$File$SourceCode$concat(
			_List_fromArray(
				[
					'<',
					A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp, variables)),
					'>'
				]));
	}
};
var $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapMaybeAnnotation = function (maybeTypeExp) {
	if (maybeTypeExp.$ === 'Nothing') {
		return '';
	} else {
		var typeExp = maybeTypeExp.a;
		return ': ' + $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp(typeExp);
	}
};
var $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapObjectExp = function (objectExp) {
	return $author$project$Morphir$File$SourceCode$concat(
		_List_fromArray(
			[
				'{',
				$author$project$Morphir$File$SourceCode$newLine,
				A2(
				$author$project$Morphir$File$SourceCode$indentLines,
				$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$defaultIndent,
				A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapField, objectExp)),
				$author$project$Morphir$File$SourceCode$newLine,
				'}'
			]));
};
var $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapParameter = function (_v2) {
	var modifiers = _v2.modifiers;
	var name = _v2.name;
	var typeAnnotation = _v2.typeAnnotation;
	return $author$project$Morphir$File$SourceCode$concat(
		_List_fromArray(
			[
				A2($elm$core$String$join, ' ', modifiers),
				' ',
				name,
				$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapMaybeAnnotation(typeAnnotation)
			]));
};
var $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp = function (typeExp) {
	switch (typeExp.$) {
		case 'Any':
			return 'any';
		case 'Boolean':
			return 'boolean';
		case 'FunctionTypeExp':
			var params = typeExp.a;
			var rtnTypeExp = typeExp.b;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'(',
						A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapParameter, params)),
						') => ',
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp(rtnTypeExp)
					]));
		case 'List':
			var listType = typeExp.a;
			return 'Array<' + ($author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp(listType) + '>');
		case 'LiteralString':
			var stringval = typeExp.a;
			return '\"' + (stringval + '\"');
		case 'Map':
			var keyType = typeExp.a;
			var valueType = typeExp.b;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'Map',
						'<',
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp(keyType),
						', ',
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp(valueType),
						'>'
					]));
		case 'Number':
			return 'number';
		case 'Object':
			var fieldList = typeExp.a;
			return $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapObjectExp(fieldList);
		case 'String':
			return 'string';
		case 'Tuple':
			var tupleTypesList = typeExp.a;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'[',
						A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp, tupleTypesList)),
						']'
					]));
		case 'TypeRef':
			var fQName = typeExp.a;
			var variables = typeExp.b;
			var processed_name = function () {
				if ((!fQName.a.b) && (!fQName.b.b)) {
					var localName = fQName.c;
					return $author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							[
								$author$project$Morphir$IR$Name$toTitleCase(localName)
							]));
				} else {
					var packagePath = fQName.a;
					var modulePath = fQName.b;
					var localName = fQName.c;
					return $author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							[
								A2($author$project$Morphir$TypeScript$PrettyPrinter$Expressions$namespaceNameFromPackageAndModule, packagePath, modulePath),
								'.',
								$author$project$Morphir$IR$Name$toTitleCase(localName)
							]));
				}
			}();
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						processed_name,
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapGenericVariables(variables)
					]));
		case 'Union':
			var types = typeExp.a;
			return A2(
				$elm$core$String$join,
				' | ',
				A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp, types));
		case 'Variable':
			var name = typeExp.a;
			return name;
		case 'UnhandledType':
			var tpe = typeExp.a;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					['any', ' /* Unhandled type: ', tpe, ' */']));
		default:
			var tpe = typeExp.a;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp(tpe),
						' | null'
					]));
	}
};
var $author$project$Morphir$TypeScript$PrettyPrinter$mapExpression = function (expression) {
	switch (expression.$) {
		case 'ArrayLiteralExpression':
			var values = expression.a;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'[',
						A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$mapExpression, values)),
						']'
					]));
		case 'Call':
			var _function = expression.a._function;
			var _arguments = expression.a._arguments;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(_function),
						'(',
						A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$mapExpression, _arguments)),
						')'
					]));
		case 'Identifier':
			var name = expression.a;
			return name;
		case 'IntLiteralExpression':
			var num = expression.a;
			return $elm$core$String$fromInt(num);
		case 'IndexedExpression':
			var object = expression.a.object;
			var index = expression.a.index;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(object),
						'[',
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(index),
						']'
					]));
		case 'MemberExpression':
			var object = expression.a.object;
			var member = expression.a.member;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(object),
						'.',
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(member)
					]));
		case 'NewExpression':
			var constructor = expression.a.constructor;
			var _arguments = expression.a._arguments;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'new ',
						constructor,
						'(',
						A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$mapExpression, _arguments)),
						')'
					]));
		case 'NullLiteral':
			return 'null';
		case 'ObjectLiteralExpression':
			var properties = expression.a.properties;
			var mapObjectField = function (_v1) {
				var fieldName = _v1.a;
				var fieldValue = _v1.b;
				return $author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						[
							fieldName,
							': ',
							$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(fieldValue)
						]));
			};
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'{',
						A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, mapObjectField, properties)),
						'}'
					]));
		default:
			var string = expression.a;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					['\"', string, '\"']));
	}
};
var $author$project$Morphir$TypeScript$PrettyPrinter$mapStatement = function (statement) {
	switch (statement.$) {
		case 'FunctionDeclaration':
			var name = statement.a.name;
			var typeVariables = statement.a.typeVariables;
			var returnType = statement.a.returnType;
			var scope = statement.a.scope;
			var parameters = statement.a.parameters;
			var body = statement.a.body;
			var privacy = statement.a.privacy;
			var typeVariablesString = function () {
				if (!typeVariables.b) {
					return '';
				} else {
					return $author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							[
								'<',
								A2(
								$elm$core$String$join,
								', ',
								A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp, typeVariables)),
								'>'
							]));
				}
			}();
			var returnTypeExpression = function () {
				if (returnType.$ === 'Nothing') {
					return '';
				} else {
					var typeExp = returnType.a;
					return $author$project$Morphir$File$SourceCode$concat(
						_List_fromArray(
							[
								': ',
								$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp(typeExp)
							]));
				}
			}();
			var prefaceKeywords = function () {
				switch (scope.$) {
					case 'ModuleFunction':
						return $author$project$Morphir$File$SourceCode$concat(
							_List_fromArray(
								[
									$author$project$Morphir$TypeScript$PrettyPrinter$exportIfPublic(privacy),
									'function '
								]));
					case 'ClassStaticFunction':
						return $author$project$Morphir$File$SourceCode$concat(
							_List_fromArray(
								['static ']));
					default:
						return '';
				}
			}();
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						prefaceKeywords,
						name,
						typeVariablesString,
						'(',
						A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapParameter, parameters)),
						')',
						returnTypeExpression,
						' {',
						$author$project$Morphir$File$SourceCode$newLine,
						A2(
						$author$project$Morphir$File$SourceCode$indentLines,
						$author$project$Morphir$TypeScript$PrettyPrinter$defaultIndent,
						A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$mapStatement, body)),
						$author$project$Morphir$File$SourceCode$newLine,
						'}'
					]));
		case 'ReturnStatement':
			var expression = statement.a;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'return ',
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(expression),
						';'
					]));
		case 'LetStatement':
			var lhsExpression = statement.a;
			var maybeAnnotation = statement.b;
			var rhsExpression = statement.c;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'let ',
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(lhsExpression),
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapMaybeAnnotation(maybeAnnotation),
						' = ',
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(rhsExpression),
						';'
					]));
		case 'AssignmentStatement':
			var lhsExpression = statement.a;
			var maybeAnnotation = statement.b;
			var rhsExpression = statement.c;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(lhsExpression),
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapMaybeAnnotation(maybeAnnotation),
						' = ',
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(rhsExpression),
						';'
					]));
		case 'ExpressionStatement':
			var expression = statement.a;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(expression),
						';'
					]));
		default:
			var condition = statement.a;
			var cases = statement.b;
			var mapCase = function (_v4) {
				var caseExpr = _v4.a;
				var statementList = _v4.b;
				return $author$project$Morphir$File$SourceCode$concat(
					_List_fromArray(
						[
							'case ',
							$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(caseExpr),
							':',
							A2(
							$author$project$Morphir$File$SourceCode$indentLines,
							$author$project$Morphir$TypeScript$PrettyPrinter$defaultIndent,
							A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$mapStatement, statementList))
						]));
			};
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						'switch (',
						$author$project$Morphir$TypeScript$PrettyPrinter$mapExpression(condition),
						') {',
						$author$project$Morphir$File$SourceCode$newLine,
						A2(
						$author$project$Morphir$File$SourceCode$indentLines,
						$author$project$Morphir$TypeScript$PrettyPrinter$defaultIndent,
						A2($elm$core$List$map, mapCase, cases)),
						$author$project$Morphir$File$SourceCode$newLine,
						'}'
					]));
	}
};
var $author$project$Morphir$TypeScript$PrettyPrinter$mapMaybeStatement = function (maybeStatement) {
	if (maybeStatement.$ === 'Just') {
		var statement = maybeStatement.a;
		return $author$project$Morphir$TypeScript$PrettyPrinter$mapStatement(statement);
	} else {
		return '';
	}
};
var $author$project$Morphir$TypeScript$PrettyPrinter$mapTypeDef = function (typeDef) {
	switch (typeDef.$) {
		case 'Namespace':
			var name = typeDef.a.name;
			var privacy = typeDef.a.privacy;
			var content = typeDef.a.content;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$PrettyPrinter$exportIfPublic(privacy),
						'namespace ',
						name,
						' {' + $author$project$Morphir$File$SourceCode$newLine,
						A2(
						$author$project$Morphir$File$SourceCode$indentLines,
						$author$project$Morphir$TypeScript$PrettyPrinter$defaultIndent,
						A2(
							$elm$core$List$map,
							function (mappedTypeDef) {
								return _Utils_ap(mappedTypeDef, $author$project$Morphir$File$SourceCode$newLine);
							},
							A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$mapTypeDef, content))),
						$author$project$Morphir$File$SourceCode$newLine + '}'
					]));
		case 'TypeAlias':
			var name = typeDef.a.name;
			var privacy = typeDef.a.privacy;
			var doc = typeDef.a.doc;
			var variables = typeDef.a.variables;
			var typeExpression = typeDef.a.typeExpression;
			var decoder = typeDef.a.decoder;
			var encoder = typeDef.a.encoder;
			var docstring = ($elm$core$String$length(doc) > 0) ? $elm$core$String$concat(
				_List_fromArray(
					['/*', doc, '*/'])) : '';
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						docstring,
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$TypeScript$PrettyPrinter$exportIfPublic(privacy),
						'type ',
						name,
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapGenericVariables(variables),
						' = ',
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapTypeExp(typeExpression),
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$TypeScript$PrettyPrinter$mapMaybeStatement(decoder),
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$TypeScript$PrettyPrinter$mapMaybeStatement(encoder)
					]));
		case 'VariantClass':
			var name = typeDef.a.name;
			var privacy = typeDef.a.privacy;
			var variables = typeDef.a.variables;
			var body = typeDef.a.body;
			var constructor = typeDef.a.constructor;
			var decoder = typeDef.a.decoder;
			var encoder = typeDef.a.encoder;
			var preface = $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$PrettyPrinter$exportIfPublic(privacy),
						'class ',
						name,
						$author$project$Morphir$TypeScript$PrettyPrinter$Expressions$mapGenericVariables(variables),
						' {'
					]));
			var mainbody = _List_fromArray(
				[
					A3(
					$elm$core$Basics$composeR,
					$elm$core$List$map($author$project$Morphir$TypeScript$PrettyPrinter$mapStatement),
					$elm$core$String$join($author$project$Morphir$File$SourceCode$newLine),
					body),
					$author$project$Morphir$File$SourceCode$newLine,
					$author$project$Morphir$TypeScript$PrettyPrinter$mapMaybeStatement(constructor)
				]);
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						preface,
						$author$project$Morphir$File$SourceCode$newLine,
						A2($author$project$Morphir$File$SourceCode$indentLines, $author$project$Morphir$TypeScript$PrettyPrinter$defaultIndent, mainbody),
						'}',
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$TypeScript$PrettyPrinter$mapMaybeStatement(decoder),
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$File$SourceCode$newLine,
						$author$project$Morphir$TypeScript$PrettyPrinter$mapMaybeStatement(encoder),
						$author$project$Morphir$File$SourceCode$newLine
					]));
		default:
			var name = typeDef.a.name;
			var privacy = typeDef.a.privacy;
			var namespacePath = typeDef.a.namespacePath;
			return $author$project$Morphir$File$SourceCode$concat(
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$PrettyPrinter$exportIfPublic(privacy),
						'import ',
						name,
						' = ',
						A2($author$project$Morphir$TypeScript$PrettyPrinter$Expressions$namespaceNameFromPackageAndModule, namespacePath.a, namespacePath.b)
					]));
	}
};
var $author$project$Morphir$TypeScript$PrettyPrinter$mapCompilationUnit = function (cu) {
	var dirPath = cu.dirPath;
	var imports = cu.imports;
	var typeDefs = cu.typeDefs;
	return $author$project$Morphir$File$SourceCode$concat(
		_List_fromArray(
			[
				'// Generated by morphir-elm',
				_Utils_ap($author$project$Morphir$File$SourceCode$newLine, $author$project$Morphir$File$SourceCode$newLine),
				A2(
				$elm$core$String$join,
				$author$project$Morphir$File$SourceCode$newLine,
				A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$mapImportDeclaration, imports)),
				_Utils_ap($author$project$Morphir$File$SourceCode$newLine, $author$project$Morphir$File$SourceCode$newLine),
				A2(
				$elm$core$String$join,
				$author$project$Morphir$File$SourceCode$newLine,
				A2(
					$elm$core$List$map,
					function (mappedTypeDef) {
						return _Utils_ap(
							mappedTypeDef,
							_Utils_ap($author$project$Morphir$File$SourceCode$newLine, $author$project$Morphir$File$SourceCode$newLine));
					},
					A2($elm$core$List$map, $author$project$Morphir$TypeScript$PrettyPrinter$mapTypeDef, typeDefs)))
			]));
};
var $author$project$Morphir$TypeScript$AST$TypeAlias = function (a) {
	return {$: 'TypeAlias', a: a};
};
var $author$project$Morphir$TypeScript$AST$TypeRef = F2(
	function (a, b) {
		return {$: 'TypeRef', a: a, b: b};
	});
var $author$project$Morphir$TypeScript$AST$Union = function (a) {
	return {$: 'Union', a: a};
};
var $author$project$Morphir$TypeScript$AST$Variable = function (a) {
	return {$: 'Variable', a: a};
};
var $author$project$Morphir$TypeScript$AST$Any = {$: 'Any'};
var $author$project$Morphir$TypeScript$AST$Call = function (a) {
	return {$: 'Call', a: a};
};
var $author$project$Morphir$TypeScript$AST$FunctionDeclaration = function (a) {
	return {$: 'FunctionDeclaration', a: a};
};
var $author$project$Morphir$TypeScript$AST$Identifier = function (a) {
	return {$: 'Identifier', a: a};
};
var $author$project$Morphir$TypeScript$AST$ModuleFunction = {$: 'ModuleFunction'};
var $author$project$Morphir$TypeScript$AST$ReturnStatement = function (a) {
	return {$: 'ReturnStatement', a: a};
};
var $author$project$Morphir$TypeScript$AST$ArrayLiteralExpression = function (a) {
	return {$: 'ArrayLiteralExpression', a: a};
};
var $author$project$Morphir$TypeScript$AST$StringLiteralExpression = function (a) {
	return {$: 'StringLiteralExpression', a: a};
};
var $author$project$Morphir$TypeScript$AST$MemberExpression = function (a) {
	return {$: 'MemberExpression', a: a};
};
var $author$project$Morphir$TypeScript$AST$NullLiteral = {$: 'NullLiteral'};
var $author$project$Morphir$TypeScript$Backend$Types$bindArgumentsToFunction = F2(
	function (_function, args) {
		return $elm$core$List$isEmpty(args) ? _function : $author$project$Morphir$TypeScript$AST$Call(
			{
				_arguments: A2($elm$core$List$cons, $author$project$Morphir$TypeScript$AST$NullLiteral, args),
				_function: $author$project$Morphir$TypeScript$AST$MemberExpression(
					{
						member: $author$project$Morphir$TypeScript$AST$Identifier('bind'),
						object: _function
					})
			});
	});
var $author$project$Morphir$TypeScript$Backend$Types$codecsModule = function (_function) {
	return $author$project$Morphir$TypeScript$AST$MemberExpression(
		{
			member: $author$project$Morphir$TypeScript$AST$Identifier(_function),
			object: $author$project$Morphir$TypeScript$AST$Identifier('codecs')
		});
};
var $author$project$Morphir$TypeScript$Backend$Types$buildCodecMap = function (array) {
	return $author$project$Morphir$TypeScript$AST$Call(
		{
			_arguments: _List_fromArray(
				[array]),
			_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('buildCodecMap')
		});
};
var $author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName = function (name) {
	return $author$project$Morphir$IR$Name$toCamelCase(
		A2($elm$core$List$cons, 'decode', name));
};
var $author$project$Morphir$TypeScript$Backend$Types$referenceCodec = F2(
	function (_v0, codecName) {
		var packageName = _v0.a;
		var moduleName = _v0.b;
		return $author$project$Morphir$TypeScript$AST$MemberExpression(
			{
				member: $author$project$Morphir$TypeScript$AST$Identifier(codecName),
				object: $author$project$Morphir$TypeScript$AST$Identifier(
					A2($author$project$Morphir$TypeScript$AST$namespaceNameFromPackageAndModule, packageName, moduleName))
			});
	});
var $author$project$Morphir$TypeScript$Backend$Types$decoderExpression = F3(
	function (customTypeVars, typeExp, inputArg) {
		_v0$11:
		while (true) {
			switch (typeExp.$) {
				case 'Record':
					var fieldList = typeExp.b;
					return {
						_arguments: _List_fromArray(
							[
								$author$project$Morphir$TypeScript$Backend$Types$buildCodecMap(
								$author$project$Morphir$TypeScript$AST$ArrayLiteralExpression(
									A2(
										$elm$core$List$map,
										function (field) {
											return $author$project$Morphir$TypeScript$AST$ArrayLiteralExpression(
												_List_fromArray(
													[
														$author$project$Morphir$TypeScript$AST$StringLiteralExpression(
														$author$project$Morphir$IR$Name$toCamelCase(field.name)),
														A2($author$project$Morphir$TypeScript$Backend$Types$specificDecoderForType, customTypeVars, field.tpe)
													]));
										},
										fieldList))),
								inputArg
							]),
						_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeRecord')
					};
				case 'Tuple':
					var tupleTypesList = typeExp.b;
					return {
						_arguments: _List_fromArray(
							[
								$author$project$Morphir$TypeScript$AST$ArrayLiteralExpression(
								A2(
									$elm$core$List$map,
									$author$project$Morphir$TypeScript$Backend$Types$specificDecoderForType(customTypeVars),
									tupleTypesList)),
								inputArg
							]),
						_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeTuple')
					};
				case 'Variable':
					var varName = typeExp.b;
					return {
						_arguments: _List_fromArray(
							[inputArg]),
						_function: $author$project$Morphir$TypeScript$AST$Identifier(
							$author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName(varName))
					};
				case 'Reference':
					if ((((((((((((((((((typeExp.b.a.b && typeExp.b.a.a.b) && (typeExp.b.a.a.a === 'morphir')) && (!typeExp.b.a.a.b.b)) && typeExp.b.a.b.b) && typeExp.b.a.b.a.b) && (typeExp.b.a.b.a.a === 's')) && typeExp.b.a.b.a.b.b) && (typeExp.b.a.b.a.b.a === 'd')) && typeExp.b.a.b.a.b.b.b) && (typeExp.b.a.b.a.b.b.a === 'k')) && (!typeExp.b.a.b.a.b.b.b.b)) && (!typeExp.b.a.b.b.b)) && typeExp.b.b.b) && typeExp.b.b.a.b) && (!typeExp.b.b.a.b.b)) && (!typeExp.b.b.b.b)) && typeExp.b.c.b) && (!typeExp.b.c.b.b)) {
						if (!typeExp.c.b) {
							switch (typeExp.b.b.a.a) {
								case 'basics':
									switch (typeExp.b.c.a) {
										case 'bool':
											var _v1 = typeExp.b;
											var _v2 = _v1.a;
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											var _v5 = _v4.a;
											var _v6 = _v5.b;
											var _v7 = _v6.b;
											var _v8 = _v1.b;
											var _v9 = _v8.a;
											var _v10 = _v1.c;
											return {
												_arguments: _List_fromArray(
													[inputArg]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeBoolean')
											};
										case 'float':
											var _v11 = typeExp.b;
											var _v12 = _v11.a;
											var _v13 = _v12.a;
											var _v14 = _v12.b;
											var _v15 = _v14.a;
											var _v16 = _v15.b;
											var _v17 = _v16.b;
											var _v18 = _v11.b;
											var _v19 = _v18.a;
											var _v20 = _v11.c;
											return {
												_arguments: _List_fromArray(
													[inputArg]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeFloat')
											};
										case 'int':
											var _v21 = typeExp.b;
											var _v22 = _v21.a;
											var _v23 = _v22.a;
											var _v24 = _v22.b;
											var _v25 = _v24.a;
											var _v26 = _v25.b;
											var _v27 = _v26.b;
											var _v28 = _v21.b;
											var _v29 = _v28.a;
											var _v30 = _v21.c;
											return {
												_arguments: _List_fromArray(
													[inputArg]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeInt')
											};
										default:
											break _v0$11;
									}
								case 'char':
									if (typeExp.b.c.a === 'char') {
										var _v31 = typeExp.b;
										var _v32 = _v31.a;
										var _v33 = _v32.a;
										var _v34 = _v32.b;
										var _v35 = _v34.a;
										var _v36 = _v35.b;
										var _v37 = _v36.b;
										var _v38 = _v31.b;
										var _v39 = _v38.a;
										var _v40 = _v31.c;
										return {
											_arguments: _List_fromArray(
												[inputArg]),
											_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeChar')
										};
									} else {
										break _v0$11;
									}
								case 'string':
									if (typeExp.b.c.a === 'string') {
										var _v41 = typeExp.b;
										var _v42 = _v41.a;
										var _v43 = _v42.a;
										var _v44 = _v42.b;
										var _v45 = _v44.a;
										var _v46 = _v45.b;
										var _v47 = _v46.b;
										var _v48 = _v41.b;
										var _v49 = _v48.a;
										var _v50 = _v41.c;
										return {
											_arguments: _List_fromArray(
												[inputArg]),
											_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeString')
										};
									} else {
										break _v0$11;
									}
								default:
									break _v0$11;
							}
						} else {
							if (typeExp.c.b.b) {
								if (((typeExp.b.b.a.a === 'dict') && (typeExp.b.c.a === 'dict')) && (!typeExp.c.b.b.b)) {
									var _v62 = typeExp.b;
									var _v63 = _v62.a;
									var _v64 = _v63.a;
									var _v65 = _v63.b;
									var _v66 = _v65.a;
									var _v67 = _v66.b;
									var _v68 = _v67.b;
									var _v69 = _v62.b;
									var _v70 = _v69.a;
									var _v71 = _v62.c;
									var _v72 = typeExp.c;
									var dictKeyType = _v72.a;
									var _v73 = _v72.b;
									var dictValType = _v73.a;
									return {
										_arguments: _List_fromArray(
											[
												A2($author$project$Morphir$TypeScript$Backend$Types$specificDecoderForType, customTypeVars, dictKeyType),
												A2($author$project$Morphir$TypeScript$Backend$Types$specificDecoderForType, customTypeVars, dictValType),
												inputArg
											]),
										_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeDict')
									};
								} else {
									break _v0$11;
								}
							} else {
								switch (typeExp.b.b.a.a) {
									case 'maybe':
										if (typeExp.b.c.a === 'maybe') {
											var _v51 = typeExp.b;
											var _v52 = _v51.a;
											var _v53 = _v52.a;
											var _v54 = _v52.b;
											var _v55 = _v54.a;
											var _v56 = _v55.b;
											var _v57 = _v56.b;
											var _v58 = _v51.b;
											var _v59 = _v58.a;
											var _v60 = _v51.c;
											var _v61 = typeExp.c;
											var itemType = _v61.a;
											return {
												_arguments: _List_fromArray(
													[
														A2($author$project$Morphir$TypeScript$Backend$Types$specificDecoderForType, customTypeVars, itemType),
														inputArg
													]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeMaybe')
											};
										} else {
											break _v0$11;
										}
									case 'list':
										if (typeExp.b.c.a === 'list') {
											var _v74 = typeExp.b;
											var _v75 = _v74.a;
											var _v76 = _v75.a;
											var _v77 = _v75.b;
											var _v78 = _v77.a;
											var _v79 = _v78.b;
											var _v80 = _v79.b;
											var _v81 = _v74.b;
											var _v82 = _v81.a;
											var _v83 = _v74.c;
											var _v84 = typeExp.c;
											var listType = _v84.a;
											return {
												_arguments: _List_fromArray(
													[
														A2($author$project$Morphir$TypeScript$Backend$Types$specificDecoderForType, customTypeVars, listType),
														inputArg
													]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeList')
											};
										} else {
											break _v0$11;
										}
									default:
										break _v0$11;
								}
							}
						}
					} else {
						break _v0$11;
					}
				case 'Unit':
					return {
						_arguments: _List_fromArray(
							[inputArg]),
						_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeUnit')
					};
				default:
					return {
						_arguments: _List_fromArray(
							[inputArg]),
						_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('decodeUnit')
					};
			}
		}
		var fQName = typeExp.b;
		var argTypes = typeExp.c;
		var varDecoders = A2(
			$elm$core$List$map,
			$author$project$Morphir$TypeScript$Backend$Types$specificDecoderForType(customTypeVars),
			argTypes);
		var decoderName = $author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName(
			$author$project$Morphir$IR$FQName$getLocalName(fQName));
		return {
			_arguments: _Utils_ap(
				varDecoders,
				_List_fromArray(
					[inputArg])),
			_function: A2($author$project$Morphir$TypeScript$Backend$Types$referenceCodec, fQName, decoderName)
		};
	});
var $author$project$Morphir$TypeScript$Backend$Types$specificDecoderForType = F2(
	function (customTypeVars, typeExp) {
		var removeInputArg = function (_arguments) {
			return A2(
				$elm$core$List$take,
				$elm$core$List$length(_arguments) - 1,
				_arguments);
		};
		var expression = A3(
			$author$project$Morphir$TypeScript$Backend$Types$decoderExpression,
			customTypeVars,
			typeExp,
			$author$project$Morphir$TypeScript$AST$Identifier('input'));
		return A2(
			$author$project$Morphir$TypeScript$Backend$Types$bindArgumentsToFunction,
			expression._function,
			removeInputArg(expression._arguments));
	});
var $author$project$Morphir$TypeScript$AST$FunctionTypeExp = F2(
	function (a, b) {
		return {$: 'FunctionTypeExp', a: a, b: b};
	});
var $author$project$Morphir$TypeScript$AST$Parameter = F3(
	function (modifiers, name, typeAnnotation) {
		return {modifiers: modifiers, name: name, typeAnnotation: typeAnnotation};
	});
var $author$project$Morphir$TypeScript$Backend$Types$decoderTypeSignature = function (typeExp) {
	return A2(
		$author$project$Morphir$TypeScript$AST$FunctionTypeExp,
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$TypeScript$AST$Parameter,
				_List_Nil,
				'input',
				$elm$core$Maybe$Just($author$project$Morphir$TypeScript$AST$Any))
			]),
		typeExp);
};
var $author$project$Morphir$TypeScript$AST$parameter = F3(
	function (modifiers, name, typeAnnotation) {
		return {modifiers: modifiers, name: name, typeAnnotation: typeAnnotation};
	});
var $author$project$Morphir$TypeScript$Backend$Types$generateDecoderFunction = F4(
	function (variables, typeName, access, typeExp) {
		var variableTypeExpressions = A2(
			$elm$core$List$map,
			function (_var) {
				return $author$project$Morphir$TypeScript$AST$Variable(_var);
			},
			A2($elm$core$List$map, $author$project$Morphir$IR$Name$toTitleCase, variables));
		var variableParams = A2(
			$elm$core$List$map,
			function (_var) {
				return A3(
					$author$project$Morphir$TypeScript$AST$parameter,
					_List_Nil,
					$author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName(_var),
					$elm$core$Maybe$Just(
						$author$project$Morphir$TypeScript$Backend$Types$decoderTypeSignature(
							$author$project$Morphir$TypeScript$AST$Variable(
								$author$project$Morphir$IR$Name$toTitleCase(_var)))));
			},
			variables);
		var inputParam = A3(
			$author$project$Morphir$TypeScript$AST$parameter,
			_List_Nil,
			'input',
			$elm$core$Maybe$Just($author$project$Morphir$TypeScript$AST$Any));
		var call = A3(
			$author$project$Morphir$TypeScript$Backend$Types$decoderExpression,
			variables,
			typeExp,
			$author$project$Morphir$TypeScript$AST$Identifier('input'));
		return $author$project$Morphir$TypeScript$AST$FunctionDeclaration(
			{
				body: _List_fromArray(
					[
						$author$project$Morphir$TypeScript$AST$ReturnStatement(
						$author$project$Morphir$TypeScript$AST$Call(call))
					]),
				name: $author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName(typeName),
				parameters: _Utils_ap(
					variableParams,
					_List_fromArray(
						[inputParam])),
				privacy: $author$project$Morphir$TypeScript$Backend$Types$mapPrivacy(access),
				returnType: $elm$core$Maybe$Just(
					A2(
						$author$project$Morphir$TypeScript$AST$TypeRef,
						_Utils_Tuple3(_List_Nil, _List_Nil, typeName),
						variableTypeExpressions)),
				scope: $author$project$Morphir$TypeScript$AST$ModuleFunction,
				typeVariables: variableTypeExpressions
			});
	});
var $author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName = function (name) {
	return $author$project$Morphir$IR$Name$toCamelCase(
		A2($elm$core$List$cons, 'encode', name));
};
var $author$project$Morphir$TypeScript$Backend$Types$encoderExpression = F3(
	function (customTypeVars, typeExp, valueArg) {
		_v0$11:
		while (true) {
			switch (typeExp.$) {
				case 'Record':
					var fieldList = typeExp.b;
					return {
						_arguments: _List_fromArray(
							[
								$author$project$Morphir$TypeScript$Backend$Types$buildCodecMap(
								$author$project$Morphir$TypeScript$AST$ArrayLiteralExpression(
									A2(
										$elm$core$List$map,
										function (field) {
											return $author$project$Morphir$TypeScript$AST$ArrayLiteralExpression(
												_List_fromArray(
													[
														$author$project$Morphir$TypeScript$AST$StringLiteralExpression(
														$author$project$Morphir$IR$Name$toCamelCase(field.name)),
														A2($author$project$Morphir$TypeScript$Backend$Types$specificEncoderForType, customTypeVars, field.tpe)
													]));
										},
										fieldList))),
								valueArg
							]),
						_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeRecord')
					};
				case 'Tuple':
					var tupleTypesList = typeExp.b;
					return {
						_arguments: _List_fromArray(
							[
								$author$project$Morphir$TypeScript$AST$ArrayLiteralExpression(
								A2(
									$elm$core$List$map,
									$author$project$Morphir$TypeScript$Backend$Types$specificEncoderForType(customTypeVars),
									tupleTypesList)),
								valueArg
							]),
						_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeTuple')
					};
				case 'Variable':
					var varName = typeExp.b;
					return {
						_arguments: _List_fromArray(
							[valueArg]),
						_function: $author$project$Morphir$TypeScript$AST$Identifier(
							$author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName(varName))
					};
				case 'Reference':
					if ((((((((((((((((((typeExp.b.a.b && typeExp.b.a.a.b) && (typeExp.b.a.a.a === 'morphir')) && (!typeExp.b.a.a.b.b)) && typeExp.b.a.b.b) && typeExp.b.a.b.a.b) && (typeExp.b.a.b.a.a === 's')) && typeExp.b.a.b.a.b.b) && (typeExp.b.a.b.a.b.a === 'd')) && typeExp.b.a.b.a.b.b.b) && (typeExp.b.a.b.a.b.b.a === 'k')) && (!typeExp.b.a.b.a.b.b.b.b)) && (!typeExp.b.a.b.b.b)) && typeExp.b.b.b) && typeExp.b.b.a.b) && (!typeExp.b.b.a.b.b)) && (!typeExp.b.b.b.b)) && typeExp.b.c.b) && (!typeExp.b.c.b.b)) {
						if (!typeExp.c.b) {
							switch (typeExp.b.b.a.a) {
								case 'basics':
									switch (typeExp.b.c.a) {
										case 'bool':
											var _v1 = typeExp.b;
											var _v2 = _v1.a;
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											var _v5 = _v4.a;
											var _v6 = _v5.b;
											var _v7 = _v6.b;
											var _v8 = _v1.b;
											var _v9 = _v8.a;
											var _v10 = _v1.c;
											return {
												_arguments: _List_fromArray(
													[valueArg]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeBoolean')
											};
										case 'float':
											var _v11 = typeExp.b;
											var _v12 = _v11.a;
											var _v13 = _v12.a;
											var _v14 = _v12.b;
											var _v15 = _v14.a;
											var _v16 = _v15.b;
											var _v17 = _v16.b;
											var _v18 = _v11.b;
											var _v19 = _v18.a;
											var _v20 = _v11.c;
											return {
												_arguments: _List_fromArray(
													[valueArg]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeFloat')
											};
										case 'int':
											var _v21 = typeExp.b;
											var _v22 = _v21.a;
											var _v23 = _v22.a;
											var _v24 = _v22.b;
											var _v25 = _v24.a;
											var _v26 = _v25.b;
											var _v27 = _v26.b;
											var _v28 = _v21.b;
											var _v29 = _v28.a;
											var _v30 = _v21.c;
											return {
												_arguments: _List_fromArray(
													[valueArg]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeInt')
											};
										default:
											break _v0$11;
									}
								case 'char':
									if (typeExp.b.c.a === 'char') {
										var _v31 = typeExp.b;
										var _v32 = _v31.a;
										var _v33 = _v32.a;
										var _v34 = _v32.b;
										var _v35 = _v34.a;
										var _v36 = _v35.b;
										var _v37 = _v36.b;
										var _v38 = _v31.b;
										var _v39 = _v38.a;
										var _v40 = _v31.c;
										return {
											_arguments: _List_fromArray(
												[valueArg]),
											_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeChar')
										};
									} else {
										break _v0$11;
									}
								case 'string':
									if (typeExp.b.c.a === 'string') {
										var _v41 = typeExp.b;
										var _v42 = _v41.a;
										var _v43 = _v42.a;
										var _v44 = _v42.b;
										var _v45 = _v44.a;
										var _v46 = _v45.b;
										var _v47 = _v46.b;
										var _v48 = _v41.b;
										var _v49 = _v48.a;
										var _v50 = _v41.c;
										return {
											_arguments: _List_fromArray(
												[valueArg]),
											_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeString')
										};
									} else {
										break _v0$11;
									}
								default:
									break _v0$11;
							}
						} else {
							if (typeExp.c.b.b) {
								if (((typeExp.b.b.a.a === 'dict') && (typeExp.b.c.a === 'dict')) && (!typeExp.c.b.b.b)) {
									var _v62 = typeExp.b;
									var _v63 = _v62.a;
									var _v64 = _v63.a;
									var _v65 = _v63.b;
									var _v66 = _v65.a;
									var _v67 = _v66.b;
									var _v68 = _v67.b;
									var _v69 = _v62.b;
									var _v70 = _v69.a;
									var _v71 = _v62.c;
									var _v72 = typeExp.c;
									var dictKeyType = _v72.a;
									var _v73 = _v72.b;
									var dictValType = _v73.a;
									return {
										_arguments: _List_fromArray(
											[
												A2($author$project$Morphir$TypeScript$Backend$Types$specificEncoderForType, customTypeVars, dictKeyType),
												A2($author$project$Morphir$TypeScript$Backend$Types$specificEncoderForType, customTypeVars, dictValType),
												valueArg
											]),
										_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeDict')
									};
								} else {
									break _v0$11;
								}
							} else {
								switch (typeExp.b.b.a.a) {
									case 'maybe':
										if (typeExp.b.c.a === 'maybe') {
											var _v51 = typeExp.b;
											var _v52 = _v51.a;
											var _v53 = _v52.a;
											var _v54 = _v52.b;
											var _v55 = _v54.a;
											var _v56 = _v55.b;
											var _v57 = _v56.b;
											var _v58 = _v51.b;
											var _v59 = _v58.a;
											var _v60 = _v51.c;
											var _v61 = typeExp.c;
											var itemType = _v61.a;
											return {
												_arguments: _List_fromArray(
													[
														A2($author$project$Morphir$TypeScript$Backend$Types$specificEncoderForType, customTypeVars, itemType),
														valueArg
													]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeMaybe')
											};
										} else {
											break _v0$11;
										}
									case 'list':
										if (typeExp.b.c.a === 'list') {
											var _v74 = typeExp.b;
											var _v75 = _v74.a;
											var _v76 = _v75.a;
											var _v77 = _v75.b;
											var _v78 = _v77.a;
											var _v79 = _v78.b;
											var _v80 = _v79.b;
											var _v81 = _v74.b;
											var _v82 = _v81.a;
											var _v83 = _v74.c;
											var _v84 = typeExp.c;
											var listType = _v84.a;
											return {
												_arguments: _List_fromArray(
													[
														A2($author$project$Morphir$TypeScript$Backend$Types$specificEncoderForType, customTypeVars, listType),
														valueArg
													]),
												_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeList')
											};
										} else {
											break _v0$11;
										}
									default:
										break _v0$11;
								}
							}
						}
					} else {
						break _v0$11;
					}
				case 'Unit':
					return {
						_arguments: _List_fromArray(
							[valueArg]),
						_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeUnit')
					};
				default:
					return {
						_arguments: _List_fromArray(
							[valueArg]),
						_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('encodeUnit')
					};
			}
		}
		var fQName = typeExp.b;
		var argTypes = typeExp.c;
		var varEncoders = A2(
			$elm$core$List$map,
			$author$project$Morphir$TypeScript$Backend$Types$specificEncoderForType(customTypeVars),
			argTypes);
		var decoderName = $author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName(
			$author$project$Morphir$IR$FQName$getLocalName(fQName));
		return {
			_arguments: _Utils_ap(
				varEncoders,
				_List_fromArray(
					[valueArg])),
			_function: A2($author$project$Morphir$TypeScript$Backend$Types$referenceCodec, fQName, decoderName)
		};
	});
var $author$project$Morphir$TypeScript$Backend$Types$specificEncoderForType = F2(
	function (customTypeVars, typeExp) {
		var removeValueArg = function (_arguments) {
			return A2(
				$elm$core$List$take,
				$elm$core$List$length(_arguments) - 1,
				_arguments);
		};
		var expression = A3(
			$author$project$Morphir$TypeScript$Backend$Types$encoderExpression,
			customTypeVars,
			typeExp,
			$author$project$Morphir$TypeScript$AST$Identifier('value'));
		return A2(
			$author$project$Morphir$TypeScript$Backend$Types$bindArgumentsToFunction,
			expression._function,
			removeValueArg(expression._arguments));
	});
var $author$project$Morphir$TypeScript$Backend$Types$encoderTypeSignature = function (typeExp) {
	return A2(
		$author$project$Morphir$TypeScript$AST$FunctionTypeExp,
		_List_fromArray(
			[
				A3(
				$author$project$Morphir$TypeScript$AST$Parameter,
				_List_Nil,
				'value',
				$elm$core$Maybe$Just(typeExp))
			]),
		$author$project$Morphir$TypeScript$AST$Any);
};
var $author$project$Morphir$TypeScript$Backend$Types$generateEncoderFunction = F4(
	function (variables, typeName, access, typeExp) {
		var variableTypeExpressions = A2(
			$elm$core$List$map,
			function (_var) {
				return $author$project$Morphir$TypeScript$AST$Variable(_var);
			},
			A2($elm$core$List$map, $author$project$Morphir$IR$Name$toTitleCase, variables));
		var variableParams = A2(
			$elm$core$List$map,
			function (_var) {
				return A3(
					$author$project$Morphir$TypeScript$AST$parameter,
					_List_Nil,
					$author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName(_var),
					$elm$core$Maybe$Just(
						$author$project$Morphir$TypeScript$Backend$Types$encoderTypeSignature(
							$author$project$Morphir$TypeScript$AST$Variable(
								$author$project$Morphir$IR$Name$toTitleCase(_var)))));
			},
			variables);
		var valueParam = A3(
			$author$project$Morphir$TypeScript$AST$parameter,
			_List_Nil,
			'value',
			$elm$core$Maybe$Just(
				A2(
					$author$project$Morphir$TypeScript$AST$TypeRef,
					_Utils_Tuple3(_List_Nil, _List_Nil, typeName),
					variableTypeExpressions)));
		var call = A3(
			$author$project$Morphir$TypeScript$Backend$Types$encoderExpression,
			variables,
			typeExp,
			$author$project$Morphir$TypeScript$AST$Identifier('value'));
		return $author$project$Morphir$TypeScript$AST$FunctionDeclaration(
			{
				body: _List_fromArray(
					[
						$author$project$Morphir$TypeScript$AST$ReturnStatement(
						$author$project$Morphir$TypeScript$AST$Call(call))
					]),
				name: $author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName(typeName),
				parameters: _Utils_ap(
					variableParams,
					_List_fromArray(
						[valueParam])),
				privacy: $author$project$Morphir$TypeScript$Backend$Types$mapPrivacy(access),
				returnType: $elm$core$Maybe$Just($author$project$Morphir$TypeScript$AST$Any),
				scope: $author$project$Morphir$TypeScript$AST$ModuleFunction,
				typeVariables: variableTypeExpressions
			});
	});
var $author$project$Morphir$TypeScript$AST$ExpressionStatement = function (a) {
	return {$: 'ExpressionStatement', a: a};
};
var $author$project$Morphir$TypeScript$AST$LetStatement = F3(
	function (a, b, c) {
		return {$: 'LetStatement', a: a, b: b, c: c};
	});
var $author$project$Morphir$TypeScript$AST$SwitchStatement = F2(
	function (a, b) {
		return {$: 'SwitchStatement', a: a, b: b};
	});
var $author$project$Morphir$TypeScript$Backend$Types$generateUnionDecoderFunction = F4(
	function (typeName, privacy, typeVariables, constructors) {
		var variableTypeExpressions = A2(
			$elm$core$List$map,
			function (_var) {
				return $author$project$Morphir$TypeScript$AST$Variable(_var);
			},
			A2($elm$core$List$map, $author$project$Morphir$IR$Name$toTitleCase, typeVariables));
		var kindCall = A3(
			$author$project$Morphir$TypeScript$AST$LetStatement,
			$author$project$Morphir$TypeScript$AST$Identifier('kind'),
			$elm$core$Maybe$Nothing,
			$author$project$Morphir$TypeScript$AST$Call(
				{
					_arguments: _List_fromArray(
						[
							$author$project$Morphir$TypeScript$AST$Identifier('input')
						]),
					_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('parseKindFromCustomTypeInput')
				}));
		var inputParam = A3(
			$author$project$Morphir$TypeScript$AST$parameter,
			_List_Nil,
			'input',
			$elm$core$Maybe$Just($author$project$Morphir$TypeScript$AST$Any));
		var errorCall = A2($elm$core$Basics$composeR, $author$project$Morphir$TypeScript$AST$Call, $author$project$Morphir$TypeScript$AST$ExpressionStatement)(
			{
				_arguments: _List_fromArray(
					[
						$author$project$Morphir$TypeScript$AST$StringLiteralExpression(
						$author$project$Morphir$IR$Name$toTitleCase(typeName)),
						$author$project$Morphir$TypeScript$AST$Identifier('kind')
					]),
				_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('raiseDecodeErrorFromCustomType')
			});
		var decoderParams = A2(
			$elm$core$List$map,
			function (_var) {
				return A3(
					$author$project$Morphir$TypeScript$AST$parameter,
					_List_Nil,
					$author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName(_var),
					$elm$core$Maybe$Just(
						$author$project$Morphir$TypeScript$Backend$Types$decoderTypeSignature(
							$author$project$Morphir$TypeScript$AST$Variable(
								$author$project$Morphir$IR$Name$toTitleCase(_var)))));
			},
			typeVariables);
		var constructorToCaseBlock = function (constructor) {
			return _Utils_Tuple2(
				$author$project$Morphir$TypeScript$AST$StringLiteralExpression(
					$author$project$Morphir$IR$Name$toTitleCase(constructor.name)),
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$AST$ReturnStatement(
						$author$project$Morphir$TypeScript$AST$Call(
							{
								_arguments: _Utils_ap(
									A2(
										$elm$core$List$map,
										A2($elm$core$Basics$composeR, $author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName, $author$project$Morphir$TypeScript$AST$Identifier),
										constructor.typeVariableNames),
									_List_fromArray(
										[
											$author$project$Morphir$TypeScript$AST$Identifier('input')
										])),
								_function: $author$project$Morphir$TypeScript$AST$Identifier(
									$author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName(constructor.name))
							}))
					]));
		};
		var switchStatement = A2(
			$author$project$Morphir$TypeScript$AST$SwitchStatement,
			$author$project$Morphir$TypeScript$AST$Identifier('kind'),
			A2($elm$core$List$map, constructorToCaseBlock, constructors));
		return $author$project$Morphir$TypeScript$AST$FunctionDeclaration(
			{
				body: _List_fromArray(
					[kindCall, switchStatement, errorCall]),
				name: $author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName(typeName),
				parameters: _Utils_ap(
					decoderParams,
					_List_fromArray(
						[inputParam])),
				privacy: privacy,
				returnType: $elm$core$Maybe$Just(
					A2(
						$author$project$Morphir$TypeScript$AST$TypeRef,
						_Utils_Tuple3(_List_Nil, _List_Nil, typeName),
						variableTypeExpressions)),
				scope: $author$project$Morphir$TypeScript$AST$ModuleFunction,
				typeVariables: variableTypeExpressions
			});
	});
var $author$project$Morphir$TypeScript$Backend$Types$generateUnionEncoderFunction = F4(
	function (typeName, privacy, typeVariables, constructors) {
		var variableTypeExpressions = A2(
			$elm$core$List$map,
			function (_var) {
				return $author$project$Morphir$TypeScript$AST$Variable(_var);
			},
			A2($elm$core$List$map, $author$project$Morphir$IR$Name$toTitleCase, typeVariables));
		var valueParam = A3(
			$author$project$Morphir$TypeScript$AST$parameter,
			_List_Nil,
			'value',
			$elm$core$Maybe$Just(
				A2(
					$author$project$Morphir$TypeScript$AST$TypeRef,
					_Utils_Tuple3(_List_Nil, _List_Nil, typeName),
					variableTypeExpressions)));
		var encoderParams = A2(
			$elm$core$List$map,
			function (_var) {
				return A3(
					$author$project$Morphir$TypeScript$AST$parameter,
					_List_Nil,
					$author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName(_var),
					$elm$core$Maybe$Just(
						$author$project$Morphir$TypeScript$Backend$Types$encoderTypeSignature(
							$author$project$Morphir$TypeScript$AST$Variable(
								$author$project$Morphir$IR$Name$toTitleCase(_var)))));
			},
			typeVariables);
		var constructorToCaseBlock = function (constructor) {
			return _Utils_Tuple2(
				$author$project$Morphir$TypeScript$AST$StringLiteralExpression(
					$author$project$Morphir$IR$Name$toTitleCase(constructor.name)),
				_List_fromArray(
					[
						$author$project$Morphir$TypeScript$AST$ReturnStatement(
						$author$project$Morphir$TypeScript$AST$Call(
							{
								_arguments: _Utils_ap(
									A2(
										$elm$core$List$map,
										A2($elm$core$Basics$composeR, $author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName, $author$project$Morphir$TypeScript$AST$Identifier),
										constructor.typeVariableNames),
									_List_fromArray(
										[
											$author$project$Morphir$TypeScript$AST$Identifier('value')
										])),
								_function: $author$project$Morphir$TypeScript$AST$Identifier(
									$author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName(constructor.name))
							}))
					]));
		};
		var switchStatement = A2(
			$author$project$Morphir$TypeScript$AST$SwitchStatement,
			$author$project$Morphir$TypeScript$AST$MemberExpression(
				{
					member: $author$project$Morphir$TypeScript$AST$Identifier('kind'),
					object: $author$project$Morphir$TypeScript$AST$Identifier('value')
				}),
			A2($elm$core$List$map, constructorToCaseBlock, constructors));
		return $author$project$Morphir$TypeScript$AST$FunctionDeclaration(
			{
				body: _List_fromArray(
					[switchStatement]),
				name: $author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName(typeName),
				parameters: _Utils_ap(
					encoderParams,
					_List_fromArray(
						[valueParam])),
				privacy: privacy,
				returnType: $elm$core$Maybe$Just($author$project$Morphir$TypeScript$AST$Any),
				scope: $author$project$Morphir$TypeScript$AST$ModuleFunction,
				typeVariables: variableTypeExpressions
			});
	});
var $author$project$Morphir$TypeScript$Backend$Types$collectTypeVariables = function (typeExp) {
	switch (typeExp.$) {
		case 'Variable':
			return _List_fromArray(
				[typeExp]);
		case 'Reference':
			var argTypes = typeExp.c;
			return A2($elm$core$List$concatMap, $author$project$Morphir$TypeScript$Backend$Types$collectTypeVariables, argTypes);
		case 'Tuple':
			var valueTypes = typeExp.b;
			return A2($elm$core$List$concatMap, $author$project$Morphir$TypeScript$Backend$Types$collectTypeVariables, valueTypes);
		case 'Record':
			var fieldTypes = typeExp.b;
			return A2(
				$elm$core$List$concatMap,
				function (field) {
					return $author$project$Morphir$TypeScript$Backend$Types$collectTypeVariables(field.tpe);
				},
				fieldTypes);
		case 'ExtensibleRecord':
			var fieldTypes = typeExp.c;
			return A2(
				$elm$core$List$concatMap,
				function (field) {
					return $author$project$Morphir$TypeScript$Backend$Types$collectTypeVariables(field.tpe);
				},
				fieldTypes);
		case 'Function':
			var argumentType = typeExp.b;
			var returnType = typeExp.c;
			return A2(
				$elm$core$List$concatMap,
				$author$project$Morphir$TypeScript$Backend$Types$collectTypeVariables,
				_List_fromArray(
					[argumentType, returnType]));
		default:
			return _List_Nil;
	}
};
var $author$project$Morphir$TypeScript$Backend$Types$deduplicateTypeVariables = function (list) {
	var compareAndReturn = F3(
		function (seen, remaining, result) {
			compareAndReturn:
			while (true) {
				if (!remaining.b) {
					return result;
				} else {
					var item = remaining.a;
					var rest = remaining.b;
					if (item.$ === 'Variable') {
						var name = item.b;
						if (A2(
							$elm$core$Set$member,
							$author$project$Morphir$IR$Name$toTitleCase(name),
							seen)) {
							var $temp$seen = seen,
								$temp$remaining = rest,
								$temp$result = result;
							seen = $temp$seen;
							remaining = $temp$remaining;
							result = $temp$result;
							continue compareAndReturn;
						} else {
							return A2(
								$elm$core$List$cons,
								item,
								A3(
									compareAndReturn,
									A2(
										$elm$core$Set$insert,
										$author$project$Morphir$IR$Name$toTitleCase(name),
										seen),
									remaining,
									result));
						}
					} else {
						return _List_Nil;
					}
				}
			}
		});
	return A3(compareAndReturn, $elm$core$Set$empty, list, _List_Nil);
};
var $author$project$Morphir$TypeScript$Backend$Types$getConstructorDetails = F2(
	function (privacy, _v0) {
		var ctorName = _v0.a;
		var ctorArgs = _v0.b;
		var typeVariables = $author$project$Morphir$TypeScript$Backend$Types$deduplicateTypeVariables(
			A2(
				$elm$core$List$concatMap,
				$author$project$Morphir$TypeScript$Backend$Types$collectTypeVariables,
				A2($elm$core$List$map, $elm$core$Tuple$second, ctorArgs)));
		return {
			args: ctorArgs,
			name: ctorName,
			privacy: privacy,
			typeVariableNames: A2(
				$elm$core$List$map,
				function (argType) {
					if (argType.$ === 'Variable') {
						var name = argType.b;
						return name;
					} else {
						return _List_Nil;
					}
				},
				typeVariables),
			typeVariables: typeVariables
		};
	});
var $author$project$Morphir$TypeScript$AST$AssignmentStatement = F3(
	function (a, b, c) {
		return {$: 'AssignmentStatement', a: a, b: b, c: c};
	});
var $author$project$Morphir$TypeScript$AST$LiteralString = function (a) {
	return {$: 'LiteralString', a: a};
};
var $author$project$Morphir$TypeScript$AST$VariantClass = function (a) {
	return {$: 'VariantClass', a: a};
};
var $author$project$Morphir$TypeScript$AST$ClassMemberFunction = {$: 'ClassMemberFunction'};
var $author$project$Morphir$TypeScript$AST$Boolean = {$: 'Boolean'};
var $author$project$Morphir$TypeScript$AST$List = function (a) {
	return {$: 'List', a: a};
};
var $author$project$Morphir$TypeScript$AST$Map = F2(
	function (a, b) {
		return {$: 'Map', a: a, b: b};
	});
var $author$project$Morphir$TypeScript$AST$Nullable = function (a) {
	return {$: 'Nullable', a: a};
};
var $author$project$Morphir$TypeScript$AST$Number = {$: 'Number'};
var $author$project$Morphir$TypeScript$AST$Object = function (a) {
	return {$: 'Object', a: a};
};
var $author$project$Morphir$TypeScript$AST$String = {$: 'String'};
var $author$project$Morphir$TypeScript$AST$Tuple = function (a) {
	return {$: 'Tuple', a: a};
};
var $author$project$Morphir$TypeScript$AST$UnhandledType = function (a) {
	return {$: 'UnhandledType', a: a};
};
var $author$project$Morphir$TypeScript$Backend$Types$mapTypeExp = function (tpe) {
	_v0$11:
	while (true) {
		switch (tpe.$) {
			case 'Record':
				var fieldList = tpe.b;
				return $author$project$Morphir$TypeScript$AST$Object(
					A2(
						$elm$core$List$map,
						function (field) {
							return _Utils_Tuple2(
								$author$project$Morphir$IR$Name$toCamelCase(field.name),
								$author$project$Morphir$TypeScript$Backend$Types$mapTypeExp(field.tpe));
						},
						fieldList));
			case 'Tuple':
				var tupleTypesList = tpe.b;
				return $author$project$Morphir$TypeScript$AST$Tuple(
					A2($elm$core$List$map, $author$project$Morphir$TypeScript$Backend$Types$mapTypeExp, tupleTypesList));
			case 'Reference':
				if ((((((((((((((((((tpe.b.a.b && tpe.b.a.a.b) && (tpe.b.a.a.a === 'morphir')) && (!tpe.b.a.a.b.b)) && tpe.b.a.b.b) && tpe.b.a.b.a.b) && (tpe.b.a.b.a.a === 's')) && tpe.b.a.b.a.b.b) && (tpe.b.a.b.a.b.a === 'd')) && tpe.b.a.b.a.b.b.b) && (tpe.b.a.b.a.b.b.a === 'k')) && (!tpe.b.a.b.a.b.b.b.b)) && (!tpe.b.a.b.b.b)) && tpe.b.b.b) && tpe.b.b.a.b) && (!tpe.b.b.a.b.b)) && (!tpe.b.b.b.b)) && tpe.b.c.b) && (!tpe.b.c.b.b)) {
					if (!tpe.c.b) {
						switch (tpe.b.b.a.a) {
							case 'basics':
								switch (tpe.b.c.a) {
									case 'bool':
										var _v1 = tpe.b;
										var _v2 = _v1.a;
										var _v3 = _v2.a;
										var _v4 = _v2.b;
										var _v5 = _v4.a;
										var _v6 = _v5.b;
										var _v7 = _v6.b;
										var _v8 = _v1.b;
										var _v9 = _v8.a;
										var _v10 = _v1.c;
										return $author$project$Morphir$TypeScript$AST$Boolean;
									case 'float':
										var _v11 = tpe.b;
										var _v12 = _v11.a;
										var _v13 = _v12.a;
										var _v14 = _v12.b;
										var _v15 = _v14.a;
										var _v16 = _v15.b;
										var _v17 = _v16.b;
										var _v18 = _v11.b;
										var _v19 = _v18.a;
										var _v20 = _v11.c;
										return $author$project$Morphir$TypeScript$AST$Number;
									case 'int':
										var _v21 = tpe.b;
										var _v22 = _v21.a;
										var _v23 = _v22.a;
										var _v24 = _v22.b;
										var _v25 = _v24.a;
										var _v26 = _v25.b;
										var _v27 = _v26.b;
										var _v28 = _v21.b;
										var _v29 = _v28.a;
										var _v30 = _v21.c;
										return $author$project$Morphir$TypeScript$AST$Number;
									default:
										break _v0$11;
								}
							case 'decimal':
								if (tpe.b.c.a === 'decimal') {
									var _v31 = tpe.b;
									var _v32 = _v31.a;
									var _v33 = _v32.a;
									var _v34 = _v32.b;
									var _v35 = _v34.a;
									var _v36 = _v35.b;
									var _v37 = _v36.b;
									var _v38 = _v31.b;
									var _v39 = _v38.a;
									var _v40 = _v31.c;
									return $author$project$Morphir$TypeScript$AST$Number;
								} else {
									break _v0$11;
								}
							case 'char':
								if (tpe.b.c.a === 'char') {
									var _v41 = tpe.b;
									var _v42 = _v41.a;
									var _v43 = _v42.a;
									var _v44 = _v42.b;
									var _v45 = _v44.a;
									var _v46 = _v45.b;
									var _v47 = _v46.b;
									var _v48 = _v41.b;
									var _v49 = _v48.a;
									var _v50 = _v41.c;
									return $author$project$Morphir$TypeScript$AST$String;
								} else {
									break _v0$11;
								}
							case 'string':
								if (tpe.b.c.a === 'string') {
									var _v51 = tpe.b;
									var _v52 = _v51.a;
									var _v53 = _v52.a;
									var _v54 = _v52.b;
									var _v55 = _v54.a;
									var _v56 = _v55.b;
									var _v57 = _v56.b;
									var _v58 = _v51.b;
									var _v59 = _v58.a;
									var _v60 = _v51.c;
									return $author$project$Morphir$TypeScript$AST$String;
								} else {
									break _v0$11;
								}
							default:
								break _v0$11;
						}
					} else {
						if (tpe.c.b.b) {
							if (((tpe.b.b.a.a === 'dict') && (tpe.b.c.a === 'dict')) && (!tpe.c.b.b.b)) {
								var _v72 = tpe.b;
								var _v73 = _v72.a;
								var _v74 = _v73.a;
								var _v75 = _v73.b;
								var _v76 = _v75.a;
								var _v77 = _v76.b;
								var _v78 = _v77.b;
								var _v79 = _v72.b;
								var _v80 = _v79.a;
								var _v81 = _v72.c;
								var _v82 = tpe.c;
								var dictKeyType = _v82.a;
								var _v83 = _v82.b;
								var dictValType = _v83.a;
								return A2(
									$author$project$Morphir$TypeScript$AST$Map,
									$author$project$Morphir$TypeScript$Backend$Types$mapTypeExp(dictKeyType),
									$author$project$Morphir$TypeScript$Backend$Types$mapTypeExp(dictValType));
							} else {
								break _v0$11;
							}
						} else {
							switch (tpe.b.b.a.a) {
								case 'maybe':
									if (tpe.b.c.a === 'maybe') {
										var _v61 = tpe.b;
										var _v62 = _v61.a;
										var _v63 = _v62.a;
										var _v64 = _v62.b;
										var _v65 = _v64.a;
										var _v66 = _v65.b;
										var _v67 = _v66.b;
										var _v68 = _v61.b;
										var _v69 = _v68.a;
										var _v70 = _v61.c;
										var _v71 = tpe.c;
										var itemType = _v71.a;
										return $author$project$Morphir$TypeScript$AST$Nullable(
											$author$project$Morphir$TypeScript$Backend$Types$mapTypeExp(itemType));
									} else {
										break _v0$11;
									}
								case 'list':
									if (tpe.b.c.a === 'list') {
										var _v84 = tpe.b;
										var _v85 = _v84.a;
										var _v86 = _v85.a;
										var _v87 = _v85.b;
										var _v88 = _v87.a;
										var _v89 = _v88.b;
										var _v90 = _v89.b;
										var _v91 = _v84.b;
										var _v92 = _v91.a;
										var _v93 = _v84.c;
										var _v94 = tpe.c;
										var listType = _v94.a;
										return $author$project$Morphir$TypeScript$AST$List(
											$author$project$Morphir$TypeScript$Backend$Types$mapTypeExp(listType));
									} else {
										break _v0$11;
									}
								default:
									break _v0$11;
							}
						}
					}
				} else {
					break _v0$11;
				}
			case 'Unit':
				return $author$project$Morphir$TypeScript$AST$Tuple(_List_Nil);
			case 'Variable':
				var name = tpe.b;
				return $author$project$Morphir$TypeScript$AST$Variable(
					$author$project$Morphir$IR$Name$toTitleCase(name));
			case 'ExtensibleRecord':
				return $author$project$Morphir$TypeScript$AST$UnhandledType('ExtensibleRecord');
			default:
				return $author$project$Morphir$TypeScript$AST$UnhandledType('Function');
		}
	}
	var fQName = tpe.b;
	var typeList = tpe.c;
	return A2(
		$author$project$Morphir$TypeScript$AST$TypeRef,
		fQName,
		A2($elm$core$List$map, $author$project$Morphir$TypeScript$Backend$Types$mapTypeExp, typeList));
};
var $author$project$Morphir$TypeScript$Backend$Types$generateConstructorConstructorFunction = function (_v0) {
	var name = _v0.name;
	var privacy = _v0.privacy;
	var args = _v0.args;
	var typeVariables = _v0.typeVariables;
	var typeVariableNames = _v0.typeVariableNames;
	var argParams = A2(
		$elm$core$List$map,
		function (_v1) {
			var argName = _v1.a;
			var argType = _v1.b;
			return A3(
				$author$project$Morphir$TypeScript$AST$parameter,
				_List_fromArray(
					['public']),
				$author$project$Morphir$IR$Name$toCamelCase(argName),
				$elm$core$Maybe$Just(
					$author$project$Morphir$TypeScript$Backend$Types$mapTypeExp(argType)));
		},
		args);
	return $author$project$Morphir$TypeScript$AST$FunctionDeclaration(
		{body: _List_Nil, name: 'constructor', parameters: argParams, privacy: privacy, returnType: $elm$core$Maybe$Nothing, scope: $author$project$Morphir$TypeScript$AST$ClassMemberFunction, typeVariables: _List_Nil});
};
var $author$project$Morphir$TypeScript$AST$IntLiteralExpression = function (a) {
	return {$: 'IntLiteralExpression', a: a};
};
var $author$project$Morphir$TypeScript$AST$NewExpression = function (a) {
	return {$: 'NewExpression', a: a};
};
var $author$project$Morphir$TypeScript$AST$IndexedExpression = function (a) {
	return {$: 'IndexedExpression', a: a};
};
var $author$project$Morphir$TypeScript$Backend$Types$inputIndexArg = function (index) {
	return $author$project$Morphir$TypeScript$AST$IndexedExpression(
		{
			index: $author$project$Morphir$TypeScript$AST$IntLiteralExpression(index),
			object: $author$project$Morphir$TypeScript$AST$Identifier('input')
		});
};
var $author$project$Morphir$TypeScript$Backend$Types$generateConstructorDecoderFunction = function (constructor) {
	var variableTypeExpressions = A2(
		$elm$core$List$map,
		function (_var) {
			return $author$project$Morphir$TypeScript$AST$Variable(_var);
		},
		A2($elm$core$List$map, $author$project$Morphir$IR$Name$toTitleCase, constructor.typeVariableNames));
	var kind = $author$project$Morphir$TypeScript$AST$StringLiteralExpression(
		$author$project$Morphir$IR$Name$toTitleCase(constructor.name));
	var validateCall = $author$project$Morphir$TypeScript$AST$Call(
		{
			_arguments: _List_fromArray(
				[
					kind,
					$author$project$Morphir$TypeScript$AST$IntLiteralExpression(
					$elm$core$List$length(constructor.args)),
					$author$project$Morphir$TypeScript$AST$Identifier('input')
				]),
			_function: $author$project$Morphir$TypeScript$Backend$Types$codecsModule('preprocessCustomTypeVariant')
		});
	var inputParam = A3(
		$author$project$Morphir$TypeScript$AST$parameter,
		_List_Nil,
		'input',
		$elm$core$Maybe$Just($author$project$Morphir$TypeScript$AST$Any));
	var decoderParams = A2(
		$elm$core$List$map,
		function (_var) {
			return A3(
				$author$project$Morphir$TypeScript$AST$parameter,
				_List_Nil,
				$author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName(_var),
				$elm$core$Maybe$Just(
					$author$project$Morphir$TypeScript$Backend$Types$decoderTypeSignature(
						$author$project$Morphir$TypeScript$AST$Variable(
							$author$project$Morphir$IR$Name$toTitleCase(_var)))));
		},
		constructor.typeVariableNames);
	var argDecoderCalls = A2(
		$elm$core$List$indexedMap,
		function (index) {
			return function (typExp) {
				return $author$project$Morphir$TypeScript$AST$Call(
					A3(
						$author$project$Morphir$TypeScript$Backend$Types$decoderExpression,
						constructor.typeVariableNames,
						typExp,
						$author$project$Morphir$TypeScript$Backend$Types$inputIndexArg(index + 1)));
			};
		},
		A2($elm$core$List$map, $elm$core$Tuple$second, constructor.args));
	var newCall = $author$project$Morphir$TypeScript$AST$NewExpression(
		{
			_arguments: argDecoderCalls,
			constructor: $author$project$Morphir$IR$Name$toTitleCase(constructor.name)
		});
	return $author$project$Morphir$TypeScript$AST$FunctionDeclaration(
		{
			body: _List_fromArray(
				[
					$author$project$Morphir$TypeScript$AST$ExpressionStatement(validateCall),
					$author$project$Morphir$TypeScript$AST$ReturnStatement(newCall)
				]),
			name: $author$project$Morphir$TypeScript$Backend$Types$prependDecodeToName(constructor.name),
			parameters: _Utils_ap(
				decoderParams,
				_List_fromArray(
					[inputParam])),
			privacy: constructor.privacy,
			returnType: $elm$core$Maybe$Just(
				A2(
					$author$project$Morphir$TypeScript$AST$TypeRef,
					_Utils_Tuple3(_List_Nil, _List_Nil, constructor.name),
					variableTypeExpressions)),
			scope: $author$project$Morphir$TypeScript$AST$ModuleFunction,
			typeVariables: variableTypeExpressions
		});
};
var $author$project$Morphir$TypeScript$Backend$Types$generateConstructorEncoderFunction = function (constructor) {
	var variableTypeExpressions = A2(
		$elm$core$List$map,
		function (_var) {
			return $author$project$Morphir$TypeScript$AST$Variable(_var);
		},
		A2($elm$core$List$map, $author$project$Morphir$IR$Name$toTitleCase, constructor.typeVariableNames));
	var valueParam = A3(
		$author$project$Morphir$TypeScript$AST$parameter,
		_List_Nil,
		'value',
		$elm$core$Maybe$Just(
			A2(
				$author$project$Morphir$TypeScript$AST$TypeRef,
				_Utils_Tuple3(_List_Nil, _List_Nil, constructor.name),
				variableTypeExpressions)));
	var kindExpression = $author$project$Morphir$TypeScript$AST$MemberExpression(
		{
			member: $author$project$Morphir$TypeScript$AST$Identifier('kind'),
			object: $author$project$Morphir$TypeScript$AST$Identifier('value')
		});
	var encoderParams = A2(
		$elm$core$List$map,
		function (_var) {
			return A3(
				$author$project$Morphir$TypeScript$AST$parameter,
				_List_Nil,
				$author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName(_var),
				$elm$core$Maybe$Just(
					$author$project$Morphir$TypeScript$Backend$Types$encoderTypeSignature(
						$author$project$Morphir$TypeScript$AST$Variable(
							$author$project$Morphir$IR$Name$toTitleCase(_var)))));
		},
		constructor.typeVariableNames);
	var argToEncoderCall = function (_v0) {
		var argName = _v0.a;
		var argType = _v0.b;
		return $author$project$Morphir$TypeScript$AST$Call(
			A3(
				$author$project$Morphir$TypeScript$Backend$Types$encoderExpression,
				constructor.typeVariableNames,
				argType,
				$author$project$Morphir$TypeScript$AST$MemberExpression(
					{
						member: $author$project$Morphir$TypeScript$AST$Identifier(
							$author$project$Morphir$IR$Name$toCamelCase(argName)),
						object: $author$project$Morphir$TypeScript$AST$Identifier('value')
					})));
	};
	var returnList = (!$elm$core$List$length(constructor.args)) ? kindExpression : $author$project$Morphir$TypeScript$AST$ArrayLiteralExpression(
		A2(
			$elm$core$List$cons,
			kindExpression,
			A2($elm$core$List$map, argToEncoderCall, constructor.args)));
	return $author$project$Morphir$TypeScript$AST$FunctionDeclaration(
		{
			body: _List_fromArray(
				[
					$author$project$Morphir$TypeScript$AST$ReturnStatement(returnList)
				]),
			name: $author$project$Morphir$TypeScript$Backend$Types$prependEncodeToName(constructor.name),
			parameters: _Utils_ap(
				encoderParams,
				_List_fromArray(
					[valueParam])),
			privacy: constructor.privacy,
			returnType: $elm$core$Maybe$Just($author$project$Morphir$TypeScript$AST$Any),
			scope: $author$project$Morphir$TypeScript$AST$ModuleFunction,
			typeVariables: variableTypeExpressions
		});
};
var $author$project$Morphir$TypeScript$Backend$Types$mapConstructor = function (constructor) {
	var typeExpressions = A2(
		$elm$core$List$map,
		A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $author$project$Morphir$TypeScript$Backend$Types$mapTypeExp),
		constructor.args);
	var assignKind = A3(
		$author$project$Morphir$TypeScript$AST$AssignmentStatement,
		$author$project$Morphir$TypeScript$AST$Identifier('kind'),
		$elm$core$Maybe$Just(
			$author$project$Morphir$TypeScript$AST$LiteralString(
				$author$project$Morphir$IR$Name$toTitleCase(constructor.name))),
		$author$project$Morphir$TypeScript$AST$StringLiteralExpression(
			$author$project$Morphir$IR$Name$toTitleCase(constructor.name)));
	return $author$project$Morphir$TypeScript$AST$VariantClass(
		{
			body: _List_fromArray(
				[assignKind]),
			constructor: $elm$core$Maybe$Just(
				$author$project$Morphir$TypeScript$Backend$Types$generateConstructorConstructorFunction(constructor)),
			decoder: $elm$core$Maybe$Just(
				$author$project$Morphir$TypeScript$Backend$Types$generateConstructorDecoderFunction(constructor)),
			encoder: $elm$core$Maybe$Just(
				$author$project$Morphir$TypeScript$Backend$Types$generateConstructorEncoderFunction(constructor)),
			name: $author$project$Morphir$IR$Name$toTitleCase(constructor.name),
			privacy: constructor.privacy,
			typeExpressions: typeExpressions,
			variables: A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$TypeScript$AST$Variable),
				constructor.typeVariableNames)
		});
};
var $author$project$Morphir$TypeScript$Backend$Types$mapTypeDefinition = F2(
	function (name, typeDef) {
		var privacy = $author$project$Morphir$TypeScript$Backend$Types$mapPrivacy(typeDef.access);
		var doc = typeDef.value.doc;
		var _v0 = typeDef.value.value;
		if (_v0.$ === 'TypeAliasDefinition') {
			var variables = _v0.a;
			var typeExp = _v0.b;
			return _List_fromArray(
				[
					$author$project$Morphir$TypeScript$AST$TypeAlias(
					{
						decoder: $elm$core$Maybe$Just(
							A4($author$project$Morphir$TypeScript$Backend$Types$generateDecoderFunction, variables, name, typeDef.access, typeExp)),
						doc: doc,
						encoder: $elm$core$Maybe$Just(
							A4($author$project$Morphir$TypeScript$Backend$Types$generateEncoderFunction, variables, name, typeDef.access, typeExp)),
						name: $author$project$Morphir$IR$Name$toTitleCase(name),
						privacy: privacy,
						typeExpression: $author$project$Morphir$TypeScript$Backend$Types$mapTypeExp(typeExp),
						variables: A2(
							$elm$core$List$map,
							function (_var) {
								return $author$project$Morphir$TypeScript$AST$Variable(_var);
							},
							A2($elm$core$List$map, $author$project$Morphir$IR$Name$toTitleCase, variables))
					})
				]);
		} else {
			var variables = _v0.a;
			var accessControlledConstructors = _v0.b;
			var unionExpressionFromConstructorDetails = function (constructors) {
				return $author$project$Morphir$TypeScript$AST$Union(
					A2(
						$elm$core$List$map,
						function (constructor) {
							return A2(
								$author$project$Morphir$TypeScript$AST$TypeRef,
								A3($author$project$Morphir$IR$FQName$fQName, _List_Nil, _List_Nil, constructor.name),
								A2(
									$elm$core$List$map,
									A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$TypeScript$AST$Variable),
									constructor.typeVariableNames));
						},
						constructors));
			};
			var tsVariables = A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $author$project$Morphir$IR$Name$toTitleCase, $author$project$Morphir$TypeScript$AST$Variable),
				variables);
			var constructorNames = $elm$core$Dict$keys(accessControlledConstructors.value);
			var constructorDetails = A2(
				$elm$core$List$map,
				$author$project$Morphir$TypeScript$Backend$Types$getConstructorDetails(privacy),
				$elm$core$Dict$toList(accessControlledConstructors.value));
			var constructorInterfaces = A2($elm$core$List$map, $author$project$Morphir$TypeScript$Backend$Types$mapConstructor, constructorDetails);
			var union = A2(
				$elm$core$List$all,
				$elm$core$Basics$eq(name),
				constructorNames) ? _List_Nil : $elm$core$List$singleton(
				$author$project$Morphir$TypeScript$AST$TypeAlias(
					{
						decoder: $elm$core$Maybe$Just(
							A4($author$project$Morphir$TypeScript$Backend$Types$generateUnionDecoderFunction, name, privacy, variables, constructorDetails)),
						doc: doc,
						encoder: $elm$core$Maybe$Just(
							A4($author$project$Morphir$TypeScript$Backend$Types$generateUnionEncoderFunction, name, privacy, variables, constructorDetails)),
						name: $author$project$Morphir$IR$Name$toTitleCase(name),
						privacy: privacy,
						typeExpression: unionExpressionFromConstructorDetails(constructorDetails),
						variables: tsVariables
					}));
			return _Utils_ap(union, constructorInterfaces);
		}
	});
var $author$project$Morphir$TypeScript$Backend$mapModuleDefinition = F5(
	function (opt, distribution, currentPackagePath, currentModulePath, accessControlledModuleDef) {
		var typeDefs = A2(
			$elm$core$List$concatMap,
			function (_v1) {
				var typeName = _v1.a;
				var typeDef = _v1.b;
				return A2($author$project$Morphir$TypeScript$Backend$Types$mapTypeDefinition, typeName, typeDef);
			},
			$elm$core$Dict$toList(accessControlledModuleDef.value.types));
		var namespace = $author$project$Morphir$TypeScript$AST$Namespace(
			{
				content: typeDefs,
				name: A2($author$project$Morphir$TypeScript$AST$namespaceNameFromPackageAndModule, currentPackagePath, currentModulePath),
				privacy: $author$project$Morphir$TypeScript$AST$Public
			});
		var _v0 = A2($author$project$Morphir$TypeScript$Backend$Imports$getTypeScriptPackagePathAndModuleName, currentPackagePath, currentModulePath);
		var typeScriptPackagePath = _v0.a;
		var moduleName = _v0.b;
		var codecsImport = {
			importClause: '* as codecs',
			moduleSpecifier: A2($author$project$Morphir$TypeScript$Backend$Imports$makeRelativeImport, typeScriptPackagePath, 'morphir/internal/Codecs')
		};
		var imports = A2(
			$elm$core$List$cons,
			codecsImport,
			A2(
				$elm$core$List$map,
				$author$project$Morphir$TypeScript$Backend$Imports$renderInternalImport(typeScriptPackagePath),
				A3($author$project$Morphir$TypeScript$Backend$Imports$getUniqueImportRefs, currentPackagePath, currentModulePath, namespace)));
		var moduleUnit = {
			dirPath: typeScriptPackagePath,
			fileName: $author$project$Morphir$IR$Name$toTitleCase(moduleName) + '.ts',
			imports: imports,
			typeDefs: $elm$core$List$singleton(namespace)
		};
		return _List_fromArray(
			[moduleUnit]);
	});
var $author$project$Morphir$TypeScript$Backend$mapPackageDefinition = F4(
	function (opt, distribution, packagePath, packageDef) {
		var topLevelNamespaceModule = A2($author$project$Morphir$TypeScript$Backend$TopLevelNamespace$makeTopLevelNamespaceModule, packagePath, packageDef);
		var individualModules = A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var modulePath = _v0.a;
				var moduleImpl = _v0.b;
				return A5($author$project$Morphir$TypeScript$Backend$mapModuleDefinition, opt, distribution, packagePath, modulePath, moduleImpl);
			},
			$elm$core$Dict$toList(packageDef.modules));
		var compilationUnitToFileMapElement = function (compilationUnit) {
			var fileContent = $author$project$Morphir$TypeScript$PrettyPrinter$mapCompilationUnit(compilationUnit);
			return _Utils_Tuple2(
				_Utils_Tuple2(compilationUnit.dirPath, compilationUnit.fileName),
				fileContent);
		};
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				compilationUnitToFileMapElement,
				A2($elm$core$List$cons, topLevelNamespaceModule, individualModules)));
	});
var $author$project$Morphir$TypeScript$Backend$mapDistribution = F2(
	function (opt, distro) {
		var packagePath = distro.a;
		var dependencies = distro.b;
		var packageDef = distro.c;
		return A4($author$project$Morphir$TypeScript$Backend$mapPackageDefinition, opt, distro, packagePath, packageDef);
	});
var $author$project$Morphir$Elm$Target$mapDistribution = F3(
	function (backendOptions, morphirTestSuite, dist) {
		switch (backendOptions.$) {
			case 'SpringBootOptions':
				var options = backendOptions.a;
				return $elm$core$Result$Ok(
					A2($author$project$Morphir$SpringBoot$Backend$mapDistribution, options, dist));
			case 'SemanticOptions':
				var options = backendOptions.a;
				return $elm$core$Result$Ok(
					A2($author$project$Morphir$Graph$SemanticBackend$mapDistribution, options, dist));
			case 'CypherOptions':
				var options = backendOptions.a;
				return $elm$core$Result$Ok(
					A2($author$project$Morphir$Graph$CypherBackend$mapDistribution, options, dist));
			case 'ScalaOptions':
				var options = backendOptions.a;
				return A2(
					$elm$core$Result$mapError,
					$author$project$Morphir$Scala$Backend$Codec$encodeError,
					A3($author$project$Morphir$Scala$Backend$mapDistribution, options, morphirTestSuite, dist));
			case 'TypeScriptOptions':
				var options = backendOptions.a;
				return $elm$core$Result$Ok(
					A2($author$project$Morphir$TypeScript$Backend$mapDistribution, options, dist));
			case 'SparkOptions':
				var options = backendOptions.a;
				return $elm$core$Result$Ok(
					A2($author$project$Morphir$Scala$Spark$Backend$mapDistribution, options, dist));
			default:
				var options = backendOptions.a;
				return A2(
					$elm$core$Result$mapError,
					$author$project$Morphir$JsonSchema$Backend$Codec$encodeErrors,
					A2($author$project$Morphir$JsonSchema$Backend$mapDistribution, options, dist));
		}
	});
var $author$project$Morphir$Elm$IncrementalFrontend$OrderedFileChanges = F2(
	function (insertsAndUpdates, deletes) {
		return {deletes: deletes, insertsAndUpdates: insertsAndUpdates};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$InvalidSourceFilePath = F2(
	function (a, b) {
		return {$: 'InvalidSourceFilePath', a: a, b: b};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$filePathToModuleName = F2(
	function (packageName, filePath) {
		var packageNameReversed = $elm$core$List$reverse(packageName);
		var findModuleName = F3(
			function (lastPartOfModuleName, modulePathReversed, remainingDirectoryPathReversed) {
				findModuleName:
				while (true) {
					if (_Utils_cmp(
						$elm$core$List$length(remainingDirectoryPathReversed),
						$elm$core$List$length(packageNameReversed)) < 0) {
						return $elm$core$Result$Err('Could not find package name in path.');
					} else {
						if (A2($author$project$Morphir$IR$Path$isPrefixOf, remainingDirectoryPathReversed, packageNameReversed)) {
							return $elm$core$Result$Ok(
								$elm$core$List$reverse(
									A2($elm$core$List$cons, lastPartOfModuleName, modulePathReversed)));
						} else {
							if (remainingDirectoryPathReversed.b) {
								var lastDirectoryName = remainingDirectoryPathReversed.a;
								var nextRemainingDirectoryPathReversed = remainingDirectoryPathReversed.b;
								var $temp$lastPartOfModuleName = lastPartOfModuleName,
									$temp$modulePathReversed = A2($elm$core$List$cons, lastDirectoryName, modulePathReversed),
									$temp$remainingDirectoryPathReversed = nextRemainingDirectoryPathReversed;
								lastPartOfModuleName = $temp$lastPartOfModuleName;
								modulePathReversed = $temp$modulePathReversed;
								remainingDirectoryPathReversed = $temp$remainingDirectoryPathReversed;
								continue findModuleName;
							} else {
								return $elm$core$Result$Err('Could not find package name in path.');
							}
						}
					}
				}
			});
		var filePathParts = A2(
			$elm$core$List$concatMap,
			$elm$core$String$split('\\'),
			A2($elm$core$String$split, '/', filePath));
		var _v1 = $elm$core$List$reverse(filePathParts);
		if (_v1.b) {
			var filePart = _v1.a;
			var directoryPartReversed = _v1.b;
			var _v2 = A2($elm$core$String$split, '.', filePart);
			if (((_v2.b && _v2.b.b) && (_v2.b.a === 'elm')) && (!_v2.b.b.b)) {
				var fileName = _v2.a;
				var _v3 = _v2.b;
				return A2(
					$elm$core$Result$mapError,
					$author$project$Morphir$Elm$IncrementalFrontend$InvalidSourceFilePath(filePath),
					A3(
						findModuleName,
						$author$project$Morphir$IR$Name$fromString(fileName),
						_List_Nil,
						A2($elm$core$List$map, $author$project$Morphir$IR$Name$fromString, directoryPartReversed)));
			} else {
				return $elm$core$Result$Err(
					A2($author$project$Morphir$Elm$IncrementalFrontend$InvalidSourceFilePath, filePath, 'A valid file path must end with a file name with \'.elm\' extension.'));
			}
		} else {
			return $elm$core$Result$Err(
				A2($author$project$Morphir$Elm$IncrementalFrontend$InvalidSourceFilePath, filePath, 'A valid file path must have at least one directory and one file.'));
		}
	});
var $author$project$Morphir$Elm$ParsedModule$importedModules = function (_v0) {
	var file = _v0.a;
	return A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			$stil4m$elm_syntax$Elm$Syntax$Node$value,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.moduleName;
				},
				$stil4m$elm_syntax$Elm$Syntax$Node$value)),
		file.imports);
};
var $author$project$Morphir$Elm$IncrementalFrontend$orderElmModulesByDependency = F2(
	function (packageName, parsedModules) {
		var parsedModuleByName = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (parsedModule) {
					return A2(
						$elm$core$Maybe$map,
						function (moduleName) {
							return _Utils_Tuple2(moduleName, parsedModule);
						},
						A2(
							$author$project$Morphir$Elm$ModuleName$toIRModuleName,
							packageName,
							$author$project$Morphir$Elm$ParsedModule$moduleName(parsedModule)));
				},
				parsedModules));
		var foldFunction = F2(
			function (parsedModule, graph) {
				var moduleDependencies = $elm$core$Set$fromList(
					A2(
						$elm$core$List$filterMap,
						function (modName) {
							return A2($author$project$Morphir$Elm$ModuleName$toIRModuleName, packageName, modName);
						},
						$author$project$Morphir$Elm$ParsedModule$importedModules(parsedModule)));
				var elmModuleName = $author$project$Morphir$Elm$ParsedModule$moduleName(parsedModule);
				var _v0 = A2($author$project$Morphir$Elm$ModuleName$toIRModuleName, packageName, elmModuleName);
				if (_v0.$ === 'Nothing') {
					return graph;
				} else {
					var fromModuleName = _v0.a;
					return A2(
						$elm$core$Result$andThen,
						A2(
							$elm$core$Basics$composeR,
							A2($author$project$Morphir$Dependency$DAG$insertNode, fromModuleName, moduleDependencies),
							$elm$core$Result$mapError(
								function (_v1) {
									var from = _v1.a;
									var to = _v1.b;
									return _List_fromArray(
										[
											A2($author$project$Morphir$Elm$IncrementalFrontend$ModuleCycleDetected, from, to)
										]);
								})),
						graph);
				}
			});
		return A2(
			$elm$core$Result$map,
			function (graph) {
				return A2(
					$elm$core$List$filterMap,
					function (moduleName) {
						return A2(
							$elm$core$Maybe$map,
							$elm$core$Tuple$pair(moduleName),
							A2($elm$core$Dict$get, moduleName, parsedModuleByName));
					},
					$elm$core$List$concat(
						$author$project$Morphir$Dependency$DAG$backwardTopologicalOrdering(graph)));
			},
			A3(
				$elm$core$List$foldl,
				foldFunction,
				$elm$core$Result$Ok($author$project$Morphir$Dependency$DAG$empty),
				parsedModules));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$ParseError = F2(
	function (a, b) {
		return {$: 'ParseError', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Parser$State$State = function (a) {
	return {$: 'State', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$State$emptyState = $stil4m$elm_syntax$Elm$Parser$State$State(
	{comments: _List_Nil, indents: _List_Nil});
var $stil4m$elm_syntax$Elm$Syntax$File$File = F4(
	function (moduleDefinition, imports, declarations, comments) {
		return {comments: comments, declarations: declarations, imports: imports, moduleDefinition: moduleDefinition};
	});
var $stil4m$elm_syntax$Combine$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $stil4m$elm_syntax$Combine$andMap = F2(
	function (_v0, _v1) {
		var rp = _v0.a;
		var lp = _v1.a;
		return $stil4m$elm_syntax$Combine$Parser(
			function (state) {
				return A2(
					$elm$parser$Parser$andThen,
					function (_v2) {
						var newState = _v2.a;
						var a = _v2.b;
						return A2(
							$elm$parser$Parser$map,
							$elm$core$Tuple$mapSecond(a),
							rp(newState));
					},
					lp(state));
			});
	});
var $stil4m$elm_syntax$Elm$Parser$State$getComments = function (_v0) {
	var s = _v0.a;
	return $elm$core$List$reverse(s.comments);
};
var $stil4m$elm_syntax$Combine$succeed = function (res) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return $elm$parser$Parser$succeed(
				_Utils_Tuple2(state, res));
		});
};
var $stil4m$elm_syntax$Combine$withState = function (f) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return function (_v0) {
				var p = _v0.a;
				return p(state);
			}(
				f(state));
		});
};
var $stil4m$elm_syntax$Elm$Parser$File$collectComments = $stil4m$elm_syntax$Combine$withState(
	A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Parser$State$getComments, $stil4m$elm_syntax$Combine$succeed));
var $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration = function (a) {
	return {$: 'AliasDeclaration', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration = function (a) {
	return {$: 'CustomTypeDeclaration', a: a};
};
var $stil4m$elm_syntax$Combine$choice = function (xs) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return $elm$parser$Parser$oneOf(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var x = _v0.a;
						return x(state);
					},
					xs));
		});
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$Destructuring = F2(
	function (a, b) {
		return {$: 'Destructuring', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Range$Range = F2(
	function (start, end) {
		return {end: end, start: start};
	});
var $stil4m$elm_syntax$Elm$Syntax$Range$compareLocations = F2(
	function (left, right) {
		return (_Utils_cmp(left.row, right.row) < 0) ? $elm$core$Basics$LT : ((_Utils_cmp(left.row, right.row) > 0) ? $elm$core$Basics$GT : A2($elm$core$Basics$compare, left.column, right.column));
	});
var $elm$core$List$sortWith = _List_sortWith;
var $stil4m$elm_syntax$Elm$Syntax$Range$sortLocations = $elm$core$List$sortWith($stil4m$elm_syntax$Elm$Syntax$Range$compareLocations);
var $stil4m$elm_syntax$Elm$Syntax$Range$combine = function (ranges) {
	var starts = $stil4m$elm_syntax$Elm$Syntax$Range$sortLocations(
		A2(
			$elm$core$List$map,
			function ($) {
				return $.start;
			},
			ranges));
	var ends = $elm$core$List$reverse(
		$stil4m$elm_syntax$Elm$Syntax$Range$sortLocations(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.end;
				},
				ranges)));
	return A2(
		$elm$core$Maybe$withDefault,
		$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
		A3(
			$elm$core$Maybe$map2,
			$stil4m$elm_syntax$Elm$Syntax$Range$Range,
			$elm$core$List$head(starts),
			$elm$core$List$head(ends)));
};
var $stil4m$elm_syntax$Elm$Syntax$Node$combine = F3(
	function (f, a, b) {
		var r1 = a.a;
		var r2 = b.a;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$combine(
				_List_fromArray(
					[r1, r2])),
			A2(f, a, b));
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$Application = function (a) {
	return {$: 'Application', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseBlock = F2(
	function (expression, cases) {
		return {cases: cases, expression: expression};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression = function (a) {
	return {$: 'CaseExpression', a: a};
};
var $stil4m$elm_syntax$Combine$Done = function (a) {
	return {$: 'Done', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Function = F3(
	function (documentation, signature, declaration) {
		return {declaration: declaration, documentation: documentation, signature: signature};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionImplementation = F3(
	function (name, _arguments, expression) {
		return {_arguments: _arguments, expression: expression, name: name};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock = F3(
	function (a, b, c) {
		return {$: 'IfBlock', a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$Lambda = F2(
	function (args, expression) {
		return {args: args, expression: expression};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetBlock = F2(
	function (declarations, expression) {
		return {declarations: declarations, expression: expression};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring = F2(
	function (a, b) {
		return {$: 'LetDestructuring', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression = function (a) {
	return {$: 'LetExpression', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction = function (a) {
	return {$: 'LetFunction', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr = function (a) {
	return {$: 'ListExpr', a: a};
};
var $stil4m$elm_syntax$Combine$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Negation = function (a) {
	return {$: 'Negation', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Operator = function (a) {
	return {$: 'Operator', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression = function (a) {
	return {$: 'ParenthesizedExpression', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator = function (a) {
	return {$: 'PrefixOperator', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr = function (a) {
	return {$: 'RecordExpr', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression = F2(
	function (a, b) {
		return {$: 'RecordUpdateExpression', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression = function (a) {
	return {$: 'TupledExpression', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr = {$: 'UnitExpr'};
var $stil4m$elm_syntax$Combine$andThen = F2(
	function (f, _v0) {
		var p = _v0.a;
		return $stil4m$elm_syntax$Combine$Parser(
			function (state) {
				return A2(
					$elm$parser$Parser$andThen,
					function (_v1) {
						var s = _v1.a;
						var a = _v1.b;
						return function (_v2) {
							var x = _v2.a;
							return x(s);
						}(
							f(a));
					},
					p(state));
			});
	});
var $stil4m$elm_syntax$Combine$backtrackable = function (_v0) {
	var p = _v0.a;
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return $elm$parser$Parser$backtrackable(
				p(state));
		});
};
var $stil4m$elm_syntax$Combine$string = function (s) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return A2(
				$elm$parser$Parser$map,
				function (x) {
					return _Utils_Tuple2(state, x);
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$token(s)));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$caseToken = $stil4m$elm_syntax$Combine$string('case');
var $stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral = function (a) {
	return {$: 'CharLiteral', a: a};
};
var $stil4m$elm_syntax$Combine$fail = function (m) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return A2(
				$elm$parser$Parser$map,
				function (x) {
					return _Utils_Tuple2(state, x);
				},
				$elm$parser$Parser$problem(m));
		});
};
var $stil4m$elm_syntax$Combine$fromCore = function (p) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					function (v) {
						return _Utils_Tuple2(state, v);
					}),
				p);
		});
};
var $stil4m$elm_syntax$Combine$Char$satisfy = function (pred) {
	return $stil4m$elm_syntax$Combine$fromCore(
		A2(
			$elm$parser$Parser$andThen,
			function (s) {
				var _v0 = $elm$core$String$toList(s);
				if (!_v0.b) {
					return $elm$parser$Parser$succeed($elm$core$Maybe$Nothing);
				} else {
					var c = _v0.a;
					return $elm$parser$Parser$succeed(
						$elm$core$Maybe$Just(c));
				}
			},
			$elm$parser$Parser$getChompedString(
				$elm$parser$Parser$chompIf(pred))));
};
var $stil4m$elm_syntax$Combine$Char$anyChar = A2(
	$stil4m$elm_syntax$Combine$andThen,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map($stil4m$elm_syntax$Combine$succeed),
		$elm$core$Maybe$withDefault(
			$stil4m$elm_syntax$Combine$fail('expected any character'))),
	$stil4m$elm_syntax$Combine$Char$satisfy(
		$elm$core$Basics$always(true)));
var $stil4m$elm_syntax$Combine$Char$char = function (c) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Maybe$map($stil4m$elm_syntax$Combine$succeed),
			$elm$core$Maybe$withDefault(
				$stil4m$elm_syntax$Combine$fail(
					'expected \'' + ($elm$core$String$fromList(
						_List_fromArray(
							[c])) + '\'')))),
		$stil4m$elm_syntax$Combine$Char$satisfy(
			$elm$core$Basics$eq(c)));
};
var $stil4m$elm_syntax$Combine$map = F2(
	function (f, _v0) {
		var p = _v0.a;
		return $stil4m$elm_syntax$Combine$Parser(
			function (state) {
				return A2(
					$elm$parser$Parser$map,
					function (_v1) {
						var s = _v1.a;
						var a = _v1.b;
						return _Utils_Tuple2(
							s,
							f(a));
					},
					p(state));
			});
	});
var $stil4m$elm_syntax$Combine$continueWith = F2(
	function (target, dropped) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			target,
			A2(
				$stil4m$elm_syntax$Combine$map,
				F2(
					function (b, a) {
						return A2($elm$core$Basics$always, a, b);
					}),
				dropped));
	});
var $stil4m$elm_syntax$Combine$ignore = F2(
	function (dropped, target) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			dropped,
			A2($stil4m$elm_syntax$Combine$map, $elm$core$Basics$always, target));
	});
var $stil4m$elm_syntax$Combine$or = F2(
	function (_v0, _v1) {
		var lp = _v0.a;
		var rp = _v1.a;
		return $stil4m$elm_syntax$Combine$Parser(
			function (state) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							lp(state),
							rp(state)
						]));
			});
	});
var $elm$core$String$any = _String_any;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValue = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(
				_Utils_chr('\'')),
			$elm$parser$Parser$symbol('\'')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(
				_Utils_chr('\"')),
			$elm$parser$Parser$symbol('\"')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(
				_Utils_chr('\n')),
			$elm$parser$Parser$symbol('n')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(
				_Utils_chr('\t')),
			$elm$parser$Parser$symbol('t')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(
				_Utils_chr('\u000D')),
			$elm$parser$Parser$symbol('r')),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(
				_Utils_chr('\\')),
			$elm$parser$Parser$symbol('\\')),
			A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toLower,
							A2(
								$elm$core$Basics$composeR,
								$rtfeldman$elm_hex$Hex$fromString,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Result$withDefault(0),
									$elm$core$Char$fromCode)))),
					$elm$parser$Parser$symbol('u')),
				$elm$parser$Parser$symbol('{')),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompWhile(
						function (c) {
							return A2(
								$elm$core$String$any,
								$elm$core$Basics$eq(c),
								'0123456789ABCDEFabcdef');
						})),
				$elm$parser$Parser$symbol('}')))
		]));
var $stil4m$elm_syntax$Elm$Parser$Tokens$quotedSingleQuote = $stil4m$elm_syntax$Combine$fromCore(
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$toList,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$head,
						$elm$core$Maybe$withDefault(
							_Utils_chr(' '))))),
			$elm$parser$Parser$symbol('\'')),
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed(
								A2($elm$core$Basics$composeR, $elm$core$List$singleton, $elm$core$String$fromList)),
							$elm$parser$Parser$symbol('\\')),
						$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValue),
						$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$chompIf(
							$elm$core$Basics$always(true)))
					])),
			$elm$parser$Parser$symbol('\''))));
var $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteral = A2(
	$stil4m$elm_syntax$Combine$or,
	$stil4m$elm_syntax$Elm$Parser$Tokens$quotedSingleQuote,
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$Char$char(
			_Utils_chr('\'')),
		A2(
			$stil4m$elm_syntax$Combine$continueWith,
			$stil4m$elm_syntax$Combine$Char$anyChar,
			$stil4m$elm_syntax$Combine$Char$char(
				_Utils_chr('\'')))));
var $stil4m$elm_syntax$Elm$Parser$Node$asPointerLocation = function (_v0) {
	var line = _v0.line;
	var column = _v0.column;
	return {column: column, row: line};
};
var $stil4m$elm_syntax$Combine$app = function (_v0) {
	var inner = _v0.a;
	return inner;
};
var $elm$parser$Parser$Advanced$getPosition = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3(
			$elm$parser$Parser$Advanced$Good,
			false,
			_Utils_Tuple2(s.row, s.col),
			s);
	});
var $elm$parser$Parser$getPosition = $elm$parser$Parser$Advanced$getPosition;
var $stil4m$elm_syntax$Combine$withLocation = function (f) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return A2(
				$elm$parser$Parser$andThen,
				function (loc) {
					return A2(
						$stil4m$elm_syntax$Combine$app,
						f(loc),
						state);
				},
				A2(
					$elm$parser$Parser$map,
					function (_v0) {
						var row = _v0.a;
						var col = _v0.b;
						return {column: col, line: row};
					},
					$elm$parser$Parser$getPosition));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Node$parser = function (p) {
	return $stil4m$elm_syntax$Combine$withLocation(
		function (start) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Combine$withLocation(
					function (end) {
						return $stil4m$elm_syntax$Combine$succeed(
							{
								end: $stil4m$elm_syntax$Elm$Parser$Node$asPointerLocation(end),
								start: $stil4m$elm_syntax$Elm$Parser$Node$asPointerLocation(start)
							});
					}),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					p,
					$stil4m$elm_syntax$Combine$succeed(
						F2(
							function (v, r) {
								return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, v);
							}))));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$charLiteralExpression = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral, $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteral));
var $stil4m$elm_syntax$Elm$Parser$Tokens$elseToken = $stil4m$elm_syntax$Combine$string('else');
var $stil4m$elm_syntax$Elm$Parser$State$currentIndent = function (_v0) {
	var indents = _v0.a.indents;
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$List$head(indents));
};
var $stil4m$elm_syntax$Elm$Parser$State$expectedColumn = A2(
	$elm$core$Basics$composeR,
	$stil4m$elm_syntax$Elm$Parser$State$currentIndent,
	$elm$core$Basics$add(1));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern = {$: 'AllPattern'};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern = F2(
	function (a, b) {
		return {$: 'AsPattern', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern = function (a) {
	return {$: 'CharPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern = function (a) {
	return {$: 'ListPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern = F2(
	function (a, b) {
		return {$: 'NamedPattern', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern = function (a) {
	return {$: 'ParenthesizedPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$QualifiedNameRef = F2(
	function (moduleName, name) {
		return {moduleName: moduleName, name: name};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern = function (a) {
	return {$: 'StringPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern = function (a) {
	return {$: 'TuplePattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern = F2(
	function (a, b) {
		return {$: 'UnConsPattern', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern = {$: 'UnitPattern'};
var $stil4m$elm_syntax$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			$stil4m$elm_syntax$Combine$ignore,
			rp,
			A2($stil4m$elm_syntax$Combine$continueWith, p, lp));
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$isUpperOrLower = function (_char) {
	var stringChar = $elm$core$String$fromChar(_char);
	return (!_Utils_eq(
		$elm$core$String$toUpper(stringChar),
		stringChar)) || (!_Utils_eq(
		$elm$core$String$toLower(stringChar),
		stringChar));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$isAlphaNum = function (_char) {
	return $stil4m$elm_syntax$Elm$Parser$Tokens$isUpperOrLower(_char) || $elm$core$Char$isDigit(_char);
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$isLower = function (_char) {
	var stringChar = $elm$core$String$fromChar(_char);
	return (!_Utils_eq(
		$elm$core$String$toUpper(stringChar),
		stringChar)) && _Utils_eq(
		$elm$core$String$toLower(stringChar),
		stringChar);
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$reservedList = _List_fromArray(
	['module', 'exposing', 'import', 'as', 'if', 'then', 'else', 'let', 'in', 'case', 'of', 'port', 'infixr', 'infixl', 'type', 'where']);
var $elm$parser$Parser$ExpectingVariable = {$: 'ExpectingVariable'};
var $elm$parser$Parser$Advanced$varHelp = F7(
	function (isGood, offset, row, col, src, indent, context) {
		varHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, src);
			if (_Utils_eq(newOffset, -1)) {
				return {col: col, context: context, indent: indent, offset: offset, row: row, src: src};
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$variable = function (i) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var firstOffset = A3($elm$parser$Parser$Advanced$isSubChar, i.start, s.offset, s.src);
			if (_Utils_eq(firstOffset, -1)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, i.expecting));
			} else {
				var s1 = _Utils_eq(firstOffset, -2) ? A7($elm$parser$Parser$Advanced$varHelp, i.inner, s.offset + 1, s.row + 1, 1, s.src, s.indent, s.context) : A7($elm$parser$Parser$Advanced$varHelp, i.inner, firstOffset, s.row, s.col + 1, s.src, s.indent, s.context);
				var name = A3($elm$core$String$slice, s.offset, s1.offset, s.src);
				return A2($elm$core$Set$member, name, i.reserved) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, i.expecting)) : A3($elm$parser$Parser$Advanced$Good, true, name, s1);
			}
		});
};
var $elm$parser$Parser$variable = function (i) {
	return $elm$parser$Parser$Advanced$variable(
		{expecting: $elm$parser$Parser$ExpectingVariable, inner: i.inner, reserved: i.reserved, start: i.start});
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionName = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$variable(
		{
			inner: function (c) {
				return $stil4m$elm_syntax$Elm$Parser$Tokens$isAlphaNum(c) || _Utils_eq(
					c,
					_Utils_chr('_'));
			},
			reserved: $elm$core$Set$fromList($stil4m$elm_syntax$Elm$Parser$Tokens$reservedList),
			start: $stil4m$elm_syntax$Elm$Parser$Tokens$isLower
		}));
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 'ExpectingKeyword', a: a};
};
var $elm$parser$Parser$Advanced$keyword = function (_v0) {
	var kwd = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(kwd);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, kwd, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return (_Utils_eq(newOffset, -1) || (0 <= A3(
				$elm$parser$Parser$Advanced$isSubChar,
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('_'));
				},
				newOffset,
				s.src))) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$keyword = function (kwd) {
	return $elm$parser$Parser$Advanced$keyword(
		A2(
			$elm$parser$Parser$Advanced$Token,
			kwd,
			$elm$parser$Parser$ExpectingKeyword(kwd)));
};
var $stil4m$elm_syntax$Combine$lazy = function (t) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return $elm$parser$Parser$lazy(
				function (_v0) {
					return function (_v1) {
						var t_ = _v1.a;
						return t_(state);
					}(
						t(_Utils_Tuple0));
				});
		});
};
var $elm$parser$Parser$Nestable = {$: 'Nestable'};
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Advanced$isChar = function (_char) {
	return true;
};
var $elm$parser$Parser$Advanced$revAlways = F2(
	function (_v0, b) {
		return b;
	});
var $elm$parser$Parser$Advanced$skip = F2(
	function (iParser, kParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$parser$Parser$Advanced$revAlways, iParser, kParser);
	});
var $elm$parser$Parser$Advanced$nestableHelp = F5(
	function (isNotRelevant, open, close, expectingClose, nestLevel) {
		return A2(
			$elm$parser$Parser$Advanced$skip,
			$elm$parser$Parser$Advanced$chompWhile(isNotRelevant),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						(nestLevel === 1) ? close : A2(
						$elm$parser$Parser$Advanced$andThen,
						function (_v0) {
							return A5($elm$parser$Parser$Advanced$nestableHelp, isNotRelevant, open, close, expectingClose, nestLevel - 1);
						},
						close),
						A2(
						$elm$parser$Parser$Advanced$andThen,
						function (_v1) {
							return A5($elm$parser$Parser$Advanced$nestableHelp, isNotRelevant, open, close, expectingClose, nestLevel + 1);
						},
						open),
						A2(
						$elm$parser$Parser$Advanced$andThen,
						function (_v2) {
							return A5($elm$parser$Parser$Advanced$nestableHelp, isNotRelevant, open, close, expectingClose, nestLevel);
						},
						A2($elm$parser$Parser$Advanced$chompIf, $elm$parser$Parser$Advanced$isChar, expectingClose))
					])));
	});
var $elm$parser$Parser$Advanced$nestableComment = F2(
	function (open, close) {
		var oStr = open.a;
		var oX = open.b;
		var cStr = close.a;
		var cX = close.b;
		var _v0 = $elm$core$String$uncons(oStr);
		if (_v0.$ === 'Nothing') {
			return $elm$parser$Parser$Advanced$problem(oX);
		} else {
			var _v1 = _v0.a;
			var openChar = _v1.a;
			var _v2 = $elm$core$String$uncons(cStr);
			if (_v2.$ === 'Nothing') {
				return $elm$parser$Parser$Advanced$problem(cX);
			} else {
				var _v3 = _v2.a;
				var closeChar = _v3.a;
				var isNotRelevant = function (_char) {
					return (!_Utils_eq(_char, openChar)) && (!_Utils_eq(_char, closeChar));
				};
				var chompOpen = $elm$parser$Parser$Advanced$token(open);
				return A2(
					$elm$parser$Parser$Advanced$ignorer,
					chompOpen,
					A5(
						$elm$parser$Parser$Advanced$nestableHelp,
						isNotRelevant,
						chompOpen,
						$elm$parser$Parser$Advanced$token(close),
						cX,
						1));
			}
		}
	});
var $elm$parser$Parser$Advanced$multiComment = F3(
	function (open, close, nestable) {
		if (nestable.$ === 'NotNestable') {
			return A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$token(open),
				$elm$parser$Parser$Advanced$chompUntil(close));
		} else {
			return A2($elm$parser$Parser$Advanced$nestableComment, open, close);
		}
	});
var $elm$parser$Parser$Advanced$Nestable = {$: 'Nestable'};
var $elm$parser$Parser$Advanced$NotNestable = {$: 'NotNestable'};
var $elm$parser$Parser$toAdvancedNestable = function (nestable) {
	if (nestable.$ === 'NotNestable') {
		return $elm$parser$Parser$Advanced$NotNestable;
	} else {
		return $elm$parser$Parser$Advanced$Nestable;
	}
};
var $elm$parser$Parser$multiComment = F3(
	function (open, close, nestable) {
		return A3(
			$elm$parser$Parser$Advanced$multiComment,
			$elm$parser$Parser$toToken(open),
			$elm$parser$Parser$toToken(close),
			$elm$parser$Parser$toAdvancedNestable(nestable));
	});
var $stil4m$elm_syntax$Elm$Parser$Comments$multilineCommentInner = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$getChompedString(
		A3($elm$parser$Parser$multiComment, '{-', '-}', $elm$parser$Parser$Nestable)));
var $stil4m$elm_syntax$Elm$Parser$State$addComment = F2(
	function (pair, _v0) {
		var s = _v0.a;
		return $stil4m$elm_syntax$Elm$Parser$State$State(
			_Utils_update(
				s,
				{
					comments: A2($elm$core$List$cons, pair, s.comments)
				}));
	});
var $stil4m$elm_syntax$Combine$modifyState = function (f) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return $elm$parser$Parser$succeed(
				_Utils_Tuple2(
					f(state),
					_Utils_Tuple0));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Comments$addCommentToState = function (p) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		function (pair) {
			return A2(
				$stil4m$elm_syntax$Combine$continueWith,
				$stil4m$elm_syntax$Combine$succeed(_Utils_Tuple0),
				$stil4m$elm_syntax$Combine$modifyState(
					$stil4m$elm_syntax$Elm$Parser$State$addComment(pair)));
		},
		p);
};
var $stil4m$elm_syntax$Elm$Parser$Comments$parseComment = function (commentParser) {
	return $stil4m$elm_syntax$Elm$Parser$Comments$addCommentToState(
		$stil4m$elm_syntax$Elm$Parser$Node$parser(commentParser));
};
var $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Comments$parseComment($stil4m$elm_syntax$Elm$Parser$Comments$multilineCommentInner);
	});
var $stil4m$elm_syntax$Elm$Parser$Whitespace$untilNewlineToken = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile(
			function (c) {
				return (!_Utils_eq(
					c,
					_Utils_chr('\u000D'))) && (!_Utils_eq(
					c,
					_Utils_chr('\n')));
			})));
var $stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment = $stil4m$elm_syntax$Elm$Parser$Comments$parseComment(
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Whitespace$untilNewlineToken,
		A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Combine$string('--'),
			$stil4m$elm_syntax$Combine$succeed($elm$core$Basics$append))));
var $stil4m$elm_syntax$Elm$Parser$Layout$anyComment = A2($stil4m$elm_syntax$Combine$or, $stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment, $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment);
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $stil4m$elm_syntax$Combine$many = function (p) {
	var helper = function (_v2) {
		var oldState = _v2.a;
		var items = _v2.b;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (_v0) {
							var newState = _v0.a;
							var item = _v0.b;
							return $elm$parser$Parser$Loop(
								_Utils_Tuple2(
									newState,
									A2($elm$core$List$cons, item, items)));
						}),
					A2($stil4m$elm_syntax$Combine$app, p, oldState)),
					A2(
					$elm$parser$Parser$map,
					function (_v1) {
						return $elm$parser$Parser$Done(
							_Utils_Tuple2(
								oldState,
								$elm$core$List$reverse(items)));
					},
					$elm$parser$Parser$succeed(_Utils_Tuple0))
				]));
	};
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return A2(
				$elm$parser$Parser$loop,
				_Utils_Tuple2(state, _List_Nil),
				helper);
		});
};
var $stil4m$elm_syntax$Combine$many1 = function (p) {
	return A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Combine$many(p),
		A2(
			$stil4m$elm_syntax$Combine$andMap,
			p,
			$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons)));
};
var $stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces = $stil4m$elm_syntax$Combine$fromCore(
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$token(' '),
		$elm$parser$Parser$chompWhile(
			function (c) {
				return _Utils_eq(
					c,
					_Utils_chr(' '));
			})));
var $stil4m$elm_syntax$Elm$Parser$Whitespace$realNewLine = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_Utils_Tuple0),
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$elm$parser$Parser$chompIf(
							$elm$core$Basics$eq(
								_Utils_chr('\u000D'))),
							$elm$parser$Parser$succeed(_Utils_Tuple0)
						]))),
			$elm$parser$Parser$symbol('\n'))));
var $stil4m$elm_syntax$Elm$Parser$Layout$verifyIndent = function (f) {
	return $stil4m$elm_syntax$Combine$withState(
		function (s) {
			return $stil4m$elm_syntax$Combine$withLocation(
				function (l) {
					return A2(
						f,
						$stil4m$elm_syntax$Elm$Parser$State$expectedColumn(s),
						l.column) ? $stil4m$elm_syntax$Combine$succeed(_Utils_Tuple0) : $stil4m$elm_syntax$Combine$fail(
						'Expected higher indent than ' + $elm$core$String$fromInt(l.column));
				});
		});
};
var $stil4m$elm_syntax$Elm$Parser$Layout$layout = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Layout$verifyIndent(
		F2(
			function (stateIndent, current) {
				return _Utils_cmp(stateIndent, current) < 0;
			})),
	$stil4m$elm_syntax$Combine$many1(
		$stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					$stil4m$elm_syntax$Elm$Parser$Layout$anyComment,
					A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces, $stil4m$elm_syntax$Elm$Parser$Layout$anyComment])),
					$stil4m$elm_syntax$Combine$many1($stil4m$elm_syntax$Elm$Parser$Whitespace$realNewLine)),
					$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces
				]))));
var $stil4m$elm_syntax$Combine$maybe = function (_v0) {
	var p = _v0.a;
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$map,
						function (_v1) {
							var c = _v1.a;
							var v = _v1.b;
							return _Utils_Tuple2(
								c,
								$elm$core$Maybe$Just(v));
						},
						p(state)),
						$elm$parser$Parser$succeed(
						_Utils_Tuple2(state, $elm$core$Maybe$Nothing))
					]));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides = function (x) {
	return A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
		A2(
			$stil4m$elm_syntax$Combine$continueWith,
			x,
			$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout)));
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$FloatPattern = function (a) {
	return {$: 'FloatPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern = function (a) {
	return {$: 'HexPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern = function (a) {
	return {$: 'IntPattern', a: a};
};
var $elm$parser$Parser$ExpectingBinary = {$: 'ExpectingBinary'};
var $elm$parser$Parser$ExpectingFloat = {$: 'ExpectingFloat'};
var $elm$parser$Parser$ExpectingHex = {$: 'ExpectingHex'};
var $elm$parser$Parser$ExpectingInt = {$: 'ExpectingInt'};
var $elm$parser$Parser$ExpectingNumber = {$: 'ExpectingNumber'};
var $elm$parser$Parser$ExpectingOctal = {$: 'ExpectingOctal'};
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {col: s.col + (newOffset - s.offset), context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 'Err') {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.offset, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.src);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.row, s.col - (floatOffset + s.offset), invalid, s.context));
		} else {
			if (_Utils_eq(s.offset, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.offset, intPair, s);
				} else {
					if (floatSettings.$ === 'Err') {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.offset, floatOffset, s.src));
						if (_v1.$ === 'Nothing') {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.offset, s.src)) {
				var zeroOffset = s.offset + 1;
				var baseOffset = zeroOffset + 1;
				return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.hex,
					baseOffset,
					A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.octal,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.binary,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.src),
					s) : A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					_Utils_Tuple2(zeroOffset, 0),
					s)));
			} else {
				return A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					A3($elm$parser$Parser$Advanced$consumeBase, 10, s.offset, s.src),
					s);
			}
		});
};
var $elm$parser$Parser$number = function (i) {
	return $elm$parser$Parser$Advanced$number(
		{
			binary: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingBinary, i.binary),
			expecting: $elm$parser$Parser$ExpectingNumber,
			_float: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingFloat, i._float),
			hex: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingHex, i.hex),
			_int: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingInt, i._int),
			invalid: $elm$parser$Parser$ExpectingNumber,
			octal: A2($elm$core$Result$fromMaybe, $elm$parser$Parser$ExpectingOctal, i.octal)
		});
};
var $stil4m$elm_syntax$Elm$Parser$Numbers$raw = F3(
	function (floatf, intf, hexf) {
		return $elm$parser$Parser$number(
			{
				binary: $elm$core$Maybe$Nothing,
				_float: $elm$core$Maybe$Just(floatf),
				hex: $elm$core$Maybe$Just(hexf),
				_int: $elm$core$Maybe$Just(intf),
				octal: $elm$core$Maybe$Nothing
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Numbers$number = F3(
	function (floatf, intf, hexf) {
		return $stil4m$elm_syntax$Combine$fromCore(
			A3($stil4m$elm_syntax$Elm$Parser$Numbers$raw, floatf, intf, hexf));
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$numberPart = A3($stil4m$elm_syntax$Elm$Parser$Numbers$number, $stil4m$elm_syntax$Elm$Syntax$Pattern$FloatPattern, $stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern, $stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern);
var $stil4m$elm_syntax$Combine$parens = A2(
	$stil4m$elm_syntax$Combine$between,
	$stil4m$elm_syntax$Combine$string('('),
	$stil4m$elm_syntax$Combine$string(')'));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern = function (a) {
	return {$: 'RecordPattern', a: a};
};
var $stil4m$elm_syntax$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Combine$many(
				A2($stil4m$elm_syntax$Combine$continueWith, p, sep)),
			A2(
				$stil4m$elm_syntax$Combine$andMap,
				p,
				$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons)));
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$recordPart = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Node$parser(
			A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern,
				A3(
					$stil4m$elm_syntax$Combine$between,
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Combine$string('{')),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Combine$string('}'),
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout)),
					A2(
						$stil4m$elm_syntax$Combine$sepBy1,
						$stil4m$elm_syntax$Combine$string(','),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
							$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName))))));
	});
var $stil4m$elm_syntax$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			$stil4m$elm_syntax$Combine$or,
			A2($stil4m$elm_syntax$Combine$sepBy1, sep, p),
			$stil4m$elm_syntax$Combine$succeed(_List_Nil));
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$stringLiteral = function () {
	var helper = function (s) {
		return s.escaped ? A2(
			$elm$parser$Parser$map,
			function (v) {
				return $elm$parser$Parser$Loop(
					_Utils_update(
						s,
						{
							escaped: false,
							parts: A2(
								$elm$core$List$cons,
								$elm$core$String$fromList(
									_List_fromArray(
										[v])),
								s.parts)
						}));
			},
			$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValue) : $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$String$concat(
								$elm$core$List$reverse(s.parts)));
					},
					$elm$parser$Parser$symbol('\"')),
					A2(
					$elm$parser$Parser$map,
					function (_v1) {
						return $elm$parser$Parser$Loop(
							_Utils_update(
								s,
								{escaped: true, parts: s.parts}));
					},
					$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$symbol('\\'))),
					A2(
					$elm$parser$Parser$andThen,
					function (_v2) {
						var start = _v2.a;
						var value = _v2.b;
						var end = _v2.c;
						return _Utils_eq(start, end) ? $elm$parser$Parser$problem('Expected a string character or a double quote') : $elm$parser$Parser$succeed(
							$elm$parser$Parser$Loop(
								_Utils_update(
									s,
									{
										parts: A2($elm$core$List$cons, value, s.parts)
									})));
					},
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								$elm$parser$Parser$succeed(
									F3(
										function (start, value, end) {
											return _Utils_Tuple3(start, value, end);
										})),
								$elm$parser$Parser$getOffset),
							$elm$parser$Parser$getChompedString(
								$elm$parser$Parser$chompWhile(
									function (c) {
										return (!_Utils_eq(
											c,
											_Utils_chr('\"'))) && (!_Utils_eq(
											c,
											_Utils_chr('\\')));
									}))),
						$elm$parser$Parser$getOffset))
				]));
	};
	return $stil4m$elm_syntax$Combine$fromCore(
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$symbol('\"')),
			A2(
				$elm$parser$Parser$loop,
				{escaped: false, parts: _List_Nil},
				helper)));
}();
var $stil4m$elm_syntax$Elm$Parser$Tokens$isUpper = function (_char) {
	var stringChar = $elm$core$String$fromChar(_char);
	return _Utils_eq(
		$elm$core$String$toUpper(stringChar),
		stringChar) && (!_Utils_eq(
		$elm$core$String$toLower(stringChar),
		stringChar));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeName = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$variable(
		{
			inner: function (c) {
				return $stil4m$elm_syntax$Elm$Parser$Tokens$isAlphaNum(c) || _Utils_eq(
					c,
					_Utils_chr('_'));
			},
			reserved: $elm$core$Set$fromList($stil4m$elm_syntax$Elm$Parser$Tokens$reservedList),
			start: $stil4m$elm_syntax$Elm$Parser$Tokens$isUpper
		}));
var $stil4m$elm_syntax$Elm$Parser$Base$typeIndicator = function () {
	var helper = function (_v0) {
		var n = _v0.a;
		var xs = _v0.b;
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$andThen,
					function (t) {
						return helper(
							_Utils_Tuple2(
								t,
								A2($elm$core$List$cons, n, xs)));
					},
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
						$stil4m$elm_syntax$Combine$string('.'))),
					$stil4m$elm_syntax$Combine$succeed(
					_Utils_Tuple2(n, xs))
				]));
	};
	return A2(
		$stil4m$elm_syntax$Combine$map,
		function (_v1) {
			var t = _v1.a;
			var xs = _v1.b;
			return _Utils_Tuple2(
				$elm$core$List$reverse(xs),
				t);
		},
		A2(
			$stil4m$elm_syntax$Combine$andThen,
			function (t) {
				return helper(
					_Utils_Tuple2(t, _List_Nil));
			},
			$stil4m$elm_syntax$Elm$Parser$Tokens$typeName));
}();
var $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern = function (a) {
	return {$: 'VarPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$variablePart = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$functionName));
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPattern = function (consumeArgs) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		function (_v0) {
			var range = _v0.a;
			var _v1 = _v0.b;
			var mod = _v1.a;
			var name = _v1.b;
			return A2(
				$stil4m$elm_syntax$Combine$map,
				function (args) {
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						$stil4m$elm_syntax$Elm$Syntax$Range$combine(
							A2(
								$elm$core$List$cons,
								range,
								A2(
									$elm$core$List$map,
									function (_v2) {
										var r = _v2.a;
										return r;
									},
									args))),
						A2(
							$stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern,
							A2($stil4m$elm_syntax$Elm$Syntax$Pattern$QualifiedNameRef, mod, name),
							args));
				},
				consumeArgs ? $stil4m$elm_syntax$Combine$many(
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternArg())) : $stil4m$elm_syntax$Combine$succeed(_List_Nil));
		},
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
			$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$typeIndicator)));
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$tryToCompose = function (x) {
	return A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$map,
					function (y) {
						return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern, x, y);
					},
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Elm$Parser$Layout$layout,
							$stil4m$elm_syntax$Combine$fromCore(
								$elm$parser$Parser$keyword('as'))))),
					A2(
					$stil4m$elm_syntax$Combine$map,
					function (y) {
						return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern, x, y);
					},
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$fromCore(
								$elm$parser$Parser$symbol('::'))))),
					$stil4m$elm_syntax$Combine$succeed(x)
				])),
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout));
};
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern() {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		$stil4m$elm_syntax$Elm$Parser$Patterns$tryToCompose,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern());
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern() {
	return $stil4m$elm_syntax$Combine$choice(
		_List_fromArray(
			[
				$stil4m$elm_syntax$Elm$Parser$Patterns$variablePart,
				$stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPattern(true),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$stringLiteral)),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteral)),
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Patterns$numberPart),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('()')))),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('_')))),
				$stil4m$elm_syntax$Elm$Parser$Patterns$recordPart,
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(),
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern()
			]));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternArg() {
	return $stil4m$elm_syntax$Combine$choice(
		_List_fromArray(
			[
				$stil4m$elm_syntax$Elm$Parser$Patterns$variablePart,
				$stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPattern(false),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$stringLiteral)),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern, $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteral)),
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Patterns$numberPart),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('()')))),
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('_')))),
				$stil4m$elm_syntax$Elm$Parser$Patterns$recordPart,
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(),
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern()
			]));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v5) {
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A3(
					$stil4m$elm_syntax$Combine$between,
					$stil4m$elm_syntax$Combine$string('['),
					$stil4m$elm_syntax$Combine$string(']'),
					A2(
						$stil4m$elm_syntax$Combine$map,
						$stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern,
						A2(
							$stil4m$elm_syntax$Combine$sepBy,
							$stil4m$elm_syntax$Combine$string(','),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
								$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())))));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v3) {
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$map,
					function (c) {
						if (c.b && (!c.b.b)) {
							var x = c.a;
							return $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern(x);
						} else {
							return $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(c);
						}
					},
					$stil4m$elm_syntax$Combine$parens(
						A2(
							$stil4m$elm_syntax$Combine$sepBy,
							$stil4m$elm_syntax$Combine$string(','),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
								$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())))));
		});
}
try {
	var $stil4m$elm_syntax$Elm$Parser$Patterns$pattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$pattern;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternArg = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternArg();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternArg = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternArg;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.Patterns` are causing infinite recursion:\n\n  ┌─────┐\n  │    pattern\n  │     ↓\n  │    composablePattern\n  │     ↓\n  │    qualifiedPatternArg\n  │     ↓\n  │    listPattern\n  │     ↓\n  │    parensPattern\n  │     ↓\n  │    qualifiedPattern\n  │     ↓\n  │    tryToCompose\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionArgument = $stil4m$elm_syntax$Elm$Parser$Patterns$pattern;
var $stil4m$elm_syntax$Elm$Syntax$Signature$Signature = F2(
	function (name, typeAnnotation) {
		return {name: name, typeAnnotation: typeAnnotation};
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$Eager = {$: 'Eager'};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation = F2(
	function (a, b) {
		return {$: 'FunctionTypeAnnotation', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord = F2(
	function (a, b) {
		return {$: 'GenericRecord', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$Lazy = {$: 'Lazy'};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record = function (a) {
	return {$: 'Record', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed = F2(
	function (a, b) {
		return {$: 'Typed', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit = {$: 'Unit'};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled = function (a) {
	return {$: 'Tupled', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$asTypeAnnotation = F2(
	function (x, xs) {
		var value = x.b;
		if (!xs.b) {
			return value;
		} else {
			return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(
				A2($elm$core$List$cons, x, xs));
		}
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType = function (a) {
	return {$: 'GenericType', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Node$parser(
			A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType, $stil4m$elm_syntax$Elm$Parser$Tokens$functionName));
	});
var $stil4m$elm_syntax$Elm$Parser$Layout$Indented = {$: 'Indented'};
var $stil4m$elm_syntax$Elm$Parser$Layout$Strict = {$: 'Strict'};
var $stil4m$elm_syntax$Elm$Parser$State$storedColumns = function (_v0) {
	var indents = _v0.a.indents;
	return A2(
		$elm$core$List$map,
		$elm$core$Basics$add(1),
		indents);
};
var $stil4m$elm_syntax$Elm$Parser$Layout$compute = $stil4m$elm_syntax$Combine$withState(
	function (s) {
		return $stil4m$elm_syntax$Combine$withLocation(
			function (l) {
				var known = A2(
					$elm$core$List$cons,
					1,
					$stil4m$elm_syntax$Elm$Parser$State$storedColumns(s));
				return A2($elm$core$List$member, l.column, known) ? $stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Parser$Layout$Strict) : $stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Parser$Layout$Indented);
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Layout$compute,
	$stil4m$elm_syntax$Combine$many(
		$stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					$stil4m$elm_syntax$Elm$Parser$Layout$anyComment,
					A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces,
								$stil4m$elm_syntax$Elm$Parser$Layout$anyComment,
								$stil4m$elm_syntax$Combine$succeed(_Utils_Tuple0)
							])),
					$stil4m$elm_syntax$Combine$many1($stil4m$elm_syntax$Elm$Parser$Whitespace$realNewLine)),
					$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces
				]))));
var $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith = F2(
	function (onStrict, onIndented) {
		return A2(
			$stil4m$elm_syntax$Combine$andThen,
			function (ind) {
				if (ind.$ === 'Strict') {
					return onStrict(_Utils_Tuple0);
				} else {
					return onIndented(_Utils_Tuple0);
				}
			},
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout);
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFn = function (mode) {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v7) {
			return $stil4m$elm_syntax$Combine$choice(
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation(),
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotation(mode),
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation,
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation()
					]));
		});
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotation = function (mode) {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v0) {
			var nodeRanges = $elm$core$List$map(
				function (_v6) {
					var r = _v6.a;
					return r;
				});
			var genericHelper = function (items) {
				return A2(
					$stil4m$elm_syntax$Combine$or,
					A2(
						$stil4m$elm_syntax$Combine$andThen,
						function (next) {
							return A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								A2(
									$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
									function (_v1) {
										return $stil4m$elm_syntax$Combine$succeed(
											$elm$core$List$reverse(
												A2($elm$core$List$cons, next, items)));
									},
									function (_v2) {
										return genericHelper(
											A2($elm$core$List$cons, next, items));
									}));
						},
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFn($stil4m$elm_syntax$Elm$Parser$TypeAnnotation$Lazy)),
					$stil4m$elm_syntax$Combine$succeed(
						$elm$core$List$reverse(items)));
			};
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (original) {
					var tir = original.a;
					return A2(
						$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
						function (_v3) {
							return $stil4m$elm_syntax$Combine$succeed(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									tir,
									A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, original, _List_Nil)));
						},
						function (_v4) {
							if (mode.$ === 'Eager') {
								return A2(
									$stil4m$elm_syntax$Combine$map,
									function (args) {
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											$stil4m$elm_syntax$Elm$Syntax$Range$combine(
												A2(
													$elm$core$List$cons,
													tir,
													nodeRanges(args))),
											A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, original, args));
									},
									genericHelper(_List_Nil));
							} else {
								return $stil4m$elm_syntax$Combine$succeed(
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										tir,
										A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, original, _List_Nil)));
							}
						});
				},
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$typeIndicator));
		});
};
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v14) {
			var commaSep = $stil4m$elm_syntax$Combine$many(
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$string(',')))));
			var nested = A2(
				$stil4m$elm_syntax$Combine$andMap,
				commaSep,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Parser$TypeAnnotation$asTypeAnnotation)))));
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$map,
								$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit),
								$stil4m$elm_syntax$Combine$string(')')),
								A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$string(')'),
								nested)
							])),
					$stil4m$elm_syntax$Combine$string('(')));
		});
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v13) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Combine$string(':'),
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout)))),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout)),
					$stil4m$elm_syntax$Combine$succeed($elm$core$Tuple$pair)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v12) {
			return A2(
				$stil4m$elm_syntax$Combine$sepBy,
				$stil4m$elm_syntax$Combine$string(','),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
					$stil4m$elm_syntax$Elm$Parser$Node$parser(
						$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition())));
		});
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v11) {
			var nextField = A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$string(':'),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								A2(
									$stil4m$elm_syntax$Combine$andMap,
									$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
									A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Combine$string(','),
											$stil4m$elm_syntax$Combine$succeed(
												F2(
													function (a, b) {
														return _Utils_Tuple2(a, b);
													}))))))))));
			var additionalRecordFields = function (items) {
				return $stil4m$elm_syntax$Combine$choice(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Combine$andThen,
							function (next) {
								return additionalRecordFields(
									A2($elm$core$List$cons, next, items));
							},
							$stil4m$elm_syntax$Elm$Parser$Node$parser(nextField)),
							$stil4m$elm_syntax$Combine$succeed(
							$elm$core$List$reverse(items))
						]));
			};
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$continueWith,
								$stil4m$elm_syntax$Combine$succeed(
									$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(_List_Nil)),
								$stil4m$elm_syntax$Combine$string('}')),
								A2(
								$stil4m$elm_syntax$Combine$andThen,
								function (fname) {
									return $stil4m$elm_syntax$Combine$choice(
										_List_fromArray(
											[
												A2(
												$stil4m$elm_syntax$Combine$ignore,
												$stil4m$elm_syntax$Combine$string('}'),
												A2(
													$stil4m$elm_syntax$Combine$andMap,
													$stil4m$elm_syntax$Elm$Parser$Node$parser(
														$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation()),
													A2(
														$stil4m$elm_syntax$Combine$ignore,
														$stil4m$elm_syntax$Combine$string('|'),
														$stil4m$elm_syntax$Combine$succeed(
															$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord(fname))))),
												A2(
												$stil4m$elm_syntax$Combine$ignore,
												$stil4m$elm_syntax$Combine$string('}'),
												A2(
													$stil4m$elm_syntax$Combine$andThen,
													function (ta) {
														return A2(
															$stil4m$elm_syntax$Combine$map,
															$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record,
															additionalRecordFields(
																_List_fromArray(
																	[
																		A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $elm$core$Tuple$pair, fname, ta)
																	])));
													},
													A2(
														$stil4m$elm_syntax$Combine$ignore,
														$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
														A2(
															$stil4m$elm_syntax$Combine$continueWith,
															$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
															A2(
																$stil4m$elm_syntax$Combine$ignore,
																$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
																$stil4m$elm_syntax$Combine$string(':'))))))
											]));
								},
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName)))
							])),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Combine$string('{'))));
		});
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v8) {
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (typeRef) {
					return A2(
						$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
						function (_v9) {
							return $stil4m$elm_syntax$Combine$succeed(typeRef);
						},
						function (_v10) {
							return A2(
								$stil4m$elm_syntax$Combine$or,
								A2(
									$stil4m$elm_syntax$Combine$map,
									function (ta) {
										return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, typeRef, ta);
									},
									A2(
										$stil4m$elm_syntax$Combine$continueWith,
										$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
											$stil4m$elm_syntax$Combine$string('->')))),
								$stil4m$elm_syntax$Combine$succeed(typeRef));
						});
				},
				$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFn($stil4m$elm_syntax$Elm$Parser$TypeAnnotation$Eager));
		});
}
try {
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.TypeAnnotation` are causing infinite recursion:\n\n  ┌─────┐\n  │    parensTypeAnnotation\n  │     ↓\n  │    recordFieldDefinition\n  │     ↓\n  │    recordFieldsTypeAnnotation\n  │     ↓\n  │    recordTypeAnnotation\n  │     ↓\n  │    typeAnnotation\n  │     ↓\n  │    typeAnnotationNoFn\n  │     ↓\n  │    typedTypeAnnotation\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionSignatureFromVarPointer = function (varPointer) {
	return A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Combine$string(':'),
				$stil4m$elm_syntax$Combine$succeed(
					function (ta) {
						return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Signature$Signature, varPointer, ta);
					}))));
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression = function (a) {
	return {$: 'GLSLExpression', a: a};
};
var $elm$parser$Parser$NotNestable = {$: 'NotNestable'};
var $stil4m$elm_syntax$Elm$Parser$Declarations$glslExpression = function () {
	var start = '[glsl|';
	var end = '|]';
	return $stil4m$elm_syntax$Elm$Parser$Node$parser(
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string(end),
			A2(
				$stil4m$elm_syntax$Combine$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$dropLeft(
						$elm$core$String$length(start)),
					$stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression),
				$stil4m$elm_syntax$Combine$fromCore(
					$elm$parser$Parser$getChompedString(
						A3($elm$parser$Parser$multiComment, start, end, $elm$parser$Parser$NotNestable))))));
}();
var $stil4m$elm_syntax$Elm$Parser$Tokens$ifToken = $stil4m$elm_syntax$Combine$string('if');
var $stil4m$elm_syntax$Elm$Parser$Tokens$allowedOperatorTokens = _List_fromArray(
	[
		_Utils_chr('+'),
		_Utils_chr('-'),
		_Utils_chr(':'),
		_Utils_chr('/'),
		_Utils_chr('*'),
		_Utils_chr('>'),
		_Utils_chr('<'),
		_Utils_chr('='),
		_Utils_chr('/'),
		_Utils_chr('&'),
		_Utils_chr('^'),
		_Utils_chr('%'),
		_Utils_chr('|'),
		_Utils_chr('!'),
		_Utils_chr('.'),
		_Utils_chr('#'),
		_Utils_chr('$'),
		_Utils_chr('≡'),
		_Utils_chr('~'),
		_Utils_chr('?'),
		_Utils_chr('@')
	]);
var $stil4m$elm_syntax$Elm$Parser$Tokens$excludedOperators = _List_fromArray(
	[':', '->', '--', '=']);
var $stil4m$elm_syntax$Combine$Char$oneOf = function (cs) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Maybe$map($stil4m$elm_syntax$Combine$succeed),
			$elm$core$Maybe$withDefault(
				$stil4m$elm_syntax$Combine$fail(
					'expected one of \'' + ($elm$core$String$fromList(cs) + '\'')))),
		$stil4m$elm_syntax$Combine$Char$satisfy(
			function (a) {
				return A2($elm$core$List$member, a, cs);
			}));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$operatorTokenFromList = function (allowedChars) {
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		function (m) {
			return A2($elm$core$List$member, m, $stil4m$elm_syntax$Elm$Parser$Tokens$excludedOperators) ? $stil4m$elm_syntax$Combine$fail('operator is not allowed') : $stil4m$elm_syntax$Combine$succeed(m);
		},
		A2(
			$stil4m$elm_syntax$Combine$map,
			$elm$core$String$fromList,
			$stil4m$elm_syntax$Combine$many1(
				$stil4m$elm_syntax$Combine$Char$oneOf(allowedChars))));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$infixOperatorToken = $stil4m$elm_syntax$Elm$Parser$Tokens$operatorTokenFromList($stil4m$elm_syntax$Elm$Parser$Tokens$allowedOperatorTokens);
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Layout$verifyIndent(
		F2(
			function (stateIndent, current) {
				return _Utils_eq(stateIndent, current);
			})),
	$stil4m$elm_syntax$Combine$many1(
		$stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					$stil4m$elm_syntax$Elm$Parser$Layout$anyComment,
					A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$succeed(_Utils_Tuple0),
					$stil4m$elm_syntax$Combine$many1($stil4m$elm_syntax$Elm$Parser$Whitespace$realNewLine)),
					$stil4m$elm_syntax$Elm$Parser$Whitespace$many1Spaces
				]))));
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess = F2(
	function (a, b) {
		return {$: 'RecordAccess', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$liftRecordAccess = function (e) {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v0) {
			return A2(
				$stil4m$elm_syntax$Combine$or,
				A2(
					$stil4m$elm_syntax$Combine$andThen,
					$stil4m$elm_syntax$Elm$Parser$Declarations$liftRecordAccess,
					A2(
						$stil4m$elm_syntax$Combine$map,
						function (f) {
							return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, e, f);
						},
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
							$stil4m$elm_syntax$Combine$string('.')))),
				$stil4m$elm_syntax$Combine$succeed(e));
		});
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Literal = function (a) {
	return {$: 'Literal', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$multiLineStringLiteral = function () {
	var helper = function (s) {
		return s.escaped ? A2(
			$elm$parser$Parser$map,
			function (v) {
				return $elm$parser$Parser$Loop(
					_Utils_update(
						s,
						{
							escaped: false,
							parts: A2(
								$elm$core$List$cons,
								$elm$core$String$fromChar(v),
								s.parts)
						}));
			},
			$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValue) : $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$String$concat(
								$elm$core$List$reverse(s.parts)));
					},
					$elm$parser$Parser$symbol('\"\"\"')),
					A2(
					$elm$parser$Parser$map,
					function (v) {
						return $elm$parser$Parser$Loop(
							_Utils_update(
								s,
								{
									counter: s.counter + 1,
									parts: A2($elm$core$List$cons, v, s.parts)
								}));
					},
					$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$symbol('\"'))),
					A2(
					$elm$parser$Parser$map,
					function (_v1) {
						return $elm$parser$Parser$Loop(
							_Utils_update(
								s,
								{counter: s.counter + 1, escaped: true, parts: s.parts}));
					},
					$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$symbol('\\'))),
					A2(
					$elm$parser$Parser$andThen,
					function (_v2) {
						var start = _v2.a;
						var value = _v2.b;
						var end = _v2.c;
						return _Utils_eq(start, end) ? $elm$parser$Parser$problem('Expected a string character or a triple double quote') : $elm$parser$Parser$succeed(
							$elm$parser$Parser$Loop(
								_Utils_update(
									s,
									{
										counter: s.counter + 1,
										parts: A2($elm$core$List$cons, value, s.parts)
									})));
					},
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								$elm$parser$Parser$succeed(
									F3(
										function (start, value, end) {
											return _Utils_Tuple3(start, value, end);
										})),
								$elm$parser$Parser$getOffset),
							$elm$parser$Parser$getChompedString(
								$elm$parser$Parser$chompWhile(
									function (c) {
										return (!_Utils_eq(
											c,
											_Utils_chr('\"'))) && (!_Utils_eq(
											c,
											_Utils_chr('\\')));
									}))),
						$elm$parser$Parser$getOffset))
				]));
	};
	return $stil4m$elm_syntax$Combine$fromCore(
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$symbol('\"\"\"')),
			A2(
				$elm$parser$Parser$loop,
				{counter: 0, escaped: false, parts: _List_Nil},
				helper)));
}();
var $stil4m$elm_syntax$Elm$Parser$Declarations$literalExpression = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Node$parser(
			A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Expression$Literal,
				A2($stil4m$elm_syntax$Combine$or, $stil4m$elm_syntax$Elm$Parser$Tokens$multiLineStringLiteral, $stil4m$elm_syntax$Elm$Parser$Tokens$stringLiteral)));
	});
var $stil4m$elm_syntax$Combine$loop = F2(
	function (init, stepper) {
		var wrapper = function (_v3) {
			var oldState = _v3.a;
			var v = _v3.b;
			var _v0 = stepper(v);
			var p = _v0.a;
			return A2(
				$elm$parser$Parser$map,
				function (_v1) {
					var newState = _v1.a;
					var r = _v1.b;
					if (r.$ === 'Loop') {
						var l = r.a;
						return $elm$parser$Parser$Loop(
							_Utils_Tuple2(newState, l));
					} else {
						var d = r.a;
						return $elm$parser$Parser$Done(
							_Utils_Tuple2(newState, d));
					}
				},
				p(oldState));
		};
		return $stil4m$elm_syntax$Combine$Parser(
			function (state) {
				return A2(
					$elm$parser$Parser$loop,
					_Utils_Tuple2(state, init),
					wrapper);
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Whitespace$manySpaces = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$chompWhile(
		function (c) {
			return _Utils_eq(
				c,
				_Utils_chr(' '));
		}));
var $stil4m$elm_syntax$Elm$Syntax$Expression$Floatable = function (a) {
	return {$: 'Floatable', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Hex = function (a) {
	return {$: 'Hex', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Integer = function (a) {
	return {$: 'Integer', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Numbers$forgivingNumber = F3(
	function (floatf, intf, hexf) {
		return $stil4m$elm_syntax$Combine$fromCore(
			$elm$parser$Parser$backtrackable(
				A3($stil4m$elm_syntax$Elm$Parser$Numbers$raw, floatf, intf, hexf)));
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$numberExpression = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A3($stil4m$elm_syntax$Elm$Parser$Numbers$forgivingNumber, $stil4m$elm_syntax$Elm$Syntax$Expression$Floatable, $stil4m$elm_syntax$Elm$Syntax$Expression$Integer, $stil4m$elm_syntax$Elm$Syntax$Expression$Hex));
var $stil4m$elm_syntax$Elm$Parser$Tokens$ofToken = $stil4m$elm_syntax$Combine$string('of');
var $stil4m$elm_syntax$Elm$Parser$Tokens$allowedPrefixOperatorTokens = A2(
	$elm$core$List$cons,
	_Utils_chr(','),
	$stil4m$elm_syntax$Elm$Parser$Tokens$allowedOperatorTokens);
var $stil4m$elm_syntax$Elm$Parser$Tokens$prefixOperatorToken = $stil4m$elm_syntax$Elm$Parser$Tokens$operatorTokenFromList($stil4m$elm_syntax$Elm$Parser$Tokens$allowedPrefixOperatorTokens);
var $stil4m$elm_syntax$Elm$Syntax$Node$range = function (_v0) {
	var r = _v0.a;
	return r;
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction = function (a) {
	return {$: 'RecordAccessFunction', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$recordAccessFunctionExpression = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2(
		$stil4m$elm_syntax$Combine$map,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Basics$append('.'),
			$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction),
		A2(
			$stil4m$elm_syntax$Combine$continueWith,
			$stil4m$elm_syntax$Elm$Parser$Tokens$functionName,
			$stil4m$elm_syntax$Combine$string('.'))));
var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue = F2(
	function (a, b) {
		return {$: 'FunctionOrValue', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$reference = function () {
	var justFunction = A2(
		$stil4m$elm_syntax$Combine$map,
		function (v) {
			return _Utils_Tuple2(_List_Nil, v);
		},
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionName);
	var helper = function (_v0) {
		var n = _v0.a;
		var xs = _v0.b;
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$andThen,
								function (t) {
									return helper(
										_Utils_Tuple2(
											t,
											A2($elm$core$List$cons, n, xs)));
								},
								$stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
								A2(
								$stil4m$elm_syntax$Combine$map,
								function (t) {
									return _Utils_Tuple2(
										t,
										A2($elm$core$List$cons, n, xs));
								},
								$stil4m$elm_syntax$Elm$Parser$Tokens$functionName)
							])),
					$stil4m$elm_syntax$Combine$string('.')),
					$stil4m$elm_syntax$Combine$succeed(
					_Utils_Tuple2(n, xs))
				]));
	};
	var recurring = A2(
		$stil4m$elm_syntax$Combine$map,
		function (_v1) {
			var t = _v1.a;
			var xs = _v1.b;
			return _Utils_Tuple2(
				$elm$core$List$reverse(xs),
				t);
		},
		A2(
			$stil4m$elm_syntax$Combine$andThen,
			function (t) {
				return helper(
					_Utils_Tuple2(t, _List_Nil));
			},
			$stil4m$elm_syntax$Elm$Parser$Tokens$typeName));
	return $stil4m$elm_syntax$Combine$choice(
		_List_fromArray(
			[recurring, justFunction]));
}();
var $stil4m$elm_syntax$Elm$Parser$Declarations$referenceExpression = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2(
		$stil4m$elm_syntax$Combine$map,
		function (_v0) {
			var xs = _v0.a;
			var x = _v0.b;
			return A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, xs, x);
		},
		$stil4m$elm_syntax$Elm$Parser$Declarations$reference));
var $stil4m$elm_syntax$Elm$Parser$Tokens$thenToken = $stil4m$elm_syntax$Combine$string('then');
var $stil4m$elm_syntax$Elm$Parser$Ranges$asPointerLocation = function (_v0) {
	var line = _v0.line;
	var column = _v0.column;
	return {column: column, row: line};
};
var $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint = function (p) {
	return $stil4m$elm_syntax$Combine$withLocation(
		function (start) {
			var k = $stil4m$elm_syntax$Elm$Parser$Ranges$asPointerLocation(start);
			return p(
				{end: k, start: k});
		});
};
var $stil4m$elm_syntax$Elm$Parser$State$popIndent = function (_v0) {
	var s = _v0.a;
	return $stil4m$elm_syntax$Elm$Parser$State$State(
		_Utils_update(
			s,
			{
				indents: A2($elm$core$List$drop, 1, s.indents)
			}));
};
var $stil4m$elm_syntax$Elm$Parser$State$pushIndent = F2(
	function (x, _v0) {
		var s = _v0.a;
		return $stil4m$elm_syntax$Elm$Parser$State$State(
			_Utils_update(
				s,
				{
					indents: A2($elm$core$List$cons, x, s.indents)
				}));
	});
var $stil4m$elm_syntax$Elm$Parser$State$pushColumn = F2(
	function (col, state) {
		return A2($stil4m$elm_syntax$Elm$Parser$State$pushIndent, col - 1, state);
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$withIndentedState = function (p) {
	return $stil4m$elm_syntax$Combine$withLocation(
		function (location) {
			return A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Combine$modifyState($stil4m$elm_syntax$Elm$Parser$State$popIndent),
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					p,
					$stil4m$elm_syntax$Combine$modifyState(
						$stil4m$elm_syntax$Elm$Parser$State$pushColumn(location.column))));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionWithNameNode = function (pointer) {
	var functionImplementationFromVarPointer = function (varPointer) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$string('='),
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Combine$many(
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								$stil4m$elm_syntax$Elm$Parser$Declarations$functionArgument)),
						$stil4m$elm_syntax$Combine$succeed(
							F2(
								function (args, expr) {
									return A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										$stil4m$elm_syntax$Elm$Syntax$Range$combine(
											_List_fromArray(
												[
													$stil4m$elm_syntax$Elm$Syntax$Node$range(varPointer),
													$stil4m$elm_syntax$Elm$Syntax$Node$range(expr)
												])),
										A3($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionImplementation, varPointer, args, expr));
								}))))));
	};
	var functionWithoutSignature = function (varPointer) {
		return A2(
			$stil4m$elm_syntax$Combine$map,
			A2($stil4m$elm_syntax$Elm$Syntax$Expression$Function, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
			functionImplementationFromVarPointer(varPointer));
	};
	var fromParts = F2(
		function (sig, decl) {
			return {
				declaration: decl,
				documentation: $elm$core$Maybe$Nothing,
				signature: $elm$core$Maybe$Just(sig)
			};
		});
	var functionWithSignature = function (varPointer) {
		return A2(
			$stil4m$elm_syntax$Combine$andThen,
			function (sig) {
				return A2(
					$stil4m$elm_syntax$Combine$map,
					fromParts(sig),
					A2(
						$stil4m$elm_syntax$Combine$andThen,
						functionImplementationFromVarPointer,
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict)))));
			},
			$stil4m$elm_syntax$Elm$Parser$Declarations$functionSignatureFromVarPointer(varPointer));
	};
	return $stil4m$elm_syntax$Combine$choice(
		_List_fromArray(
			[
				functionWithSignature(pointer),
				functionWithoutSignature(pointer)
			]));
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$letDestructuringDeclarationWithPattern = function (p) {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v7) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Elm$Parser$Layout$layout,
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$string('='),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$succeed(
								$stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring(p))))));
		});
};
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseBlock() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v25) {
			return A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Elm$Parser$Tokens$ofToken,
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
					A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$caseToken)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v23) {
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (_v24) {
					var start = _v24.a;
					return A2(
						$stil4m$elm_syntax$Combine$map,
						function (cb) {
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									A2(
										$elm$core$List$cons,
										start,
										A2(
											$elm$core$List$map,
											A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $stil4m$elm_syntax$Elm$Syntax$Node$range),
											cb.cases))),
								$stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression(cb));
						},
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								$stil4m$elm_syntax$Elm$Parser$Declarations$withIndentedState(
									$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatements()),
								$stil4m$elm_syntax$Elm$Parser$Layout$layout),
							A2(
								$stil4m$elm_syntax$Combine$andMap,
								$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseBlock(),
								$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Expression$CaseBlock))));
				},
				$stil4m$elm_syntax$Elm$Parser$Node$parser(
					$stil4m$elm_syntax$Combine$succeed(_Utils_Tuple0)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v22) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Combine$string('->'),
							$stil4m$elm_syntax$Combine$maybe(
								A2($stil4m$elm_syntax$Combine$or, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict))))),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Elm$Parser$Patterns$pattern,
					$stil4m$elm_syntax$Combine$succeed($elm$core$Tuple$pair)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatements() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v21) {
			var helper = function (last) {
				return $stil4m$elm_syntax$Combine$withState(
					function (s) {
						return $stil4m$elm_syntax$Combine$withLocation(
							function (l) {
								return _Utils_eq(
									$stil4m$elm_syntax$Elm$Parser$State$expectedColumn(s),
									l.column) ? A2(
									$stil4m$elm_syntax$Combine$map,
									function (c) {
										return $stil4m$elm_syntax$Combine$Loop(
											A2($elm$core$List$cons, c, last));
									},
									$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement()) : $stil4m$elm_syntax$Combine$succeed(
									$stil4m$elm_syntax$Combine$Done(
										$elm$core$List$reverse(last)));
							});
					});
			};
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (v) {
					return A2($stil4m$elm_syntax$Combine$loop, v, helper);
				},
				A2(
					$stil4m$elm_syntax$Combine$map,
					$elm$core$List$singleton,
					$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement()));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v15) {
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (first) {
					var complete = function (rest) {
						if (!rest.b) {
							return $stil4m$elm_syntax$Combine$succeed(first);
						} else {
							if (rest.a.b.$ === 'Operator') {
								var _v20 = rest.a;
								return $stil4m$elm_syntax$Combine$fail('Expression should not end with an operator');
							} else {
								return $stil4m$elm_syntax$Combine$succeed(
									A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										$stil4m$elm_syntax$Elm$Syntax$Range$combine(
											A2(
												$elm$core$List$cons,
												$stil4m$elm_syntax$Elm$Syntax$Node$range(first),
												A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, rest))),
										$stil4m$elm_syntax$Elm$Syntax$Expression$Application(
											A2(
												$elm$core$List$cons,
												first,
												$elm$core$List$reverse(rest)))));
							}
						}
					};
					var promoter = function (rest) {
						return A2(
							$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
							function (_v16) {
								return complete(rest);
							},
							function (_v17) {
								return A2(
									$stil4m$elm_syntax$Combine$or,
									A2(
										$stil4m$elm_syntax$Combine$andThen,
										function (next) {
											return promoter(
												A2($elm$core$List$cons, next, rest));
										},
										$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication()),
									complete(rest));
							});
					};
					if (first.b.$ === 'Operator') {
						return $stil4m$elm_syntax$Combine$fail('Expression should not start with an operator');
					} else {
						return promoter(_List_Nil);
					}
				},
				$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication());
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v14) {
			return A2(
				$stil4m$elm_syntax$Combine$andThen,
				$stil4m$elm_syntax$Elm$Parser$Declarations$liftRecordAccess,
				$stil4m$elm_syntax$Combine$choice(
					_List_fromArray(
						[
							$stil4m$elm_syntax$Elm$Parser$Declarations$numberExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$referenceExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$ifBlockExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$recordAccessFunctionExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$operatorExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$lambdaExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$literalExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$charLiteralExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$recordExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$glslExpression,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$listExpression(),
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseExpression()
						])));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$ifBlockExpression() {
	return $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
		function (current) {
			return A2(
				$stil4m$elm_syntax$Combine$continueWith,
				$stil4m$elm_syntax$Combine$lazy(
					function (_v13) {
						return A2(
							$stil4m$elm_syntax$Combine$andMap,
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
								A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$elseToken)),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								A2(
									$stil4m$elm_syntax$Combine$andMap,
									$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
									A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Elm$Parser$Tokens$thenToken,
											A2(
												$stil4m$elm_syntax$Combine$ignore,
												$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
												A2(
													$stil4m$elm_syntax$Combine$andMap,
													$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
													A2(
														$stil4m$elm_syntax$Combine$ignore,
														$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
														$stil4m$elm_syntax$Combine$succeed(
															F3(
																function (condition, ifTrue, ifFalse) {
																	return A2(
																		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
																		{
																			end: $stil4m$elm_syntax$Elm$Syntax$Node$range(ifFalse).end,
																			start: current.start
																		},
																		A3($stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock, condition, ifTrue, ifFalse));
																}))))))))));
					}),
				$stil4m$elm_syntax$Elm$Parser$Tokens$ifToken);
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$lambdaExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v12) {
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
							$stil4m$elm_syntax$Combine$string('->'))),
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						A2(
							$stil4m$elm_syntax$Combine$sepBy1,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Elm$Parser$Declarations$functionArgument),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$string('\\'),
								$stil4m$elm_syntax$Combine$succeed(
									F2(
										function (args, expr) {
											return $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression(
												A2($stil4m$elm_syntax$Elm$Syntax$Expression$Lambda, args, expr));
										})))))));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBlock() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v11) {
			return A2(
				$stil4m$elm_syntax$Combine$ignore,
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$string('in'),
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[$stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Whitespace$manySpaces]))),
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Elm$Parser$Declarations$withIndentedState(
						$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBody()),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Layout$layout,
						$stil4m$elm_syntax$Combine$string('let'))));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBody() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v8) {
			var blockElement = A2(
				$stil4m$elm_syntax$Combine$andThen,
				function (_v9) {
					var r = _v9.a;
					var p = _v9.b;
					if (p.$ === 'VarPattern') {
						var v = p.a;
						return A2(
							$stil4m$elm_syntax$Combine$map,
							$stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction,
							$stil4m$elm_syntax$Elm$Parser$Declarations$functionWithNameNode(
								A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, v)));
					} else {
						return $stil4m$elm_syntax$Elm$Parser$Declarations$letDestructuringDeclarationWithPattern(
							A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, p));
					}
				},
				$stil4m$elm_syntax$Elm$Parser$Patterns$pattern);
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Combine$many(
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Elm$Parser$Node$parser(blockElement))),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Elm$Parser$Node$parser(blockElement),
					$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons)));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v6) {
			return $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
				function (current) {
					return A2(
						$stil4m$elm_syntax$Combine$andMap,
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
							$stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBlock(),
							$stil4m$elm_syntax$Combine$succeed(
								F2(
									function (decls, expr) {
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{
												end: $stil4m$elm_syntax$Elm$Syntax$Node$range(expr).end,
												start: current.start
											},
											$stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression(
												A2($stil4m$elm_syntax$Elm$Syntax$Expression$LetBlock, decls, expr)));
									}))));
				});
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$listExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v5) {
			var innerExpressions = A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr,
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Combine$many(
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
								$stil4m$elm_syntax$Combine$string(',')))),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
							$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons)))));
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$map,
								$elm$core$Basics$always(
									$stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(_List_Nil)),
								$stil4m$elm_syntax$Combine$string(']')),
								A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$string(']'),
								innerExpressions)
							])),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Combine$string('['))));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$operatorExpression() {
	var negationExpression = $stil4m$elm_syntax$Combine$lazy(
		function (_v4) {
			return A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Expression$Negation,
				A2(
					$stil4m$elm_syntax$Combine$andThen,
					$stil4m$elm_syntax$Elm$Parser$Declarations$liftRecordAccess,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								$stil4m$elm_syntax$Elm$Parser$Declarations$referenceExpression,
								$stil4m$elm_syntax$Elm$Parser$Declarations$numberExpression,
								$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression()
							]))));
		});
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v3) {
			return $stil4m$elm_syntax$Combine$choice(
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Parser$Node$parser(
						A2(
							$stil4m$elm_syntax$Combine$continueWith,
							$stil4m$elm_syntax$Combine$choice(
								_List_fromArray(
									[
										negationExpression,
										A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Elm$Parser$Layout$layout,
										$stil4m$elm_syntax$Combine$succeed(
											$stil4m$elm_syntax$Elm$Syntax$Expression$Operator('-')))
									])),
							$stil4m$elm_syntax$Combine$string('-'))),
						$stil4m$elm_syntax$Elm$Parser$Node$parser(
						A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Expression$Operator, $stil4m$elm_syntax$Elm$Parser$Tokens$infixOperatorToken))
					]));
		});
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$recordExpression() {
	return $stil4m$elm_syntax$Elm$Parser$Node$parser(
		$stil4m$elm_syntax$Combine$lazy(
			function (_v2) {
				var recordField = $stil4m$elm_syntax$Elm$Parser$Node$parser(
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$string('='),
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									A2(
										$stil4m$elm_syntax$Combine$andMap,
										$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
										$stil4m$elm_syntax$Combine$succeed($elm$core$Tuple$pair)))))));
				var recordFields = A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Combine$many(
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								recordField,
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									$stil4m$elm_syntax$Combine$string(','))))),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							recordField,
							$stil4m$elm_syntax$Combine$succeed($elm$core$List$cons))));
				var recordUpdateSyntaxParser = function (fname) {
					return A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$string('}'),
						A2(
							$stil4m$elm_syntax$Combine$map,
							function (e) {
								return A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression, fname, e);
							},
							A2(
								$stil4m$elm_syntax$Combine$continueWith,
								recordFields,
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									$stil4m$elm_syntax$Combine$string('|')))));
				};
				var recordContents = A2(
					$stil4m$elm_syntax$Combine$andThen,
					function (fname) {
						return $stil4m$elm_syntax$Combine$choice(
							_List_fromArray(
								[
									recordUpdateSyntaxParser(fname),
									A2(
									$stil4m$elm_syntax$Combine$andThen,
									function (fieldUpdate) {
										return $stil4m$elm_syntax$Combine$choice(
											_List_fromArray(
												[
													A2(
													$stil4m$elm_syntax$Combine$map,
													$elm$core$Basics$always(
														$stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(
															_List_fromArray(
																[fieldUpdate]))),
													$stil4m$elm_syntax$Combine$string('}')),
													A2(
													$stil4m$elm_syntax$Combine$ignore,
													$stil4m$elm_syntax$Combine$string('}'),
													A2(
														$stil4m$elm_syntax$Combine$map,
														function (fieldUpdates) {
															return $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(
																A2($elm$core$List$cons, fieldUpdate, fieldUpdates));
														},
														A2(
															$stil4m$elm_syntax$Combine$continueWith,
															recordFields,
															A2(
																$stil4m$elm_syntax$Combine$ignore,
																$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
																$stil4m$elm_syntax$Combine$string(',')))))
												]));
									},
									A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
										A2(
											$stil4m$elm_syntax$Combine$continueWith,
											A2(
												$stil4m$elm_syntax$Combine$map,
												function (e) {
													return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $elm$core$Tuple$pair, fname, e);
												},
												$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression()),
											A2(
												$stil4m$elm_syntax$Combine$ignore,
												$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
												$stil4m$elm_syntax$Combine$string('=')))))
								]));
					},
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName)));
				return A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$map,
								$elm$core$Basics$always(
									$stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(_List_Nil)),
								$stil4m$elm_syntax$Combine$string('}')),
								recordContents
							])),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
						$stil4m$elm_syntax$Combine$string('{')));
			}));
}
function $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression() {
	return $stil4m$elm_syntax$Combine$lazy(
		function (_v0) {
			var commaSep = $stil4m$elm_syntax$Combine$many(
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					A2(
						$stil4m$elm_syntax$Combine$continueWith,
						$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$string(',')))));
			var closingParen = $stil4m$elm_syntax$Combine$fromCore(
				$elm$parser$Parser$symbol(')'));
			var asExpression = F2(
				function (x, xs) {
					if (!xs.b) {
						return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(x);
					} else {
						return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(
							A2($elm$core$List$cons, x, xs));
					}
				});
			var nested = A2(
				$stil4m$elm_syntax$Combine$andMap,
				commaSep,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression(),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
							$stil4m$elm_syntax$Combine$succeed(asExpression)))));
			return $stil4m$elm_syntax$Elm$Parser$Node$parser(
				A2(
					$stil4m$elm_syntax$Combine$continueWith,
					$stil4m$elm_syntax$Combine$choice(
						_List_fromArray(
							[
								A2(
								$stil4m$elm_syntax$Combine$map,
								$elm$core$Basics$always($stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr),
								closingParen),
								$stil4m$elm_syntax$Combine$backtrackable(
								A2(
									$stil4m$elm_syntax$Combine$map,
									$stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator,
									A2($stil4m$elm_syntax$Combine$ignore, closingParen, $stil4m$elm_syntax$Elm$Parser$Tokens$prefixOperatorToken))),
								A2($stil4m$elm_syntax$Combine$ignore, closingParen, nested)
							])),
					$stil4m$elm_syntax$Combine$fromCore(
						$elm$parser$Parser$symbol('('))));
		});
}
try {
	var $stil4m$elm_syntax$Elm$Parser$Declarations$caseBlock = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseBlock();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseBlock = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$caseBlock;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$caseExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseExpression();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$caseExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$caseStatement = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatement = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$caseStatement;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$caseStatements = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatements();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$caseStatements = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$caseStatements;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$expression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$expression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$expressionNotApplication = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$expressionNotApplication = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$expressionNotApplication;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$ifBlockExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$ifBlockExpression();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$ifBlockExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$ifBlockExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$lambdaExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$lambdaExpression();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$lambdaExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$lambdaExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$letBlock = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBlock();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBlock = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$letBlock;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$letBody = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBody();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letBody = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$letBody;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$letExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letExpression();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$letExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$letExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$listExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$listExpression();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$listExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$listExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$operatorExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$operatorExpression();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$operatorExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$operatorExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$recordExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$recordExpression();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$recordExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$recordExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Declarations$tupledExpression = $stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression();
	$stil4m$elm_syntax$Elm$Parser$Declarations$cyclic$tupledExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Declarations$tupledExpression;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.Declarations` are causing infinite recursion:\n\n  ┌─────┐\n  │    caseBlock\n  │     ↓\n  │    caseExpression\n  │     ↓\n  │    caseStatement\n  │     ↓\n  │    caseStatements\n  │     ↓\n  │    expression\n  │     ↓\n  │    expressionNotApplication\n  │     ↓\n  │    functionWithNameNode\n  │     ↓\n  │    ifBlockExpression\n  │     ↓\n  │    lambdaExpression\n  │     ↓\n  │    letBlock\n  │     ↓\n  │    letBody\n  │     ↓\n  │    letDestructuringDeclarationWithPattern\n  │     ↓\n  │    letExpression\n  │     ↓\n  │    listExpression\n  │     ↓\n  │    operatorExpression\n  │     ↓\n  │    recordExpression\n  │     ↓\n  │    tupledExpression\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $stil4m$elm_syntax$Elm$Parser$Declarations$destructuringDeclaration = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Elm$Parser$Declarations$expression,
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Elm$Parser$Layout$layout,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$string('='),
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$Patterns$pattern,
						$stil4m$elm_syntax$Combine$succeed(
							F2(
								function (x, y) {
									return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Declaration$Destructuring, x, y);
								}))))));
	});
var $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration = function (a) {
	return {$: 'FunctionDeclaration', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$functionRange = function (_function) {
	return $stil4m$elm_syntax$Elm$Syntax$Range$combine(
		_List_fromArray(
			[
				function () {
				var _v0 = _function.documentation;
				if (_v0.$ === 'Just') {
					var documentation = _v0.a;
					return $stil4m$elm_syntax$Elm$Syntax$Node$range(documentation);
				} else {
					return A2(
						$elm$core$Maybe$withDefault,
						function (_v3) {
							var r = _v3.a;
							return r;
						}(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).name),
						A2(
							$elm$core$Maybe$map,
							function (_v1) {
								var value = _v1.b;
								var _v2 = value.name;
								var r = _v2.a;
								return r;
							},
							_function.signature));
				}
			}(),
				function (_v4) {
				var r = _v4.a;
				return r;
			}(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).expression)
			]));
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$function = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return A2(
			$stil4m$elm_syntax$Combine$map,
			function (f) {
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					$stil4m$elm_syntax$Elm$Syntax$Expression$functionRange(f),
					$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(f));
			},
			A2(
				$stil4m$elm_syntax$Combine$andThen,
				$stil4m$elm_syntax$Elm$Parser$Declarations$functionWithNameNode,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
					$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName))));
	});
var $stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration = function (a) {
	return {$: 'InfixDeclaration', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Infix = F4(
	function (direction, precedence, operator, _function) {
		return {direction: direction, _function: _function, operator: operator, precedence: precedence};
	});
var $stil4m$elm_syntax$Elm$Syntax$Infix$Left = {$: 'Left'};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Non = {$: 'Non'};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Right = {$: 'Right'};
var $stil4m$elm_syntax$Elm$Parser$Infix$infixDirection = $stil4m$elm_syntax$Combine$choice(
	_List_fromArray(
		[
			A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string('right'),
			$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Infix$Right)),
			A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string('left'),
			$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Infix$Left)),
			A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string('non'),
			$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Infix$Non))
		]));
var $elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				binary: $elm$core$Result$Err(invalid),
				expecting: expecting,
				_float: $elm$core$Result$Err(invalid),
				hex: $elm$core$Result$Err(invalid),
				_int: $elm$core$Result$Ok($elm$core$Basics$identity),
				invalid: invalid,
				octal: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$int = A2($elm$parser$Parser$Advanced$int, $elm$parser$Parser$ExpectingInt, $elm$parser$Parser$ExpectingInt);
var $stil4m$elm_syntax$Combine$Num$int = $stil4m$elm_syntax$Combine$fromCore($elm$parser$Parser$int);
var $stil4m$elm_syntax$Elm$Parser$Infix$infixDefinition = A2(
	$stil4m$elm_syntax$Combine$andMap,
	$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Elm$Parser$Layout$layout,
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Combine$string('='),
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Elm$Parser$Layout$layout,
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Elm$Parser$Node$parser(
						$stil4m$elm_syntax$Combine$parens($stil4m$elm_syntax$Elm$Parser$Tokens$prefixOperatorToken)),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Elm$Parser$Layout$layout,
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Combine$Num$int),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Elm$Parser$Layout$layout,
								A2(
									$stil4m$elm_syntax$Combine$andMap,
									$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Infix$infixDirection),
									A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Elm$Parser$Layout$layout,
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Combine$fromCore(
												$elm$parser$Parser$keyword('infix')),
											$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Infix$Infix))))))))))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration = $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
	function (current) {
		return A2(
			$stil4m$elm_syntax$Combine$map,
			function (inf) {
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					$stil4m$elm_syntax$Elm$Syntax$Range$combine(
						_List_fromArray(
							[
								current,
								$stil4m$elm_syntax$Elm$Syntax$Node$range(inf._function)
							])),
					$stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration(inf));
			},
			$stil4m$elm_syntax$Elm$Parser$Infix$infixDefinition);
	});
var $stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration = function (a) {
	return {$: 'PortDeclaration', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$portToken = $stil4m$elm_syntax$Combine$string('port');
var $stil4m$elm_syntax$Elm$Parser$Declarations$signature = A2(
	$stil4m$elm_syntax$Combine$andMap,
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
		A2(
			$stil4m$elm_syntax$Combine$continueWith,
			$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
				$stil4m$elm_syntax$Combine$string(':')))),
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName),
		$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Signature$Signature)));
var $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclaration = $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
	function (current) {
		return A2(
			$stil4m$elm_syntax$Combine$map,
			function (sig) {
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					$stil4m$elm_syntax$Elm$Syntax$Range$combine(
						_List_fromArray(
							[
								current,
								function (_v0) {
								var r = _v0.a;
								return r;
							}(sig.typeAnnotation)
							])),
					$stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration(sig));
			},
			A2(
				$stil4m$elm_syntax$Combine$continueWith,
				$stil4m$elm_syntax$Elm$Parser$Declarations$signature,
				A2($stil4m$elm_syntax$Combine$ignore, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$portToken)));
	});
var $stil4m$elm_syntax$Elm$Parser$Typings$DefinedAlias = F2(
	function (a, b) {
		return {$: 'DefinedAlias', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Parser$Typings$DefinedType = F2(
	function (a, b) {
		return {$: 'DefinedType', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Type$Type = F4(
	function (documentation, name, generics, constructors) {
		return {constructors: constructors, documentation: documentation, generics: generics, name: name};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAlias$TypeAlias = F4(
	function (documentation, name, generics, typeAnnotation) {
		return {documentation: documentation, generics: generics, name: name, typeAnnotation: typeAnnotation};
	});
var $stil4m$elm_syntax$Elm$Parser$Typings$genericList = $stil4m$elm_syntax$Combine$many(
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Elm$Parser$Layout$layout,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$functionName)));
var $stil4m$elm_syntax$Elm$Parser$Typings$typePrefix = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Layout$layout,
	$stil4m$elm_syntax$Combine$string('type'));
var $stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor = F2(
	function (name, _arguments) {
		return {_arguments: _arguments, name: name};
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNonGreedy = $stil4m$elm_syntax$Combine$choice(
	_List_fromArray(
		[
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation,
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotation($stil4m$elm_syntax$Elm$Parser$TypeAnnotation$Lazy),
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation,
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation
		]));
var $stil4m$elm_syntax$Elm$Parser$Typings$valueConstructor = A2(
	$stil4m$elm_syntax$Combine$andThen,
	function (tnn) {
		var range = tnn.a;
		var complete = function (args) {
			return $stil4m$elm_syntax$Combine$succeed(
				A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					$stil4m$elm_syntax$Elm$Syntax$Range$combine(
						A2(
							$elm$core$List$cons,
							range,
							A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, args))),
					A2($stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor, tnn, args)));
		};
		var argHelper = function (xs) {
			return A2(
				$stil4m$elm_syntax$Combine$continueWith,
				$stil4m$elm_syntax$Combine$choice(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Combine$andThen,
							function (ta) {
								return A2(
									$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
									function (_v0) {
										return $stil4m$elm_syntax$Combine$succeed(
											$elm$core$List$reverse(
												A2($elm$core$List$cons, ta, xs)));
									},
									function (_v1) {
										return argHelper(
											A2($elm$core$List$cons, ta, xs));
									});
							},
							$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNonGreedy),
							$stil4m$elm_syntax$Combine$succeed(
							$elm$core$List$reverse(xs))
						])),
				$stil4m$elm_syntax$Combine$succeed(_Utils_Tuple0));
		};
		return A2(
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayoutWith,
			function (_v2) {
				return complete(_List_Nil);
			},
			function (_v3) {
				return A2(
					$stil4m$elm_syntax$Combine$andThen,
					complete,
					argHelper(_List_Nil));
			});
	},
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Type$ValueConstructor)));
var $stil4m$elm_syntax$Elm$Parser$Typings$valueConstructors = A2(
	$stil4m$elm_syntax$Combine$sepBy1,
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
		$stil4m$elm_syntax$Combine$string('|')),
	$stil4m$elm_syntax$Elm$Parser$Typings$valueConstructor);
var $stil4m$elm_syntax$Elm$Parser$Typings$typeDefinition = $stil4m$elm_syntax$Elm$Parser$Ranges$withCurrentPoint(
	function (start) {
		return A2(
			$stil4m$elm_syntax$Combine$continueWith,
			$stil4m$elm_syntax$Combine$choice(
				_List_fromArray(
					[
						A2(
						$stil4m$elm_syntax$Combine$map,
						function (typeAlias) {
							return A2(
								$stil4m$elm_syntax$Elm$Parser$Typings$DefinedAlias,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									_List_fromArray(
										[
											start,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(typeAlias.typeAnnotation)
										])),
								typeAlias);
						},
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Elm$Parser$Layout$layout,
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$string('='),
									A2(
										$stil4m$elm_syntax$Combine$andMap,
										$stil4m$elm_syntax$Elm$Parser$Typings$genericList,
										A2(
											$stil4m$elm_syntax$Combine$andMap,
											A2(
												$stil4m$elm_syntax$Combine$ignore,
												$stil4m$elm_syntax$Elm$Parser$Layout$layout,
												$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName)),
											A2(
												$stil4m$elm_syntax$Combine$ignore,
												A2(
													$stil4m$elm_syntax$Combine$continueWith,
													$stil4m$elm_syntax$Elm$Parser$Layout$layout,
													$stil4m$elm_syntax$Combine$string('alias')),
												$stil4m$elm_syntax$Combine$succeed(
													$stil4m$elm_syntax$Elm$Syntax$TypeAlias$TypeAlias($elm$core$Maybe$Nothing))))))))),
						A2(
						$stil4m$elm_syntax$Combine$map,
						function (tipe) {
							return A2(
								$stil4m$elm_syntax$Elm$Parser$Typings$DefinedType,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									A2(
										$elm$core$List$cons,
										start,
										A2(
											$elm$core$List$map,
											function (_v0) {
												var r = _v0.a;
												return r;
											},
											tipe.constructors))),
								tipe);
						},
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Typings$valueConstructors,
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									$stil4m$elm_syntax$Combine$string('=')),
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
									A2(
										$stil4m$elm_syntax$Combine$andMap,
										$stil4m$elm_syntax$Elm$Parser$Typings$genericList,
										A2(
											$stil4m$elm_syntax$Combine$ignore,
											$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
											A2(
												$stil4m$elm_syntax$Combine$andMap,
												$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
												$stil4m$elm_syntax$Combine$succeed(
													$stil4m$elm_syntax$Elm$Syntax$Type$Type($elm$core$Maybe$Nothing)))))))))
					])),
			$stil4m$elm_syntax$Elm$Parser$Typings$typePrefix);
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$declaration = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					$stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration,
					$stil4m$elm_syntax$Elm$Parser$Declarations$function,
					A2(
					$stil4m$elm_syntax$Combine$map,
					function (v) {
						if (v.$ === 'DefinedType') {
							var r = v.a;
							var t = v.b;
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								r,
								$stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(t));
						} else {
							var r = v.a;
							var a = v.b;
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								r,
								$stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(a));
						}
					},
					$stil4m$elm_syntax$Elm$Parser$Typings$typeDefinition),
					$stil4m$elm_syntax$Elm$Parser$Declarations$portDeclaration,
					$stil4m$elm_syntax$Elm$Parser$Declarations$destructuringDeclaration
				]));
	});
var $stil4m$elm_syntax$Elm$Parser$File$fileDeclarations = $stil4m$elm_syntax$Combine$many(
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict),
		$stil4m$elm_syntax$Elm$Parser$Declarations$declaration));
var $stil4m$elm_syntax$Elm$Parser$Tokens$asToken = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$keyword('as'));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$All = function (a) {
	return {$: 'All', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expose$functionExpose = $stil4m$elm_syntax$Elm$Parser$Node$parser(
	A2($stil4m$elm_syntax$Combine$map, $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose, $stil4m$elm_syntax$Elm$Parser$Tokens$functionName));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose = function (a) {
	return {$: 'InfixExpose', a: a};
};
var $stil4m$elm_syntax$Combine$while = function (pred) {
	return $stil4m$elm_syntax$Combine$Parser(
		function (state) {
			return A2(
				$elm$parser$Parser$map,
				function (x) {
					return _Utils_Tuple2(state, x);
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompWhile(pred)));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Elm$Parser$Node$parser(
			A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose,
				$stil4m$elm_syntax$Combine$parens(
					$stil4m$elm_syntax$Combine$while(
						$elm$core$Basics$neq(
							_Utils_chr(')'))))));
	});
var $stil4m$elm_syntax$Elm$Parser$Expose$typeExpose = A2(
	$stil4m$elm_syntax$Combine$andThen,
	function (tipe) {
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$map,
					function (openRange) {
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$combine(
								_List_fromArray(
									[
										$stil4m$elm_syntax$Elm$Syntax$Node$range(tipe),
										openRange
									])),
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(tipe),
									$elm$core$Maybe$Just(openRange))));
					},
					A2(
						$stil4m$elm_syntax$Combine$map,
						$stil4m$elm_syntax$Elm$Syntax$Node$range,
						$stil4m$elm_syntax$Elm$Parser$Node$parser(
							$stil4m$elm_syntax$Combine$parens(
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
									$stil4m$elm_syntax$Combine$string('..')))))),
					$stil4m$elm_syntax$Combine$succeed(
					A2($stil4m$elm_syntax$Elm$Syntax$Node$map, $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose, tipe))
				]));
	},
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName)));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposable = $stil4m$elm_syntax$Combine$lazy(
	function (_v0) {
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[$stil4m$elm_syntax$Elm$Parser$Expose$typeExpose, $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose, $stil4m$elm_syntax$Elm$Parser$Expose$functionExpose]));
	});
var $stil4m$elm_syntax$Elm$Parser$Ranges$withRange = function (p) {
	return $stil4m$elm_syntax$Combine$withLocation(
		function (start) {
			return A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Combine$withLocation(
					function (end) {
						return $stil4m$elm_syntax$Combine$succeed(
							{
								end: $stil4m$elm_syntax$Elm$Parser$Ranges$asPointerLocation(end),
								start: $stil4m$elm_syntax$Elm$Parser$Ranges$asPointerLocation(start)
							});
					}),
				p);
		});
};
var $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner = A2(
	$stil4m$elm_syntax$Combine$or,
	$stil4m$elm_syntax$Elm$Parser$Ranges$withRange(
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
				$stil4m$elm_syntax$Combine$string('..')),
			$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Exposing$All))),
	A2(
		$stil4m$elm_syntax$Combine$map,
		$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit,
		A2(
			$stil4m$elm_syntax$Combine$sepBy,
			$stil4m$elm_syntax$Combine$Char$char(
				_Utils_chr(',')),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Expose$exposable))));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposeListWith = $stil4m$elm_syntax$Combine$parens(
	A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout)));
var $stil4m$elm_syntax$Elm$Parser$Tokens$exposingToken = $stil4m$elm_syntax$Combine$string('exposing');
var $stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Expose$exposeListWith,
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layout),
		$stil4m$elm_syntax$Elm$Parser$Tokens$exposingToken));
var $stil4m$elm_syntax$Elm$Parser$Tokens$importToken = $stil4m$elm_syntax$Combine$fromCore(
	$elm$parser$Parser$keyword('import'));
var $stil4m$elm_syntax$Elm$Parser$Base$moduleName = A2(
	$stil4m$elm_syntax$Combine$sepBy1,
	$stil4m$elm_syntax$Combine$string('.'),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName);
var $stil4m$elm_syntax$Elm$Parser$Imports$setupNode = F2(
	function (start, imp) {
		var allRanges = _List_fromArray(
			[
				$elm$core$Maybe$Just(start),
				$elm$core$Maybe$Just(
				$stil4m$elm_syntax$Elm$Syntax$Node$range(imp.moduleName)),
				A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, imp.exposingList),
				A2($elm$core$Maybe$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, imp.moduleAlias)
			]);
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$combine(
				A2($elm$core$List$filterMap, $elm$core$Basics$identity, allRanges)),
			imp);
	});
var $stil4m$elm_syntax$Elm$Parser$Imports$importDefinition = function () {
	var parseExposingDefinition = F2(
		function (mod, asDef) {
			return $stil4m$elm_syntax$Combine$choice(
				_List_fromArray(
					[
						A2(
						$stil4m$elm_syntax$Combine$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$Just,
							A2($stil4m$elm_syntax$Elm$Syntax$Import$Import, mod, asDef)),
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition)),
						$stil4m$elm_syntax$Combine$succeed(
						A3($stil4m$elm_syntax$Elm$Syntax$Import$Import, mod, asDef, $elm$core$Maybe$Nothing))
					]));
		});
	var importAndModuleName = A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
		A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$importToken));
	var asDefinition = A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
		A2($stil4m$elm_syntax$Combine$continueWith, $stil4m$elm_syntax$Elm$Parser$Layout$layout, $stil4m$elm_syntax$Elm$Parser$Tokens$asToken));
	var parseAsDefinition = function (mod) {
		return $stil4m$elm_syntax$Combine$choice(
			_List_fromArray(
				[
					A2(
					$stil4m$elm_syntax$Combine$andThen,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$Just,
						parseExposingDefinition(mod)),
					A2($stil4m$elm_syntax$Combine$ignore, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, asDefinition)),
					A2(parseExposingDefinition, mod, $elm$core$Maybe$Nothing)
				]));
	};
	return A2(
		$stil4m$elm_syntax$Combine$andThen,
		function (_v0) {
			var start = _v0.a;
			return A2(
				$stil4m$elm_syntax$Combine$map,
				$stil4m$elm_syntax$Elm$Parser$Imports$setupNode(start),
				A2(
					$stil4m$elm_syntax$Combine$andThen,
					parseAsDefinition,
					A2($stil4m$elm_syntax$Combine$ignore, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, importAndModuleName)));
		},
		$stil4m$elm_syntax$Elm$Parser$Node$parser(
			$stil4m$elm_syntax$Combine$succeed(_Utils_Tuple0)));
}();
var $stil4m$elm_syntax$Elm$Syntax$Module$EffectModule = function (a) {
	return {$: 'EffectModule', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause = A2(
	$stil4m$elm_syntax$Combine$andMap,
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
			$stil4m$elm_syntax$Combine$string('='))),
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionName,
		$stil4m$elm_syntax$Combine$succeed($elm$core$Tuple$pair)));
var $stil4m$elm_syntax$Elm$Parser$Modules$whereBlock = A2(
	$stil4m$elm_syntax$Combine$map,
	function (pairs) {
		return {
			command: A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$second,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$first,
							$elm$core$Basics$eq('command')),
						pairs))),
			subscription: A2(
				$elm$core$Maybe$map,
				$elm$core$Tuple$second,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$first,
							$elm$core$Basics$eq('subscription')),
						pairs)))
		};
	},
	A3(
		$stil4m$elm_syntax$Combine$between,
		$stil4m$elm_syntax$Combine$string('{'),
		$stil4m$elm_syntax$Combine$string('}'),
		A2(
			$stil4m$elm_syntax$Combine$sepBy1,
			$stil4m$elm_syntax$Combine$string(','),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause))));
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses = A2(
	$stil4m$elm_syntax$Combine$continueWith,
	$stil4m$elm_syntax$Elm$Parser$Modules$whereBlock,
	A2(
		$stil4m$elm_syntax$Combine$continueWith,
		$stil4m$elm_syntax$Elm$Parser$Layout$layout,
		$stil4m$elm_syntax$Combine$string('where')));
var $stil4m$elm_syntax$Elm$Parser$Tokens$moduleToken = $stil4m$elm_syntax$Combine$string('module');
var $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition = function () {
	var createEffectModule = F3(
		function (name, whereClauses, exp) {
			return $stil4m$elm_syntax$Elm$Syntax$Module$EffectModule(
				{command: whereClauses.command, exposingList: exp, moduleName: name, subscription: whereClauses.subscription});
		});
	return A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition),
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Elm$Parser$Layout$layout,
			A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses,
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Elm$Parser$Layout$layout,
					A2(
						$stil4m$elm_syntax$Combine$andMap,
						$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Elm$Parser$Layout$layout,
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Elm$Parser$Tokens$moduleToken,
								A2(
									$stil4m$elm_syntax$Combine$ignore,
									$stil4m$elm_syntax$Elm$Parser$Layout$layout,
									A2(
										$stil4m$elm_syntax$Combine$ignore,
										$stil4m$elm_syntax$Combine$string('effect'),
										$stil4m$elm_syntax$Combine$succeed(createEffectModule))))))))));
}();
var $stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData = F2(
	function (moduleName, exposingList) {
		return {exposingList: exposingList, moduleName: moduleName};
	});
var $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule = function (a) {
	return {$: 'NormalModule', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition = A2(
	$stil4m$elm_syntax$Combine$map,
	$stil4m$elm_syntax$Elm$Syntax$Module$NormalModule,
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition),
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Elm$Parser$Layout$layout,
			A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Elm$Parser$Layout$layout,
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Elm$Parser$Tokens$moduleToken,
						$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData)))))));
var $stil4m$elm_syntax$Elm$Syntax$Module$PortModule = function (a) {
	return {$: 'PortModule', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition = A2(
	$stil4m$elm_syntax$Combine$map,
	$stil4m$elm_syntax$Elm$Syntax$Module$PortModule,
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition),
		A2(
			$stil4m$elm_syntax$Combine$ignore,
			$stil4m$elm_syntax$Elm$Parser$Layout$layout,
			A2(
				$stil4m$elm_syntax$Combine$andMap,
				$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Base$moduleName),
				A2(
					$stil4m$elm_syntax$Combine$ignore,
					$stil4m$elm_syntax$Elm$Parser$Layout$layout,
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Elm$Parser$Tokens$moduleToken,
						A2(
							$stil4m$elm_syntax$Combine$ignore,
							$stil4m$elm_syntax$Elm$Parser$Layout$layout,
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Elm$Parser$Tokens$portToken,
								$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$Module$DefaultModuleData)))))))));
var $stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition = $stil4m$elm_syntax$Combine$choice(
	_List_fromArray(
		[$stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition]));
var $stil4m$elm_syntax$Elm$Parser$File$file = A2(
	$stil4m$elm_syntax$Combine$ignore,
	$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
	A2(
		$stil4m$elm_syntax$Combine$andMap,
		$stil4m$elm_syntax$Elm$Parser$File$collectComments,
		A2(
			$stil4m$elm_syntax$Combine$andMap,
			$stil4m$elm_syntax$Elm$Parser$File$fileDeclarations,
			A2(
				$stil4m$elm_syntax$Combine$ignore,
				$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict),
				A2(
					$stil4m$elm_syntax$Combine$andMap,
					$stil4m$elm_syntax$Combine$many(
						A2($stil4m$elm_syntax$Combine$ignore, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$Elm$Parser$Imports$importDefinition)),
					A2(
						$stil4m$elm_syntax$Combine$ignore,
						$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict),
						A2(
							$stil4m$elm_syntax$Combine$andMap,
							$stil4m$elm_syntax$Elm$Parser$Node$parser($stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition),
							A2(
								$stil4m$elm_syntax$Combine$ignore,
								$stil4m$elm_syntax$Combine$maybe($stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict),
								$stil4m$elm_syntax$Combine$succeed($stil4m$elm_syntax$Elm$Syntax$File$File)))))))));
var $stil4m$elm_syntax$Elm$Internal$RawFile$Raw = function (a) {
	return {$: 'Raw', a: a};
};
var $stil4m$elm_syntax$Elm$Internal$RawFile$fromFile = $stil4m$elm_syntax$Elm$Internal$RawFile$Raw;
var $stil4m$elm_syntax$Combine$runParser = F3(
	function (_v0, st, s) {
		var p = _v0.a;
		return A2(
			$elm$parser$Parser$run,
			p(st),
			s);
	});
var $stil4m$elm_syntax$Combine$end = $stil4m$elm_syntax$Combine$Parser(
	function (state) {
		return A2(
			$elm$parser$Parser$map,
			function (x) {
				return _Utils_Tuple2(state, x);
			},
			$elm$parser$Parser$end);
	});
var $stil4m$elm_syntax$Elm$Parser$withEnd = function (p) {
	return A2(
		$stil4m$elm_syntax$Combine$ignore,
		$stil4m$elm_syntax$Combine$withLocation(
			function (_v0) {
				return $stil4m$elm_syntax$Combine$end;
			}),
		p);
};
var $stil4m$elm_syntax$Elm$Parser$parse = function (input) {
	var _v0 = A3(
		$stil4m$elm_syntax$Combine$runParser,
		$stil4m$elm_syntax$Elm$Parser$withEnd($stil4m$elm_syntax$Elm$Parser$File$file),
		$stil4m$elm_syntax$Elm$Parser$State$emptyState,
		input + '\n');
	if (_v0.$ === 'Ok') {
		var _v1 = _v0.a;
		var r = _v1.b;
		return $elm$core$Result$Ok(
			$stil4m$elm_syntax$Elm$Internal$RawFile$fromFile(r));
	} else {
		var s = _v0.a;
		return $elm$core$Result$Err(s);
	}
};
var $author$project$Morphir$Elm$ParsedModule$ParsedModule = function (a) {
	return {$: 'ParsedModule', a: a};
};
var $stil4m$elm_syntax$Elm$Processing$ProcessContext = function (a) {
	return {$: 'ProcessContext', a: a};
};
var $stil4m$elm_syntax$Elm$Processing$init = $stil4m$elm_syntax$Elm$Processing$ProcessContext($elm$core$Dict$empty);
var $stil4m$elm_syntax$Elm$Processing$addDependency = F2(
	function (dep, _v0) {
		var x = _v0.a;
		return $stil4m$elm_syntax$Elm$Processing$ProcessContext(
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (k, v, d) {
						return A3($elm$core$Dict$insert, k, v, d);
					}),
				x,
				dep.interfaces));
	});
var $stil4m$elm_syntax$Elm$Interface$Alias = function (a) {
	return {$: 'Alias', a: a};
};
var $stil4m$elm_syntax$Elm$Interface$CustomType = function (a) {
	return {$: 'CustomType', a: a};
};
var $stil4m$elm_syntax$Elm$Interface$Function = function (a) {
	return {$: 'Function', a: a};
};
var $stil4m$elm_syntax$Elm$Interface$Operator = function (a) {
	return {$: 'Operator', a: a};
};
var $author$project$Morphir$Elm$WellKnownOperators$elmCore = {
	interfaces: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				_List_fromArray(
					['Array']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Array', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('empty'),
						$stil4m$elm_syntax$Elm$Interface$Function('isEmpty'),
						$stil4m$elm_syntax$Elm$Interface$Function('length'),
						$stil4m$elm_syntax$Elm$Interface$Function('initialize'),
						$stil4m$elm_syntax$Elm$Interface$Function('repeat'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromList'),
						$stil4m$elm_syntax$Elm$Interface$Function('get'),
						$stil4m$elm_syntax$Elm$Interface$Function('set'),
						$stil4m$elm_syntax$Elm$Interface$Function('push'),
						$stil4m$elm_syntax$Elm$Interface$Function('toList'),
						$stil4m$elm_syntax$Elm$Interface$Function('toIndexedList'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldr'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldl'),
						$stil4m$elm_syntax$Elm$Interface$Function('filter'),
						$stil4m$elm_syntax$Elm$Interface$Function('map'),
						$stil4m$elm_syntax$Elm$Interface$Function('indexedMap'),
						$stil4m$elm_syntax$Elm$Interface$Function('append'),
						$stil4m$elm_syntax$Elm$Interface$Function('slice')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Basics']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Int', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Float', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Left),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'add'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '+'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 6)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Left),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'sub'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '-'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 6)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Left),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'mul'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '*'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 7)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Left),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'fdiv'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '/'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 7)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Left),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'idiv'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '//'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 7)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Right),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'pow'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '^'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 8)
						}),
						$stil4m$elm_syntax$Elm$Interface$Function('toFloat'),
						$stil4m$elm_syntax$Elm$Interface$Function('round'),
						$stil4m$elm_syntax$Elm$Interface$Function('floor'),
						$stil4m$elm_syntax$Elm$Interface$Function('ceiling'),
						$stil4m$elm_syntax$Elm$Interface$Function('truncate'),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Non),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'eq'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '=='),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Non),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'neq'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '/='),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Non),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'lt'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '<'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Non),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'gt'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '>'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Non),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'le'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '<='),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Non),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'ge'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '>='),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 4)
						}),
						$stil4m$elm_syntax$Elm$Interface$Function('max'),
						$stil4m$elm_syntax$Elm$Interface$Function('min'),
						$stil4m$elm_syntax$Elm$Interface$Function('compare'),
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2(
							'Order',
							_List_fromArray(
								['LT', 'EQ', 'GT']))),
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2(
							'Bool',
							_List_fromArray(
								['True', 'False']))),
						$stil4m$elm_syntax$Elm$Interface$Function('not'),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Right),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'and'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '&&'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 3)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Right),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'or'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '||'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 2)
						}),
						$stil4m$elm_syntax$Elm$Interface$Function('xor'),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Right),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'append'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '++'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 5)
						}),
						$stil4m$elm_syntax$Elm$Interface$Function('modBy'),
						$stil4m$elm_syntax$Elm$Interface$Function('remainderBy'),
						$stil4m$elm_syntax$Elm$Interface$Function('negate'),
						$stil4m$elm_syntax$Elm$Interface$Function('abs'),
						$stil4m$elm_syntax$Elm$Interface$Function('clamp'),
						$stil4m$elm_syntax$Elm$Interface$Function('sqrt'),
						$stil4m$elm_syntax$Elm$Interface$Function('logBase'),
						$stil4m$elm_syntax$Elm$Interface$Function('e'),
						$stil4m$elm_syntax$Elm$Interface$Function('pi'),
						$stil4m$elm_syntax$Elm$Interface$Function('cos'),
						$stil4m$elm_syntax$Elm$Interface$Function('sin'),
						$stil4m$elm_syntax$Elm$Interface$Function('tan'),
						$stil4m$elm_syntax$Elm$Interface$Function('acos'),
						$stil4m$elm_syntax$Elm$Interface$Function('asin'),
						$stil4m$elm_syntax$Elm$Interface$Function('atan'),
						$stil4m$elm_syntax$Elm$Interface$Function('atan2'),
						$stil4m$elm_syntax$Elm$Interface$Function('degrees'),
						$stil4m$elm_syntax$Elm$Interface$Function('radians'),
						$stil4m$elm_syntax$Elm$Interface$Function('turns'),
						$stil4m$elm_syntax$Elm$Interface$Function('toPolar'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromPolar'),
						$stil4m$elm_syntax$Elm$Interface$Function('isNaN'),
						$stil4m$elm_syntax$Elm$Interface$Function('isInfinite'),
						$stil4m$elm_syntax$Elm$Interface$Function('identity'),
						$stil4m$elm_syntax$Elm$Interface$Function('always'),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Right),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'apL'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '<|'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Left),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'apR'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '|>'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 0)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Left),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'composeL'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '<<'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 9)
						}),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Right),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'composeR'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '>>'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 9)
						}),
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Never', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('never')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Bitwise']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Function('and'),
						$stil4m$elm_syntax$Elm$Interface$Function('or'),
						$stil4m$elm_syntax$Elm$Interface$Function('xor'),
						$stil4m$elm_syntax$Elm$Interface$Function('complement'),
						$stil4m$elm_syntax$Elm$Interface$Function('shiftLeftBy'),
						$stil4m$elm_syntax$Elm$Interface$Function('shiftRightBy'),
						$stil4m$elm_syntax$Elm$Interface$Function('shiftRightZfBy')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Char']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Char', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('isUpper'),
						$stil4m$elm_syntax$Elm$Interface$Function('isLower'),
						$stil4m$elm_syntax$Elm$Interface$Function('isAlpha'),
						$stil4m$elm_syntax$Elm$Interface$Function('isAlphaNum'),
						$stil4m$elm_syntax$Elm$Interface$Function('isDigit'),
						$stil4m$elm_syntax$Elm$Interface$Function('isOctDigit'),
						$stil4m$elm_syntax$Elm$Interface$Function('isHexDigit'),
						$stil4m$elm_syntax$Elm$Interface$Function('toUpper'),
						$stil4m$elm_syntax$Elm$Interface$Function('toLower'),
						$stil4m$elm_syntax$Elm$Interface$Function('toLocaleUpper'),
						$stil4m$elm_syntax$Elm$Interface$Function('toLocaleLower'),
						$stil4m$elm_syntax$Elm$Interface$Function('toCode'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromCode')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Debug']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Function('toString'),
						$stil4m$elm_syntax$Elm$Interface$Function('log'),
						$stil4m$elm_syntax$Elm$Interface$Function('todo')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Dict']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Dict', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('empty'),
						$stil4m$elm_syntax$Elm$Interface$Function('singleton'),
						$stil4m$elm_syntax$Elm$Interface$Function('insert'),
						$stil4m$elm_syntax$Elm$Interface$Function('update'),
						$stil4m$elm_syntax$Elm$Interface$Function('remove'),
						$stil4m$elm_syntax$Elm$Interface$Function('isEmpty'),
						$stil4m$elm_syntax$Elm$Interface$Function('member'),
						$stil4m$elm_syntax$Elm$Interface$Function('get'),
						$stil4m$elm_syntax$Elm$Interface$Function('size'),
						$stil4m$elm_syntax$Elm$Interface$Function('keys'),
						$stil4m$elm_syntax$Elm$Interface$Function('values'),
						$stil4m$elm_syntax$Elm$Interface$Function('toList'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromList'),
						$stil4m$elm_syntax$Elm$Interface$Function('map'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldl'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldr'),
						$stil4m$elm_syntax$Elm$Interface$Function('filter'),
						$stil4m$elm_syntax$Elm$Interface$Function('partition'),
						$stil4m$elm_syntax$Elm$Interface$Function('union'),
						$stil4m$elm_syntax$Elm$Interface$Function('intersect'),
						$stil4m$elm_syntax$Elm$Interface$Function('diff'),
						$stil4m$elm_syntax$Elm$Interface$Function('merge')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['List']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Function('singleton'),
						$stil4m$elm_syntax$Elm$Interface$Function('repeat'),
						$stil4m$elm_syntax$Elm$Interface$Function('range'),
						$stil4m$elm_syntax$Elm$Interface$Operator(
						{
							direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Right),
							_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'cons'),
							operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, '::'),
							precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 5)
						}),
						$stil4m$elm_syntax$Elm$Interface$Function('map'),
						$stil4m$elm_syntax$Elm$Interface$Function('indexedMap'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldl'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldr'),
						$stil4m$elm_syntax$Elm$Interface$Function('filter'),
						$stil4m$elm_syntax$Elm$Interface$Function('filterMap'),
						$stil4m$elm_syntax$Elm$Interface$Function('length'),
						$stil4m$elm_syntax$Elm$Interface$Function('reverse'),
						$stil4m$elm_syntax$Elm$Interface$Function('member'),
						$stil4m$elm_syntax$Elm$Interface$Function('all'),
						$stil4m$elm_syntax$Elm$Interface$Function('any'),
						$stil4m$elm_syntax$Elm$Interface$Function('maximum'),
						$stil4m$elm_syntax$Elm$Interface$Function('minimum'),
						$stil4m$elm_syntax$Elm$Interface$Function('sum'),
						$stil4m$elm_syntax$Elm$Interface$Function('product'),
						$stil4m$elm_syntax$Elm$Interface$Function('append'),
						$stil4m$elm_syntax$Elm$Interface$Function('concat'),
						$stil4m$elm_syntax$Elm$Interface$Function('concatMap'),
						$stil4m$elm_syntax$Elm$Interface$Function('intersperse'),
						$stil4m$elm_syntax$Elm$Interface$Function('map2'),
						$stil4m$elm_syntax$Elm$Interface$Function('map3'),
						$stil4m$elm_syntax$Elm$Interface$Function('map4'),
						$stil4m$elm_syntax$Elm$Interface$Function('map5'),
						$stil4m$elm_syntax$Elm$Interface$Function('sort'),
						$stil4m$elm_syntax$Elm$Interface$Function('sortBy'),
						$stil4m$elm_syntax$Elm$Interface$Function('sortWith'),
						$stil4m$elm_syntax$Elm$Interface$Function('isEmpty'),
						$stil4m$elm_syntax$Elm$Interface$Function('head'),
						$stil4m$elm_syntax$Elm$Interface$Function('tail'),
						$stil4m$elm_syntax$Elm$Interface$Function('take'),
						$stil4m$elm_syntax$Elm$Interface$Function('drop'),
						$stil4m$elm_syntax$Elm$Interface$Function('partition'),
						$stil4m$elm_syntax$Elm$Interface$Function('unzip')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Maybe']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2(
							'Maybe',
							_List_fromArray(
								['Just', 'Nothing']))),
						$stil4m$elm_syntax$Elm$Interface$Function('andThen'),
						$stil4m$elm_syntax$Elm$Interface$Function('map'),
						$stil4m$elm_syntax$Elm$Interface$Function('map2'),
						$stil4m$elm_syntax$Elm$Interface$Function('map3'),
						$stil4m$elm_syntax$Elm$Interface$Function('map4'),
						$stil4m$elm_syntax$Elm$Interface$Function('map5'),
						$stil4m$elm_syntax$Elm$Interface$Function('withDefault')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Platform']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Program', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('worker'),
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Task', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('ProcessId', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Router', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('sendToApp'),
						$stil4m$elm_syntax$Elm$Interface$Function('sendToSelf')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Platform', 'Cmd']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Cmd', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('none'),
						$stil4m$elm_syntax$Elm$Interface$Function('batch'),
						$stil4m$elm_syntax$Elm$Interface$Function('map')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Platform', 'Sub']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Sub', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('none'),
						$stil4m$elm_syntax$Elm$Interface$Function('batch'),
						$stil4m$elm_syntax$Elm$Interface$Function('map')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Process']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Alias('Id'),
						$stil4m$elm_syntax$Elm$Interface$Function('spawn'),
						$stil4m$elm_syntax$Elm$Interface$Function('sleep'),
						$stil4m$elm_syntax$Elm$Interface$Function('kill')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Result']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2(
							'Result',
							_List_fromArray(
								['Ok', 'Err']))),
						$stil4m$elm_syntax$Elm$Interface$Function('withDefault'),
						$stil4m$elm_syntax$Elm$Interface$Function('map'),
						$stil4m$elm_syntax$Elm$Interface$Function('map2'),
						$stil4m$elm_syntax$Elm$Interface$Function('map3'),
						$stil4m$elm_syntax$Elm$Interface$Function('map4'),
						$stil4m$elm_syntax$Elm$Interface$Function('map5'),
						$stil4m$elm_syntax$Elm$Interface$Function('andThen'),
						$stil4m$elm_syntax$Elm$Interface$Function('toMaybe'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromMaybe'),
						$stil4m$elm_syntax$Elm$Interface$Function('mapError')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Set']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('Set', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('empty'),
						$stil4m$elm_syntax$Elm$Interface$Function('singleton'),
						$stil4m$elm_syntax$Elm$Interface$Function('insert'),
						$stil4m$elm_syntax$Elm$Interface$Function('remove'),
						$stil4m$elm_syntax$Elm$Interface$Function('isEmpty'),
						$stil4m$elm_syntax$Elm$Interface$Function('member'),
						$stil4m$elm_syntax$Elm$Interface$Function('size'),
						$stil4m$elm_syntax$Elm$Interface$Function('union'),
						$stil4m$elm_syntax$Elm$Interface$Function('intersect'),
						$stil4m$elm_syntax$Elm$Interface$Function('diff'),
						$stil4m$elm_syntax$Elm$Interface$Function('toList'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromList'),
						$stil4m$elm_syntax$Elm$Interface$Function('map'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldl'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldr'),
						$stil4m$elm_syntax$Elm$Interface$Function('filter'),
						$stil4m$elm_syntax$Elm$Interface$Function('partition')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['String']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$CustomType(
						_Utils_Tuple2('String', _List_Nil)),
						$stil4m$elm_syntax$Elm$Interface$Function('isEmpty'),
						$stil4m$elm_syntax$Elm$Interface$Function('length'),
						$stil4m$elm_syntax$Elm$Interface$Function('reverse'),
						$stil4m$elm_syntax$Elm$Interface$Function('repeat'),
						$stil4m$elm_syntax$Elm$Interface$Function('replace'),
						$stil4m$elm_syntax$Elm$Interface$Function('append'),
						$stil4m$elm_syntax$Elm$Interface$Function('concat'),
						$stil4m$elm_syntax$Elm$Interface$Function('split'),
						$stil4m$elm_syntax$Elm$Interface$Function('join'),
						$stil4m$elm_syntax$Elm$Interface$Function('words'),
						$stil4m$elm_syntax$Elm$Interface$Function('lines'),
						$stil4m$elm_syntax$Elm$Interface$Function('slice'),
						$stil4m$elm_syntax$Elm$Interface$Function('left'),
						$stil4m$elm_syntax$Elm$Interface$Function('right'),
						$stil4m$elm_syntax$Elm$Interface$Function('dropLeft'),
						$stil4m$elm_syntax$Elm$Interface$Function('dropRight'),
						$stil4m$elm_syntax$Elm$Interface$Function('contains'),
						$stil4m$elm_syntax$Elm$Interface$Function('startsWith'),
						$stil4m$elm_syntax$Elm$Interface$Function('endsWith'),
						$stil4m$elm_syntax$Elm$Interface$Function('indexes'),
						$stil4m$elm_syntax$Elm$Interface$Function('indices'),
						$stil4m$elm_syntax$Elm$Interface$Function('toInt'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromInt'),
						$stil4m$elm_syntax$Elm$Interface$Function('toFloat'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromFloat'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromChar'),
						$stil4m$elm_syntax$Elm$Interface$Function('cons'),
						$stil4m$elm_syntax$Elm$Interface$Function('uncons'),
						$stil4m$elm_syntax$Elm$Interface$Function('toList'),
						$stil4m$elm_syntax$Elm$Interface$Function('fromList'),
						$stil4m$elm_syntax$Elm$Interface$Function('toUpper'),
						$stil4m$elm_syntax$Elm$Interface$Function('toLower'),
						$stil4m$elm_syntax$Elm$Interface$Function('pad'),
						$stil4m$elm_syntax$Elm$Interface$Function('padLeft'),
						$stil4m$elm_syntax$Elm$Interface$Function('padRight'),
						$stil4m$elm_syntax$Elm$Interface$Function('trim'),
						$stil4m$elm_syntax$Elm$Interface$Function('trimLeft'),
						$stil4m$elm_syntax$Elm$Interface$Function('trimRight'),
						$stil4m$elm_syntax$Elm$Interface$Function('map'),
						$stil4m$elm_syntax$Elm$Interface$Function('filter'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldl'),
						$stil4m$elm_syntax$Elm$Interface$Function('foldr'),
						$stil4m$elm_syntax$Elm$Interface$Function('any'),
						$stil4m$elm_syntax$Elm$Interface$Function('all')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Task']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Alias('Task'),
						$stil4m$elm_syntax$Elm$Interface$Function('succeed'),
						$stil4m$elm_syntax$Elm$Interface$Function('fail'),
						$stil4m$elm_syntax$Elm$Interface$Function('map'),
						$stil4m$elm_syntax$Elm$Interface$Function('map2'),
						$stil4m$elm_syntax$Elm$Interface$Function('map3'),
						$stil4m$elm_syntax$Elm$Interface$Function('map4'),
						$stil4m$elm_syntax$Elm$Interface$Function('map5'),
						$stil4m$elm_syntax$Elm$Interface$Function('sequence'),
						$stil4m$elm_syntax$Elm$Interface$Function('andThen'),
						$stil4m$elm_syntax$Elm$Interface$Function('onError'),
						$stil4m$elm_syntax$Elm$Interface$Function('mapError'),
						$stil4m$elm_syntax$Elm$Interface$Function('perform'),
						$stil4m$elm_syntax$Elm$Interface$Function('attempt')
					])),
				_Utils_Tuple2(
				_List_fromArray(
					['Tuple']),
				_List_fromArray(
					[
						$stil4m$elm_syntax$Elm$Interface$Function('pair'),
						$stil4m$elm_syntax$Elm$Interface$Function('first'),
						$stil4m$elm_syntax$Elm$Interface$Function('second'),
						$stil4m$elm_syntax$Elm$Interface$Function('mapFirst'),
						$stil4m$elm_syntax$Elm$Interface$Function('mapSecond'),
						$stil4m$elm_syntax$Elm$Interface$Function('mapBoth')
					]))
			])),
	name: 'elm/core',
	version: '1.0.5'
};
var $author$project$Morphir$Elm$WellKnownOperators$wellKnownOperators = _List_fromArray(
	[$author$project$Morphir$Elm$WellKnownOperators$elmCore]);
var $author$project$Morphir$Elm$ParsedModule$withWellKnownOperators = function (processContext) {
	return A3($elm$core$List$foldl, $stil4m$elm_syntax$Elm$Processing$addDependency, processContext, $author$project$Morphir$Elm$WellKnownOperators$wellKnownOperators);
};
var $author$project$Morphir$Elm$ParsedModule$initialContext = $author$project$Morphir$Elm$ParsedModule$withWellKnownOperators($stil4m$elm_syntax$Elm$Processing$init);
var $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication = F4(
	function (a, b, c, d) {
		return {$: 'OperatorApplication', a: a, b: b, c: c, d: d};
	});
var $stil4m$elm_syntax$Elm$Processing$expressionOperators = function (_v0) {
	var expression = _v0.b;
	if (expression.$ === 'Operator') {
		var s = expression.a;
		return $elm$core$Maybe$Just(s);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$list_extra$List$Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			if (!list.b) {
				return _List_Nil;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					var $temp$predicate = predicate,
						$temp$list = xs;
					predicate = $temp$predicate;
					list = $temp$list;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				if (!list.b) {
					return $elm$core$List$reverse(memo);
				} else {
					var x = list.a;
					var xs = list.b;
					if (predicate(x)) {
						var $temp$memo = A2($elm$core$List$cons, x, memo),
							$temp$list = xs;
						memo = $temp$memo;
						list = $temp$list;
						continue takeWhileMemo;
					} else {
						return $elm$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(_List_Nil);
};
var $stil4m$elm_syntax$Elm$Processing$findNextSplit = F2(
	function (dict, exps) {
		var assocDirection = A2(
			$elm$core$Maybe$withDefault,
			$stil4m$elm_syntax$Elm$Syntax$Infix$Right,
			A2(
				$elm$core$Maybe$map,
				$stil4m$elm_syntax$Elm$Syntax$Node$value,
				$elm$core$List$head(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$second,
							function ($) {
								return $.direction;
							}),
						$elm$core$Dict$toList(dict)))));
		var prefix = function () {
			if (assocDirection.$ === 'Left') {
				return $elm$core$List$reverse(
					A2(
						$elm$core$List$drop,
						1,
						A2(
							$elm_community$list_extra$List$Extra$dropWhile,
							function (x) {
								return _Utils_eq(
									$elm$core$Maybe$Nothing,
									A2(
										$elm$core$Maybe$andThen,
										function (key) {
											return A2($elm$core$Dict$get, key, dict);
										},
										$stil4m$elm_syntax$Elm$Processing$expressionOperators(x)));
							},
							$elm$core$List$reverse(exps))));
			} else {
				return A2(
					$elm_community$list_extra$List$Extra$takeWhile,
					function (x) {
						return _Utils_eq(
							$elm$core$Maybe$Nothing,
							A2(
								$elm$core$Maybe$andThen,
								function (key) {
									return A2($elm$core$Dict$get, key, dict);
								},
								$stil4m$elm_syntax$Elm$Processing$expressionOperators(x)));
					},
					exps);
			}
		}();
		var suffix = A2(
			$elm$core$List$drop,
			$elm$core$List$length(prefix) + 1,
			exps);
		return A2(
			$elm$core$Maybe$map,
			function (x) {
				return _Utils_Tuple3(prefix, x, suffix);
			},
			A2(
				$elm$core$Maybe$andThen,
				function (x) {
					return A2($elm$core$Dict$get, x, dict);
				},
				A2(
					$elm$core$Maybe$andThen,
					$stil4m$elm_syntax$Elm$Processing$expressionOperators,
					$elm$core$List$head(
						A2(
							$elm$core$List$drop,
							$elm$core$List$length(prefix),
							exps)))));
	});
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $stil4m$elm_syntax$Elm$Processing$lowestPrecedence = function (input) {
	return $elm$core$Dict$fromList(
		A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				function (m) {
					return A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$second,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.precedence;
								},
								A2(
									$elm$core$Basics$composeR,
									$stil4m$elm_syntax$Elm$Syntax$Node$value,
									$elm$core$Basics$eq(m)))),
						input);
				},
				$elm$core$List$minimum(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$second,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.precedence;
								},
								$stil4m$elm_syntax$Elm$Syntax$Node$value)),
						input)))));
};
var $stil4m$elm_syntax$Elm$Processing$fixApplication = F2(
	function (operators, expressions) {
		var ops = $stil4m$elm_syntax$Elm$Processing$lowestPrecedence(
			A2(
				$elm$core$List$map,
				function (x) {
					return _Utils_Tuple2(
						x,
						A2(
							$elm$core$Maybe$withDefault,
							{
								direction: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, $stil4m$elm_syntax$Elm$Syntax$Infix$Left),
								_function: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 'todo'),
								operator: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, x),
								precedence: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, 5)
							},
							A2($elm$core$Dict$get, x, operators)));
				},
				A2($elm$core$List$filterMap, $stil4m$elm_syntax$Elm$Processing$expressionOperators, expressions)));
		var fixExprs = function (exps) {
			if (exps.b && (!exps.b.b)) {
				var _v2 = exps.a;
				var x = _v2.b;
				return x;
			} else {
				return $stil4m$elm_syntax$Elm$Syntax$Expression$Application(exps);
			}
		};
		var divideAndConquer = function (exps) {
			return $elm$core$Dict$isEmpty(ops) ? fixExprs(exps) : A2(
				$elm$core$Maybe$withDefault,
				fixExprs(exps),
				A2(
					$elm$core$Maybe$map,
					function (_v0) {
						var p = _v0.a;
						var infix = _v0.b;
						var s = _v0.c;
						return A4(
							$stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication,
							$stil4m$elm_syntax$Elm$Syntax$Node$value(infix.operator),
							$stil4m$elm_syntax$Elm$Syntax$Node$value(infix.direction),
							A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, p)),
								divideAndConquer(p)),
							A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								$stil4m$elm_syntax$Elm$Syntax$Range$combine(
									A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$range, s)),
								divideAndConquer(s)));
					},
					A2($stil4m$elm_syntax$Elm$Processing$findNextSplit, ops, exps)));
		};
		return divideAndConquer(expressions);
	});
var $stil4m$elm_syntax$Elm$Inspector$Post = function (a) {
	return {$: 'Post', a: a};
};
var $stil4m$elm_syntax$Elm$Inspector$Continue = {$: 'Continue'};
var $stil4m$elm_syntax$Elm$Inspector$defaultConfig = {onCase: $stil4m$elm_syntax$Elm$Inspector$Continue, onDestructuring: $stil4m$elm_syntax$Elm$Inspector$Continue, onExpression: $stil4m$elm_syntax$Elm$Inspector$Continue, onFile: $stil4m$elm_syntax$Elm$Inspector$Continue, onFunction: $stil4m$elm_syntax$Elm$Inspector$Continue, onFunctionOrValue: $stil4m$elm_syntax$Elm$Inspector$Continue, onImport: $stil4m$elm_syntax$Elm$Inspector$Continue, onInfixDeclaration: $stil4m$elm_syntax$Elm$Inspector$Continue, onLambda: $stil4m$elm_syntax$Elm$Inspector$Continue, onLetBlock: $stil4m$elm_syntax$Elm$Inspector$Continue, onOperatorApplication: $stil4m$elm_syntax$Elm$Inspector$Continue, onPortDeclaration: $stil4m$elm_syntax$Elm$Inspector$Continue, onRecordAccess: $stil4m$elm_syntax$Elm$Inspector$Continue, onRecordUpdate: $stil4m$elm_syntax$Elm$Inspector$Continue, onSignature: $stil4m$elm_syntax$Elm$Inspector$Continue, onType: $stil4m$elm_syntax$Elm$Inspector$Continue, onTypeAlias: $stil4m$elm_syntax$Elm$Inspector$Continue, onTypeAnnotation: $stil4m$elm_syntax$Elm$Inspector$Continue};
var $stil4m$elm_syntax$Elm$Inspector$actionLambda = function (act) {
	switch (act.$) {
		case 'Skip':
			return F3(
				function (_v1, _v2, c) {
					return c;
				});
		case 'Continue':
			return F3(
				function (f, _v3, c) {
					return f(c);
				});
		case 'Pre':
			var g = act.a;
			return F3(
				function (f, x, c) {
					return f(
						A2(g, x, c));
				});
		case 'Post':
			var g = act.a;
			return F3(
				function (f, x, c) {
					return A2(
						g,
						x,
						f(c));
				});
		default:
			var g = act.a;
			return F3(
				function (f, x, c) {
					return A3(g, f, x, c);
				});
	}
};
var $stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotation = F3(
	function (config, typeAnnotation, context) {
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onTypeAnnotation,
			A2($stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotationInner, config, typeAnnotation),
			typeAnnotation,
			context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotationInner = F3(
	function (config, _v0, context) {
		var typeRefence = _v0.b;
		switch (typeRefence.$) {
			case 'Typed':
				var typeArgs = typeRefence.b;
				return A3(
					$elm$core$List$foldl,
					$stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotation(config),
					context,
					typeArgs);
			case 'Tupled':
				var typeAnnotations = typeRefence.a;
				return A3(
					$elm$core$List$foldl,
					$stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotation(config),
					context,
					typeAnnotations);
			case 'Record':
				var recordDefinition = typeRefence.a;
				return A3(
					$elm$core$List$foldl,
					$stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotation(config),
					context,
					A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, $elm$core$Tuple$second),
						recordDefinition));
			case 'GenericRecord':
				var recordDefinition = typeRefence.b;
				return A3(
					$elm$core$List$foldl,
					$stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotation(config),
					context,
					A2(
						$elm$core$List$map,
						A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Syntax$Node$value, $elm$core$Tuple$second),
						$stil4m$elm_syntax$Elm$Syntax$Node$value(recordDefinition)));
			case 'FunctionTypeAnnotation':
				var left = typeRefence.a;
				var right = typeRefence.b;
				return A3(
					$elm$core$List$foldl,
					$stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotation(config),
					context,
					_List_fromArray(
						[left, right]));
			case 'Unit':
				return context;
			default:
				return context;
		}
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectSignature = F3(
	function (config, node, context) {
		var signature = node.b;
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onSignature,
			A2($stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotation, config, signature.typeAnnotation),
			node,
			context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectCase = F3(
	function (config, caze, context) {
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onCase,
			A2($stil4m$elm_syntax$Elm$Inspector$inspectExpression, config, caze.b),
			caze,
			context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectDestructuring = F3(
	function (config, destructuring, context) {
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onDestructuring,
			function (c) {
				return A3(
					$stil4m$elm_syntax$Elm$Inspector$inspectExpression,
					config,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(destructuring).b,
					c);
			},
			destructuring,
			context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectExpression = F3(
	function (config, node, context) {
		var expression = node.b;
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onExpression,
			A2($stil4m$elm_syntax$Elm$Inspector$inspectInnerExpression, config, expression),
			node,
			context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectFunction = F3(
	function (config, node, context) {
		var _function = node.b;
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onFunction,
			A2(
				$elm$core$Basics$composeR,
				A2(
					$stil4m$elm_syntax$Elm$Inspector$inspectExpression,
					config,
					$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).expression),
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Basics$identity,
					A2(
						$elm$core$Maybe$map,
						$stil4m$elm_syntax$Elm$Inspector$inspectSignature(config),
						_function.signature))),
			node,
			context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectInnerExpression = F3(
	function (config, expression, context) {
		switch (expression.$) {
			case 'UnitExpr':
				return context;
			case 'FunctionOrValue':
				var moduleName = expression.a;
				var functionOrVal = expression.b;
				return A4(
					$stil4m$elm_syntax$Elm$Inspector$actionLambda,
					config.onFunctionOrValue,
					$elm$core$Basics$identity,
					_Utils_Tuple2(moduleName, functionOrVal),
					context);
			case 'PrefixOperator':
				return context;
			case 'Operator':
				return context;
			case 'Hex':
				return context;
			case 'Integer':
				return context;
			case 'Floatable':
				return context;
			case 'Negation':
				var x = expression.a;
				return A3($stil4m$elm_syntax$Elm$Inspector$inspectExpression, config, x, context);
			case 'Literal':
				return context;
			case 'CharLiteral':
				return context;
			case 'RecordAccess':
				var ex1 = expression.a;
				var key = expression.b;
				return A4(
					$stil4m$elm_syntax$Elm$Inspector$actionLambda,
					config.onRecordAccess,
					A2($stil4m$elm_syntax$Elm$Inspector$inspectExpression, config, ex1),
					_Utils_Tuple2(ex1, key),
					context);
			case 'RecordAccessFunction':
				return context;
			case 'GLSLExpression':
				return context;
			case 'Application':
				var expressionList = expression.a;
				return A3(
					$elm$core$List$foldl,
					$stil4m$elm_syntax$Elm$Inspector$inspectExpression(config),
					context,
					expressionList);
			case 'OperatorApplication':
				var op = expression.a;
				var dir = expression.b;
				var left = expression.c;
				var right = expression.d;
				return A4(
					$stil4m$elm_syntax$Elm$Inspector$actionLambda,
					config.onOperatorApplication,
					function (base) {
						return A3(
							$elm$core$List$foldl,
							$stil4m$elm_syntax$Elm$Inspector$inspectExpression(config),
							base,
							_List_fromArray(
								[left, right]));
					},
					{direction: dir, left: left, operator: op, right: right},
					context);
			case 'IfBlock':
				var e1 = expression.a;
				var e2 = expression.b;
				var e3 = expression.c;
				return A3(
					$elm$core$List$foldl,
					$stil4m$elm_syntax$Elm$Inspector$inspectExpression(config),
					context,
					_List_fromArray(
						[e1, e2, e3]));
			case 'TupledExpression':
				var expressionList = expression.a;
				return A3(
					$elm$core$List$foldl,
					$stil4m$elm_syntax$Elm$Inspector$inspectExpression(config),
					context,
					expressionList);
			case 'ParenthesizedExpression':
				var inner = expression.a;
				return A3($stil4m$elm_syntax$Elm$Inspector$inspectExpression, config, inner, context);
			case 'LetExpression':
				var letBlock = expression.a;
				var next = A2(
					$elm$core$Basics$composeR,
					A2($stil4m$elm_syntax$Elm$Inspector$inspectLetDeclarations, config, letBlock.declarations),
					A2($stil4m$elm_syntax$Elm$Inspector$inspectExpression, config, letBlock.expression));
				return A4($stil4m$elm_syntax$Elm$Inspector$actionLambda, config.onLetBlock, next, letBlock, context);
			case 'CaseExpression':
				var caseBlock = expression.a;
				var context2 = A3($stil4m$elm_syntax$Elm$Inspector$inspectExpression, config, caseBlock.expression, context);
				var context3 = A3(
					$elm$core$List$foldl,
					F2(
						function (a, b) {
							return A3($stil4m$elm_syntax$Elm$Inspector$inspectCase, config, a, b);
						}),
					context2,
					caseBlock.cases);
				return context3;
			case 'LambdaExpression':
				var lambda = expression.a;
				return A4(
					$stil4m$elm_syntax$Elm$Inspector$actionLambda,
					config.onLambda,
					A2($stil4m$elm_syntax$Elm$Inspector$inspectExpression, config, lambda.expression),
					lambda,
					context);
			case 'ListExpr':
				var expressionList = expression.a;
				return A3(
					$elm$core$List$foldl,
					$stil4m$elm_syntax$Elm$Inspector$inspectExpression(config),
					context,
					expressionList);
			case 'RecordExpr':
				var expressionStringList = expression.a;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (a, b) {
							return A3(
								$stil4m$elm_syntax$Elm$Inspector$inspectExpression,
								config,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(a).b,
								b);
						}),
					context,
					expressionStringList);
			default:
				var name = expression.a;
				var updates = expression.b;
				return A4(
					$stil4m$elm_syntax$Elm$Inspector$actionLambda,
					config.onRecordUpdate,
					function (c) {
						return A3(
							$elm$core$List$foldl,
							F2(
								function (a, b) {
									return A3(
										$stil4m$elm_syntax$Elm$Inspector$inspectExpression,
										config,
										$stil4m$elm_syntax$Elm$Syntax$Node$value(a).b,
										b);
								}),
							c,
							updates);
					},
					_Utils_Tuple2(name, updates),
					context);
		}
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectLetDeclaration = F3(
	function (config, _v0, context) {
		var range = _v0.a;
		var declaration = _v0.b;
		if (declaration.$ === 'LetFunction') {
			var _function = declaration.a;
			return A3(
				$stil4m$elm_syntax$Elm$Inspector$inspectFunction,
				config,
				A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, _function),
				context);
		} else {
			var pattern = declaration.a;
			var expression = declaration.b;
			return A3(
				$stil4m$elm_syntax$Elm$Inspector$inspectDestructuring,
				config,
				A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					_Utils_Tuple2(pattern, expression)),
				context);
		}
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectLetDeclarations = F3(
	function (config, declarations, context) {
		return A3(
			$elm$core$List$foldl,
			$stil4m$elm_syntax$Elm$Inspector$inspectLetDeclaration(config),
			context,
			declarations);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectPortDeclaration = F3(
	function (config, signature, context) {
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onPortDeclaration,
			A2($stil4m$elm_syntax$Elm$Inspector$inspectSignature, config, signature),
			signature,
			context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectValueConstructor = F3(
	function (config, _v0, context) {
		var valueConstructor = _v0.b;
		return A3(
			$elm$core$List$foldl,
			$stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotation(config),
			context,
			valueConstructor._arguments);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectTypeInner = F3(
	function (config, typeDecl, context) {
		return A3(
			$elm$core$List$foldl,
			$stil4m$elm_syntax$Elm$Inspector$inspectValueConstructor(config),
			context,
			typeDecl.constructors);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectType = F3(
	function (config, tipe, context) {
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onType,
			A2(
				$stil4m$elm_syntax$Elm$Inspector$inspectTypeInner,
				config,
				$stil4m$elm_syntax$Elm$Syntax$Node$value(tipe)),
			tipe,
			context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectTypeAlias = F3(
	function (config, pair, context) {
		var typeAlias = pair.b;
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onTypeAlias,
			A2($stil4m$elm_syntax$Elm$Inspector$inspectTypeAnnotation, config, typeAlias.typeAnnotation),
			pair,
			context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectDeclaration = F3(
	function (config, _v0, context) {
		var r = _v0.a;
		var declaration = _v0.b;
		switch (declaration.$) {
			case 'FunctionDeclaration':
				var _function = declaration.a;
				return A3(
					$stil4m$elm_syntax$Elm$Inspector$inspectFunction,
					config,
					A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, _function),
					context);
			case 'AliasDeclaration':
				var typeAlias = declaration.a;
				return A3(
					$stil4m$elm_syntax$Elm$Inspector$inspectTypeAlias,
					config,
					A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, typeAlias),
					context);
			case 'CustomTypeDeclaration':
				var typeDecl = declaration.a;
				return A3(
					$stil4m$elm_syntax$Elm$Inspector$inspectType,
					config,
					A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, typeDecl),
					context);
			case 'PortDeclaration':
				var signature = declaration.a;
				return A3(
					$stil4m$elm_syntax$Elm$Inspector$inspectPortDeclaration,
					config,
					A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, signature),
					context);
			case 'InfixDeclaration':
				var inf = declaration.a;
				return A4(
					$stil4m$elm_syntax$Elm$Inspector$actionLambda,
					config.onInfixDeclaration,
					$elm$core$Basics$identity,
					A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, inf),
					context);
			default:
				var pattern = declaration.a;
				var expresion = declaration.b;
				return A3(
					$stil4m$elm_syntax$Elm$Inspector$inspectDestructuring,
					config,
					A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						r,
						_Utils_Tuple2(pattern, expresion)),
					context);
		}
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectDeclarations = F3(
	function (config, declarations, context) {
		return A3(
			$elm$core$List$foldl,
			$stil4m$elm_syntax$Elm$Inspector$inspectDeclaration(config),
			context,
			declarations);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectImport = F3(
	function (config, imp, context) {
		return A4($stil4m$elm_syntax$Elm$Inspector$actionLambda, config.onImport, $elm$core$Basics$identity, imp, context);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspectImports = F3(
	function (config, imports, context) {
		return A3(
			$elm$core$List$foldl,
			$stil4m$elm_syntax$Elm$Inspector$inspectImport(config),
			context,
			imports);
	});
var $stil4m$elm_syntax$Elm$Inspector$inspect = F3(
	function (config, file, context) {
		return A4(
			$stil4m$elm_syntax$Elm$Inspector$actionLambda,
			config.onFile,
			A2(
				$elm$core$Basics$composeR,
				A2($stil4m$elm_syntax$Elm$Inspector$inspectImports, config, file.imports),
				A2($stil4m$elm_syntax$Elm$Inspector$inspectDeclarations, config, file.declarations)),
			file,
			context);
	});
var $stil4m$elm_syntax$Elm$Processing$Documentation$isDocumentationForRange = F2(
	function (range, _v0) {
		var commentRange = _v0.a;
		var commentText = _v0.b;
		if (A2($elm$core$String$startsWith, '{-|', commentText)) {
			var functionStartRow = range.start.row;
			return _Utils_eq(commentRange.end.row + 1, functionStartRow);
		} else {
			return false;
		}
	});
var $stil4m$elm_syntax$Elm$Processing$Documentation$findDocumentationForRange = F2(
	function (range, comments) {
		findDocumentationForRange:
		while (true) {
			if (!comments.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var comment = comments.a;
				var restOfComments = comments.b;
				if (A2($stil4m$elm_syntax$Elm$Processing$Documentation$isDocumentationForRange, range, comment)) {
					return $elm$core$Maybe$Just(comment);
				} else {
					var $temp$range = range,
						$temp$comments = restOfComments;
					range = $temp$range;
					comments = $temp$comments;
					continue findDocumentationForRange;
				}
			}
		}
	});
var $stil4m$elm_syntax$Elm$Processing$Documentation$replaceDeclaration = F2(
	function (_v0, _v1) {
		var r1 = _v0.a;
		var _new = _v0.b;
		var r2 = _v1.a;
		var old = _v1.b;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			r2,
			_Utils_eq(r1, r2) ? _new : old);
	});
var $stil4m$elm_syntax$Elm$Processing$Documentation$onFunction = F2(
	function (_v0, file) {
		var functionRange = _v0.a;
		var _function = _v0.b;
		var _v1 = A2($stil4m$elm_syntax$Elm$Processing$Documentation$findDocumentationForRange, functionRange, file.comments);
		if (_v1.$ === 'Just') {
			var doc = _v1.a;
			var docRange = doc.a;
			var docString = doc.b;
			return _Utils_update(
				file,
				{
					comments: A2(
						$elm$core$List$filter,
						$elm$core$Basics$neq(doc),
						file.comments),
					declarations: A2(
						$elm$core$List$map,
						$stil4m$elm_syntax$Elm$Processing$Documentation$replaceDeclaration(
							A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								functionRange,
								$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
									_Utils_update(
										_function,
										{
											documentation: $elm$core$Maybe$Just(
												A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, docRange, docString))
										})))),
						file.declarations)
				});
		} else {
			return file;
		}
	});
var $stil4m$elm_syntax$Elm$Processing$Documentation$onType = F2(
	function (_v0, file) {
		var r = _v0.a;
		var customType = _v0.b;
		var _v1 = A2($stil4m$elm_syntax$Elm$Processing$Documentation$findDocumentationForRange, r, file.comments);
		if (_v1.$ === 'Just') {
			var doc = _v1.a;
			var docRange = doc.a;
			var docString = doc.b;
			return _Utils_update(
				file,
				{
					comments: A2(
						$elm$core$List$filter,
						$elm$core$Basics$neq(doc),
						file.comments),
					declarations: A2(
						$elm$core$List$map,
						$stil4m$elm_syntax$Elm$Processing$Documentation$replaceDeclaration(
							A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								r,
								$stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(
									_Utils_update(
										customType,
										{
											documentation: $elm$core$Maybe$Just(
												A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, docRange, docString))
										})))),
						file.declarations)
				});
		} else {
			return file;
		}
	});
var $stil4m$elm_syntax$Elm$Processing$Documentation$onTypeAlias = F2(
	function (_v0, file) {
		var r = _v0.a;
		var typeAlias = _v0.b;
		var _v1 = A2($stil4m$elm_syntax$Elm$Processing$Documentation$findDocumentationForRange, r, file.comments);
		if (_v1.$ === 'Just') {
			var doc = _v1.a;
			var docRange = doc.a;
			var docString = doc.b;
			return _Utils_update(
				file,
				{
					comments: A2(
						$elm$core$List$filter,
						$elm$core$Basics$neq(doc),
						file.comments),
					declarations: A2(
						$elm$core$List$map,
						$stil4m$elm_syntax$Elm$Processing$Documentation$replaceDeclaration(
							A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								r,
								$stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(
									_Utils_update(
										typeAlias,
										{
											documentation: $elm$core$Maybe$Just(
												A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, docRange, docString))
										})))),
						file.declarations)
				});
		} else {
			return file;
		}
	});
var $stil4m$elm_syntax$Elm$Processing$Documentation$postProcess = function (file) {
	return A3(
		$stil4m$elm_syntax$Elm$Inspector$inspect,
		_Utils_update(
			$stil4m$elm_syntax$Elm$Inspector$defaultConfig,
			{
				onFunction: $stil4m$elm_syntax$Elm$Inspector$Post($stil4m$elm_syntax$Elm$Processing$Documentation$onFunction),
				onType: $stil4m$elm_syntax$Elm$Inspector$Post($stil4m$elm_syntax$Elm$Processing$Documentation$onType),
				onTypeAlias: $stil4m$elm_syntax$Elm$Inspector$Post($stil4m$elm_syntax$Elm$Processing$Documentation$onTypeAlias)
			}),
		file,
		file);
};
var $stil4m$elm_syntax$Elm$Interface$operators = $elm$core$List$filterMap(
	function (i) {
		if (i.$ === 'Operator') {
			var o = i.a;
			return $elm$core$Maybe$Just(o);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $stil4m$elm_syntax$Elm$Syntax$Exposing$operator = function (t) {
	if (t.$ === 'InfixExpose') {
		var s = t.a;
		return $elm$core$Maybe$Just(s);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$operators = function (l) {
	return A2($elm$core$List$filterMap, $stil4m$elm_syntax$Elm$Syntax$Exposing$operator, l);
};
var $stil4m$elm_syntax$Elm$Processing$buildSingle = F2(
	function (imp, moduleIndex) {
		var _v0 = imp.exposingList;
		if (_v0.$ === 'Nothing') {
			return _List_Nil;
		} else {
			if (_v0.a.b.$ === 'All') {
				var _v1 = _v0.a;
				return A2(
					$elm$core$List$map,
					function (x) {
						return _Utils_Tuple2(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(x.operator),
							x);
					},
					$stil4m$elm_syntax$Elm$Interface$operators(
						A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							A2(
								$elm$core$Dict$get,
								$stil4m$elm_syntax$Elm$Syntax$Node$value(imp.moduleName),
								moduleIndex))));
			} else {
				var _v2 = _v0.a;
				var l = _v2.b.a;
				var selectedOperators = $stil4m$elm_syntax$Elm$Syntax$Exposing$operators(
					A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, l));
				return A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Tuple$first,
						function (elem) {
							return A2($elm$core$List$member, elem, selectedOperators);
						}),
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(x.operator),
								x);
						},
						$stil4m$elm_syntax$Elm$Interface$operators(
							A2(
								$elm$core$Maybe$withDefault,
								_List_Nil,
								A2(
									$elm$core$Dict$get,
									$stil4m$elm_syntax$Elm$Syntax$Node$value(imp.moduleName),
									moduleIndex)))));
			}
		}
	});
var $stil4m$elm_syntax$Elm$DefaultImports$defaults = _List_fromArray(
	[
		{
		exposingList: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$All($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange))),
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Basics']))
	},
		{
		exposingList: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType, 'List', $elm$core$Maybe$Nothing))),
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose('::'))
						])))),
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['List']))
	},
		{
		exposingList: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType,
									'Maybe',
									$elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange))))
						])))),
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Maybe']))
	},
		{
		exposingList: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType,
									'Result',
									$elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange))))
						])))),
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Result']))
	},
		{
		exposingList: $elm$core$Maybe$Nothing,
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['String']))
	},
		{
		exposingList: $elm$core$Maybe$Nothing,
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Tuple']))
	},
		{
		exposingList: $elm$core$Maybe$Nothing,
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Debug']))
	},
		{
		exposingList: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType, 'Program', $elm$core$Maybe$Nothing)))
						])))),
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Platform']))
	},
		{
		exposingList: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType, 'Cmd', $elm$core$Maybe$Nothing))),
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose('!'))
						])))),
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Platform', 'Cmd']))
	},
		{
		exposingList: $elm$core$Maybe$Just(
			A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
				$stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
					_List_fromArray(
						[
							A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								A2($stil4m$elm_syntax$Elm$Syntax$Exposing$ExposedType, 'Sub', $elm$core$Maybe$Nothing)))
						])))),
		moduleAlias: $elm$core$Maybe$Nothing,
		moduleName: A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			$stil4m$elm_syntax$Elm$Syntax$Range$emptyRange,
			_List_fromArray(
				['Platform', 'Sub']))
	}
	]);
var $stil4m$elm_syntax$Elm$RawFile$imports = function (_v0) {
	var file = _v0.a;
	return A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, file.imports);
};
var $stil4m$elm_syntax$Elm$Processing$tableForFile = F2(
	function (rawFile, _v0) {
		var moduleIndex = _v0.a;
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$concatMap,
				function (a) {
					return A2($stil4m$elm_syntax$Elm$Processing$buildSingle, a, moduleIndex);
				},
				_Utils_ap(
					$stil4m$elm_syntax$Elm$DefaultImports$defaults,
					$stil4m$elm_syntax$Elm$RawFile$imports(rawFile))));
	});
var $stil4m$elm_syntax$Elm$Processing$visitExpression = F3(
	function (visitor, context, expression) {
		var inner = A2($stil4m$elm_syntax$Elm$Processing$visitExpressionInner, visitor, context);
		return A3(
			A2(
				$elm$core$Maybe$withDefault,
				F3(
					function (_v4, nest, expr) {
						return nest(expr);
					}),
				visitor),
			context,
			inner,
			expression);
	});
var $stil4m$elm_syntax$Elm$Processing$visitExpressionInner = F3(
	function (visitor, context, _v2) {
		var range = _v2.a;
		var expression = _v2.b;
		var subVisit = A2($stil4m$elm_syntax$Elm$Processing$visitExpression, visitor, context);
		return function (newExpr) {
			return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, newExpr);
		}(
			function () {
				switch (expression.$) {
					case 'Application':
						var expressionList = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$Application(
							A2($elm$core$List$map, subVisit, expressionList));
					case 'OperatorApplication':
						var op = expression.a;
						var dir = expression.b;
						var left = expression.c;
						var right = expression.d;
						return A4(
							$stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication,
							op,
							dir,
							subVisit(left),
							subVisit(right));
					case 'IfBlock':
						var e1 = expression.a;
						var e2 = expression.b;
						var e3 = expression.c;
						return A3(
							$stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock,
							subVisit(e1),
							subVisit(e2),
							subVisit(e3));
					case 'TupledExpression':
						var expressionList = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(
							A2($elm$core$List$map, subVisit, expressionList));
					case 'ParenthesizedExpression':
						var expr1 = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(
							subVisit(expr1));
					case 'LetExpression':
						var letBlock = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression(
							{
								declarations: A3($stil4m$elm_syntax$Elm$Processing$visitLetDeclarations, visitor, context, letBlock.declarations),
								expression: subVisit(letBlock.expression)
							});
					case 'CaseExpression':
						var caseBlock = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression(
							{
								cases: A2(
									$elm$core$List$map,
									$elm$core$Tuple$mapSecond(subVisit),
									caseBlock.cases),
								expression: subVisit(caseBlock.expression)
							});
					case 'LambdaExpression':
						var lambda = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression(
							_Utils_update(
								lambda,
								{
									expression: subVisit(lambda.expression)
								}));
					case 'RecordExpr':
						var expressionStringList = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(
							A2(
								$elm$core$List$map,
								$stil4m$elm_syntax$Elm$Syntax$Node$map(
									$elm$core$Tuple$mapSecond(subVisit)),
								expressionStringList));
					case 'ListExpr':
						var expressionList = expression.a;
						return $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(
							A2($elm$core$List$map, subVisit, expressionList));
					case 'RecordUpdateExpression':
						var name = expression.a;
						var updates = expression.b;
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression,
							name,
							A2(
								$elm$core$List$map,
								$stil4m$elm_syntax$Elm$Syntax$Node$map(
									$elm$core$Tuple$mapSecond(subVisit)),
								updates));
					default:
						return expression;
				}
			}());
	});
var $stil4m$elm_syntax$Elm$Processing$visitFunctionDecl = F3(
	function (visitor, context, _function) {
		var newFunctionDeclaration = A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$map,
			A2($stil4m$elm_syntax$Elm$Processing$visitFunctionDeclaration, visitor, context),
			_function.declaration);
		return _Utils_update(
			_function,
			{declaration: newFunctionDeclaration});
	});
var $stil4m$elm_syntax$Elm$Processing$visitFunctionDeclaration = F3(
	function (visitor, context, functionDeclaration) {
		var newExpression = A3($stil4m$elm_syntax$Elm$Processing$visitExpression, visitor, context, functionDeclaration.expression);
		return _Utils_update(
			functionDeclaration,
			{expression: newExpression});
	});
var $stil4m$elm_syntax$Elm$Processing$visitLetDeclaration = F3(
	function (visitor, context, _v0) {
		var range = _v0.a;
		var declaration = _v0.b;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			range,
			function () {
				if (declaration.$ === 'LetFunction') {
					var _function = declaration.a;
					return $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction(
						A3($stil4m$elm_syntax$Elm$Processing$visitFunctionDecl, visitor, context, _function));
				} else {
					var pattern = declaration.a;
					var expression = declaration.b;
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring,
						pattern,
						A3($stil4m$elm_syntax$Elm$Processing$visitExpression, visitor, context, expression));
				}
			}());
	});
var $stil4m$elm_syntax$Elm$Processing$visitLetDeclarations = F3(
	function (visitor, context, declarations) {
		return A2(
			$elm$core$List$map,
			A2($stil4m$elm_syntax$Elm$Processing$visitLetDeclaration, visitor, context),
			declarations);
	});
var $stil4m$elm_syntax$Elm$Processing$visitDeclaration = F3(
	function (visitor, context, _v0) {
		var range = _v0.a;
		var declaration = _v0.b;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			range,
			function () {
				if (declaration.$ === 'FunctionDeclaration') {
					var _function = declaration.a;
					return $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
						A3($stil4m$elm_syntax$Elm$Processing$visitFunctionDecl, visitor, context, _function));
				} else {
					return declaration;
				}
			}());
	});
var $stil4m$elm_syntax$Elm$Processing$visitDeclarations = F3(
	function (visitor, context, declarations) {
		return A2(
			$elm$core$List$map,
			A2($stil4m$elm_syntax$Elm$Processing$visitDeclaration, visitor, context),
			declarations);
	});
var $stil4m$elm_syntax$Elm$Processing$visit = F3(
	function (visitor, context, file) {
		var newDeclarations = A3($stil4m$elm_syntax$Elm$Processing$visitDeclarations, visitor, context, file.declarations);
		return _Utils_update(
			file,
			{declarations: newDeclarations});
	});
var $stil4m$elm_syntax$Elm$Processing$process = F2(
	function (processContext, rawFile) {
		var file = rawFile.a;
		var table = A2($stil4m$elm_syntax$Elm$Processing$tableForFile, rawFile, processContext);
		var operatorFixed = A3(
			$stil4m$elm_syntax$Elm$Processing$visit,
			$elm$core$Maybe$Just(
				F3(
					function (context, inner, expression) {
						return inner(
							function () {
								if (expression.b.$ === 'Application') {
									var r = expression.a;
									var args = expression.b.a;
									return A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										r,
										A2($stil4m$elm_syntax$Elm$Processing$fixApplication, context, args));
								} else {
									return expression;
								}
							}());
					})),
			table,
			file);
		var documentationFixed = $stil4m$elm_syntax$Elm$Processing$Documentation$postProcess(operatorFixed);
		return documentationFixed;
	});
var $author$project$Morphir$Elm$ParsedModule$parsedModule = function (rawFile) {
	return $author$project$Morphir$Elm$ParsedModule$ParsedModule(
		A2(
			$stil4m$elm_syntax$Elm$Processing$process,
			$author$project$Morphir$Elm$ParsedModule$withWellKnownOperators($author$project$Morphir$Elm$ParsedModule$initialContext),
			rawFile));
};
var $author$project$Morphir$Elm$IncrementalFrontend$parseSource = function (_v0) {
	var path = _v0.a;
	var content = _v0.b;
	return A2(
		$elm$core$Result$map,
		$author$project$Morphir$Elm$ParsedModule$parsedModule,
		A2(
			$elm$core$Result$mapError,
			$author$project$Morphir$Elm$IncrementalFrontend$ParseError(path),
			$stil4m$elm_syntax$Elm$Parser$parse(content)));
};
var $author$project$Morphir$File$FileChanges$partitionByType = function (fileChanges) {
	return {
		deletes: $elm$core$Set$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v0) {
					var path = _v0.a;
					var fileChange = _v0.b;
					if (fileChange.$ === 'Delete') {
						return $elm$core$Maybe$Just(path);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				},
				$elm$core$Dict$toList(fileChanges))),
		inserts: $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v2) {
					var path = _v2.a;
					var fileChange = _v2.b;
					if (fileChange.$ === 'Insert') {
						var content = fileChange.a;
						return $elm$core$Maybe$Just(
							_Utils_Tuple2(path, content));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				},
				$elm$core$Dict$toList(fileChanges))),
		updates: $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v4) {
					var path = _v4.a;
					var fileChange = _v4.b;
					if (fileChange.$ === 'Update') {
						var content = fileChange.a;
						return $elm$core$Maybe$Just(
							_Utils_Tuple2(path, content));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				},
				$elm$core$Dict$toList(fileChanges)))
	};
};
var $author$project$Morphir$Elm$IncrementalFrontend$ModuleDelete = function (a) {
	return {$: 'ModuleDelete', a: a};
};
var $author$project$Morphir$Elm$IncrementalFrontend$ModuleInsert = F2(
	function (a, b) {
		return {$: 'ModuleInsert', a: a, b: b};
	});
var $author$project$Morphir$Elm$IncrementalFrontend$ModuleUpdate = F2(
	function (a, b) {
		return {$: 'ModuleUpdate', a: a, b: b};
	});
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $elm_community$list_extra$List$Extra$elemIndex = function (x) {
	return $elm_community$list_extra$List$Extra$findIndex(
		$elm$core$Basics$eq(x));
};
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $elm_community$list_extra$List$Extra$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $author$project$Morphir$Elm$IncrementalFrontend$reOrderChanges = F2(
	function (repo, orderedFileChanges) {
		var updateAndInsertsAsDict = $elm$core$Dict$fromList(orderedFileChanges.insertsAndUpdates);
		var updatesAndDeletesChanges = A2(
			$elm$core$List$filterMap,
			function (modName) {
				var _v8 = A2($elm$core$Dict$get, modName, updateAndInsertsAsDict);
				if (_v8.$ === 'Just') {
					var parsedModule = _v8.a;
					return $elm$core$Maybe$Just(
						A2($author$project$Morphir$Elm$IncrementalFrontend$ModuleUpdate, modName, parsedModule));
				} else {
					return A2($elm$core$Set$member, modName, orderedFileChanges.deletes) ? $elm$core$Maybe$Just(
						$author$project$Morphir$Elm$IncrementalFrontend$ModuleDelete(modName)) : $elm$core$Maybe$Nothing;
				}
			},
			A3(
				$elm$core$Basics$composeR,
				$author$project$Morphir$Dependency$DAG$forwardTopologicalOrdering,
				$elm$core$List$concat,
				$author$project$Morphir$IR$Repo$moduleDependencies(repo)));
		var insertsAndUpdatesChanges = A2(
			$elm$core$List$map,
			function (_v7) {
				var modName = _v7.a;
				var parsedModule = _v7.b;
				return function (existingMods) {
					return A2($elm$core$Dict$member, modName, existingMods) ? A2($author$project$Morphir$Elm$IncrementalFrontend$ModuleUpdate, modName, parsedModule) : A2($author$project$Morphir$Elm$IncrementalFrontend$ModuleInsert, modName, parsedModule);
				}(
					$author$project$Morphir$IR$Repo$modules(repo));
			},
			orderedFileChanges.insertsAndUpdates);
		var insertAfterOrBefore = F4(
			function (after, before, item, list) {
				var insertAt = function (index) {
					var _v6 = A2($elm_community$list_extra$List$Extra$splitAt, index, list);
					var firstPart = _v6.a;
					var secondPart = _v6.b;
					return $elm$core$List$concat(
						_List_fromArray(
							[
								firstPart,
								_List_fromArray(
								[item]),
								secondPart
							]));
				};
				var tryInsertBefore = function () {
					if (before.$ === 'Just') {
						var beforeValue = before.a;
						var _v5 = A2($elm_community$list_extra$List$Extra$elemIndex, beforeValue, list);
						if (_v5.$ === 'Just') {
							var index = _v5.a;
							return insertAt(index);
						} else {
							return list;
						}
					} else {
						return list;
					}
				}();
				var tryInsertAfter = function () {
					if (after.$ === 'Just') {
						var afterValue = after.a;
						var _v3 = A2($elm_community$list_extra$List$Extra$elemIndex, afterValue, list);
						if (_v3.$ === 'Just') {
							var index = _v3.a;
							return insertAt(index + 1);
						} else {
							return tryInsertBefore;
						}
					} else {
						return tryInsertBefore;
					}
				}();
				return tryInsertAfter;
			});
		var allChangesMerged = A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, mergeSoFar) {
					var change = _v0.a;
					var idx = _v0.b;
					switch (change.$) {
						case 'ModuleInsert':
							return mergeSoFar;
						case 'ModuleUpdate':
							return A4(
								insertAfterOrBefore,
								A2($elm_community$list_extra$List$Extra$getAt, idx - 1, updatesAndDeletesChanges),
								A2($elm_community$list_extra$List$Extra$getAt, idx + 1, updatesAndDeletesChanges),
								change,
								mergeSoFar);
						default:
							return A4(
								insertAfterOrBefore,
								A2($elm_community$list_extra$List$Extra$getAt, idx - 1, updatesAndDeletesChanges),
								A2($elm_community$list_extra$List$Extra$getAt, idx + 1, updatesAndDeletesChanges),
								change,
								mergeSoFar);
					}
				}),
			insertsAndUpdatesChanges,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (idx, change) {
						return _Utils_Tuple2(change, idx);
					}),
				updatesAndDeletesChanges));
		return allChangesMerged;
	});
var $author$project$Morphir$Elm$IncrementalFrontend$orderFileChanges = F3(
	function (packageName, repo, fileChanges) {
		var parseSources = function (sources) {
			return $author$project$Morphir$SDK$ResultList$keepAllErrors(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var path = _v0.a;
						var source = _v0.b;
						return $author$project$Morphir$Elm$IncrementalFrontend$parseSource(
							_Utils_Tuple2(path, source));
					},
					$elm$core$Dict$toList(sources)));
		};
		var filePathsToModuleNames = function (paths) {
			return A2(
				$elm$core$Result$map,
				$elm$core$Set$fromList,
				$author$project$Morphir$SDK$ResultList$keepAllErrors(
					A2(
						$elm$core$List$map,
						$author$project$Morphir$Elm$IncrementalFrontend$filePathToModuleName(packageName),
						$elm$core$Set$toList(paths))));
		};
		var fileChangesByType = $author$project$Morphir$File$FileChanges$partitionByType(fileChanges);
		var parsedInsertsAndUpdates = A3(
			$elm$core$Result$map2,
			$elm$core$Basics$append,
			parseSources(fileChangesByType.inserts),
			parseSources(fileChangesByType.updates));
		var orderedFileChanges = A3(
			$elm$core$Result$map2,
			$author$project$Morphir$Elm$IncrementalFrontend$OrderedFileChanges,
			A2(
				$elm$core$Result$andThen,
				$author$project$Morphir$Elm$IncrementalFrontend$orderElmModulesByDependency(packageName),
				parsedInsertsAndUpdates),
			filePathsToModuleNames(fileChangesByType.deletes));
		return A2(
			$elm$core$Result$map,
			$author$project$Morphir$Elm$IncrementalFrontend$reOrderChanges(repo),
			orderedFileChanges);
	});
var $author$project$Morphir$Elm$CLI$buildCompleted = _Platform_outgoingPort('buildCompleted', $elm$core$Basics$identity);
var $author$project$Morphir$IR$AccessControlled$Codec$encodeAccess = function (access) {
	if (access.$ === 'Public') {
		return $elm$json$Json$Encode$string('Public');
	} else {
		return $elm$json$Json$Encode$string('Private');
	}
};
var $author$project$Morphir$IR$AccessControlled$Codec$encodeAccessControlled = F2(
	function (encodeValue, ac) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'access',
					$author$project$Morphir$IR$AccessControlled$Codec$encodeAccess(ac.access)),
					_Utils_Tuple2(
					'value',
					encodeValue(ac.value))
				]));
	});
var $author$project$Morphir$IR$Type$Codec$encodeField = F2(
	function (encodeAttributes, field) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'name',
					$author$project$Morphir$IR$Name$Codec$encodeName(field.name)),
					_Utils_Tuple2(
					'tpe',
					A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeAttributes, field.tpe))
				]));
	});
var $author$project$Morphir$IR$Type$Codec$encodeType = F2(
	function (encodeAttributes, tpe) {
		switch (tpe.$) {
			case 'Variable':
				var a = tpe.a;
				var name = tpe.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('Variable'),
							encodeAttributes(a),
							$author$project$Morphir$IR$Name$Codec$encodeName(name)
						]));
			case 'Reference':
				var a = tpe.a;
				var typeName = tpe.b;
				var typeParameters = tpe.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('Reference'),
							encodeAttributes(a),
							$author$project$Morphir$IR$FQName$Codec$encodeFQName(typeName),
							A2(
							$elm$json$Json$Encode$list,
							$author$project$Morphir$IR$Type$Codec$encodeType(encodeAttributes),
							typeParameters)
						]));
			case 'Tuple':
				var a = tpe.a;
				var elementTypes = tpe.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('Tuple'),
							encodeAttributes(a),
							A2(
							$elm$json$Json$Encode$list,
							$author$project$Morphir$IR$Type$Codec$encodeType(encodeAttributes),
							elementTypes)
						]));
			case 'Record':
				var a = tpe.a;
				var fieldTypes = tpe.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('Record'),
							encodeAttributes(a),
							A2(
							$elm$json$Json$Encode$list,
							$author$project$Morphir$IR$Type$Codec$encodeField(encodeAttributes),
							fieldTypes)
						]));
			case 'ExtensibleRecord':
				var a = tpe.a;
				var variableName = tpe.b;
				var fieldTypes = tpe.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('ExtensibleRecord'),
							encodeAttributes(a),
							$author$project$Morphir$IR$Name$Codec$encodeName(variableName),
							A2(
							$elm$json$Json$Encode$list,
							$author$project$Morphir$IR$Type$Codec$encodeField(encodeAttributes),
							fieldTypes)
						]));
			case 'Function':
				var a = tpe.a;
				var argumentType = tpe.b;
				var returnType = tpe.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('Function'),
							encodeAttributes(a),
							A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeAttributes, argumentType),
							A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeAttributes, returnType)
						]));
			default:
				var a = tpe.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('Unit'),
							encodeAttributes(a)
						]));
		}
	});
var $author$project$Morphir$IR$Type$Codec$encodeConstructors = F2(
	function (encodeAttributes, ctors) {
		return A2(
			$elm$json$Json$Encode$list,
			function (_v0) {
				var ctorName = _v0.a;
				var ctorArgs = _v0.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$author$project$Morphir$IR$Name$Codec$encodeName(ctorName),
							A2(
							$elm$json$Json$Encode$list,
							function (_v1) {
								var argName = _v1.a;
								var argType = _v1.b;
								return A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									_List_fromArray(
										[
											$author$project$Morphir$IR$Name$Codec$encodeName(argName),
											A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeAttributes, argType)
										]));
							},
							ctorArgs)
						]));
			},
			$elm$core$Dict$toList(ctors));
	});
var $author$project$Morphir$IR$Type$Codec$encodeDefinition = F2(
	function (encodeAttributes, def) {
		if (def.$ === 'TypeAliasDefinition') {
			var params = def.a;
			var exp = def.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('TypeAliasDefinition'),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$IR$Name$Codec$encodeName, params),
						A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeAttributes, exp)
					]));
		} else {
			var params = def.a;
			var ctors = def.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('CustomTypeDefinition'),
						A2($elm$json$Json$Encode$list, $author$project$Morphir$IR$Name$Codec$encodeName, params),
						A2(
						$author$project$Morphir$IR$AccessControlled$Codec$encodeAccessControlled,
						$author$project$Morphir$IR$Type$Codec$encodeConstructors(encodeAttributes),
						ctors)
					]));
		}
	});
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$Morphir$IR$Literal$Codec$encodeLiteral = function (l) {
	switch (l.$) {
		case 'BoolLiteral':
			var v = l.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('BoolLiteral'),
						$elm$json$Json$Encode$bool(v)
					]));
		case 'CharLiteral':
			var v = l.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('CharLiteral'),
						$elm$json$Json$Encode$string(
						$elm$core$String$fromChar(v))
					]));
		case 'StringLiteral':
			var v = l.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('StringLiteral'),
						$elm$json$Json$Encode$string(v)
					]));
		case 'WholeNumberLiteral':
			var v = l.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('WholeNumberLiteral'),
						$elm$json$Json$Encode$int(v)
					]));
		case 'FloatLiteral':
			var v = l.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('FloatLiteral'),
						$elm$json$Json$Encode$float(v)
					]));
		default:
			var v = l.a;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string('DecimalLiteral'),
						$elm$json$Json$Encode$string(
						$author$project$Morphir$SDK$Decimal$toString(v))
					]));
	}
};
var $author$project$Morphir$IR$Value$Codec$encodePattern = F2(
	function (encodeAttributes, pattern) {
		switch (pattern.$) {
			case 'WildcardPattern':
				var a = pattern.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('wildcard_pattern'),
							encodeAttributes(a)
						]));
			case 'AsPattern':
				var a = pattern.a;
				var p = pattern.b;
				var name = pattern.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('as_pattern'),
							encodeAttributes(a),
							A2($author$project$Morphir$IR$Value$Codec$encodePattern, encodeAttributes, p),
							$author$project$Morphir$IR$Name$Codec$encodeName(name)
						]));
			case 'TuplePattern':
				var a = pattern.a;
				var elementPatterns = pattern.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('tuple_pattern'),
							encodeAttributes(a),
							A2(
							$elm$json$Json$Encode$list,
							$author$project$Morphir$IR$Value$Codec$encodePattern(encodeAttributes),
							elementPatterns)
						]));
			case 'ConstructorPattern':
				var a = pattern.a;
				var constructorName = pattern.b;
				var argumentPatterns = pattern.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('constructor_pattern'),
							encodeAttributes(a),
							$author$project$Morphir$IR$FQName$Codec$encodeFQName(constructorName),
							A2(
							$elm$json$Json$Encode$list,
							$author$project$Morphir$IR$Value$Codec$encodePattern(encodeAttributes),
							argumentPatterns)
						]));
			case 'EmptyListPattern':
				var a = pattern.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('empty_list_pattern'),
							encodeAttributes(a)
						]));
			case 'HeadTailPattern':
				var a = pattern.a;
				var headPattern = pattern.b;
				var tailPattern = pattern.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('head_tail_pattern'),
							encodeAttributes(a),
							A2($author$project$Morphir$IR$Value$Codec$encodePattern, encodeAttributes, headPattern),
							A2($author$project$Morphir$IR$Value$Codec$encodePattern, encodeAttributes, tailPattern)
						]));
			case 'LiteralPattern':
				var a = pattern.a;
				var value = pattern.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('literal_pattern'),
							encodeAttributes(a),
							$author$project$Morphir$IR$Literal$Codec$encodeLiteral(value)
						]));
			default:
				var a = pattern.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('unit_pattern'),
							encodeAttributes(a)
						]));
		}
	});
var $author$project$Morphir$IR$Value$Codec$encodeDefinition = F3(
	function (encodeTypeAttributes, encodeValueAttributes, def) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'inputTypes',
					A2(
						$elm$json$Json$Encode$list,
						function (_v5) {
							var argName = _v5.a;
							var a = _v5.b;
							var argType = _v5.c;
							return A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$author$project$Morphir$IR$Name$Codec$encodeName(argName),
										encodeValueAttributes(a),
										A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeTypeAttributes, argType)
									]));
						},
						def.inputTypes)),
					_Utils_Tuple2(
					'outputType',
					A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeTypeAttributes, def.outputType)),
					_Utils_Tuple2(
					'body',
					A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, def.body))
				]));
	});
var $author$project$Morphir$IR$Value$Codec$encodeValue = F3(
	function (encodeTypeAttributes, encodeValueAttributes, v) {
		switch (v.$) {
			case 'Literal':
				var a = v.a;
				var value = v.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('literal'),
							encodeValueAttributes(a),
							$author$project$Morphir$IR$Literal$Codec$encodeLiteral(value)
						]));
			case 'Constructor':
				var a = v.a;
				var fullyQualifiedName = v.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('constructor'),
							encodeValueAttributes(a),
							$author$project$Morphir$IR$FQName$Codec$encodeFQName(fullyQualifiedName)
						]));
			case 'Tuple':
				var a = v.a;
				var elements = v.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('tuple'),
							encodeValueAttributes(a),
							A2(
							$elm$json$Json$Encode$list,
							A2($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes),
							elements)
						]));
			case 'List':
				var a = v.a;
				var items = v.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('list'),
							encodeValueAttributes(a),
							A2(
							$elm$json$Json$Encode$list,
							A2($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes),
							items)
						]));
			case 'Record':
				var a = v.a;
				var fields = v.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('record'),
							encodeValueAttributes(a),
							A2(
							$elm$json$Json$Encode$list,
							function (_v1) {
								var fieldName = _v1.a;
								var fieldValue = _v1.b;
								return A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									_List_fromArray(
										[
											$author$project$Morphir$IR$Name$Codec$encodeName(fieldName),
											A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, fieldValue)
										]));
							},
							$elm$core$Dict$toList(fields))
						]));
			case 'Variable':
				var a = v.a;
				var name = v.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('variable'),
							encodeValueAttributes(a),
							$author$project$Morphir$IR$Name$Codec$encodeName(name)
						]));
			case 'Reference':
				var a = v.a;
				var fullyQualifiedName = v.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('reference'),
							encodeValueAttributes(a),
							$author$project$Morphir$IR$FQName$Codec$encodeFQName(fullyQualifiedName)
						]));
			case 'Field':
				var a = v.a;
				var subjectValue = v.b;
				var fieldName = v.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('field'),
							encodeValueAttributes(a),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, subjectValue),
							$author$project$Morphir$IR$Name$Codec$encodeName(fieldName)
						]));
			case 'FieldFunction':
				var a = v.a;
				var fieldName = v.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('field_function'),
							encodeValueAttributes(a),
							$author$project$Morphir$IR$Name$Codec$encodeName(fieldName)
						]));
			case 'Apply':
				var a = v.a;
				var _function = v.b;
				var argument = v.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('apply'),
							encodeValueAttributes(a),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, _function),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, argument)
						]));
			case 'Lambda':
				var a = v.a;
				var argumentPattern = v.b;
				var body = v.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('lambda'),
							encodeValueAttributes(a),
							A2($author$project$Morphir$IR$Value$Codec$encodePattern, encodeValueAttributes, argumentPattern),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, body)
						]));
			case 'LetDefinition':
				var a = v.a;
				var valueName = v.b;
				var valueDefinition = v.c;
				var inValue = v.d;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('let_definition'),
							encodeValueAttributes(a),
							$author$project$Morphir$IR$Name$Codec$encodeName(valueName),
							A3($author$project$Morphir$IR$Value$Codec$encodeDefinition, encodeTypeAttributes, encodeValueAttributes, valueDefinition),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, inValue)
						]));
			case 'LetRecursion':
				var a = v.a;
				var valueDefinitions = v.b;
				var inValue = v.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('let_recursion'),
							encodeValueAttributes(a),
							A2(
							$elm$json$Json$Encode$list,
							function (_v2) {
								var name = _v2.a;
								var def = _v2.b;
								return A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									_List_fromArray(
										[
											$author$project$Morphir$IR$Name$Codec$encodeName(name),
											A3($author$project$Morphir$IR$Value$Codec$encodeDefinition, encodeTypeAttributes, encodeValueAttributes, def)
										]));
							},
							$elm$core$Dict$toList(valueDefinitions)),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, inValue)
						]));
			case 'Destructure':
				var a = v.a;
				var pattern = v.b;
				var valueToDestruct = v.c;
				var inValue = v.d;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('destructure'),
							encodeValueAttributes(a),
							A2($author$project$Morphir$IR$Value$Codec$encodePattern, encodeValueAttributes, pattern),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, valueToDestruct),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, inValue)
						]));
			case 'IfThenElse':
				var a = v.a;
				var condition = v.b;
				var thenBranch = v.c;
				var elseBranch = v.d;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('if_then_else'),
							encodeValueAttributes(a),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, condition),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, thenBranch),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, elseBranch)
						]));
			case 'PatternMatch':
				var a = v.a;
				var branchOutOn = v.b;
				var cases = v.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('pattern_match'),
							encodeValueAttributes(a),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, branchOutOn),
							A2(
							$elm$json$Json$Encode$list,
							function (_v3) {
								var pattern = _v3.a;
								var body = _v3.b;
								return A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									_List_fromArray(
										[
											A2($author$project$Morphir$IR$Value$Codec$encodePattern, encodeValueAttributes, pattern),
											A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, body)
										]));
							},
							cases)
						]));
			case 'UpdateRecord':
				var a = v.a;
				var valueToUpdate = v.b;
				var fieldsToUpdate = v.c;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('update_record'),
							encodeValueAttributes(a),
							A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, valueToUpdate),
							A2(
							$elm$json$Json$Encode$list,
							function (_v4) {
								var fieldName = _v4.a;
								var fieldValue = _v4.b;
								return A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									_List_fromArray(
										[
											$author$project$Morphir$IR$Name$Codec$encodeName(fieldName),
											A3($author$project$Morphir$IR$Value$Codec$encodeValue, encodeTypeAttributes, encodeValueAttributes, fieldValue)
										]));
							},
							$elm$core$Dict$toList(fieldsToUpdate))
						]));
			default:
				var a = v.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('unit'),
							encodeValueAttributes(a)
						]));
		}
	});
var $author$project$Morphir$IR$Documented$Codec$encodeDocumented = F2(
	function (encodeValue, d) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'doc',
					$elm$json$Json$Encode$string(d.doc)),
					_Utils_Tuple2(
					'value',
					encodeValue(d.value))
				]));
	});
var $author$project$Morphir$IR$Module$Codec$encodeDefinition = F3(
	function (encodeTypeAttributes, encodeValueAttributes, def) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'types',
					A2(
						$elm$json$Json$Encode$list,
						function (_v0) {
							var name = _v0.a;
							var typeDef = _v0.b;
							return A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$author$project$Morphir$IR$Name$Codec$encodeName(name),
										A2(
										$author$project$Morphir$IR$AccessControlled$Codec$encodeAccessControlled,
										$author$project$Morphir$IR$Documented$Codec$encodeDocumented(
											$author$project$Morphir$IR$Type$Codec$encodeDefinition(encodeTypeAttributes)),
										typeDef)
									]));
						},
						$elm$core$Dict$toList(def.types))),
					_Utils_Tuple2(
					'values',
					A2(
						$elm$json$Json$Encode$list,
						function (_v1) {
							var name = _v1.a;
							var valueDef = _v1.b;
							return A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$author$project$Morphir$IR$Name$Codec$encodeName(name),
										A2(
										$author$project$Morphir$IR$AccessControlled$Codec$encodeAccessControlled,
										$author$project$Morphir$IR$Documented$Codec$encodeDocumented(
											A2($author$project$Morphir$IR$Value$Codec$encodeDefinition, encodeTypeAttributes, encodeValueAttributes)),
										valueDef)
									]));
						},
						$elm$core$Dict$toList(def.values))),
					_Utils_Tuple2(
					'doc',
					A2(
						$elm$core$Maybe$withDefault,
						$elm$json$Json$Encode$null,
						A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, def.doc)))
				]));
	});
var $author$project$Morphir$IR$Name$CodecV1$encodeName = function (name) {
	return A2(
		$elm$json$Json$Encode$list,
		$elm$json$Json$Encode$string,
		$author$project$Morphir$IR$Name$toList(name));
};
var $author$project$Morphir$IR$Path$CodecV1$encodePath = function (path) {
	return A2(
		$elm$json$Json$Encode$list,
		$author$project$Morphir$IR$Name$CodecV1$encodeName,
		$author$project$Morphir$IR$Path$toList(path));
};
var $author$project$Morphir$IR$Package$Codec$encodeDefinition = F3(
	function (encodeTypeAttributes, encodeValueAttributes, def) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'modules',
					A2(
						$elm$json$Json$Encode$list,
						function (_v0) {
							var moduleName = _v0.a;
							var moduleDef = _v0.b;
							return A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$author$project$Morphir$IR$Path$CodecV1$encodePath(moduleName),
										A2(
										$author$project$Morphir$IR$AccessControlled$Codec$encodeAccessControlled,
										A2($author$project$Morphir$IR$Module$Codec$encodeDefinition, encodeTypeAttributes, encodeValueAttributes),
										moduleDef)
									]));
						},
						$elm$core$Dict$toList(def.modules)))
				]));
	});
var $author$project$Morphir$IR$Type$Codec$encodeSpecification = F2(
	function (encodeAttributes, spec) {
		switch (spec.$) {
			case 'TypeAliasSpecification':
				var params = spec.a;
				var exp = spec.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('TypeAliasSpecification'),
							A2($elm$json$Json$Encode$list, $author$project$Morphir$IR$Name$Codec$encodeName, params),
							A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeAttributes, exp)
						]));
			case 'OpaqueTypeSpecification':
				var params = spec.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('OpaqueTypeSpecification'),
							A2($elm$json$Json$Encode$list, $author$project$Morphir$IR$Name$Codec$encodeName, params)
						]));
			case 'CustomTypeSpecification':
				var params = spec.a;
				var ctors = spec.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('CustomTypeSpecification'),
							A2($elm$json$Json$Encode$list, $author$project$Morphir$IR$Name$Codec$encodeName, params),
							A2($author$project$Morphir$IR$Type$Codec$encodeConstructors, encodeAttributes, ctors)
						]));
			default:
				var params = spec.a;
				var config = spec.b;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$string('DerivedTypeSpecification'),
							A2($elm$json$Json$Encode$list, $author$project$Morphir$IR$Name$Codec$encodeName, params),
							$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'baseType',
									A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeAttributes, config.baseType)),
									_Utils_Tuple2(
									'fromBaseType',
									$author$project$Morphir$IR$FQName$Codec$encodeFQName(config.fromBaseType)),
									_Utils_Tuple2(
									'toBaseType',
									$author$project$Morphir$IR$FQName$Codec$encodeFQName(config.toBaseType))
								]))
						]));
		}
	});
var $author$project$Morphir$IR$Value$Codec$encodeSpecification = F2(
	function (encodeAttributes, spec) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'inputs',
					A2(
						$elm$json$Json$Encode$list,
						function (_v0) {
							var argName = _v0.a;
							var argType = _v0.b;
							return A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$author$project$Morphir$IR$Name$Codec$encodeName(argName),
										A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeAttributes, argType)
									]));
						},
						spec.inputs)),
					_Utils_Tuple2(
					'output',
					A2($author$project$Morphir$IR$Type$Codec$encodeType, encodeAttributes, spec.output))
				]));
	});
var $author$project$Morphir$IR$Module$Codec$encodeSpecification = F2(
	function (encodeTypeAttributes, spec) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'types',
					A2(
						$elm$json$Json$Encode$list,
						function (_v0) {
							var name = _v0.a;
							var typeSpec = _v0.b;
							return A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$author$project$Morphir$IR$Name$Codec$encodeName(name),
										A2(
										$author$project$Morphir$IR$Documented$Codec$encodeDocumented,
										$author$project$Morphir$IR$Type$Codec$encodeSpecification(encodeTypeAttributes),
										typeSpec)
									]));
						},
						$elm$core$Dict$toList(spec.types))),
					_Utils_Tuple2(
					'values',
					A2(
						$elm$json$Json$Encode$list,
						function (_v1) {
							var name = _v1.a;
							var valueSpec = _v1.b;
							return A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$author$project$Morphir$IR$Name$Codec$encodeName(name),
										A2(
										$author$project$Morphir$IR$Documented$Codec$encodeDocumented,
										$author$project$Morphir$IR$Value$Codec$encodeSpecification(encodeTypeAttributes),
										valueSpec)
									]));
						},
						$elm$core$Dict$toList(spec.values))),
					_Utils_Tuple2(
					'doc',
					A2(
						$elm$core$Maybe$withDefault,
						$elm$json$Json$Encode$null,
						A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, spec.doc)))
				]));
	});
var $author$project$Morphir$IR$Package$Codec$encodeSpecification = F2(
	function (encodeTypeAttributes, spec) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'modules',
					A2(
						$elm$json$Json$Encode$list,
						function (_v0) {
							var moduleName = _v0.a;
							var moduleSpec = _v0.b;
							return A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										$author$project$Morphir$IR$Path$CodecV1$encodePath(moduleName),
										A2($author$project$Morphir$IR$Module$Codec$encodeSpecification, encodeTypeAttributes, moduleSpec)
									]));
						},
						$elm$core$Dict$toList(spec.modules)))
				]));
	});
var $author$project$Morphir$Codec$encodeUnit = function (_v0) {
	return $elm$json$Json$Encode$object(_List_Nil);
};
var $author$project$Morphir$IR$Distribution$Codec$encodeDistribution = function (distro) {
	var packagePath = distro.a;
	var dependencies = distro.b;
	var def = distro.c;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$core$Basics$identity,
		_List_fromArray(
			[
				$elm$json$Json$Encode$string('Library'),
				$author$project$Morphir$IR$Path$Codec$encodePath(packagePath),
				A2(
				$elm$json$Json$Encode$list,
				function (_v1) {
					var packageName = _v1.a;
					var packageSpec = _v1.b;
					return A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								$author$project$Morphir$IR$Path$Codec$encodePath(packageName),
								A2($author$project$Morphir$IR$Package$Codec$encodeSpecification, $author$project$Morphir$Codec$encodeUnit, packageSpec)
							]));
				},
				$elm$core$Dict$toList(dependencies)),
				A3(
				$author$project$Morphir$IR$Package$Codec$encodeDefinition,
				$author$project$Morphir$Codec$encodeUnit,
				$author$project$Morphir$IR$Type$Codec$encodeType($author$project$Morphir$Codec$encodeUnit),
				def)
			]));
};
var $author$project$Morphir$IR$Distribution$Codec$encodeVersionedDistribution = function (distro) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'formatVersion',
				$elm$json$Json$Encode$int($author$project$Morphir$IR$Distribution$Codec$currentFormatVersion)),
				_Utils_Tuple2(
				'distribution',
				$author$project$Morphir$IR$Distribution$Codec$encodeDistribution(distro))
			]));
};
var $author$project$Morphir$Elm$CLI$returnDistribution = function (repoResult) {
	var removeDependencies = function (_v0) {
		var packageName = _v0.a;
		var packageDefinition = _v0.c;
		return A3($author$project$Morphir$IR$Distribution$Library, packageName, $elm$core$Dict$empty, packageDefinition);
	};
	return $author$project$Morphir$Elm$CLI$buildCompleted(
		A3(
			$author$project$Morphir$Elm$CLI$encodeResult,
			$elm$json$Json$Encode$list($author$project$Morphir$Elm$IncrementalFrontend$Codec$encodeError),
			$author$project$Morphir$IR$Distribution$Codec$encodeVersionedDistribution,
			A2(
				$elm$core$Result$map,
				removeDependencies,
				A2($elm$core$Result$map, $author$project$Morphir$IR$Repo$toDistribution, repoResult))));
};
var $author$project$Morphir$Elm$CLI$statsResult = _Platform_outgoingPort('statsResult', $elm$core$Basics$identity);
var $author$project$Morphir$Elm$CLI$testCoverageResult = _Platform_outgoingPort('testCoverageResult', $elm$core$Basics$identity);
var $author$project$Morphir$File$FileSnapshot$toInserts = function (fileSnapshot) {
	return A2(
		$elm$core$Dict$map,
		F2(
			function (_v0, content) {
				return $author$project$Morphir$File$FileChanges$Insert(content);
			}),
		fileSnapshot);
};
var $author$project$Morphir$Elm$CLI$process = function (msg) {
	switch (msg.$) {
		case 'BuildFromScratch':
			var jsonInput = msg.a;
			var insertDependenciesIntoRepo = F2(
				function (dependencyList, repo) {
					return A3(
						$elm$core$List$foldl,
						F2(
							function (distro, repoResult) {
								var dependencySpec = $author$project$Morphir$IR$Distribution$lookupPackageSpecification(distro);
								var dependencyName = $author$project$Morphir$IR$Distribution$lookupPackageName(distro);
								return A2(
									$elm$core$Result$andThen,
									A2($author$project$Morphir$IR$Repo$insertDependencySpecification, dependencyName, dependencySpec),
									repoResult);
							}),
						$elm$core$Result$Ok(repo),
						dependencyList);
				});
			var decodeDependenciesInput = $elm$json$Json$Decode$list($author$project$Morphir$IR$Distribution$Codec$decodeVersionedDistribution);
			var decodeInput = A5(
				$elm$json$Json$Decode$map4,
				$author$project$Morphir$Elm$CLI$BuildFromScratchInput,
				A2($elm$json$Json$Decode$field, 'options', $author$project$Morphir$Elm$Frontend$Codec$decodeOptions),
				A2($elm$json$Json$Decode$field, 'packageInfo', $author$project$Morphir$Elm$Frontend$Codec$decodePackageInfo),
				A2($elm$json$Json$Decode$field, 'dependencies', decodeDependenciesInput),
				A2($elm$json$Json$Decode$field, 'fileSnapshot', $author$project$Morphir$File$FileSnapshot$Codec$decodeFileSnapshot));
			var _v1 = A2($elm$json$Json$Decode$decodeValue, decodeInput, jsonInput);
			if (_v1.$ === 'Ok') {
				var input = _v1.a;
				return $author$project$Morphir$Elm$CLI$failOrProceed(
					A2(
						$elm$core$Result$map,
						A4(
							$author$project$Morphir$Elm$CLI$OrderFileChanges,
							input.packageInfo.name,
							input.packageInfo,
							input.options,
							$author$project$Morphir$Elm$CLI$keepElmFilesOnly(
								$author$project$Morphir$File$FileSnapshot$toInserts(input.fileSnapshot))),
						A2(
							$elm$core$Result$mapError,
							A2(
								$elm$core$Basics$composeR,
								$author$project$Morphir$Elm$IncrementalFrontend$RepoError('Error while building repo.'),
								$elm$core$List$singleton),
							A2(
								$elm$core$Result$andThen,
								A2($author$project$Morphir$IR$Repo$insertDependencySpecification, $author$project$Morphir$IR$SDK$packageName, $author$project$Morphir$IR$SDK$packageSpec),
								A2(
									insertDependenciesIntoRepo,
									input.dependencies,
									$author$project$Morphir$IR$Repo$empty(input.packageInfo.name))))));
			} else {
				var errorMessage = _v1.a;
				return $author$project$Morphir$Elm$CLI$decodeFailed(
					$elm$json$Json$Decode$errorToString(errorMessage));
			}
		case 'BuildIncrementally':
			var jsonInput = msg.a;
			var depInsert = F3(
				function (name, spec, distro) {
					return A3($author$project$Morphir$IR$Distribution$insertDependency, name, spec, distro);
				});
			var insertDependenciesIntoDistro = F2(
				function (dependencyList, distribution) {
					return A3(
						$elm$core$List$foldl,
						F2(
							function (distro, distroResult) {
								var dependencySpec = $author$project$Morphir$IR$Distribution$lookupPackageSpecification(distro);
								var dependencyName = $author$project$Morphir$IR$Distribution$lookupPackageName(distro);
								return A3(depInsert, dependencyName, dependencySpec, distroResult);
							}),
						distribution,
						dependencyList);
				});
			var decodeDependenciesInput = $elm$json$Json$Decode$list($author$project$Morphir$IR$Distribution$Codec$decodeVersionedDistribution);
			var decodeInput = A6(
				$elm$json$Json$Decode$map5,
				$author$project$Morphir$Elm$CLI$BuildIncrementallyInput,
				A2($elm$json$Json$Decode$field, 'options', $author$project$Morphir$Elm$Frontend$Codec$decodeOptions),
				A2($elm$json$Json$Decode$field, 'packageInfo', $author$project$Morphir$Elm$Frontend$Codec$decodePackageInfo),
				A2($elm$json$Json$Decode$field, 'fileChanges', $author$project$Morphir$File$FileChanges$Codec$decodeFileChanges),
				A2($elm$json$Json$Decode$field, 'dependencies', decodeDependenciesInput),
				A2($elm$json$Json$Decode$field, 'distribution', $author$project$Morphir$IR$Distribution$Codec$decodeVersionedDistribution));
			var _v2 = A2($elm$json$Json$Decode$decodeValue, decodeInput, jsonInput);
			if (_v2.$ === 'Ok') {
				var input = _v2.a;
				return $author$project$Morphir$Elm$CLI$failOrProceed(
					A2(
						$elm$core$Result$map,
						A4(
							$author$project$Morphir$Elm$CLI$OrderFileChanges,
							input.packageInfo.name,
							input.packageInfo,
							input.options,
							$author$project$Morphir$Elm$CLI$keepElmFilesOnly(input.fileChanges)),
						A2(
							$elm$core$Result$mapError,
							A2(
								$elm$core$Basics$composeR,
								$author$project$Morphir$Elm$IncrementalFrontend$RepoError('Error while building repo.'),
								$elm$core$List$singleton),
							$author$project$Morphir$IR$Repo$fromDistribution(
								A3(
									depInsert,
									$author$project$Morphir$IR$SDK$packageName,
									$author$project$Morphir$IR$SDK$packageSpec,
									A2(insertDependenciesIntoDistro, input.dependencies, input.distribution))))));
			} else {
				var errorMessage = _v2.a;
				return $author$project$Morphir$Elm$CLI$decodeFailed(
					$elm$json$Json$Decode$errorToString(errorMessage));
			}
		case 'OrderFileChanges':
			var packageName = msg.a;
			var packageInfo = msg.b;
			var opts = msg.c;
			var fileChanges = msg.d;
			var repo = msg.e;
			return $author$project$Morphir$Elm$CLI$failOrProceed(
				A2(
					$elm$core$Result$map,
					function (orderedModuleChanges) {
						return A4($author$project$Morphir$Elm$CLI$ApplyFileChanges, packageInfo, opts, orderedModuleChanges, repo);
					},
					A3($author$project$Morphir$Elm$IncrementalFrontend$orderFileChanges, packageName, repo, fileChanges)));
		case 'ApplyFileChanges':
			var packageInfo = msg.a;
			var opts = msg.b;
			var orderedModuleChanges = msg.c;
			var repo = msg.d;
			return $author$project$Morphir$Elm$CLI$returnDistribution(
				A5($author$project$Morphir$Elm$IncrementalFrontend$applyFileChanges, packageInfo.name, orderedModuleChanges, opts, packageInfo.exposedModules, repo));
		case 'Generate':
			var _v3 = msg.a;
			var optionsJson = _v3.a;
			var packageDistJson = _v3.b;
			var testSuiteJson = _v3.c;
			var targetOption = A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, 'target', $elm$json$Json$Decode$string),
				optionsJson);
			var packageDistroResult = A2($elm$json$Json$Decode$decodeValue, $author$project$Morphir$IR$Distribution$Codec$decodeVersionedDistribution, packageDistJson);
			var testSuiteResult = A2(
				$elm$core$Result$andThen,
				function (packageDist) {
					var ir = $author$project$Morphir$IR$fromDistribution(packageDist);
					return A2(
						$elm$json$Json$Decode$decodeValue,
						$author$project$Morphir$Correctness$Codec$decodeTestSuite(ir),
						testSuiteJson);
				},
				packageDistroResult);
			var optionsResult = A2(
				$elm$json$Json$Decode$decodeValue,
				$author$project$Morphir$Elm$Target$decodeOptions(targetOption),
				optionsJson);
			var _v4 = A4(
				$elm$core$Result$map3,
				F3(
					function (options, packageDist, maybeTestSuite) {
						var enrichedDistro = function () {
							var packageName = packageDist.a;
							var dependencies = packageDist.b;
							var packageDef = packageDist.c;
							return A3(
								$author$project$Morphir$IR$Distribution$Library,
								packageName,
								A2($elm$core$Dict$union, $author$project$Morphir$Elm$Frontend$defaultDependencies, dependencies),
								packageDef);
						}();
						var fileMap = A3($author$project$Morphir$Elm$Target$mapDistribution, options, maybeTestSuite, enrichedDistro);
						return fileMap;
					}),
				optionsResult,
				packageDistroResult,
				testSuiteResult);
			if (_v4.$ === 'Ok') {
				var fileMap = _v4.a;
				return $author$project$Morphir$Elm$CLI$generateResult(
					A3($author$project$Morphir$Elm$CLI$encodeResult, $elm$core$Basics$identity, $author$project$Morphir$File$FileMap$Codec$encodeFileMap, fileMap));
			} else {
				var errorMessage = _v4.a;
				return $author$project$Morphir$Elm$CLI$jsonDecodeError(
					$elm$json$Json$Decode$errorToString(errorMessage));
			}
		case 'Stats':
			var packageDistJson = msg.a;
			var packageDistroResult = A2($elm$json$Json$Decode$decodeValue, $author$project$Morphir$IR$Distribution$Codec$decodeVersionedDistribution, packageDistJson);
			if (packageDistroResult.$ === 'Ok') {
				var packageDist = packageDistroResult.a;
				var enrichedDistro = function () {
					var packageName = packageDist.a;
					var dependencies = packageDist.b;
					var packageDef = packageDist.c;
					return A3(
						$author$project$Morphir$IR$Distribution$Library,
						packageName,
						A2($elm$core$Dict$union, $author$project$Morphir$Elm$Frontend$defaultDependencies, dependencies),
						packageDef);
				}();
				var fileMap = $author$project$Morphir$Stats$Backend$collectFeaturesFromDistribution(enrichedDistro);
				return $author$project$Morphir$Elm$CLI$statsResult(
					A3(
						$author$project$Morphir$Elm$CLI$encodeResult,
						$elm$json$Json$Encode$string,
						$author$project$Morphir$File$FileMap$Codec$encodeFileMap,
						$elm$core$Result$Ok(fileMap)));
			} else {
				var errorMessage = packageDistroResult.a;
				return $author$project$Morphir$Elm$CLI$jsonDecodeError(
					$elm$json$Json$Decode$errorToString(errorMessage));
			}
		default:
			var _v8 = msg.a;
			var packageDistJson = _v8.a;
			var testSuiteJson = _v8.b;
			var packageDistroResult = A2($elm$json$Json$Decode$decodeValue, $author$project$Morphir$IR$Distribution$Codec$decodeVersionedDistribution, packageDistJson);
			var testSuiteResult = A2(
				$elm$core$Result$andThen,
				function (packageDist) {
					var ir = $author$project$Morphir$IR$fromDistribution(packageDist);
					return A2(
						$elm$json$Json$Decode$decodeValue,
						$author$project$Morphir$Correctness$Codec$decodeTestSuite(ir),
						testSuiteJson);
				},
				packageDistroResult);
			if (packageDistroResult.$ === 'Ok') {
				var packageDistro = packageDistroResult.a;
				var packageName = packageDistro.a;
				var dependencies = packageDistro.b;
				var packageDef = packageDistro.c;
				return function (lstValues) {
					return (!$elm$core$List$isEmpty(lstValues)) ? $author$project$Morphir$Elm$CLI$testCoverageResult(
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$null,
									A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, lstValues)
								]))) : $author$project$Morphir$Elm$CLI$testCoverageResult(
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$string('An Error Occurred From Elm'),
									$elm$json$Json$Encode$null
								])));
				}(
					A2(
						$elm$core$List$map,
						$author$project$Morphir$TestCoverage$Codec$encodeTestCoverageResult,
						A2(
							$elm$core$List$map,
							function (_v11) {
								var modName = _v11.a;
								var accesscontrolledModDef = _v11.b;
								if (testSuiteResult.$ === 'Ok') {
									var testSuite = testSuiteResult.a;
									return A4(
										$author$project$Morphir$TestCoverage$Backend$getBranchCoverage,
										_Utils_Tuple2(packageName, modName),
										$author$project$Morphir$IR$fromDistribution(packageDistro),
										testSuite,
										accesscontrolledModDef.value);
								} else {
									var err = testSuiteResult.a;
									return A4(
										$author$project$Morphir$TestCoverage$Backend$getBranchCoverage,
										_Utils_Tuple2(packageName, modName),
										$author$project$Morphir$IR$fromDistribution(packageDistro),
										$elm$core$Dict$empty,
										accesscontrolledModDef.value);
								}
							},
							$elm$core$Dict$toList(packageDef.modules))));
			} else {
				var err = packageDistroResult.a;
				return $author$project$Morphir$Elm$CLI$testCoverageResult(
					$author$project$Morphir$TestCoverage$Codec$encodeTestCoverageError(err));
			}
	}
};
var $author$project$Morphir$Elm$CLI$reportProgress = _Platform_outgoingPort('reportProgress', $elm$json$Json$Encode$string);
var $author$project$Morphir$Elm$CLI$report = function (msg) {
	switch (msg.$) {
		case 'BuildFromScratch':
			return $author$project$Morphir$Elm$CLI$reportProgress('Building from scratch ...');
		case 'BuildIncrementally':
			return $author$project$Morphir$Elm$CLI$reportProgress('Building incrementally ...');
		case 'OrderFileChanges':
			return $author$project$Morphir$Elm$CLI$reportProgress('Parsing files and ordering file changes');
		case 'ApplyFileChanges':
			var orderedModuleChanges = msg.c;
			return $author$project$Morphir$Elm$CLI$reportProgress(
				$elm$core$String$concat(
					_List_fromArray(
						[
							'Applying file changes in the following order:',
							'\n  - ',
							A2(
							$elm$core$String$join,
							'\n  - ',
							A2(
								$elm$core$List$map,
								function (moduleChange) {
									switch (moduleChange.$) {
										case 'ModuleInsert':
											var moduleName = moduleChange.a;
											return 'Insert: ' + A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', moduleName);
										case 'ModuleUpdate':
											var moduleName = moduleChange.a;
											return 'Update: ' + A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', moduleName);
										default:
											var moduleName = moduleChange.a;
											return 'Delete: ' + A3($author$project$Morphir$IR$Path$toString, $author$project$Morphir$IR$Name$toTitleCase, '.', moduleName);
									}
								},
								orderedModuleChanges))
						])));
		case 'Generate':
			var _v2 = msg.a;
			var optionJson = _v2.a;
			var packageDistJson = _v2.b;
			return $author$project$Morphir$Elm$CLI$reportProgress(' Generating target code from IR ...');
		case 'Stats':
			return $author$project$Morphir$Elm$CLI$reportProgress('Generating stats from IR ...');
		default:
			var _v3 = msg.a;
			return $author$project$Morphir$Elm$CLI$reportProgress('Generating Tests Coverage from testSuites ...');
	}
};
var $author$project$Morphir$Elm$CLI$update = F2(
	function (msg, model) {
		return _Utils_Tuple2(
			model,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$Morphir$Elm$CLI$process(msg),
						$author$project$Morphir$Elm$CLI$report(msg)
					])));
	});
var $elm$core$Platform$worker = _Platform_worker;
var $author$project$Morphir$Elm$CLI$main = $elm$core$Platform$worker(
	{
		init: function (_v0) {
			return _Utils_Tuple2(_Utils_Tuple0, $elm$core$Platform$Cmd$none);
		},
		subscriptions: $author$project$Morphir$Elm$CLI$subscriptions,
		update: $author$project$Morphir$Elm$CLI$update
	});
_Platform_export({'Morphir':{'Elm':{'CLI':{'init':$author$project$Morphir$Elm$CLI$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}}}});}(this));